{
  "version": 3,
  "sources": ["../../src/index.ts", "../../src/MedplumProvider/MedplumProvider.tsx", "../../src/MedplumProvider/MedplumProvider.context.ts", "../../src/useCachedBinaryUrl/useCachedBinaryUrl.ts", "../../src/usePrevious/usePrevious.ts", "../../src/useResource/useResource.ts", "../../src/useSearch/useSearch.ts", "../../src/useDebouncedValue/useDebouncedValue.ts", "../../src/useSubscription/useSubscription.ts"],
  "sourcesContent": ["export * from './MedplumProvider/MedplumProvider';\nexport * from './MedplumProvider/MedplumProvider.context';\nexport * from './useCachedBinaryUrl/useCachedBinaryUrl';\nexport * from './usePrevious/usePrevious';\nexport * from './useResource/useResource';\nexport * from './useSearch/useSearch';\nexport * from './useSubscription/useSubscription';\n", "import { MedplumClient, MedplumClientEventMap } from '@medplum/core';\nimport { ReactNode, useEffect, useMemo, useState } from 'react';\nimport { MedplumNavigateFunction, reactContext } from './MedplumProvider.context';\n\nexport interface MedplumProviderProps {\n  readonly medplum: MedplumClient;\n  readonly navigate?: MedplumNavigateFunction;\n  readonly children: ReactNode;\n}\n\nconst EVENTS_TO_TRACK = [\n  'change',\n  'storageInitialized',\n  'storageInitFailed',\n  'profileRefreshing',\n  'profileRefreshed',\n] satisfies (keyof MedplumClientEventMap)[];\n\n/**\n * The MedplumProvider component provides Medplum context state.\n *\n * Medplum context includes:\n *   1) medplum - Medplum client library\n *   2) profile - The current user profile (if signed in)\n * @param props - The MedplumProvider React props.\n * @returns The MedplumProvider React node.\n */\nexport function MedplumProvider(props: MedplumProviderProps): JSX.Element {\n  const medplum = props.medplum;\n  const navigate = props.navigate ?? defaultNavigate;\n\n  const [state, setState] = useState({\n    profile: medplum.getProfile(),\n    loading: medplum.isLoading(),\n  });\n\n  useEffect(() => {\n    function eventListener(): void {\n      setState((s) => ({\n        ...s,\n        profile: medplum.getProfile(),\n        loading: medplum.isLoading(),\n      }));\n    }\n\n    for (const event of EVENTS_TO_TRACK) {\n      medplum.addEventListener(event, eventListener);\n    }\n    return () => {\n      for (const event of EVENTS_TO_TRACK) {\n        medplum.removeEventListener(event, eventListener);\n      }\n    };\n  }, [medplum]);\n\n  const medplumContext = useMemo(\n    () => ({\n      ...state,\n      medplum,\n      navigate,\n    }),\n    [state, medplum, navigate]\n  );\n\n  return <reactContext.Provider value={medplumContext}>{props.children}</reactContext.Provider>;\n}\n\n/**\n * The default \"navigate\" function which simply uses window.location.href.\n * @param path - The path to navigate to.\n */\nfunction defaultNavigate(path: string): void {\n  window.location.assign(path);\n}\n", "import { MedplumClient, ProfileResource } from '@medplum/core';\nimport { createContext, useContext } from 'react';\n\nexport const reactContext = createContext(undefined as MedplumContext | undefined);\n\nexport type MedplumNavigateFunction = (path: string) => void;\n\nexport interface MedplumContext {\n  medplum: MedplumClient;\n  navigate: MedplumNavigateFunction;\n  profile?: ProfileResource;\n  loading: boolean;\n}\n\n/**\n * Returns the MedplumContext instance.\n * @returns The MedplumContext instance.\n */\nexport function useMedplumContext(): MedplumContext {\n  return useContext(reactContext) as MedplumContext;\n}\n\n/**\n * Returns the MedplumClient instance.\n * This is a shortcut for useMedplumContext().medplum.\n * @returns The MedplumClient instance.\n */\nexport function useMedplum(): MedplumClient {\n  return useMedplumContext().medplum;\n}\n\n/**\n * Returns the Medplum navigate function.\n * @returns The Medplum navigate function.\n */\nexport function useMedplumNavigate(): MedplumNavigateFunction {\n  return useMedplumContext().navigate;\n}\n\n/**\n * Returns the current Medplum user profile (if signed in).\n * This is a shortcut for useMedplumContext().profile.\n * @returns The current user profile.\n */\nexport function useMedplumProfile(): ProfileResource | undefined {\n  return useMedplumContext().profile;\n}\n", "import { useMemo } from 'react';\n\n// Maintain a cache of urls to avoid unnecessary re-download of attachments\n// The following is a workaround for the fact that each request to a resource containing a Binary data reference\n// returns a NEW signed S3 URL for each bypassing the native browser caching mechanism\n// resulting in unnecessary bandwidth consumption.\n// https://www.medplum.com/docs/fhir-datastore/binary-data#consuming-a-fhir-binary-in-an-application\n// https://github.com/medplum/medplum/issues/3815\n\n// The S3 presigned URLs expire after 1 hour with the default configuration and hard refreshes are not uncommon even in SPAs so this\n// could be a good way to get additional cache hits\n// This would require additional logic for initialization, saving, and purging of expired keys\nconst urls = new Map<string, string>();\n\nexport const useCachedBinaryUrl = (binaryUrl: string | undefined): string | undefined => {\n  return useMemo(() => {\n    if (!binaryUrl) {\n      return undefined;\n    }\n\n    const binaryResourceUrl = binaryUrl.split('?')[0];\n    if (!binaryResourceUrl) {\n      return binaryUrl;\n    }\n\n    // Check if the binaryUrl is a presigned S3 URL\n    let binaryUrlSearchParams: URLSearchParams;\n    try {\n      binaryUrlSearchParams = new URLSearchParams(new URL(binaryUrl).search);\n    } catch (_err) {\n      return binaryUrl;\n    }\n\n    if (!binaryUrlSearchParams.has('Key-Pair-Id') || !binaryUrlSearchParams.has('Signature')) {\n      return binaryUrl;\n    }\n\n    // https://stackoverflow.com/questions/23929145/how-to-test-if-a-given-time-stamp-is-in-seconds-or-milliseconds\n    const binaryUrlExpires = binaryUrlSearchParams.get('Expires');\n    if (!binaryUrlExpires || binaryUrlExpires.length > 13) {\n      // Expires is expected to be in seconds, not milliseconds\n      return binaryUrl;\n    }\n\n    const cachedUrl = urls.get(binaryResourceUrl);\n    if (cachedUrl) {\n      const searchParams = new URLSearchParams(new URL(cachedUrl).search);\n\n      // This is fairly brittle as it relies on the current structure of the Medplum returned URL\n      const expires = searchParams.get('Expires');\n\n      // `expires` is in seconds, Date.now() is in ms\n      // Add padding to mitigate expiration between time of check and time of use\n      if (expires && parseInt(expires, 10) * 1000 - 5_000 > Date.now()) {\n        return cachedUrl;\n      }\n    }\n\n    urls.set(binaryResourceUrl, binaryUrl);\n    return binaryUrl;\n  }, [binaryUrl]);\n};\n", "import { useEffect, useRef } from 'react';\n\n/**\n * React Hook to keep track of the passed-in value from the previous render of the containing component.\n * @param value - The value to track.\n * @returns The value passed in from the previous render.\n */\nexport function usePrevious<T>(value: T): T | undefined {\n  const ref = useRef<T>();\n  useEffect(() => {\n    ref.current = value;\n  });\n  return ref.current;\n}\n", "import { deepEquals, isReference, isResource, MedplumClient, normalizeOperationOutcome } from '@medplum/core';\nimport { OperationOutcome, Reference, Resource } from '@medplum/fhirtypes';\nimport { useCallback, useEffect, useState } from 'react';\nimport { useMedplum } from '../MedplumProvider/MedplumProvider.context';\n\n/**\n * React Hook to use a FHIR reference.\n * Handles the complexity of resolving references and caching resources.\n * @param value - The resource or reference to resource.\n * @param setOutcome - Optional callback to set the OperationOutcome.\n * @returns The resolved resource.\n */\nexport function useResource<T extends Resource>(\n  value: Reference<T> | Partial<T> | undefined,\n  setOutcome?: (outcome: OperationOutcome) => void\n): T | undefined {\n  const medplum = useMedplum();\n  const [resource, setResource] = useState<T | undefined>(() => {\n    return getInitialResource(medplum, value);\n  });\n\n  const setResourceIfChanged = useCallback(\n    (r: T | undefined) => {\n      if (!deepEquals(r, resource)) {\n        setResource(r);\n      }\n    },\n    [resource]\n  );\n\n  useEffect(() => {\n    let subscribed = true;\n\n    const newValue = getInitialResource(medplum, value);\n    if (!newValue && isReference(value)) {\n      medplum\n        .readReference(value as Reference<T>)\n        .then((r) => {\n          if (subscribed) {\n            setResourceIfChanged(r);\n          }\n        })\n        .catch((err) => {\n          if (subscribed) {\n            setResourceIfChanged(undefined);\n            if (setOutcome) {\n              setOutcome(normalizeOperationOutcome(err));\n            }\n          }\n        });\n    } else {\n      setResourceIfChanged(newValue);\n    }\n\n    return (() => (subscribed = false)) as () => void;\n  }, [medplum, value, setResourceIfChanged, setOutcome]);\n\n  return resource;\n}\n\n/**\n * Returns the initial resource value based on the input value.\n * If the input value is a resource, returns the resource.\n * If the input value is a reference to a resource available in the cache, returns the resource.\n * Otherwise, returns undefined.\n * @param medplum - The medplum client.\n * @param value - The resource or reference to resource.\n * @returns An initial resource if available; undefined otherwise.\n */\nfunction getInitialResource<T extends Resource>(\n  medplum: MedplumClient,\n  value: Reference<T> | Partial<T> | undefined\n): T | undefined {\n  if (value) {\n    if (isResource(value)) {\n      return value as T;\n    }\n\n    if (isReference(value)) {\n      return medplum.getCachedReference(value as Reference<T>);\n    }\n  }\n\n  return undefined;\n}\n", "import { allOk, normalizeOperationOutcome, QueryTypes, ResourceArray } from '@medplum/core';\nimport { Bundle, ExtractResource, OperationOutcome, ResourceType } from '@medplum/fhirtypes';\nimport { useEffect, useState } from 'react';\nimport { useMedplum } from '../MedplumProvider/MedplumProvider.context';\nimport { useDebouncedValue } from '../useDebouncedValue/useDebouncedValue';\n\ntype SearchFn = 'search' | 'searchOne' | 'searchResources';\nexport type SearchOptions = { debounceMs?: number };\n\nconst DEFAULT_DEBOUNCE_MS = 250;\n\n/**\n * React hook for searching FHIR resources.\n *\n * This is a convenience hook for calling the MedplumClient.search() method.\n *\n * @param resourceType - The FHIR resource type to search.\n * @param query - Optional search parameters.\n * @param options - Optional options for configuring the search.\n * @returns A 3-element tuple containing the search result, loading flag, and operation outcome.\n */\nexport function useSearch<K extends ResourceType>(\n  resourceType: K,\n  query?: QueryTypes,\n  options?: SearchOptions\n): [Bundle<ExtractResource<K>> | undefined, boolean, OperationOutcome | undefined] {\n  return useSearchImpl<K, Bundle<ExtractResource<K>>>('search', resourceType, query, options);\n}\n\n/**\n * React hook for searching for a single FHIR resource.\n *\n * This is a convenience hook for calling the MedplumClient.searchOne() method.\n *\n * @param resourceType - The FHIR resource type to search.\n * @param query - Optional search parameters.\n * @param options - Optional options for configuring the search.\n * @returns A 3-element tuple containing the search result, loading flag, and operation outcome.\n */\nexport function useSearchOne<K extends ResourceType>(\n  resourceType: K,\n  query?: QueryTypes,\n  options?: SearchOptions\n): [ExtractResource<K> | undefined, boolean, OperationOutcome | undefined] {\n  return useSearchImpl<K, ExtractResource<K>>('searchOne', resourceType, query, options);\n}\n\n/**\n * React hook for searching for an array of FHIR resources.\n *\n * This is a convenience hook for calling the MedplumClient.searchResources() method.\n *\n * @param resourceType - The FHIR resource type to search.\n * @param query - Optional search parameters.\n * @param options - Optional options for configuring the search.\n * @returns A 3-element tuple containing the search result, loading flag, and operation outcome.\n */\nexport function useSearchResources<K extends ResourceType>(\n  resourceType: K,\n  query?: QueryTypes,\n  options?: SearchOptions\n): [ResourceArray<ExtractResource<K>> | undefined, boolean, OperationOutcome | undefined] {\n  return useSearchImpl<K, ResourceArray<ExtractResource<K>>>('searchResources', resourceType, query, options);\n}\n\nfunction useSearchImpl<K extends ResourceType, SearchReturnType>(\n  searchFn: SearchFn,\n  resourceType: K,\n  query: QueryTypes | undefined,\n  options?: SearchOptions\n): [SearchReturnType | undefined, boolean, OperationOutcome | undefined] {\n  const medplum = useMedplum();\n  const [lastSearchKey, setLastSearchKey] = useState<string>();\n  const [loading, setLoading] = useState<boolean>(true);\n  const [result, setResult] = useState<SearchReturnType>();\n  const [outcome, setOutcome] = useState<OperationOutcome>();\n\n  const searchKey = medplum.fhirSearchUrl(resourceType, query).toString();\n  const [debouncedSearchKey] = useDebouncedValue(searchKey, options?.debounceMs ?? DEFAULT_DEBOUNCE_MS, {\n    leading: true,\n  });\n\n  useEffect(() => {\n    if (debouncedSearchKey !== lastSearchKey) {\n      setLastSearchKey(debouncedSearchKey);\n      medplum[searchFn](resourceType, query)\n        .then((res) => {\n          setLoading(false);\n          setResult(res as SearchReturnType);\n          setOutcome(allOk);\n        })\n        .catch((err) => {\n          setLoading(false);\n          setResult(undefined);\n          setOutcome(normalizeOperationOutcome(err));\n        });\n    }\n  }, [medplum, searchFn, resourceType, query, lastSearchKey, debouncedSearchKey]);\n\n  return [result, loading, outcome];\n}\n", "/*\n  This hook was forked from: https://github.com/mantinedev/mantine/blob/fbcee929e0b11782092f48c1e7af2a1d1c878823/packages/%40mantine/hooks/src/use-debounced-value/use-debounced-value.ts\n  and has the following license:\n\n  MIT License\n\n  Copyright (c) 2021 Vitaly Rtishchev\n\n  Permission is hereby granted, free of charge, to any person obtaining a copy\n  of this software and associated documentation files (the \"Software\"), to deal\n  in the Software without restriction, including without limitation the rights\n  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n  copies of the Software, and to permit persons to whom the Software is\n  furnished to do so, subject to the following conditions:\n\n  The above copyright notice and this permission notice shall be included in all\n  copies or substantial portions of the Software.\n\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n  SOFTWARE.\n*/\n\nimport { useCallback, useEffect, useRef, useState } from 'react';\n\nexport type UseDebouncedValueOptions = {\n  /** Whether the first update to `value` should be immediate or not */\n  leading?: boolean;\n};\n\n/**\n * This hook allows users to debounce an incoming value by a specified number of milliseconds.\n *\n * Users can also specify whether the first update to `value` in a sequence of rapid updates should be immediate, by specifying `leading: true` in the options.\n * The default value for `leading` is `false`.\n *\n * The return value is a tuple containing the debounced value at `arr[0]` and a function to cancel the pending debounced value change at `arr[1]`.\n *\n * @param value - The value to debounce.\n * @param waitMs - How long in milliseconds should.\n * @param options - Optional options for configuring the debounce.\n * @returns An array tuple of `[debouncedValue, cancelFn]`.\n */\nexport function useDebouncedValue<T = any>(\n  value: T,\n  waitMs: number,\n  options: UseDebouncedValueOptions = { leading: false }\n): [T, () => void] {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  const mountedRef = useRef(false);\n  const timeoutRef = useRef<ReturnType<typeof setTimeout>>();\n  const cooldownRef = useRef(false);\n\n  const cancel = useCallback(() => window.clearTimeout(timeoutRef.current), []);\n\n  useEffect(() => {\n    if (mountedRef.current) {\n      if (!cooldownRef.current && options.leading) {\n        cooldownRef.current = true;\n        setDebouncedValue(value);\n      } else {\n        cancel();\n        timeoutRef.current = setTimeout(() => {\n          cooldownRef.current = false;\n          setDebouncedValue(value);\n        }, waitMs);\n      }\n    }\n  }, [value, options.leading, waitMs, cancel]);\n\n  useEffect(() => {\n    mountedRef.current = true;\n    return cancel;\n  }, [cancel]);\n\n  return [debouncedValue, cancel] as const;\n}\n", "import { SubscriptionEmitter, SubscriptionEventMap, deepEquals } from '@medplum/core';\nimport { Bundle, Subscription } from '@medplum/fhirtypes';\nimport { useCallback, useEffect, useRef, useState } from 'react';\nimport { useMedplum } from '../MedplumProvider/MedplumProvider.context';\n\nconst SUBSCRIPTION_DEBOUNCE_MS = 3000;\n\nexport type UseSubscriptionOptions = {\n  subscriptionProps?: Partial<Subscription>;\n  onWebSocketOpen?: () => void;\n  onWebSocketClose?: () => void;\n  onSubscriptionConnect?: (subscriptionId: string) => void;\n  onSubscriptionDisconnect?: (subscriptionId: string) => void;\n  onError?: (err: Error) => void;\n};\n\n/**\n * Creates an in-memory `Subscription` resource with the given criteria on the Medplum server and calls the given callback when an event notification is triggered by a resource interaction over a WebSocket connection.\n *\n * Subscriptions created with this hook are lightweight, share a single WebSocket connection, and are automatically untracked and cleaned up when the containing component is no longer mounted.\n *\n * @param criteria - The FHIR search criteria to subscribe to.\n * @param callback - The callback to call when a notification event `Bundle` for this `Subscription` is received.\n * @param options - Optional options used to configure the created `Subscription`. See {@link UseSubscriptionOptions}\n *\n * --------------------------------------------------------------------------------------------------------------------------------\n *\n * `options` contains the following properties, all of which are optional:\n * - `subscriptionProps` - Allows the caller to pass a `Partial<Subscription>` to use as part of the creation\n * of the `Subscription` resource for this subscription. It enables the user namely to pass things like the `extension` property and to create\n * the `Subscription` with extensions such the {@link https://www.medplum.com/docs/subscriptions/subscription-extensions#interactions | Supported Interaction} extension which would enable to listen for `create` or `update` only events.\n * - `onWebsocketOpen` - Called when the WebSocket connection is established with Medplum server.\n * - `onWebsocketClose` - Called when the WebSocket connection disconnects.\n * - `onSubscriptionConnect` - Called when the corresponding subscription starts to receive updates after the subscription has been initialized and connected to.\n * - `onSubscriptionDisconnect` - Called when the corresponding subscription is destroyed and stops receiving updates from the server.\n * - `onError` - Called whenever an error occurs during the lifecycle of the managed subscription.\n */\nexport function useSubscription(\n  criteria: string | undefined,\n  callback: (bundle: Bundle) => void,\n  options?: UseSubscriptionOptions\n): void {\n  const medplum = useMedplum();\n  const [emitter, setEmitter] = useState<SubscriptionEmitter>();\n  // We don't memoize the entire options object since it contains callbacks and if the callbacks change identity, we don't want to trigger a resubscribe to criteria\n  const [memoizedSubProps, setMemoizedSubProps] = useState(options?.subscriptionProps);\n\n  const listeningRef = useRef(false);\n  const unsubTimerRef = useRef<ReturnType<typeof setTimeout>>();\n\n  const prevCriteriaRef = useRef<string | undefined>();\n  const prevMemoizedSubPropsRef = useRef<UseSubscriptionOptions['subscriptionProps']>();\n\n  const callbackRef = useRef<typeof callback>();\n  callbackRef.current = callback;\n\n  const onWebSocketOpenRef = useRef<UseSubscriptionOptions['onWebSocketOpen']>();\n  onWebSocketOpenRef.current = options?.onWebSocketOpen;\n\n  const onWebSocketCloseRef = useRef<UseSubscriptionOptions['onWebSocketClose']>();\n  onWebSocketCloseRef.current = options?.onWebSocketClose;\n\n  const onSubscriptionConnectRef = useRef<UseSubscriptionOptions['onSubscriptionConnect']>();\n  onSubscriptionConnectRef.current = options?.onSubscriptionConnect;\n\n  const onSubscriptionDisconnectRef = useRef<UseSubscriptionOptions['onSubscriptionDisconnect']>();\n  onSubscriptionDisconnectRef.current = options?.onSubscriptionDisconnect;\n\n  const onErrorRef = useRef<UseSubscriptionOptions['onError']>();\n  onErrorRef.current = options?.onError;\n\n  useEffect(() => {\n    // Deep equals checks referential equality first\n    if (!deepEquals(options?.subscriptionProps, memoizedSubProps)) {\n      setMemoizedSubProps(options?.subscriptionProps);\n    }\n  }, [memoizedSubProps, options]);\n\n  useEffect(() => {\n    if (unsubTimerRef.current) {\n      clearTimeout(unsubTimerRef.current);\n      unsubTimerRef.current = undefined;\n    }\n\n    let shouldSubscribe = false;\n    if (prevCriteriaRef.current !== criteria || !deepEquals(prevMemoizedSubPropsRef.current, memoizedSubProps)) {\n      shouldSubscribe = true;\n    }\n\n    if (shouldSubscribe && prevCriteriaRef.current) {\n      medplum.unsubscribeFromCriteria(prevCriteriaRef.current, prevMemoizedSubPropsRef.current);\n    }\n\n    // Set prev criteria and options to latest after checking them\n    prevCriteriaRef.current = criteria;\n    prevMemoizedSubPropsRef.current = memoizedSubProps;\n\n    // We do this after as to not immediately trigger re-render\n    if (shouldSubscribe && criteria) {\n      setEmitter(medplum.subscribeToCriteria(criteria, memoizedSubProps));\n    } else if (!criteria) {\n      setEmitter(undefined);\n    }\n\n    return () => {\n      unsubTimerRef.current = setTimeout(() => {\n        setEmitter(undefined);\n        if (criteria) {\n          medplum.unsubscribeFromCriteria(criteria, memoizedSubProps);\n        }\n      }, SUBSCRIPTION_DEBOUNCE_MS);\n    };\n  }, [medplum, criteria, memoizedSubProps]);\n\n  const emitterCallback = useCallback((event: SubscriptionEventMap['message']) => {\n    callbackRef.current?.(event.payload);\n  }, []);\n\n  const onWebSocketOpen = useCallback(() => {\n    onWebSocketOpenRef.current?.();\n  }, []);\n\n  const onWebSocketClose = useCallback(() => {\n    onWebSocketCloseRef.current?.();\n  }, []);\n\n  const onSubscriptionConnect = useCallback((event: SubscriptionEventMap['connect']) => {\n    onSubscriptionConnectRef.current?.(event.payload.subscriptionId);\n  }, []);\n\n  const onSubscriptionDisconnect = useCallback((event: SubscriptionEventMap['disconnect']) => {\n    onSubscriptionDisconnectRef.current?.(event.payload.subscriptionId);\n  }, []);\n\n  const onError = useCallback((event: SubscriptionEventMap['error']) => {\n    onErrorRef.current?.(event.payload);\n  }, []);\n\n  useEffect(() => {\n    if (!emitter) {\n      return () => undefined;\n    }\n    if (!listeningRef.current) {\n      emitter.addEventListener('message', emitterCallback);\n      emitter.addEventListener('open', onWebSocketOpen);\n      emitter.addEventListener('close', onWebSocketClose);\n      emitter.addEventListener('connect', onSubscriptionConnect);\n      emitter.addEventListener('disconnect', onSubscriptionDisconnect);\n      emitter.addEventListener('error', onError);\n      listeningRef.current = true;\n    }\n    return () => {\n      listeningRef.current = false;\n      emitter.removeEventListener('message', emitterCallback);\n      emitter.removeEventListener('open', onWebSocketOpen);\n      emitter.removeEventListener('close', onWebSocketClose);\n      emitter.removeEventListener('connect', onSubscriptionConnect);\n      emitter.removeEventListener('disconnect', onSubscriptionDisconnect);\n      emitter.removeEventListener('error', onError);\n    };\n  }, [\n    emitter,\n    emitterCallback,\n    onWebSocketOpen,\n    onWebSocketClose,\n    onSubscriptionConnect,\n    onSubscriptionDisconnect,\n    onError,\n  ]);\n}\n"],
  "mappings": "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",
  "names": ["src_exports", "__export", "MedplumProvider", "reactContext", "useCachedBinaryUrl", "useMedplum", "useMedplumContext", "useMedplumNavigate", "useMedplumProfile", "usePrevious", "useResource", "useSearch", "useSearchOne", "useSearchResources", "useSubscription", "__toCommonJS", "import_react", "import_react", "reactContext", "useMedplumContext", "useMedplum", "useMedplumNavigate", "useMedplumProfile", "import_jsx_runtime", "EVENTS_TO_TRACK", "MedplumProvider", "props", "medplum", "navigate", "defaultNavigate", "state", "setState", "eventListener", "s", "event", "medplumContext", "reactContext", "path", "import_react", "urls", "useCachedBinaryUrl", "binaryUrl", "binaryResourceUrl", "binaryUrlSearchParams", "binaryUrlExpires", "cachedUrl", "expires", "import_react", "usePrevious", "value", "ref", "import_core", "import_react", "useResource", "value", "setOutcome", "medplum", "useMedplum", "resource", "setResource", "getInitialResource", "setResourceIfChanged", "r", "subscribed", "newValue", "err", "import_core", "import_react", "import_react", "useDebouncedValue", "value", "waitMs", "options", "debouncedValue", "setDebouncedValue", "mountedRef", "timeoutRef", "cooldownRef", "cancel", "DEFAULT_DEBOUNCE_MS", "useSearch", "resourceType", "query", "options", "useSearchImpl", "useSearchOne", "useSearchResources", "searchFn", "medplum", "useMedplum", "lastSearchKey", "setLastSearchKey", "loading", "setLoading", "result", "setResult", "outcome", "setOutcome", "searchKey", "debouncedSearchKey", "useDebouncedValue", "res", "err", "import_core", "import_react", "SUBSCRIPTION_DEBOUNCE_MS", "useSubscription", "criteria", "callback", "options", "medplum", "useMedplum", "emitter", "setEmitter", "memoizedSubProps", "setMemoizedSubProps", "listeningRef", "unsubTimerRef", "prevCriteriaRef", "prevMemoizedSubPropsRef", "callbackRef", "onWebSocketOpenRef", "onWebSocketCloseRef", "onSubscriptionConnectRef", "onSubscriptionDisconnectRef", "onErrorRef", "shouldSubscribe", "emitterCallback", "event", "onWebSocketOpen", "onWebSocketClose", "onSubscriptionConnect", "onSubscriptionDisconnect", "onError"]
}
