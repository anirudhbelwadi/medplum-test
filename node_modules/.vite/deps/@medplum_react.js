import {
  ActionIcon,
  Alert,
  Anchor,
  AppShell,
  Avatar,
  Badge,
  Blockquote,
  Box,
  Button,
  Card,
  Center,
  Checkbox,
  Chip,
  Combination_default,
  Combobox,
  Container,
  CopyButton,
  Divider,
  Flex,
  Grid,
  Group,
  Indicator,
  Input,
  List,
  Loader,
  LoadingOverlay,
  Menu,
  Modal,
  MultiSelect,
  NativeSelect,
  Notification,
  OptionalPortal,
  Pagination,
  Paper,
  PasswordInput,
  Pill,
  PillsInput,
  Radio,
  RingProgress,
  ScrollArea,
  ScrollAreaAutosize,
  SegmentedControl,
  SimpleGrid,
  Skeleton,
  Space,
  Stack,
  Stepper,
  Switch,
  Table,
  Text,
  TextInput,
  Textarea,
  Title,
  Tooltip,
  UnstyledButton,
  _extends,
  _objectWithoutPropertiesLoose,
  createVarsResolver,
  factory,
  getDefaultZIndex,
  randomId,
  rem,
  useClipboard,
  useCombobox,
  useDidUpdate,
  useDisclosure,
  useForceUpdate,
  useMantineColorScheme,
  useMantineTheme,
  useProps,
  useReducedMotion,
  useResizeObserver,
  useStyles
} from "./chunk-TUP2PCG4.js";
import {
  require_jsx_runtime
} from "./chunk-B2GAMZSM.js";
import {
  A,
  Al,
  At,
  Bp,
  Bu,
  En,
  Eo,
  Er,
  Fe,
  Fn,
  Fs,
  Ho,
  I,
  If,
  K,
  L,
  Le,
  M,
  N,
  Ne,
  Ns,
  Of,
  Ol,
  P,
  Pr,
  Qo,
  Qu,
  Rr,
  S,
  Sn,
  Sp,
  Sr,
  Vi,
  Wr,
  X,
  Xe,
  Yi,
  Yo,
  Yr,
  Z,
  Zr,
  ai,
  at,
  dc,
  de,
  ee,
  fe,
  g,
  gc,
  gl,
  go,
  hl,
  ju,
  ke,
  ki,
  kr,
  l,
  le,
  ll,
  lt,
  ml,
  ol,
  pc,
  pe,
  rr,
  st,
  te,
  ti,
  ue,
  ut,
  vc,
  vn,
  w,
  we,
  wl,
  wp,
  wr,
  xo,
  yl
} from "./chunk-KJT3S4CS.js";
import {
  require_react_dom
} from "./chunk-A35ZXVDQ.js";
import {
  require_react
} from "./chunk-WHMHD7EJ.js";
import {
  __commonJS,
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/react-is/cjs/react-is.development.js
var require_react_is_development = __commonJS({
  "node_modules/react-is/cjs/react-is.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        var hasSymbol = typeof Symbol === "function" && Symbol.for;
        var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for("react.element") : 60103;
        var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for("react.portal") : 60106;
        var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for("react.fragment") : 60107;
        var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for("react.strict_mode") : 60108;
        var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for("react.profiler") : 60114;
        var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for("react.provider") : 60109;
        var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for("react.context") : 60110;
        var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for("react.async_mode") : 60111;
        var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for("react.concurrent_mode") : 60111;
        var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for("react.forward_ref") : 60112;
        var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for("react.suspense") : 60113;
        var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for("react.suspense_list") : 60120;
        var REACT_MEMO_TYPE = hasSymbol ? Symbol.for("react.memo") : 60115;
        var REACT_LAZY_TYPE = hasSymbol ? Symbol.for("react.lazy") : 60116;
        var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for("react.block") : 60121;
        var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for("react.fundamental") : 60117;
        var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for("react.responder") : 60118;
        var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for("react.scope") : 60119;
        function isValidElementType(type) {
          return typeof type === "string" || typeof type === "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
          type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === "object" && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
        }
        function typeOf(object) {
          if (typeof object === "object" && object !== null) {
            var $$typeof = object.$$typeof;
            switch ($$typeof) {
              case REACT_ELEMENT_TYPE:
                var type = object.type;
                switch (type) {
                  case REACT_ASYNC_MODE_TYPE:
                  case REACT_CONCURRENT_MODE_TYPE:
                  case REACT_FRAGMENT_TYPE:
                  case REACT_PROFILER_TYPE:
                  case REACT_STRICT_MODE_TYPE:
                  case REACT_SUSPENSE_TYPE:
                    return type;
                  default:
                    var $$typeofType = type && type.$$typeof;
                    switch ($$typeofType) {
                      case REACT_CONTEXT_TYPE:
                      case REACT_FORWARD_REF_TYPE:
                      case REACT_LAZY_TYPE:
                      case REACT_MEMO_TYPE:
                      case REACT_PROVIDER_TYPE:
                        return $$typeofType;
                      default:
                        return $$typeof;
                    }
                }
              case REACT_PORTAL_TYPE:
                return $$typeof;
            }
          }
          return void 0;
        }
        var AsyncMode = REACT_ASYNC_MODE_TYPE;
        var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
        var ContextConsumer = REACT_CONTEXT_TYPE;
        var ContextProvider = REACT_PROVIDER_TYPE;
        var Element2 = REACT_ELEMENT_TYPE;
        var ForwardRef = REACT_FORWARD_REF_TYPE;
        var Fragment46 = REACT_FRAGMENT_TYPE;
        var Lazy = REACT_LAZY_TYPE;
        var Memo = REACT_MEMO_TYPE;
        var Portal = REACT_PORTAL_TYPE;
        var Profiler = REACT_PROFILER_TYPE;
        var StrictMode = REACT_STRICT_MODE_TYPE;
        var Suspense2 = REACT_SUSPENSE_TYPE;
        var hasWarnedAboutDeprecatedIsAsyncMode = false;
        function isAsyncMode(object) {
          {
            if (!hasWarnedAboutDeprecatedIsAsyncMode) {
              hasWarnedAboutDeprecatedIsAsyncMode = true;
              console["warn"]("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.");
            }
          }
          return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
        }
        function isConcurrentMode(object) {
          return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
        }
        function isContextConsumer(object) {
          return typeOf(object) === REACT_CONTEXT_TYPE;
        }
        function isContextProvider(object) {
          return typeOf(object) === REACT_PROVIDER_TYPE;
        }
        function isElement(object) {
          return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
        }
        function isForwardRef(object) {
          return typeOf(object) === REACT_FORWARD_REF_TYPE;
        }
        function isFragment(object) {
          return typeOf(object) === REACT_FRAGMENT_TYPE;
        }
        function isLazy(object) {
          return typeOf(object) === REACT_LAZY_TYPE;
        }
        function isMemo(object) {
          return typeOf(object) === REACT_MEMO_TYPE;
        }
        function isPortal(object) {
          return typeOf(object) === REACT_PORTAL_TYPE;
        }
        function isProfiler(object) {
          return typeOf(object) === REACT_PROFILER_TYPE;
        }
        function isStrictMode(object) {
          return typeOf(object) === REACT_STRICT_MODE_TYPE;
        }
        function isSuspense(object) {
          return typeOf(object) === REACT_SUSPENSE_TYPE;
        }
        exports.AsyncMode = AsyncMode;
        exports.ConcurrentMode = ConcurrentMode;
        exports.ContextConsumer = ContextConsumer;
        exports.ContextProvider = ContextProvider;
        exports.Element = Element2;
        exports.ForwardRef = ForwardRef;
        exports.Fragment = Fragment46;
        exports.Lazy = Lazy;
        exports.Memo = Memo;
        exports.Portal = Portal;
        exports.Profiler = Profiler;
        exports.StrictMode = StrictMode;
        exports.Suspense = Suspense2;
        exports.isAsyncMode = isAsyncMode;
        exports.isConcurrentMode = isConcurrentMode;
        exports.isContextConsumer = isContextConsumer;
        exports.isContextProvider = isContextProvider;
        exports.isElement = isElement;
        exports.isForwardRef = isForwardRef;
        exports.isFragment = isFragment;
        exports.isLazy = isLazy;
        exports.isMemo = isMemo;
        exports.isPortal = isPortal;
        exports.isProfiler = isProfiler;
        exports.isStrictMode = isStrictMode;
        exports.isSuspense = isSuspense;
        exports.isValidElementType = isValidElementType;
        exports.typeOf = typeOf;
      })();
    }
  }
});

// node_modules/react-is/index.js
var require_react_is = __commonJS({
  "node_modules/react-is/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_react_is_development();
    }
  }
});

// node_modules/object-assign/index.js
var require_object_assign = __commonJS({
  "node_modules/object-assign/index.js"(exports, module) {
    "use strict";
    var getOwnPropertySymbols = Object.getOwnPropertySymbols;
    var hasOwnProperty = Object.prototype.hasOwnProperty;
    var propIsEnumerable = Object.prototype.propertyIsEnumerable;
    function toObject(val) {
      if (val === null || val === void 0) {
        throw new TypeError("Object.assign cannot be called with null or undefined");
      }
      return Object(val);
    }
    function shouldUseNative() {
      try {
        if (!Object.assign) {
          return false;
        }
        var test1 = new String("abc");
        test1[5] = "de";
        if (Object.getOwnPropertyNames(test1)[0] === "5") {
          return false;
        }
        var test2 = {};
        for (var i = 0; i < 10; i++) {
          test2["_" + String.fromCharCode(i)] = i;
        }
        var order2 = Object.getOwnPropertyNames(test2).map(function(n) {
          return test2[n];
        });
        if (order2.join("") !== "0123456789") {
          return false;
        }
        var test3 = {};
        "abcdefghijklmnopqrst".split("").forEach(function(letter) {
          test3[letter] = letter;
        });
        if (Object.keys(Object.assign({}, test3)).join("") !== "abcdefghijklmnopqrst") {
          return false;
        }
        return true;
      } catch (err) {
        return false;
      }
    }
    module.exports = shouldUseNative() ? Object.assign : function(target, source) {
      var from;
      var to = toObject(target);
      var symbols;
      for (var s = 1; s < arguments.length; s++) {
        from = Object(arguments[s]);
        for (var key in from) {
          if (hasOwnProperty.call(from, key)) {
            to[key] = from[key];
          }
        }
        if (getOwnPropertySymbols) {
          symbols = getOwnPropertySymbols(from);
          for (var i = 0; i < symbols.length; i++) {
            if (propIsEnumerable.call(from, symbols[i])) {
              to[symbols[i]] = from[symbols[i]];
            }
          }
        }
      }
      return to;
    };
  }
});

// node_modules/prop-types/lib/ReactPropTypesSecret.js
var require_ReactPropTypesSecret = __commonJS({
  "node_modules/prop-types/lib/ReactPropTypesSecret.js"(exports, module) {
    "use strict";
    var ReactPropTypesSecret = "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED";
    module.exports = ReactPropTypesSecret;
  }
});

// node_modules/prop-types/lib/has.js
var require_has = __commonJS({
  "node_modules/prop-types/lib/has.js"(exports, module) {
    module.exports = Function.call.bind(Object.prototype.hasOwnProperty);
  }
});

// node_modules/prop-types/checkPropTypes.js
var require_checkPropTypes = __commonJS({
  "node_modules/prop-types/checkPropTypes.js"(exports, module) {
    "use strict";
    var printWarning = function() {
    };
    if (true) {
      ReactPropTypesSecret = require_ReactPropTypesSecret();
      loggedTypeFailures = {};
      has = require_has();
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    var ReactPropTypesSecret;
    var loggedTypeFailures;
    var has;
    function checkPropTypes(typeSpecs, values2, location, componentName, getStack) {
      if (true) {
        for (var typeSpecName in typeSpecs) {
          if (has(typeSpecs, typeSpecName)) {
            var error;
            try {
              if (typeof typeSpecs[typeSpecName] !== "function") {
                var err = Error(
                  (componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`."
                );
                err.name = "Invariant Violation";
                throw err;
              }
              error = typeSpecs[typeSpecName](values2, typeSpecName, componentName, location, null, ReactPropTypesSecret);
            } catch (ex) {
              error = ex;
            }
            if (error && !(error instanceof Error)) {
              printWarning(
                (componentName || "React class") + ": type specification of " + location + " `" + typeSpecName + "` is invalid; the type checker function must return `null` or an `Error` but returned a " + typeof error + ". You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument)."
              );
            }
            if (error instanceof Error && !(error.message in loggedTypeFailures)) {
              loggedTypeFailures[error.message] = true;
              var stack = getStack ? getStack() : "";
              printWarning(
                "Failed " + location + " type: " + error.message + (stack != null ? stack : "")
              );
            }
          }
        }
      }
    }
    checkPropTypes.resetWarningCache = function() {
      if (true) {
        loggedTypeFailures = {};
      }
    };
    module.exports = checkPropTypes;
  }
});

// node_modules/prop-types/factoryWithTypeCheckers.js
var require_factoryWithTypeCheckers = __commonJS({
  "node_modules/prop-types/factoryWithTypeCheckers.js"(exports, module) {
    "use strict";
    var ReactIs = require_react_is();
    var assign = require_object_assign();
    var ReactPropTypesSecret = require_ReactPropTypesSecret();
    var has = require_has();
    var checkPropTypes = require_checkPropTypes();
    var printWarning = function() {
    };
    if (true) {
      printWarning = function(text) {
        var message = "Warning: " + text;
        if (typeof console !== "undefined") {
          console.error(message);
        }
        try {
          throw new Error(message);
        } catch (x) {
        }
      };
    }
    function emptyFunctionThatReturnsNull() {
      return null;
    }
    module.exports = function(isValidElement2, throwOnDirectAccess) {
      var ITERATOR_SYMBOL = typeof Symbol === "function" && Symbol.iterator;
      var FAUX_ITERATOR_SYMBOL = "@@iterator";
      function getIteratorFn(maybeIterable) {
        var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
        if (typeof iteratorFn === "function") {
          return iteratorFn;
        }
      }
      var ANONYMOUS = "<<anonymous>>";
      var ReactPropTypes = {
        array: createPrimitiveTypeChecker("array"),
        bigint: createPrimitiveTypeChecker("bigint"),
        bool: createPrimitiveTypeChecker("boolean"),
        func: createPrimitiveTypeChecker("function"),
        number: createPrimitiveTypeChecker("number"),
        object: createPrimitiveTypeChecker("object"),
        string: createPrimitiveTypeChecker("string"),
        symbol: createPrimitiveTypeChecker("symbol"),
        any: createAnyTypeChecker(),
        arrayOf: createArrayOfTypeChecker,
        element: createElementTypeChecker(),
        elementType: createElementTypeTypeChecker(),
        instanceOf: createInstanceTypeChecker,
        node: createNodeChecker(),
        objectOf: createObjectOfTypeChecker,
        oneOf: createEnumTypeChecker,
        oneOfType: createUnionTypeChecker,
        shape: createShapeTypeChecker,
        exact: createStrictShapeTypeChecker
      };
      function is(x, y2) {
        if (x === y2) {
          return x !== 0 || 1 / x === 1 / y2;
        } else {
          return x !== x && y2 !== y2;
        }
      }
      function PropTypeError(message, data2) {
        this.message = message;
        this.data = data2 && typeof data2 === "object" ? data2 : {};
        this.stack = "";
      }
      PropTypeError.prototype = Error.prototype;
      function createChainableTypeChecker(validate) {
        if (true) {
          var manualPropTypeCallCache = {};
          var manualPropTypeWarningCount = 0;
        }
        function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
          componentName = componentName || ANONYMOUS;
          propFullName = propFullName || propName;
          if (secret !== ReactPropTypesSecret) {
            if (throwOnDirectAccess) {
              var err = new Error(
                "Calling PropTypes validators directly is not supported by the `prop-types` package. Use `PropTypes.checkPropTypes()` to call them. Read more at http://fb.me/use-check-prop-types"
              );
              err.name = "Invariant Violation";
              throw err;
            } else if (typeof console !== "undefined") {
              var cacheKey = componentName + ":" + propName;
              if (!manualPropTypeCallCache[cacheKey] && // Avoid spamming the console because they are often not actionable except for lib authors
              manualPropTypeWarningCount < 3) {
                printWarning(
                  "You are manually calling a React.PropTypes validation function for the `" + propFullName + "` prop on `" + componentName + "`. This is deprecated and will throw in the standalone `prop-types` package. You may be seeing this warning due to a third-party PropTypes library. See https://fb.me/react-warning-dont-call-proptypes for details."
                );
                manualPropTypeCallCache[cacheKey] = true;
                manualPropTypeWarningCount++;
              }
            }
          }
          if (props[propName] == null) {
            if (isRequired) {
              if (props[propName] === null) {
                return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required " + ("in `" + componentName + "`, but its value is `null`."));
              }
              return new PropTypeError("The " + location + " `" + propFullName + "` is marked as required in " + ("`" + componentName + "`, but its value is `undefined`."));
            }
            return null;
          } else {
            return validate(props, propName, componentName, location, propFullName);
          }
        }
        var chainedCheckType = checkType.bind(null, false);
        chainedCheckType.isRequired = checkType.bind(null, true);
        return chainedCheckType;
      }
      function createPrimitiveTypeChecker(expectedType) {
        function validate(props, propName, componentName, location, propFullName, secret) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== expectedType) {
            var preciseType = getPreciseType(propValue);
            return new PropTypeError(
              "Invalid " + location + " `" + propFullName + "` of type " + ("`" + preciseType + "` supplied to `" + componentName + "`, expected ") + ("`" + expectedType + "`."),
              { expectedType }
            );
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createAnyTypeChecker() {
        return createChainableTypeChecker(emptyFunctionThatReturnsNull);
      }
      function createArrayOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside arrayOf.");
          }
          var propValue = props[propName];
          if (!Array.isArray(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an array."));
          }
          for (var i = 0; i < propValue.length; i++) {
            var error = typeChecker(propValue, i, componentName, location, propFullName + "[" + i + "]", ReactPropTypesSecret);
            if (error instanceof Error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!isValidElement2(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createElementTypeTypeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          if (!ReactIs.isValidElementType(propValue)) {
            var propType = getPropType(propValue);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected a single ReactElement type."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createInstanceTypeChecker(expectedClass) {
        function validate(props, propName, componentName, location, propFullName) {
          if (!(props[propName] instanceof expectedClass)) {
            var expectedClassName = expectedClass.name || ANONYMOUS;
            var actualClassName = getClassName(props[propName]);
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + actualClassName + "` supplied to `" + componentName + "`, expected ") + ("instance of `" + expectedClassName + "`."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createEnumTypeChecker(expectedValues) {
        if (!Array.isArray(expectedValues)) {
          if (true) {
            if (arguments.length > 1) {
              printWarning(
                "Invalid arguments supplied to oneOf, expected an array, got " + arguments.length + " arguments. A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z])."
              );
            } else {
              printWarning("Invalid argument supplied to oneOf, expected an array.");
            }
          }
          return emptyFunctionThatReturnsNull;
        }
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          for (var i = 0; i < expectedValues.length; i++) {
            if (is(propValue, expectedValues[i])) {
              return null;
            }
          }
          var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
            var type = getPreciseType(value);
            if (type === "symbol") {
              return String(value);
            }
            return value;
          });
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` of value `" + String(propValue) + "` " + ("supplied to `" + componentName + "`, expected one of " + valuesString + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createObjectOfTypeChecker(typeChecker) {
        function validate(props, propName, componentName, location, propFullName) {
          if (typeof typeChecker !== "function") {
            return new PropTypeError("Property `" + propFullName + "` of component `" + componentName + "` has invalid PropType notation inside objectOf.");
          }
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type " + ("`" + propType + "` supplied to `" + componentName + "`, expected an object."));
          }
          for (var key in propValue) {
            if (has(propValue, key)) {
              var error = typeChecker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
              if (error instanceof Error) {
                return error;
              }
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createUnionTypeChecker(arrayOfTypeCheckers) {
        if (!Array.isArray(arrayOfTypeCheckers)) {
          true ? printWarning("Invalid argument supplied to oneOfType, expected an instance of array.") : void 0;
          return emptyFunctionThatReturnsNull;
        }
        for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
          var checker = arrayOfTypeCheckers[i];
          if (typeof checker !== "function") {
            printWarning(
              "Invalid argument supplied to oneOfType. Expected an array of check functions, but received " + getPostfixForTypeWarning(checker) + " at index " + i + "."
            );
            return emptyFunctionThatReturnsNull;
          }
        }
        function validate(props, propName, componentName, location, propFullName) {
          var expectedTypes = [];
          for (var i2 = 0; i2 < arrayOfTypeCheckers.length; i2++) {
            var checker2 = arrayOfTypeCheckers[i2];
            var checkerResult = checker2(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
            if (checkerResult == null) {
              return null;
            }
            if (checkerResult.data && has(checkerResult.data, "expectedType")) {
              expectedTypes.push(checkerResult.data.expectedType);
            }
          }
          var expectedTypesMessage = expectedTypes.length > 0 ? ", expected one of type [" + expectedTypes.join(", ") + "]" : "";
          return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`" + expectedTypesMessage + "."));
        }
        return createChainableTypeChecker(validate);
      }
      function createNodeChecker() {
        function validate(props, propName, componentName, location, propFullName) {
          if (!isNode(props[propName])) {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` supplied to " + ("`" + componentName + "`, expected a ReactNode."));
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function invalidValidatorError(componentName, location, propFullName, key, type) {
        return new PropTypeError(
          (componentName || "React class") + ": " + location + " type `" + propFullName + "." + key + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + type + "`."
        );
      }
      function createShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          for (var key in shapeTypes) {
            var checker = shapeTypes[key];
            if (typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function createStrictShapeTypeChecker(shapeTypes) {
        function validate(props, propName, componentName, location, propFullName) {
          var propValue = props[propName];
          var propType = getPropType(propValue);
          if (propType !== "object") {
            return new PropTypeError("Invalid " + location + " `" + propFullName + "` of type `" + propType + "` " + ("supplied to `" + componentName + "`, expected `object`."));
          }
          var allKeys = assign({}, props[propName], shapeTypes);
          for (var key in allKeys) {
            var checker = shapeTypes[key];
            if (has(shapeTypes, key) && typeof checker !== "function") {
              return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
            }
            if (!checker) {
              return new PropTypeError(
                "Invalid " + location + " `" + propFullName + "` key `" + key + "` supplied to `" + componentName + "`.\nBad object: " + JSON.stringify(props[propName], null, "  ") + "\nValid keys: " + JSON.stringify(Object.keys(shapeTypes), null, "  ")
              );
            }
            var error = checker(propValue, key, componentName, location, propFullName + "." + key, ReactPropTypesSecret);
            if (error) {
              return error;
            }
          }
          return null;
        }
        return createChainableTypeChecker(validate);
      }
      function isNode(propValue) {
        switch (typeof propValue) {
          case "number":
          case "string":
          case "undefined":
            return true;
          case "boolean":
            return !propValue;
          case "object":
            if (Array.isArray(propValue)) {
              return propValue.every(isNode);
            }
            if (propValue === null || isValidElement2(propValue)) {
              return true;
            }
            var iteratorFn = getIteratorFn(propValue);
            if (iteratorFn) {
              var iterator = iteratorFn.call(propValue);
              var step;
              if (iteratorFn !== propValue.entries) {
                while (!(step = iterator.next()).done) {
                  if (!isNode(step.value)) {
                    return false;
                  }
                }
              } else {
                while (!(step = iterator.next()).done) {
                  var entry = step.value;
                  if (entry) {
                    if (!isNode(entry[1])) {
                      return false;
                    }
                  }
                }
              }
            } else {
              return false;
            }
            return true;
          default:
            return false;
        }
      }
      function isSymbol(propType, propValue) {
        if (propType === "symbol") {
          return true;
        }
        if (!propValue) {
          return false;
        }
        if (propValue["@@toStringTag"] === "Symbol") {
          return true;
        }
        if (typeof Symbol === "function" && propValue instanceof Symbol) {
          return true;
        }
        return false;
      }
      function getPropType(propValue) {
        var propType = typeof propValue;
        if (Array.isArray(propValue)) {
          return "array";
        }
        if (propValue instanceof RegExp) {
          return "object";
        }
        if (isSymbol(propType, propValue)) {
          return "symbol";
        }
        return propType;
      }
      function getPreciseType(propValue) {
        if (typeof propValue === "undefined" || propValue === null) {
          return "" + propValue;
        }
        var propType = getPropType(propValue);
        if (propType === "object") {
          if (propValue instanceof Date) {
            return "date";
          } else if (propValue instanceof RegExp) {
            return "regexp";
          }
        }
        return propType;
      }
      function getPostfixForTypeWarning(value) {
        var type = getPreciseType(value);
        switch (type) {
          case "array":
          case "object":
            return "an " + type;
          case "boolean":
          case "date":
          case "regexp":
            return "a " + type;
          default:
            return type;
        }
      }
      function getClassName(propValue) {
        if (!propValue.constructor || !propValue.constructor.name) {
          return ANONYMOUS;
        }
        return propValue.constructor.name;
      }
      ReactPropTypes.checkPropTypes = checkPropTypes;
      ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
      ReactPropTypes.PropTypes = ReactPropTypes;
      return ReactPropTypes;
    };
  }
});

// node_modules/prop-types/index.js
var require_prop_types = __commonJS({
  "node_modules/prop-types/index.js"(exports, module) {
    if (true) {
      ReactIs = require_react_is();
      throwOnDirectAccess = true;
      module.exports = require_factoryWithTypeCheckers()(ReactIs.isElement, throwOnDirectAccess);
    } else {
      module.exports = null();
    }
    var ReactIs;
    var throwOnDirectAccess;
  }
});

// node_modules/@medplum/react-hooks/dist/esm/index.mjs
var import_react = __toESM(require_react(), 1);
var import_react2 = __toESM(require_react(), 1);
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var import_react3 = __toESM(require_react(), 1);
var import_react4 = __toESM(require_react(), 1);
var import_react5 = __toESM(require_react(), 1);
var import_react6 = __toESM(require_react(), 1);
var import_react7 = __toESM(require_react(), 1);
var import_react8 = __toESM(require_react(), 1);
var y = (0, import_react2.createContext)(void 0);
function P2() {
  return (0, import_react2.useContext)(y);
}
function b() {
  return P2().medplum;
}
function fe2() {
  return P2().navigate;
}
function me() {
  return P2().profile;
}
var I2 = ["change", "storageInitialized", "storageInitFailed", "profileRefreshing", "profileRefreshed"];
function ge(e) {
  let n = e.medplum, t = e.navigate ?? q, [s, r2] = (0, import_react.useState)({ profile: n.getProfile(), loading: n.isLoading() });
  (0, import_react.useEffect)(() => {
    function o() {
      r2((u) => ({ ...u, profile: n.getProfile(), loading: n.isLoading() }));
    }
    for (let u of I2) n.addEventListener(u, o);
    return () => {
      for (let u of I2) n.removeEventListener(u, o);
    };
  }, [n]);
  let i = (0, import_react.useMemo)(() => ({ ...s, medplum: n, navigate: t }), [s, n, t]);
  return (0, import_jsx_runtime.jsx)(y.Provider, { value: i, children: e.children });
}
function q(e) {
  window.location.assign(e);
}
var N2 = /* @__PURE__ */ new Map();
var Oe = (e) => (0, import_react3.useMemo)(() => {
  if (!e) return;
  let n = e.split("?")[0];
  if (!n) return e;
  let t;
  try {
    t = new URLSearchParams(new URL(e).search);
  } catch {
    return e;
  }
  if (!t.has("Key-Pair-Id") || !t.has("Signature")) return e;
  let s = t.get("Expires");
  if (!s || s.length > 13) return e;
  let r2 = N2.get(n);
  if (r2) {
    let o = new URLSearchParams(new URL(r2).search).get("Expires");
    if (o && parseInt(o, 10) * 1e3 - 5e3 > Date.now()) return r2;
  }
  return N2.set(n, e), e;
}, [e]);
function Me(e) {
  let n = (0, import_react4.useRef)();
  return (0, import_react4.useEffect)(() => {
    n.current = e;
  }), n.current;
}
function Ue(e, n) {
  let t = b(), [s, r2] = (0, import_react5.useState)(() => w2(t, e)), i = (0, import_react5.useCallback)((o) => {
    ee(o, s) || r2(o);
  }, [s]);
  return (0, import_react5.useEffect)(() => {
    let o = true, u = w2(t, e);
    return !u && ue(e) ? t.readReference(e).then((c) => {
      o && i(c);
    }).catch((c) => {
      o && (i(void 0), n && n(Xe(c)));
    }) : i(u), () => o = false;
  }, [t, e, i, n]), s;
}
function w2(e, n) {
  if (n) {
    if (I(n)) return n;
    if (ue(n)) return e.getCachedReference(n);
  }
}
function B(e, n, t = { leading: false }) {
  let [s, r2] = (0, import_react7.useState)(e), i = (0, import_react7.useRef)(false), o = (0, import_react7.useRef)(), u = (0, import_react7.useRef)(false), c = (0, import_react7.useCallback)(() => window.clearTimeout(o.current), []);
  return (0, import_react7.useEffect)(() => {
    i.current && (!u.current && t.leading ? (u.current = true, r2(e)) : (c(), o.current = setTimeout(() => {
      u.current = false, r2(e);
    }, n)));
  }, [e, t.leading, n, c]), (0, import_react7.useEffect)(() => (i.current = true, c), [c]), [s, c];
}
var ae = 250;
function ze(e, n, t) {
  return K2("search", e, n, t);
}
function Ae(e, n, t) {
  return K2("searchOne", e, n, t);
}
function Qe(e, n, t) {
  return K2("searchResources", e, n, t);
}
function K2(e, n, t, s) {
  let r2 = b(), [i, o] = (0, import_react6.useState)(), [u, c] = (0, import_react6.useState)(true), [f, p] = (0, import_react6.useState)(), [R, E] = (0, import_react6.useState)(), g2 = r2.fhirSearchUrl(n, t).toString(), [m] = B(g2, (s == null ? void 0 : s.debounceMs) ?? ae, { leading: true });
  return (0, import_react6.useEffect)(() => {
    m !== i && (o(m), r2[e](n, t).then((l2) => {
      c(false), p(l2), E(vc);
    }).catch((l2) => {
      c(false), p(void 0), E(Xe(l2));
    }));
  }, [r2, e, n, t, i, m]), [f, u, R];
}
var de2 = 3e3;
function Ze(e, n, t) {
  let s = b(), [r2, i] = (0, import_react8.useState)(), [o, u] = (0, import_react8.useState)(t == null ? void 0 : t.subscriptionProps), c = (0, import_react8.useRef)(false), f = (0, import_react8.useRef)(), p = (0, import_react8.useRef)(), R = (0, import_react8.useRef)(), E = (0, import_react8.useRef)();
  E.current = n;
  let g2 = (0, import_react8.useRef)();
  g2.current = t == null ? void 0 : t.onWebSocketOpen;
  let m = (0, import_react8.useRef)();
  m.current = t == null ? void 0 : t.onWebSocketClose;
  let l2 = (0, import_react8.useRef)();
  l2.current = t == null ? void 0 : t.onSubscriptionConnect;
  let U = (0, import_react8.useRef)();
  U.current = t == null ? void 0 : t.onSubscriptionDisconnect;
  let D = (0, import_react8.useRef)();
  D.current = t == null ? void 0 : t.onError, (0, import_react8.useEffect)(() => {
    ee(t == null ? void 0 : t.subscriptionProps, o) || u(t == null ? void 0 : t.subscriptionProps);
  }, [o, t]), (0, import_react8.useEffect)(() => {
    f.current && (clearTimeout(f.current), f.current = void 0);
    let a = false;
    return (p.current !== e || !ee(R.current, o)) && (a = true), a && p.current && s.unsubscribeFromCriteria(p.current, R.current), p.current = e, R.current = o, a && e ? i(s.subscribeToCriteria(e, o)) : e || i(void 0), () => {
      f.current = setTimeout(() => {
        i(void 0), e && s.unsubscribeFromCriteria(e, o);
      }, de2);
    };
  }, [s, e, o]);
  let x = (0, import_react8.useCallback)((a) => {
    var _a;
    (_a = E.current) == null ? void 0 : _a.call(E, a.payload);
  }, []), h = (0, import_react8.useCallback)(() => {
    var _a;
    (_a = g2.current) == null ? void 0 : _a.call(g2);
  }, []), O = (0, import_react8.useCallback)(() => {
    var _a;
    (_a = m.current) == null ? void 0 : _a.call(m);
  }, []), T = (0, import_react8.useCallback)((a) => {
    var _a;
    (_a = l2.current) == null ? void 0 : _a.call(l2, a.payload.subscriptionId);
  }, []), C = (0, import_react8.useCallback)((a) => {
    var _a;
    (_a = U.current) == null ? void 0 : _a.call(U, a.payload.subscriptionId);
  }, []), M2 = (0, import_react8.useCallback)((a) => {
    var _a;
    (_a = D.current) == null ? void 0 : _a.call(D, a.payload);
  }, []);
  (0, import_react8.useEffect)(() => r2 ? (c.current || (r2.addEventListener("message", x), r2.addEventListener("open", h), r2.addEventListener("close", O), r2.addEventListener("connect", T), r2.addEventListener("disconnect", C), r2.addEventListener("error", M2), c.current = true), () => {
    c.current = false, r2.removeEventListener("message", x), r2.removeEventListener("open", h), r2.removeEventListener("close", O), r2.removeEventListener("connect", T), r2.removeEventListener("disconnect", C), r2.removeEventListener("error", M2);
  }) : () => {
  }, [r2, x, h, O, T, C, M2]);
}

// node_modules/@medplum/react/dist/esm/index.mjs
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
var import_react19 = __toESM(require_react(), 1);
var import_react20 = __toESM(require_react(), 1);
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
var import_react21 = __toESM(require_react(), 1);
var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);

// node_modules/@mantine/store/esm/store.mjs
var import_react9 = __toESM(require_react(), 1);
function createStore(initialState) {
  let state = initialState;
  let initialized = false;
  const listeners = /* @__PURE__ */ new Set();
  return {
    getState() {
      return state;
    },
    updateState(value) {
      state = typeof value === "function" ? value(state) : value;
    },
    setState(value) {
      this.updateState(value);
      listeners.forEach((listener) => listener(state));
    },
    initialize(value) {
      if (!initialized) {
        state = value;
        initialized = true;
      }
    },
    subscribe(callback) {
      listeners.add(callback);
      return () => listeners.delete(callback);
    }
  };
}
function useStore(store) {
  return (0, import_react9.useSyncExternalStore)(
    store.subscribe,
    () => store.getState(),
    () => store.getState()
  );
}

// node_modules/@mantine/notifications/esm/notifications.store.mjs
function getDistributedNotifications(data2, defaultPosition, limit) {
  const queue = [];
  const notifications2 = [];
  const count = {};
  for (const item of data2) {
    const position = item.position || defaultPosition;
    count[position] = count[position] || 0;
    count[position] += 1;
    if (count[position] <= limit) {
      notifications2.push(item);
    } else {
      queue.push(item);
    }
  }
  return { notifications: notifications2, queue };
}
var createNotificationsStore = () => createStore({
  notifications: [],
  queue: [],
  defaultPosition: "bottom-right",
  limit: 5
});
var notificationsStore = createNotificationsStore();
var useNotifications = (store = notificationsStore) => useStore(store);
function updateNotificationsState(store, update) {
  const state = store.getState();
  const notifications2 = update([...state.notifications, ...state.queue]);
  const updated = getDistributedNotifications(notifications2, state.defaultPosition, state.limit);
  store.setState({
    notifications: updated.notifications,
    queue: updated.queue,
    limit: state.limit,
    defaultPosition: state.defaultPosition
  });
}
function showNotification(notification, store = notificationsStore) {
  const id = notification.id || randomId();
  updateNotificationsState(store, (notifications2) => {
    if (notification.id && notifications2.some((n) => n.id === notification.id)) {
      return notifications2;
    }
    return [...notifications2, { ...notification, id }];
  });
  return id;
}
function hideNotification(id, store = notificationsStore) {
  updateNotificationsState(
    store,
    (notifications2) => notifications2.filter((notification) => {
      var _a;
      if (notification.id === id) {
        (_a = notification.onClose) == null ? void 0 : _a.call(notification, notification);
        return false;
      }
      return true;
    })
  );
  return id;
}
function updateNotification(notification, store = notificationsStore) {
  updateNotificationsState(
    store,
    (notifications2) => notifications2.map((item) => {
      if (item.id === notification.id) {
        return { ...item, ...notification };
      }
      return item;
    })
  );
  return notification.id;
}
function cleanNotifications(store = notificationsStore) {
  updateNotificationsState(store, () => []);
}
function cleanNotificationsQueue(store = notificationsStore) {
  updateNotificationsState(
    store,
    (notifications2) => notifications2.slice(0, store.getState().limit)
  );
}
var notifications = {
  show: showNotification,
  hide: hideNotification,
  update: updateNotification,
  clean: cleanNotifications,
  cleanQueue: cleanNotificationsQueue,
  updateState: updateNotificationsState
};

// node_modules/@mantine/notifications/esm/Notifications.mjs
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
var import_react18 = __toESM(require_react(), 1);

// node_modules/@babel/runtime/helpers/esm/setPrototypeOf.js
function _setPrototypeOf(t, e) {
  return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t2, e2) {
    return t2.__proto__ = e2, t2;
  }, _setPrototypeOf(t, e);
}

// node_modules/@babel/runtime/helpers/esm/inheritsLoose.js
function _inheritsLoose(t, o) {
  t.prototype = Object.create(o.prototype), t.prototype.constructor = t, _setPrototypeOf(t, o);
}

// node_modules/react-transition-group/esm/CSSTransition.js
var import_prop_types3 = __toESM(require_prop_types());

// node_modules/dom-helpers/esm/hasClass.js
function hasClass(element, className) {
  if (element.classList) return !!className && element.classList.contains(className);
  return (" " + (element.className.baseVal || element.className) + " ").indexOf(" " + className + " ") !== -1;
}

// node_modules/dom-helpers/esm/addClass.js
function addClass(element, className) {
  if (element.classList) element.classList.add(className);
  else if (!hasClass(element, className)) if (typeof element.className === "string") element.className = element.className + " " + className;
  else element.setAttribute("class", (element.className && element.className.baseVal || "") + " " + className);
}

// node_modules/dom-helpers/esm/removeClass.js
function replaceClassName(origClass, classToRemove) {
  return origClass.replace(new RegExp("(^|\\s)" + classToRemove + "(?:\\s|$)", "g"), "$1").replace(/\s+/g, " ").replace(/^\s*|\s*$/g, "");
}
function removeClass(element, className) {
  if (element.classList) {
    element.classList.remove(className);
  } else if (typeof element.className === "string") {
    element.className = replaceClassName(element.className, className);
  } else {
    element.setAttribute("class", replaceClassName(element.className && element.className.baseVal || "", className));
  }
}

// node_modules/react-transition-group/esm/CSSTransition.js
var import_react12 = __toESM(require_react());

// node_modules/react-transition-group/esm/Transition.js
var import_prop_types2 = __toESM(require_prop_types());
var import_react11 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());

// node_modules/react-transition-group/esm/config.js
var config_default = {
  disabled: false
};

// node_modules/react-transition-group/esm/utils/PropTypes.js
var import_prop_types = __toESM(require_prop_types());
var timeoutsShape = true ? import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.shape({
  enter: import_prop_types.default.number,
  exit: import_prop_types.default.number,
  appear: import_prop_types.default.number
}).isRequired]) : null;
var classNamesShape = true ? import_prop_types.default.oneOfType([import_prop_types.default.string, import_prop_types.default.shape({
  enter: import_prop_types.default.string,
  exit: import_prop_types.default.string,
  active: import_prop_types.default.string
}), import_prop_types.default.shape({
  enter: import_prop_types.default.string,
  enterDone: import_prop_types.default.string,
  enterActive: import_prop_types.default.string,
  exit: import_prop_types.default.string,
  exitDone: import_prop_types.default.string,
  exitActive: import_prop_types.default.string
})]) : null;

// node_modules/react-transition-group/esm/TransitionGroupContext.js
var import_react10 = __toESM(require_react());
var TransitionGroupContext_default = import_react10.default.createContext(null);

// node_modules/react-transition-group/esm/utils/reflow.js
var forceReflow = function forceReflow2(node) {
  return node.scrollTop;
};

// node_modules/react-transition-group/esm/Transition.js
var UNMOUNTED = "unmounted";
var EXITED = "exited";
var ENTERING = "entering";
var ENTERED = "entered";
var EXITING = "exiting";
var Transition = function(_React$Component) {
  _inheritsLoose(Transition3, _React$Component);
  function Transition3(props, context) {
    var _this;
    _this = _React$Component.call(this, props, context) || this;
    var parentGroup = context;
    var appear = parentGroup && !parentGroup.isMounting ? props.enter : props.appear;
    var initialStatus;
    _this.appearStatus = null;
    if (props.in) {
      if (appear) {
        initialStatus = EXITED;
        _this.appearStatus = ENTERING;
      } else {
        initialStatus = ENTERED;
      }
    } else {
      if (props.unmountOnExit || props.mountOnEnter) {
        initialStatus = UNMOUNTED;
      } else {
        initialStatus = EXITED;
      }
    }
    _this.state = {
      status: initialStatus
    };
    _this.nextCallback = null;
    return _this;
  }
  Transition3.getDerivedStateFromProps = function getDerivedStateFromProps(_ref, prevState) {
    var nextIn = _ref.in;
    if (nextIn && prevState.status === UNMOUNTED) {
      return {
        status: EXITED
      };
    }
    return null;
  };
  var _proto = Transition3.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this.updateStatus(true, this.appearStatus);
  };
  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    var nextStatus = null;
    if (prevProps !== this.props) {
      var status = this.state.status;
      if (this.props.in) {
        if (status !== ENTERING && status !== ENTERED) {
          nextStatus = ENTERING;
        }
      } else {
        if (status === ENTERING || status === ENTERED) {
          nextStatus = EXITING;
        }
      }
    }
    this.updateStatus(false, nextStatus);
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.cancelNextCallback();
  };
  _proto.getTimeouts = function getTimeouts() {
    var timeout2 = this.props.timeout;
    var exit, enter, appear;
    exit = enter = appear = timeout2;
    if (timeout2 != null && typeof timeout2 !== "number") {
      exit = timeout2.exit;
      enter = timeout2.enter;
      appear = timeout2.appear !== void 0 ? timeout2.appear : enter;
    }
    return {
      exit,
      enter,
      appear
    };
  };
  _proto.updateStatus = function updateStatus(mounting, nextStatus) {
    if (mounting === void 0) {
      mounting = false;
    }
    if (nextStatus !== null) {
      this.cancelNextCallback();
      if (nextStatus === ENTERING) {
        if (this.props.unmountOnExit || this.props.mountOnEnter) {
          var node = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);
          if (node) forceReflow(node);
        }
        this.performEnter(mounting);
      } else {
        this.performExit();
      }
    } else if (this.props.unmountOnExit && this.state.status === EXITED) {
      this.setState({
        status: UNMOUNTED
      });
    }
  };
  _proto.performEnter = function performEnter(mounting) {
    var _this2 = this;
    var enter = this.props.enter;
    var appearing = this.context ? this.context.isMounting : mounting;
    var _ref2 = this.props.nodeRef ? [appearing] : [import_react_dom.default.findDOMNode(this), appearing], maybeNode = _ref2[0], maybeAppearing = _ref2[1];
    var timeouts = this.getTimeouts();
    var enterTimeout = appearing ? timeouts.appear : timeouts.enter;
    if (!mounting && !enter || config_default.disabled) {
      this.safeSetState({
        status: ENTERED
      }, function() {
        _this2.props.onEntered(maybeNode);
      });
      return;
    }
    this.props.onEnter(maybeNode, maybeAppearing);
    this.safeSetState({
      status: ENTERING
    }, function() {
      _this2.props.onEntering(maybeNode, maybeAppearing);
      _this2.onTransitionEnd(enterTimeout, function() {
        _this2.safeSetState({
          status: ENTERED
        }, function() {
          _this2.props.onEntered(maybeNode, maybeAppearing);
        });
      });
    });
  };
  _proto.performExit = function performExit() {
    var _this3 = this;
    var exit = this.props.exit;
    var timeouts = this.getTimeouts();
    var maybeNode = this.props.nodeRef ? void 0 : import_react_dom.default.findDOMNode(this);
    if (!exit || config_default.disabled) {
      this.safeSetState({
        status: EXITED
      }, function() {
        _this3.props.onExited(maybeNode);
      });
      return;
    }
    this.props.onExit(maybeNode);
    this.safeSetState({
      status: EXITING
    }, function() {
      _this3.props.onExiting(maybeNode);
      _this3.onTransitionEnd(timeouts.exit, function() {
        _this3.safeSetState({
          status: EXITED
        }, function() {
          _this3.props.onExited(maybeNode);
        });
      });
    });
  };
  _proto.cancelNextCallback = function cancelNextCallback() {
    if (this.nextCallback !== null) {
      this.nextCallback.cancel();
      this.nextCallback = null;
    }
  };
  _proto.safeSetState = function safeSetState(nextState, callback) {
    callback = this.setNextCallback(callback);
    this.setState(nextState, callback);
  };
  _proto.setNextCallback = function setNextCallback(callback) {
    var _this4 = this;
    var active = true;
    this.nextCallback = function(event) {
      if (active) {
        active = false;
        _this4.nextCallback = null;
        callback(event);
      }
    };
    this.nextCallback.cancel = function() {
      active = false;
    };
    return this.nextCallback;
  };
  _proto.onTransitionEnd = function onTransitionEnd(timeout2, handler) {
    this.setNextCallback(handler);
    var node = this.props.nodeRef ? this.props.nodeRef.current : import_react_dom.default.findDOMNode(this);
    var doesNotHaveTimeoutOrListener = timeout2 == null && !this.props.addEndListener;
    if (!node || doesNotHaveTimeoutOrListener) {
      setTimeout(this.nextCallback, 0);
      return;
    }
    if (this.props.addEndListener) {
      var _ref3 = this.props.nodeRef ? [this.nextCallback] : [node, this.nextCallback], maybeNode = _ref3[0], maybeNextCallback = _ref3[1];
      this.props.addEndListener(maybeNode, maybeNextCallback);
    }
    if (timeout2 != null) {
      setTimeout(this.nextCallback, timeout2);
    }
  };
  _proto.render = function render() {
    var status = this.state.status;
    if (status === UNMOUNTED) {
      return null;
    }
    var _this$props = this.props, children2 = _this$props.children, _in = _this$props.in, _mountOnEnter = _this$props.mountOnEnter, _unmountOnExit = _this$props.unmountOnExit, _appear = _this$props.appear, _enter = _this$props.enter, _exit = _this$props.exit, _timeout = _this$props.timeout, _addEndListener = _this$props.addEndListener, _onEnter = _this$props.onEnter, _onEntering = _this$props.onEntering, _onEntered = _this$props.onEntered, _onExit = _this$props.onExit, _onExiting = _this$props.onExiting, _onExited = _this$props.onExited, _nodeRef = _this$props.nodeRef, childProps = _objectWithoutPropertiesLoose(_this$props, ["children", "in", "mountOnEnter", "unmountOnExit", "appear", "enter", "exit", "timeout", "addEndListener", "onEnter", "onEntering", "onEntered", "onExit", "onExiting", "onExited", "nodeRef"]);
    return (
      // allows for nested Transitions
      import_react11.default.createElement(TransitionGroupContext_default.Provider, {
        value: null
      }, typeof children2 === "function" ? children2(status, childProps) : import_react11.default.cloneElement(import_react11.default.Children.only(children2), childProps))
    );
  };
  return Transition3;
}(import_react11.default.Component);
Transition.contextType = TransitionGroupContext_default;
Transition.propTypes = true ? {
  /**
   * A React reference to DOM element that need to transition:
   * https://stackoverflow.com/a/51127130/4671932
   *
   *   - When `nodeRef` prop is used, `node` is not passed to callback functions
   *      (e.g. `onEnter`) because user already has direct access to the node.
   *   - When changing `key` prop of `Transition` in a `TransitionGroup` a new
   *     `nodeRef` need to be provided to `Transition` with changed `key` prop
   *     (see
   *     [test/CSSTransition-test.js](https://github.com/reactjs/react-transition-group/blob/13435f897b3ab71f6e19d724f145596f5910581c/test/CSSTransition-test.js#L362-L437)).
   */
  nodeRef: import_prop_types2.default.shape({
    current: typeof Element === "undefined" ? import_prop_types2.default.any : function(propValue, key, componentName, location, propFullName, secret) {
      var value = propValue[key];
      return import_prop_types2.default.instanceOf(value && "ownerDocument" in value ? value.ownerDocument.defaultView.Element : Element)(propValue, key, componentName, location, propFullName, secret);
    }
  }),
  /**
   * A `function` child can be used instead of a React element. This function is
   * called with the current transition status (`'entering'`, `'entered'`,
   * `'exiting'`, `'exited'`), which can be used to apply context
   * specific props to a component.
   *
   * ```jsx
   * <Transition in={this.state.in} timeout={150}>
   *   {state => (
   *     <MyComponent className={`fade fade-${state}`} />
   *   )}
   * </Transition>
   * ```
   */
  children: import_prop_types2.default.oneOfType([import_prop_types2.default.func.isRequired, import_prop_types2.default.element.isRequired]).isRequired,
  /**
   * Show the component; triggers the enter or exit states
   */
  in: import_prop_types2.default.bool,
  /**
   * By default the child component is mounted immediately along with
   * the parent `Transition` component. If you want to "lazy mount" the component on the
   * first `in={true}` you can set `mountOnEnter`. After the first enter transition the component will stay
   * mounted, even on "exited", unless you also specify `unmountOnExit`.
   */
  mountOnEnter: import_prop_types2.default.bool,
  /**
   * By default the child component stays mounted after it reaches the `'exited'` state.
   * Set `unmountOnExit` if you'd prefer to unmount the component after it finishes exiting.
   */
  unmountOnExit: import_prop_types2.default.bool,
  /**
   * By default the child component does not perform the enter transition when
   * it first mounts, regardless of the value of `in`. If you want this
   * behavior, set both `appear` and `in` to `true`.
   *
   * > **Note**: there are no special appear states like `appearing`/`appeared`, this prop
   * > only adds an additional enter transition. However, in the
   * > `<CSSTransition>` component that first enter transition does result in
   * > additional `.appear-*` classes, that way you can choose to style it
   * > differently.
   */
  appear: import_prop_types2.default.bool,
  /**
   * Enable or disable enter transitions.
   */
  enter: import_prop_types2.default.bool,
  /**
   * Enable or disable exit transitions.
   */
  exit: import_prop_types2.default.bool,
  /**
   * The duration of the transition, in milliseconds.
   * Required unless `addEndListener` is provided.
   *
   * You may specify a single timeout for all transitions:
   *
   * ```jsx
   * timeout={500}
   * ```
   *
   * or individually:
   *
   * ```jsx
   * timeout={{
   *  appear: 500,
   *  enter: 300,
   *  exit: 500,
   * }}
   * ```
   *
   * - `appear` defaults to the value of `enter`
   * - `enter` defaults to `0`
   * - `exit` defaults to `0`
   *
   * @type {number | { enter?: number, exit?: number, appear?: number }}
   */
  timeout: function timeout(props) {
    var pt = timeoutsShape;
    if (!props.addEndListener) pt = pt.isRequired;
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }
    return pt.apply(void 0, [props].concat(args));
  },
  /**
   * Add a custom transition end trigger. Called with the transitioning
   * DOM node and a `done` callback. Allows for more fine grained transition end
   * logic. Timeouts are still used as a fallback if provided.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * ```jsx
   * addEndListener={(node, done) => {
   *   // use the css transitionend event to mark the finish of a transition
   *   node.addEventListener('transitionend', done, false);
   * }}
   * ```
   */
  addEndListener: import_prop_types2.default.func,
  /**
   * Callback fired before the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEnter: import_prop_types2.default.func,
  /**
   * Callback fired after the "entering" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntering: import_prop_types2.default.func,
  /**
   * Callback fired after the "entered" status is applied. An extra parameter
   * `isAppearing` is supplied to indicate if the enter stage is occurring on the initial mount
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool) -> void
   */
  onEntered: import_prop_types2.default.func,
  /**
   * Callback fired before the "exiting" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExit: import_prop_types2.default.func,
  /**
   * Callback fired after the "exiting" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExiting: import_prop_types2.default.func,
  /**
   * Callback fired after the "exited" status is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement) -> void
   */
  onExited: import_prop_types2.default.func
} : {};
function noop() {
}
Transition.defaultProps = {
  in: false,
  mountOnEnter: false,
  unmountOnExit: false,
  appear: false,
  enter: true,
  exit: true,
  onEnter: noop,
  onEntering: noop,
  onEntered: noop,
  onExit: noop,
  onExiting: noop,
  onExited: noop
};
Transition.UNMOUNTED = UNMOUNTED;
Transition.EXITED = EXITED;
Transition.ENTERING = ENTERING;
Transition.ENTERED = ENTERED;
Transition.EXITING = EXITING;
var Transition_default = Transition;

// node_modules/react-transition-group/esm/CSSTransition.js
var _addClass = function addClass2(node, classes2) {
  return node && classes2 && classes2.split(" ").forEach(function(c) {
    return addClass(node, c);
  });
};
var removeClass2 = function removeClass3(node, classes2) {
  return node && classes2 && classes2.split(" ").forEach(function(c) {
    return removeClass(node, c);
  });
};
var CSSTransition = function(_React$Component) {
  _inheritsLoose(CSSTransition2, _React$Component);
  function CSSTransition2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.appliedClasses = {
      appear: {},
      enter: {},
      exit: {}
    };
    _this.onEnter = function(maybeNode, maybeAppearing) {
      var _this$resolveArgument = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument[0], appearing = _this$resolveArgument[1];
      _this.removeClasses(node, "exit");
      _this.addClass(node, appearing ? "appear" : "enter", "base");
      if (_this.props.onEnter) {
        _this.props.onEnter(maybeNode, maybeAppearing);
      }
    };
    _this.onEntering = function(maybeNode, maybeAppearing) {
      var _this$resolveArgument2 = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument2[0], appearing = _this$resolveArgument2[1];
      var type = appearing ? "appear" : "enter";
      _this.addClass(node, type, "active");
      if (_this.props.onEntering) {
        _this.props.onEntering(maybeNode, maybeAppearing);
      }
    };
    _this.onEntered = function(maybeNode, maybeAppearing) {
      var _this$resolveArgument3 = _this.resolveArguments(maybeNode, maybeAppearing), node = _this$resolveArgument3[0], appearing = _this$resolveArgument3[1];
      var type = appearing ? "appear" : "enter";
      _this.removeClasses(node, type);
      _this.addClass(node, type, "done");
      if (_this.props.onEntered) {
        _this.props.onEntered(maybeNode, maybeAppearing);
      }
    };
    _this.onExit = function(maybeNode) {
      var _this$resolveArgument4 = _this.resolveArguments(maybeNode), node = _this$resolveArgument4[0];
      _this.removeClasses(node, "appear");
      _this.removeClasses(node, "enter");
      _this.addClass(node, "exit", "base");
      if (_this.props.onExit) {
        _this.props.onExit(maybeNode);
      }
    };
    _this.onExiting = function(maybeNode) {
      var _this$resolveArgument5 = _this.resolveArguments(maybeNode), node = _this$resolveArgument5[0];
      _this.addClass(node, "exit", "active");
      if (_this.props.onExiting) {
        _this.props.onExiting(maybeNode);
      }
    };
    _this.onExited = function(maybeNode) {
      var _this$resolveArgument6 = _this.resolveArguments(maybeNode), node = _this$resolveArgument6[0];
      _this.removeClasses(node, "exit");
      _this.addClass(node, "exit", "done");
      if (_this.props.onExited) {
        _this.props.onExited(maybeNode);
      }
    };
    _this.resolveArguments = function(maybeNode, maybeAppearing) {
      return _this.props.nodeRef ? [_this.props.nodeRef.current, maybeNode] : [maybeNode, maybeAppearing];
    };
    _this.getClassNames = function(type) {
      var classNames = _this.props.classNames;
      var isStringClassNames = typeof classNames === "string";
      var prefix = isStringClassNames && classNames ? classNames + "-" : "";
      var baseClassName = isStringClassNames ? "" + prefix + type : classNames[type];
      var activeClassName = isStringClassNames ? baseClassName + "-active" : classNames[type + "Active"];
      var doneClassName = isStringClassNames ? baseClassName + "-done" : classNames[type + "Done"];
      return {
        baseClassName,
        activeClassName,
        doneClassName
      };
    };
    return _this;
  }
  var _proto = CSSTransition2.prototype;
  _proto.addClass = function addClass3(node, type, phase) {
    var className = this.getClassNames(type)[phase + "ClassName"];
    var _this$getClassNames = this.getClassNames("enter"), doneClassName = _this$getClassNames.doneClassName;
    if (type === "appear" && phase === "done" && doneClassName) {
      className += " " + doneClassName;
    }
    if (phase === "active") {
      if (node) forceReflow(node);
    }
    if (className) {
      this.appliedClasses[type][phase] = className;
      _addClass(node, className);
    }
  };
  _proto.removeClasses = function removeClasses(node, type) {
    var _this$appliedClasses$ = this.appliedClasses[type], baseClassName = _this$appliedClasses$.base, activeClassName = _this$appliedClasses$.active, doneClassName = _this$appliedClasses$.done;
    this.appliedClasses[type] = {};
    if (baseClassName) {
      removeClass2(node, baseClassName);
    }
    if (activeClassName) {
      removeClass2(node, activeClassName);
    }
    if (doneClassName) {
      removeClass2(node, doneClassName);
    }
  };
  _proto.render = function render() {
    var _this$props = this.props, _2 = _this$props.classNames, props = _objectWithoutPropertiesLoose(_this$props, ["classNames"]);
    return import_react12.default.createElement(Transition_default, _extends({}, props, {
      onEnter: this.onEnter,
      onEntered: this.onEntered,
      onEntering: this.onEntering,
      onExit: this.onExit,
      onExiting: this.onExiting,
      onExited: this.onExited
    }));
  };
  return CSSTransition2;
}(import_react12.default.Component);
CSSTransition.defaultProps = {
  classNames: ""
};
CSSTransition.propTypes = true ? _extends({}, Transition_default.propTypes, {
  /**
   * The animation classNames applied to the component as it appears, enters,
   * exits or has finished the transition. A single name can be provided, which
   * will be suffixed for each stage, e.g. `classNames="fade"` applies:
   *
   * - `fade-appear`, `fade-appear-active`, `fade-appear-done`
   * - `fade-enter`, `fade-enter-active`, `fade-enter-done`
   * - `fade-exit`, `fade-exit-active`, `fade-exit-done`
   *
   * A few details to note about how these classes are applied:
   *
   * 1. They are _joined_ with the ones that are already defined on the child
   *    component, so if you want to add some base styles, you can use
   *    `className` without worrying that it will be overridden.
   *
   * 2. If the transition component mounts with `in={false}`, no classes are
   *    applied yet. You might be expecting `*-exit-done`, but if you think
   *    about it, a component cannot finish exiting if it hasn't entered yet.
   *
   * 2. `fade-appear-done` and `fade-enter-done` will _both_ be applied. This
   *    allows you to define different behavior for when appearing is done and
   *    when regular entering is done, using selectors like
   *    `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply
   *    an epic entrance animation when element first appears in the DOM using
   *    [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can
   *    simply use `fade-enter-done` for defining both cases.
   *
   * Each individual classNames can also be specified independently like:
   *
   * ```js
   * classNames={{
   *  appear: 'my-appear',
   *  appearActive: 'my-active-appear',
   *  appearDone: 'my-done-appear',
   *  enter: 'my-enter',
   *  enterActive: 'my-active-enter',
   *  enterDone: 'my-done-enter',
   *  exit: 'my-exit',
   *  exitActive: 'my-active-exit',
   *  exitDone: 'my-done-exit',
   * }}
   * ```
   *
   * If you want to set these classes using CSS Modules:
   *
   * ```js
   * import styles from './styles.css';
   * ```
   *
   * you might want to use camelCase in your CSS file, that way could simply
   * spread them instead of listing them one by one:
   *
   * ```js
   * classNames={{ ...styles }}
   * ```
   *
   * @type {string | {
   *  appear?: string,
   *  appearActive?: string,
   *  appearDone?: string,
   *  enter?: string,
   *  enterActive?: string,
   *  enterDone?: string,
   *  exit?: string,
   *  exitActive?: string,
   *  exitDone?: string,
   * }}
   */
  classNames: classNamesShape,
  /**
   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is
   * applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEnter: import_prop_types3.default.func,
  /**
   * A `<Transition>` callback fired immediately after the 'enter-active' or
   * 'appear-active' class is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntering: import_prop_types3.default.func,
  /**
   * A `<Transition>` callback fired immediately after the 'enter' or
   * 'appear' classes are **removed** and the `done` class is added to the DOM node.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed.
   *
   * @type Function(node: HtmlElement, isAppearing: bool)
   */
  onEntered: import_prop_types3.default.func,
  /**
   * A `<Transition>` callback fired immediately after the 'exit' class is
   * applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement)
   */
  onExit: import_prop_types3.default.func,
  /**
   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement)
   */
  onExiting: import_prop_types3.default.func,
  /**
   * A `<Transition>` callback fired immediately after the 'exit' classes
   * are **removed** and the `exit-done` class is added to the DOM node.
   *
   * **Note**: when `nodeRef` prop is passed, `node` is not passed
   *
   * @type Function(node: HtmlElement)
   */
  onExited: import_prop_types3.default.func
}) : {};

// node_modules/react-transition-group/esm/ReplaceTransition.js
var import_prop_types5 = __toESM(require_prop_types());
var import_react15 = __toESM(require_react());
var import_react_dom2 = __toESM(require_react_dom());

// node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js
function _assertThisInitialized(e) {
  if (void 0 === e) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e;
}

// node_modules/react-transition-group/esm/TransitionGroup.js
var import_prop_types4 = __toESM(require_prop_types());
var import_react14 = __toESM(require_react());

// node_modules/react-transition-group/esm/utils/ChildMapping.js
var import_react13 = __toESM(require_react());
function getChildMapping(children2, mapFn) {
  var mapper = function mapper2(child) {
    return mapFn && (0, import_react13.isValidElement)(child) ? mapFn(child) : child;
  };
  var result = /* @__PURE__ */ Object.create(null);
  if (children2) import_react13.Children.map(children2, function(c) {
    return c;
  }).forEach(function(child) {
    result[child.key] = mapper(child);
  });
  return result;
}
function mergeChildMappings(prev, next) {
  prev = prev || {};
  next = next || {};
  function getValueForKey(key) {
    return key in next ? next[key] : prev[key];
  }
  var nextKeysPending = /* @__PURE__ */ Object.create(null);
  var pendingKeys = [];
  for (var prevKey in prev) {
    if (prevKey in next) {
      if (pendingKeys.length) {
        nextKeysPending[prevKey] = pendingKeys;
        pendingKeys = [];
      }
    } else {
      pendingKeys.push(prevKey);
    }
  }
  var i;
  var childMapping = {};
  for (var nextKey in next) {
    if (nextKeysPending[nextKey]) {
      for (i = 0; i < nextKeysPending[nextKey].length; i++) {
        var pendingNextKey = nextKeysPending[nextKey][i];
        childMapping[nextKeysPending[nextKey][i]] = getValueForKey(pendingNextKey);
      }
    }
    childMapping[nextKey] = getValueForKey(nextKey);
  }
  for (i = 0; i < pendingKeys.length; i++) {
    childMapping[pendingKeys[i]] = getValueForKey(pendingKeys[i]);
  }
  return childMapping;
}
function getProp(child, prop, props) {
  return props[prop] != null ? props[prop] : child.props[prop];
}
function getInitialChildMapping(props, onExited) {
  return getChildMapping(props.children, function(child) {
    return (0, import_react13.cloneElement)(child, {
      onExited: onExited.bind(null, child),
      in: true,
      appear: getProp(child, "appear", props),
      enter: getProp(child, "enter", props),
      exit: getProp(child, "exit", props)
    });
  });
}
function getNextChildMapping(nextProps, prevChildMapping, onExited) {
  var nextChildMapping = getChildMapping(nextProps.children);
  var children2 = mergeChildMappings(prevChildMapping, nextChildMapping);
  Object.keys(children2).forEach(function(key) {
    var child = children2[key];
    if (!(0, import_react13.isValidElement)(child)) return;
    var hasPrev = key in prevChildMapping;
    var hasNext = key in nextChildMapping;
    var prevChild = prevChildMapping[key];
    var isLeaving = (0, import_react13.isValidElement)(prevChild) && !prevChild.props.in;
    if (hasNext && (!hasPrev || isLeaving)) {
      children2[key] = (0, import_react13.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: true,
        exit: getProp(child, "exit", nextProps),
        enter: getProp(child, "enter", nextProps)
      });
    } else if (!hasNext && hasPrev && !isLeaving) {
      children2[key] = (0, import_react13.cloneElement)(child, {
        in: false
      });
    } else if (hasNext && hasPrev && (0, import_react13.isValidElement)(prevChild)) {
      children2[key] = (0, import_react13.cloneElement)(child, {
        onExited: onExited.bind(null, child),
        in: prevChild.props.in,
        exit: getProp(child, "exit", nextProps),
        enter: getProp(child, "enter", nextProps)
      });
    }
  });
  return children2;
}

// node_modules/react-transition-group/esm/TransitionGroup.js
var values = Object.values || function(obj) {
  return Object.keys(obj).map(function(k2) {
    return obj[k2];
  });
};
var defaultProps = {
  component: "div",
  childFactory: function childFactory(child) {
    return child;
  }
};
var TransitionGroup = function(_React$Component) {
  _inheritsLoose(TransitionGroup2, _React$Component);
  function TransitionGroup2(props, context) {
    var _this;
    _this = _React$Component.call(this, props, context) || this;
    var handleExited = _this.handleExited.bind(_assertThisInitialized(_this));
    _this.state = {
      contextValue: {
        isMounting: true
      },
      handleExited,
      firstRender: true
    };
    return _this;
  }
  var _proto = TransitionGroup2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this.mounted = true;
    this.setState({
      contextValue: {
        isMounting: false
      }
    });
  };
  _proto.componentWillUnmount = function componentWillUnmount() {
    this.mounted = false;
  };
  TransitionGroup2.getDerivedStateFromProps = function getDerivedStateFromProps(nextProps, _ref) {
    var prevChildMapping = _ref.children, handleExited = _ref.handleExited, firstRender = _ref.firstRender;
    return {
      children: firstRender ? getInitialChildMapping(nextProps, handleExited) : getNextChildMapping(nextProps, prevChildMapping, handleExited),
      firstRender: false
    };
  };
  _proto.handleExited = function handleExited(child, node) {
    var currentChildMapping = getChildMapping(this.props.children);
    if (child.key in currentChildMapping) return;
    if (child.props.onExited) {
      child.props.onExited(node);
    }
    if (this.mounted) {
      this.setState(function(state) {
        var children2 = _extends({}, state.children);
        delete children2[child.key];
        return {
          children: children2
        };
      });
    }
  };
  _proto.render = function render() {
    var _this$props = this.props, Component2 = _this$props.component, childFactory2 = _this$props.childFactory, props = _objectWithoutPropertiesLoose(_this$props, ["component", "childFactory"]);
    var contextValue = this.state.contextValue;
    var children2 = values(this.state.children).map(childFactory2);
    delete props.appear;
    delete props.enter;
    delete props.exit;
    if (Component2 === null) {
      return import_react14.default.createElement(TransitionGroupContext_default.Provider, {
        value: contextValue
      }, children2);
    }
    return import_react14.default.createElement(TransitionGroupContext_default.Provider, {
      value: contextValue
    }, import_react14.default.createElement(Component2, props, children2));
  };
  return TransitionGroup2;
}(import_react14.default.Component);
TransitionGroup.propTypes = true ? {
  /**
   * `<TransitionGroup>` renders a `<div>` by default. You can change this
   * behavior by providing a `component` prop.
   * If you use React v16+ and would like to avoid a wrapping `<div>` element
   * you can pass in `component={null}`. This is useful if the wrapping div
   * borks your css styles.
   */
  component: import_prop_types4.default.any,
  /**
   * A set of `<Transition>` components, that are toggled `in` and out as they
   * leave. the `<TransitionGroup>` will inject specific transition props, so
   * remember to spread them through if you are wrapping the `<Transition>` as
   * with our `<Fade>` example.
   *
   * While this component is meant for multiple `Transition` or `CSSTransition`
   * children, sometimes you may want to have a single transition child with
   * content that you want to be transitioned out and in when you change it
   * (e.g. routes, images etc.) In that case you can change the `key` prop of
   * the transition child as you change its content, this will cause
   * `TransitionGroup` to transition the child out and back in.
   */
  children: import_prop_types4.default.node,
  /**
   * A convenience prop that enables or disables appear animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  appear: import_prop_types4.default.bool,
  /**
   * A convenience prop that enables or disables enter animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  enter: import_prop_types4.default.bool,
  /**
   * A convenience prop that enables or disables exit animations
   * for all children. Note that specifying this will override any defaults set
   * on individual children Transitions.
   */
  exit: import_prop_types4.default.bool,
  /**
   * You may need to apply reactive updates to a child as it is exiting.
   * This is generally done by using `cloneElement` however in the case of an exiting
   * child the element has already been removed and not accessible to the consumer.
   *
   * If you do need to update a child as it leaves you can provide a `childFactory`
   * to wrap every child, even the ones that are leaving.
   *
   * @type Function(child: ReactElement) -> ReactElement
   */
  childFactory: import_prop_types4.default.func
} : {};
TransitionGroup.defaultProps = defaultProps;
var TransitionGroup_default = TransitionGroup;

// node_modules/react-transition-group/esm/ReplaceTransition.js
var ReplaceTransition = function(_React$Component) {
  _inheritsLoose(ReplaceTransition2, _React$Component);
  function ReplaceTransition2() {
    var _this;
    for (var _len = arguments.length, _args = new Array(_len), _key = 0; _key < _len; _key++) {
      _args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(_args)) || this;
    _this.handleEnter = function() {
      for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
        args[_key2] = arguments[_key2];
      }
      return _this.handleLifecycle("onEnter", 0, args);
    };
    _this.handleEntering = function() {
      for (var _len3 = arguments.length, args = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
        args[_key3] = arguments[_key3];
      }
      return _this.handleLifecycle("onEntering", 0, args);
    };
    _this.handleEntered = function() {
      for (var _len4 = arguments.length, args = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {
        args[_key4] = arguments[_key4];
      }
      return _this.handleLifecycle("onEntered", 0, args);
    };
    _this.handleExit = function() {
      for (var _len5 = arguments.length, args = new Array(_len5), _key5 = 0; _key5 < _len5; _key5++) {
        args[_key5] = arguments[_key5];
      }
      return _this.handleLifecycle("onExit", 1, args);
    };
    _this.handleExiting = function() {
      for (var _len6 = arguments.length, args = new Array(_len6), _key6 = 0; _key6 < _len6; _key6++) {
        args[_key6] = arguments[_key6];
      }
      return _this.handleLifecycle("onExiting", 1, args);
    };
    _this.handleExited = function() {
      for (var _len7 = arguments.length, args = new Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
        args[_key7] = arguments[_key7];
      }
      return _this.handleLifecycle("onExited", 1, args);
    };
    return _this;
  }
  var _proto = ReplaceTransition2.prototype;
  _proto.handleLifecycle = function handleLifecycle(handler, idx, originalArgs) {
    var _child$props;
    var children2 = this.props.children;
    var child = import_react15.default.Children.toArray(children2)[idx];
    if (child.props[handler]) (_child$props = child.props)[handler].apply(_child$props, originalArgs);
    if (this.props[handler]) {
      var maybeNode = child.props.nodeRef ? void 0 : import_react_dom2.default.findDOMNode(this);
      this.props[handler](maybeNode);
    }
  };
  _proto.render = function render() {
    var _this$props = this.props, children2 = _this$props.children, inProp = _this$props.in, props = _objectWithoutPropertiesLoose(_this$props, ["children", "in"]);
    var _React$Children$toArr = import_react15.default.Children.toArray(children2), first = _React$Children$toArr[0], second = _React$Children$toArr[1];
    delete props.onEnter;
    delete props.onEntering;
    delete props.onEntered;
    delete props.onExit;
    delete props.onExiting;
    delete props.onExited;
    return import_react15.default.createElement(TransitionGroup_default, props, inProp ? import_react15.default.cloneElement(first, {
      key: "first",
      onEnter: this.handleEnter,
      onEntering: this.handleEntering,
      onEntered: this.handleEntered
    }) : import_react15.default.cloneElement(second, {
      key: "second",
      onEnter: this.handleExit,
      onEntering: this.handleExiting,
      onEntered: this.handleExited
    }));
  };
  return ReplaceTransition2;
}(import_react15.default.Component);
ReplaceTransition.propTypes = true ? {
  in: import_prop_types5.default.bool.isRequired,
  children: function children(props, propName) {
    if (import_react15.default.Children.count(props[propName]) !== 2) return new Error('"' + propName + '" must be exactly two transition components.');
    return null;
  }
} : {};

// node_modules/react-transition-group/esm/SwitchTransition.js
var import_react16 = __toESM(require_react());
var import_prop_types6 = __toESM(require_prop_types());
var _leaveRenders;
var _enterRenders;
function areChildrenDifferent(oldChildren, newChildren) {
  if (oldChildren === newChildren) return false;
  if (import_react16.default.isValidElement(oldChildren) && import_react16.default.isValidElement(newChildren) && oldChildren.key != null && oldChildren.key === newChildren.key) {
    return false;
  }
  return true;
}
var modes = {
  out: "out-in",
  in: "in-out"
};
var callHook = function callHook2(element, name, cb) {
  return function() {
    var _element$props;
    element.props[name] && (_element$props = element.props)[name].apply(_element$props, arguments);
    cb();
  };
};
var leaveRenders = (_leaveRenders = {}, _leaveRenders[modes.out] = function(_ref) {
  var current = _ref.current, changeState = _ref.changeState;
  return import_react16.default.cloneElement(current, {
    in: false,
    onExited: callHook(current, "onExited", function() {
      changeState(ENTERING, null);
    })
  });
}, _leaveRenders[modes.in] = function(_ref2) {
  var current = _ref2.current, changeState = _ref2.changeState, children2 = _ref2.children;
  return [current, import_react16.default.cloneElement(children2, {
    in: true,
    onEntered: callHook(children2, "onEntered", function() {
      changeState(ENTERING);
    })
  })];
}, _leaveRenders);
var enterRenders = (_enterRenders = {}, _enterRenders[modes.out] = function(_ref3) {
  var children2 = _ref3.children, changeState = _ref3.changeState;
  return import_react16.default.cloneElement(children2, {
    in: true,
    onEntered: callHook(children2, "onEntered", function() {
      changeState(ENTERED, import_react16.default.cloneElement(children2, {
        in: true
      }));
    })
  });
}, _enterRenders[modes.in] = function(_ref4) {
  var current = _ref4.current, children2 = _ref4.children, changeState = _ref4.changeState;
  return [import_react16.default.cloneElement(current, {
    in: false,
    onExited: callHook(current, "onExited", function() {
      changeState(ENTERED, import_react16.default.cloneElement(children2, {
        in: true
      }));
    })
  }), import_react16.default.cloneElement(children2, {
    in: true
  })];
}, _enterRenders);
var SwitchTransition = function(_React$Component) {
  _inheritsLoose(SwitchTransition2, _React$Component);
  function SwitchTransition2() {
    var _this;
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;
    _this.state = {
      status: ENTERED,
      current: null
    };
    _this.appeared = false;
    _this.changeState = function(status, current) {
      if (current === void 0) {
        current = _this.state.current;
      }
      _this.setState({
        status,
        current
      });
    };
    return _this;
  }
  var _proto = SwitchTransition2.prototype;
  _proto.componentDidMount = function componentDidMount() {
    this.appeared = true;
  };
  SwitchTransition2.getDerivedStateFromProps = function getDerivedStateFromProps(props, state) {
    if (props.children == null) {
      return {
        current: null
      };
    }
    if (state.status === ENTERING && props.mode === modes.in) {
      return {
        status: ENTERING
      };
    }
    if (state.current && areChildrenDifferent(state.current, props.children)) {
      return {
        status: EXITING
      };
    }
    return {
      current: import_react16.default.cloneElement(props.children, {
        in: true
      })
    };
  };
  _proto.render = function render() {
    var _this$props = this.props, children2 = _this$props.children, mode = _this$props.mode, _this$state = this.state, status = _this$state.status, current = _this$state.current;
    var data2 = {
      children: children2,
      current,
      changeState: this.changeState,
      status
    };
    var component;
    switch (status) {
      case ENTERING:
        component = enterRenders[mode](data2);
        break;
      case EXITING:
        component = leaveRenders[mode](data2);
        break;
      case ENTERED:
        component = current;
    }
    return import_react16.default.createElement(TransitionGroupContext_default.Provider, {
      value: {
        isMounting: !this.appeared
      }
    }, component);
  };
  return SwitchTransition2;
}(import_react16.default.Component);
SwitchTransition.propTypes = true ? {
  /**
   * Transition modes.
   * `out-in`: Current element transitions out first, then when complete, the new element transitions in.
   * `in-out`: New element transitions in first, then when complete, the current element transitions out.
   *
   * @type {'out-in'|'in-out'}
   */
  mode: import_prop_types6.default.oneOf([modes.in, modes.out]),
  /**
   * Any `Transition` or `CSSTransition` component.
   */
  children: import_prop_types6.default.oneOfType([import_prop_types6.default.element.isRequired])
} : {};
SwitchTransition.defaultProps = {
  mode: modes.out
};

// node_modules/@mantine/notifications/esm/get-grouped-notifications/get-grouped-notifications.mjs
var positions = [
  "bottom-center",
  "bottom-left",
  "bottom-right",
  "top-center",
  "top-left",
  "top-right"
];
function getGroupedNotifications(notifications2, defaultPosition) {
  return notifications2.reduce(
    (acc, notification) => {
      acc[notification.position || defaultPosition].push(notification);
      return acc;
    },
    positions.reduce((acc, item) => {
      acc[item] = [];
      return acc;
    }, {})
  );
}

// node_modules/@mantine/notifications/esm/get-notification-state-styles.mjs
var transforms = {
  left: "translateX(-100%)",
  right: "translateX(100%)",
  "top-center": "translateY(-100%)",
  "bottom-center": "translateY(100%)"
};
var noTransform = {
  left: "translateX(0)",
  right: "translateX(0)",
  "top-center": "translateY(0)",
  "bottom-center": "translateY(0)"
};
function getNotificationStateStyles({
  state,
  maxHeight,
  position,
  transitionDuration
}) {
  const [vertical, horizontal] = position.split("-");
  const property = horizontal === "center" ? `${vertical}-center` : horizontal;
  const commonStyles = {
    opacity: 0,
    maxHeight,
    transform: transforms[property],
    transitionDuration: `${transitionDuration}ms, ${transitionDuration}ms, ${transitionDuration}ms`,
    transitionTimingFunction: "cubic-bezier(.51,.3,0,1.21), cubic-bezier(.51,.3,0,1.21), linear",
    transitionProperty: "opacity, transform, max-height"
  };
  const inState = {
    opacity: 1,
    transform: noTransform[property]
  };
  const outState = {
    opacity: 0,
    maxHeight: 0,
    transform: transforms[property]
  };
  const transitionStyles = {
    entering: inState,
    entered: inState,
    exiting: outState,
    exited: outState
  };
  return { ...commonStyles, ...transitionStyles[state] };
}

// node_modules/@mantine/notifications/esm/NotificationContainer.mjs
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var import_react17 = __toESM(require_react(), 1);

// node_modules/@mantine/notifications/esm/get-auto-close/get-auto-close.mjs
function getAutoClose(autoClose, notificationAutoClose) {
  if (typeof notificationAutoClose === "number") {
    return notificationAutoClose;
  }
  if (notificationAutoClose === false || autoClose === false) {
    return false;
  }
  return autoClose;
}

// node_modules/@mantine/notifications/esm/NotificationContainer.mjs
var NotificationContainer = (0, import_react17.forwardRef)(
  ({ data: data2, onHide, autoClose, ...others }, ref) => {
    const { autoClose: _autoClose, message, ...notificationProps } = data2;
    const autoCloseDuration = getAutoClose(autoClose, data2.autoClose);
    const autoCloseTimeout = (0, import_react17.useRef)();
    const cancelAutoClose = () => window.clearTimeout(autoCloseTimeout.current);
    const handleHide = () => {
      onHide(data2.id);
      cancelAutoClose();
    };
    const handleAutoClose = () => {
      if (typeof autoCloseDuration === "number") {
        autoCloseTimeout.current = window.setTimeout(handleHide, autoCloseDuration);
      }
    };
    (0, import_react17.useEffect)(() => {
      var _a;
      (_a = data2.onOpen) == null ? void 0 : _a.call(data2, data2);
    }, []);
    (0, import_react17.useEffect)(() => {
      handleAutoClose();
      return cancelAutoClose;
    }, [autoCloseDuration]);
    return (0, import_jsx_runtime2.jsx)(
      Notification,
      {
        ...others,
        ...notificationProps,
        onClose: handleHide,
        ref,
        onMouseEnter: cancelAutoClose,
        onMouseLeave: handleAutoClose,
        children: message
      }
    );
  }
);
NotificationContainer.displayName = "@mantine/notifications/NotificationContainer";

// node_modules/@mantine/notifications/esm/Notifications.module.css.mjs
var classes = { "root": "m_b37d9ac7", "notification": "m_5ed0edd0" };

// node_modules/@mantine/notifications/esm/Notifications.mjs
var Transition2 = Transition_default;
var defaultProps2 = {
  position: "bottom-right",
  autoClose: 4e3,
  transitionDuration: 250,
  containerWidth: 440,
  notificationMaxHeight: 200,
  limit: 5,
  zIndex: getDefaultZIndex("overlay"),
  store: notificationsStore,
  withinPortal: true
};
var varsResolver = createVarsResolver((_2, { zIndex, containerWidth }) => ({
  root: {
    "--notifications-z-index": zIndex == null ? void 0 : zIndex.toString(),
    "--notifications-container-width": rem(containerWidth)
  }
}));
var Notifications = factory((_props, ref) => {
  const props = useProps("Notifications", defaultProps2, _props);
  const {
    classNames,
    className,
    style,
    styles,
    unstyled,
    vars,
    position,
    autoClose,
    transitionDuration,
    containerWidth,
    notificationMaxHeight,
    limit,
    zIndex,
    store,
    portalProps,
    withinPortal,
    ...others
  } = props;
  const theme = useMantineTheme();
  const data2 = useNotifications(store);
  const forceUpdate = useForceUpdate();
  const shouldReduceMotion = useReducedMotion();
  const refs = (0, import_react18.useRef)({});
  const previousLength = (0, import_react18.useRef)(0);
  const reduceMotion = theme.respectReducedMotion ? shouldReduceMotion : false;
  const duration = reduceMotion ? 1 : transitionDuration;
  const getStyles = useStyles({
    name: "Notifications",
    classes,
    props,
    className,
    style,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver
  });
  (0, import_react18.useEffect)(() => {
    store == null ? void 0 : store.updateState((current) => ({
      ...current,
      limit: limit || 5,
      defaultPosition: position
    }));
  }, [limit, position]);
  useDidUpdate(() => {
    if (data2.notifications.length > previousLength.current) {
      setTimeout(() => forceUpdate(), 0);
    }
    previousLength.current = data2.notifications.length;
  }, [data2.notifications]);
  const grouped = getGroupedNotifications(data2.notifications, position);
  const groupedComponents = positions.reduce(
    (acc, pos) => {
      acc[pos] = grouped[pos].map(({ style: notificationStyle, ...notification }) => (0, import_jsx_runtime3.jsx)(
        Transition2,
        {
          timeout: duration,
          onEnter: () => refs.current[notification.id].offsetHeight,
          nodeRef: { current: refs.current[notification.id] },
          children: (state) => (0, import_jsx_runtime3.jsx)(
            NotificationContainer,
            {
              ref: (node) => {
                refs.current[notification.id] = node;
              },
              data: notification,
              onHide: (id) => hideNotification(id, store),
              autoClose,
              ...getStyles("notification", {
                style: {
                  ...getNotificationStateStyles({
                    state,
                    position: pos,
                    transitionDuration: duration,
                    maxHeight: notificationMaxHeight
                  }),
                  ...notificationStyle
                }
              })
            }
          )
        },
        notification.id
      ));
      return acc;
    },
    {}
  );
  return (0, import_jsx_runtime3.jsxs)(OptionalPortal, { withinPortal, ...portalProps, children: [
    (0, import_jsx_runtime3.jsx)(Box, { ...getStyles("root"), "data-position": "top-center", ref, ...others, children: (0, import_jsx_runtime3.jsx)(TransitionGroup_default, { children: groupedComponents["top-center"] }) }),
    (0, import_jsx_runtime3.jsx)(Box, { ...getStyles("root"), "data-position": "top-left", ...others, children: (0, import_jsx_runtime3.jsx)(TransitionGroup_default, { children: groupedComponents["top-left"] }) }),
    (0, import_jsx_runtime3.jsx)(
      Box,
      {
        ...getStyles("root", { className: Combination_default.classNames.fullWidth }),
        "data-position": "top-right",
        ...others,
        children: (0, import_jsx_runtime3.jsx)(TransitionGroup_default, { children: groupedComponents["top-right"] })
      }
    ),
    (0, import_jsx_runtime3.jsx)(
      Box,
      {
        ...getStyles("root", { className: Combination_default.classNames.fullWidth }),
        "data-position": "bottom-right",
        ...others,
        children: (0, import_jsx_runtime3.jsx)(TransitionGroup_default, { children: groupedComponents["bottom-right"] })
      }
    ),
    (0, import_jsx_runtime3.jsx)(Box, { ...getStyles("root"), "data-position": "bottom-left", ...others, children: (0, import_jsx_runtime3.jsx)(TransitionGroup_default, { children: groupedComponents["bottom-left"] }) }),
    (0, import_jsx_runtime3.jsx)(Box, { ...getStyles("root"), "data-position": "bottom-center", ...others, children: (0, import_jsx_runtime3.jsx)(TransitionGroup_default, { children: groupedComponents["bottom-center"] }) })
  ] });
});
Notifications.classes = classes;
Notifications.displayName = "@mantine/notifications/Notifications";
Notifications.show = notifications.show;
Notifications.hide = notifications.hide;
Notifications.update = notifications.update;
Notifications.clean = notifications.clean;
Notifications.cleanQueue = notifications.cleanQueue;
Notifications.updateState = notifications.updateState;

// node_modules/@medplum/react/dist/esm/index.mjs
var import_react22 = __toESM(require_react(), 1);
var import_react23 = __toESM(require_react(), 1);
var import_react24 = __toESM(require_react(), 1);
var import_jsx_runtime7 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime8 = __toESM(require_jsx_runtime(), 1);
var import_react25 = __toESM(require_react(), 1);
var import_jsx_runtime9 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime10 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime11 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime12 = __toESM(require_jsx_runtime(), 1);
var import_react26 = __toESM(require_react(), 1);
var import_react27 = __toESM(require_react(), 1);
var import_jsx_runtime13 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime14 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime15 = __toESM(require_jsx_runtime(), 1);
var import_react28 = __toESM(require_react(), 1);
var import_jsx_runtime16 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime17 = __toESM(require_jsx_runtime(), 1);
var import_react29 = __toESM(require_react(), 1);
var import_react30 = __toESM(require_react(), 1);
var import_react31 = __toESM(require_react(), 1);
var import_jsx_runtime18 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime19 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime20 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime21 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime22 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime23 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime24 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime25 = __toESM(require_jsx_runtime(), 1);
var import_react32 = __toESM(require_react(), 1);
var import_react33 = __toESM(require_react(), 1);
var import_jsx_runtime26 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime27 = __toESM(require_jsx_runtime(), 1);
var import_react34 = __toESM(require_react(), 1);
var import_jsx_runtime28 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime29 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime30 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime31 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime32 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime33 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime34 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime35 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime36 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime37 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime38 = __toESM(require_jsx_runtime(), 1);
var import_react35 = __toESM(require_react(), 1);
var import_react36 = __toESM(require_react(), 1);
var import_jsx_runtime39 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime40 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime41 = __toESM(require_jsx_runtime(), 1);
var import_react37 = __toESM(require_react(), 1);
var import_jsx_runtime42 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime43 = __toESM(require_jsx_runtime(), 1);
var import_react38 = __toESM(require_react(), 1);
var import_jsx_runtime44 = __toESM(require_jsx_runtime(), 1);
var import_react39 = __toESM(require_react(), 1);
var import_react40 = __toESM(require_react(), 1);
var import_react41 = __toESM(require_react(), 1);
var import_jsx_runtime45 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime46 = __toESM(require_jsx_runtime(), 1);
var import_react42 = __toESM(require_react(), 1);
var import_jsx_runtime47 = __toESM(require_jsx_runtime(), 1);
var import_react43 = __toESM(require_react(), 1);
var import_react44 = __toESM(require_react(), 1);
var import_jsx_runtime48 = __toESM(require_jsx_runtime(), 1);
var import_react45 = __toESM(require_react(), 1);
var import_jsx_runtime49 = __toESM(require_jsx_runtime(), 1);
var import_react46 = __toESM(require_react(), 1);
var import_react47 = __toESM(require_react(), 1);
var import_jsx_runtime50 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime51 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime52 = __toESM(require_jsx_runtime(), 1);
var import_react48 = __toESM(require_react(), 1);
var import_jsx_runtime53 = __toESM(require_jsx_runtime(), 1);
var import_react49 = __toESM(require_react(), 1);
var import_jsx_runtime54 = __toESM(require_jsx_runtime(), 1);
var import_react50 = __toESM(require_react(), 1);
var import_jsx_runtime55 = __toESM(require_jsx_runtime(), 1);
var import_react51 = __toESM(require_react(), 1);
var import_jsx_runtime56 = __toESM(require_jsx_runtime(), 1);
var import_react52 = __toESM(require_react(), 1);
var import_jsx_runtime57 = __toESM(require_jsx_runtime(), 1);
var import_react53 = __toESM(require_react(), 1);
var import_jsx_runtime58 = __toESM(require_jsx_runtime(), 1);
var import_react54 = __toESM(require_react(), 1);
var import_jsx_runtime59 = __toESM(require_jsx_runtime(), 1);
var import_react55 = __toESM(require_react(), 1);
var import_jsx_runtime60 = __toESM(require_jsx_runtime(), 1);
var import_react56 = __toESM(require_react(), 1);
var import_react57 = __toESM(require_react(), 1);
var import_jsx_runtime61 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime62 = __toESM(require_jsx_runtime(), 1);
var import_react58 = __toESM(require_react(), 1);
var import_react59 = __toESM(require_react(), 1);
var import_jsx_runtime63 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime64 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime65 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime66 = __toESM(require_jsx_runtime(), 1);
var import_react60 = __toESM(require_react(), 1);
var import_jsx_runtime67 = __toESM(require_jsx_runtime(), 1);
var import_react61 = __toESM(require_react(), 1);
var import_jsx_runtime68 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime69 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime70 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime71 = __toESM(require_jsx_runtime(), 1);
var import_react62 = __toESM(require_react(), 1);
var import_jsx_runtime72 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime73 = __toESM(require_jsx_runtime(), 1);
var import_react63 = __toESM(require_react(), 1);
var import_react64 = __toESM(require_react(), 1);
var import_jsx_runtime74 = __toESM(require_jsx_runtime(), 1);
var import_react65 = __toESM(require_react(), 1);
var import_jsx_runtime75 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime76 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime77 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime78 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime79 = __toESM(require_jsx_runtime(), 1);
var import_react66 = __toESM(require_react(), 1);
var import_jsx_runtime80 = __toESM(require_jsx_runtime(), 1);
var import_react67 = __toESM(require_react(), 1);
var import_jsx_runtime81 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime82 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime83 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime84 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime85 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime86 = __toESM(require_jsx_runtime(), 1);
var import_react68 = __toESM(require_react(), 1);
var import_jsx_runtime87 = __toESM(require_jsx_runtime(), 1);
var import_react69 = __toESM(require_react(), 1);
var import_jsx_runtime88 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime89 = __toESM(require_jsx_runtime(), 1);
var import_react70 = __toESM(require_react(), 1);
var import_jsx_runtime90 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime91 = __toESM(require_jsx_runtime(), 1);
var import_react71 = __toESM(require_react(), 1);
var import_jsx_runtime92 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime93 = __toESM(require_jsx_runtime(), 1);
var import_react72 = __toESM(require_react(), 1);
var import_jsx_runtime94 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime95 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime96 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime97 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime98 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime99 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime100 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime101 = __toESM(require_jsx_runtime(), 1);
var import_react73 = __toESM(require_react(), 1);
var import_jsx_runtime102 = __toESM(require_jsx_runtime(), 1);
var import_react74 = __toESM(require_react(), 1);
var import_react75 = __toESM(require_react(), 1);
var import_react76 = __toESM(require_react(), 1);
var import_jsx_runtime103 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime104 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime105 = __toESM(require_jsx_runtime(), 1);
var import_react77 = __toESM(require_react(), 1);
var import_react78 = __toESM(require_react(), 1);
var import_jsx_runtime106 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime107 = __toESM(require_jsx_runtime(), 1);
var import_react79 = __toESM(require_react(), 1);
var import_react80 = __toESM(require_react(), 1);
var import_jsx_runtime108 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime109 = __toESM(require_jsx_runtime(), 1);
var import_react81 = __toESM(require_react(), 1);
var import_jsx_runtime110 = __toESM(require_jsx_runtime(), 1);
var import_react82 = __toESM(require_react(), 1);
var import_jsx_runtime111 = __toESM(require_jsx_runtime(), 1);
var import_react83 = __toESM(require_react(), 1);
var import_jsx_runtime112 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime113 = __toESM(require_jsx_runtime(), 1);
var import_react84 = __toESM(require_react(), 1);
var import_jsx_runtime114 = __toESM(require_jsx_runtime(), 1);
var import_react85 = __toESM(require_react(), 1);
var import_jsx_runtime115 = __toESM(require_jsx_runtime(), 1);
var import_react86 = __toESM(require_react(), 1);
var import_react87 = __toESM(require_react(), 1);
var import_react88 = __toESM(require_react(), 1);
var import_jsx_runtime116 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime117 = __toESM(require_jsx_runtime(), 1);
var import_react89 = __toESM(require_react(), 1);
var import_react90 = __toESM(require_react(), 1);
var import_jsx_runtime118 = __toESM(require_jsx_runtime(), 1);
var import_react91 = __toESM(require_react(), 1);
var import_jsx_runtime119 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime120 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime121 = __toESM(require_jsx_runtime(), 1);
var import_react92 = __toESM(require_react(), 1);
var import_jsx_runtime122 = __toESM(require_jsx_runtime(), 1);
var import_react93 = __toESM(require_react(), 1);
var import_jsx_runtime123 = __toESM(require_jsx_runtime(), 1);
var import_react94 = __toESM(require_react(), 1);
var import_jsx_runtime124 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime125 = __toESM(require_jsx_runtime(), 1);
var import_react95 = __toESM(require_react(), 1);
var import_jsx_runtime126 = __toESM(require_jsx_runtime(), 1);
var import_react96 = __toESM(require_react(), 1);
var import_jsx_runtime127 = __toESM(require_jsx_runtime(), 1);
var import_react97 = __toESM(require_react(), 1);
var import_jsx_runtime128 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime129 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime130 = __toESM(require_jsx_runtime(), 1);
var import_react98 = __toESM(require_react(), 1);
var import_react99 = __toESM(require_react(), 1);
var import_jsx_runtime131 = __toESM(require_jsx_runtime(), 1);
var import_react100 = __toESM(require_react(), 1);
var import_react101 = __toESM(require_react(), 1);
var import_jsx_runtime132 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime133 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime134 = __toESM(require_jsx_runtime(), 1);
var import_react102 = __toESM(require_react(), 1);
var import_react103 = __toESM(require_react(), 1);
var import_jsx_runtime135 = __toESM(require_jsx_runtime(), 1);
var import_react104 = __toESM(require_react(), 1);
var import_jsx_runtime136 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime137 = __toESM(require_jsx_runtime(), 1);
var import_react105 = __toESM(require_react(), 1);
var import_jsx_runtime138 = __toESM(require_jsx_runtime(), 1);
var import_jsx_runtime139 = __toESM(require_jsx_runtime(), 1);
var import_react106 = __toESM(require_react(), 1);
var import_jsx_runtime140 = __toESM(require_jsx_runtime(), 1);
var import_react107 = __toESM(require_react(), 1);
var import_jsx_runtime141 = __toESM(require_jsx_runtime(), 1);
var import_react108 = __toESM(require_react(), 1);
var import_jsx_runtime142 = __toESM(require_jsx_runtime(), 1);
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS2 = (cb, mod) => function() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from == "object" || typeof from == "function") for (let key of __getOwnPropNames(from)) !__hasOwnProp.call(to, key) && key !== except && __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  return to;
};
var __toESM2 = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var require_pointer = __commonJS2({ "../../node_modules/rfc6902/pointer.js"(exports) {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.Pointer = exports.escapeToken = exports.unescapeToken = void 0;
  function unescapeToken(token) {
    return token.replace(/~1/g, "/").replace(/~0/g, "~");
  }
  exports.unescapeToken = unescapeToken;
  function escapeToken(token) {
    return token.replace(/~/g, "~0").replace(/\//g, "~1");
  }
  exports.escapeToken = escapeToken;
  var Pointer = function() {
    function Pointer2(tokens) {
      tokens === void 0 && (tokens = [""]), this.tokens = tokens;
    }
    return Pointer2.fromJSON = function(path) {
      var tokens = path.split("/").map(unescapeToken);
      if (tokens[0] !== "") throw new Error("Invalid JSON Pointer: ".concat(path));
      return new Pointer2(tokens);
    }, Pointer2.prototype.toString = function() {
      return this.tokens.map(escapeToken).join("/");
    }, Pointer2.prototype.evaluate = function(object) {
      for (var parent = null, key = "", value = object, i = 1, l2 = this.tokens.length; i < l2; i++) parent = value, key = this.tokens[i], !(key == "__proto__" || key == "constructor" || key == "prototype") && (value = (parent || {})[key]);
      return { parent, key, value };
    }, Pointer2.prototype.get = function(object) {
      return this.evaluate(object).value;
    }, Pointer2.prototype.set = function(object, value) {
      var endpoint = this.evaluate(object);
      endpoint.parent && (endpoint.parent[endpoint.key] = value);
    }, Pointer2.prototype.push = function(token) {
      this.tokens.push(token);
    }, Pointer2.prototype.add = function(token) {
      var tokens = this.tokens.concat(String(token));
      return new Pointer2(tokens);
    }, Pointer2;
  }();
  exports.Pointer = Pointer;
} });
var require_util = __commonJS2({ "../../node_modules/rfc6902/util.js"(exports) {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.clone = exports.objectType = exports.hasOwnProperty = void 0;
  exports.hasOwnProperty = Object.prototype.hasOwnProperty;
  function objectType(object) {
    return object === void 0 ? "undefined" : object === null ? "null" : Array.isArray(object) ? "array" : typeof object;
  }
  exports.objectType = objectType;
  function isNonPrimitive(value) {
    return value != null && typeof value == "object";
  }
  function clone(source) {
    if (!isNonPrimitive(source)) return source;
    if (source.constructor == Array) {
      for (var length_1 = source.length, arrayTarget = new Array(length_1), i = 0; i < length_1; i++) arrayTarget[i] = clone(source[i]);
      return arrayTarget;
    }
    if (source.constructor == Date) {
      var dateTarget = /* @__PURE__ */ new Date(+source);
      return dateTarget;
    }
    var objectTarget = {};
    for (var key in source) exports.hasOwnProperty.call(source, key) && (objectTarget[key] = clone(source[key]));
    return objectTarget;
  }
  exports.clone = clone;
} });
var require_diff = __commonJS2({ "../../node_modules/rfc6902/diff.js"(exports) {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.diffAny = exports.diffObjects = exports.diffArrays = exports.intersection = exports.subtract = exports.isDestructive = void 0;
  var util_1 = require_util();
  function isDestructive(_a) {
    var op = _a.op;
    return op === "remove" || op === "replace" || op === "copy" || op === "move";
  }
  exports.isDestructive = isDestructive;
  function subtract(minuend, subtrahend) {
    var obj = {};
    for (var add_key in minuend) util_1.hasOwnProperty.call(minuend, add_key) && minuend[add_key] !== void 0 && (obj[add_key] = 1);
    for (var del_key in subtrahend) util_1.hasOwnProperty.call(subtrahend, del_key) && subtrahend[del_key] !== void 0 && delete obj[del_key];
    return Object.keys(obj);
  }
  exports.subtract = subtract;
  function intersection(objects) {
    for (var length = objects.length, counter = {}, i = 0; i < length; i++) {
      var object = objects[i];
      for (var key in object) util_1.hasOwnProperty.call(object, key) && object[key] !== void 0 && (counter[key] = (counter[key] || 0) + 1);
    }
    for (var key in counter) counter[key] < length && delete counter[key];
    return Object.keys(counter);
  }
  exports.intersection = intersection;
  function isArrayAdd(array_operation) {
    return array_operation.op === "add";
  }
  function isArrayRemove(array_operation) {
    return array_operation.op === "remove";
  }
  function appendArrayOperation(base, operation) {
    return { operations: base.operations.concat(operation), cost: base.cost + 1 };
  }
  function diffArrays(input, output, ptr, diff2) {
    diff2 === void 0 && (diff2 = diffAny);
    var memo2 = { "0,0": { operations: [], cost: 0 } };
    function dist(i, j) {
      var memo_key = "".concat(i, ",").concat(j), memoized = memo2[memo_key];
      if (memoized === void 0) {
        if (i > 0 && j > 0 && !diff2(input[i - 1], output[j - 1], ptr.add(String(i - 1))).length) memoized = dist(i - 1, j - 1);
        else {
          var alternatives = [];
          if (i > 0) {
            var remove_base = dist(i - 1, j), remove_operation = { op: "remove", index: i - 1 };
            alternatives.push(appendArrayOperation(remove_base, remove_operation));
          }
          if (j > 0) {
            var add_base = dist(i, j - 1), add_operation = { op: "add", index: i - 1, value: output[j - 1] };
            alternatives.push(appendArrayOperation(add_base, add_operation));
          }
          if (i > 0 && j > 0) {
            var replace_base = dist(i - 1, j - 1), replace_operation = { op: "replace", index: i - 1, original: input[i - 1], value: output[j - 1] };
            alternatives.push(appendArrayOperation(replace_base, replace_operation));
          }
          var best = alternatives.sort(function(a, b2) {
            return a.cost - b2.cost;
          })[0];
          memoized = best;
        }
        memo2[memo_key] = memoized;
      }
      return memoized;
    }
    var input_length = isNaN(input.length) || input.length <= 0 ? 0 : input.length, output_length = isNaN(output.length) || output.length <= 0 ? 0 : output.length, array_operations = dist(input_length, output_length).operations, padded_operations = array_operations.reduce(function(_a, array_operation) {
      var operations = _a[0], padding = _a[1];
      if (isArrayAdd(array_operation)) {
        var padded_index = array_operation.index + 1 + padding, index_token = padded_index < input_length + padding ? String(padded_index) : "-", operation = { op: array_operation.op, path: ptr.add(index_token).toString(), value: array_operation.value };
        return [operations.concat(operation), padding + 1];
      } else if (isArrayRemove(array_operation)) {
        var operation = { op: array_operation.op, path: ptr.add(String(array_operation.index + padding)).toString() };
        return [operations.concat(operation), padding - 1];
      } else {
        var replace_ptr = ptr.add(String(array_operation.index + padding)), replace_operations = diff2(array_operation.original, array_operation.value, replace_ptr);
        return [operations.concat.apply(operations, replace_operations), padding];
      }
    }, [[], 0])[0];
    return padded_operations;
  }
  exports.diffArrays = diffArrays;
  function diffObjects(input, output, ptr, diff2) {
    diff2 === void 0 && (diff2 = diffAny);
    var operations = [];
    return subtract(input, output).forEach(function(key) {
      operations.push({ op: "remove", path: ptr.add(key).toString() });
    }), subtract(output, input).forEach(function(key) {
      operations.push({ op: "add", path: ptr.add(key).toString(), value: output[key] });
    }), intersection([input, output]).forEach(function(key) {
      operations.push.apply(operations, diff2(input[key], output[key], ptr.add(key)));
    }), operations;
  }
  exports.diffObjects = diffObjects;
  function diffAny(input, output, ptr, diff2) {
    if (diff2 === void 0 && (diff2 = diffAny), input === output) return [];
    var input_type = (0, util_1.objectType)(input), output_type = (0, util_1.objectType)(output);
    return input_type == "array" && output_type == "array" ? diffArrays(input, output, ptr, diff2) : input_type == "object" && output_type == "object" ? diffObjects(input, output, ptr, diff2) : [{ op: "replace", path: ptr.toString(), value: output }];
  }
  exports.diffAny = diffAny;
} });
var require_patch = __commonJS2({ "../../node_modules/rfc6902/patch.js"(exports) {
  "use strict";
  var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
    var extendStatics = function(d2, b2) {
      return extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d22, b22) {
        d22.__proto__ = b22;
      } || function(d22, b22) {
        for (var p in b22) Object.prototype.hasOwnProperty.call(b22, p) && (d22[p] = b22[p]);
      }, extendStatics(d2, b2);
    };
    return function(d2, b2) {
      if (typeof b2 != "function" && b2 !== null) throw new TypeError("Class extends value " + String(b2) + " is not a constructor or null");
      extendStatics(d2, b2);
      function __() {
        this.constructor = d2;
      }
      d2.prototype = b2 === null ? Object.create(b2) : (__.prototype = b2.prototype, new __());
    };
  }();
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.apply = exports.InvalidOperationError = exports.test = exports.copy = exports.move = exports.replace = exports.remove = exports.add = exports.TestError = exports.MissingError = void 0;
  var pointer_1 = require_pointer(), util_1 = require_util(), diff_1 = require_diff(), MissingError = function(_super) {
    __extends(MissingError2, _super);
    function MissingError2(path) {
      var _this = _super.call(this, "Value required at path: ".concat(path)) || this;
      return _this.path = path, _this.name = "MissingError", _this;
    }
    return MissingError2;
  }(Error);
  exports.MissingError = MissingError;
  var TestError = function(_super) {
    __extends(TestError2, _super);
    function TestError2(actual, expected) {
      var _this = _super.call(this, "Test failed: ".concat(actual, " != ").concat(expected)) || this;
      return _this.actual = actual, _this.expected = expected, _this.name = "TestError", _this;
    }
    return TestError2;
  }(Error);
  exports.TestError = TestError;
  function _add(object, key, value) {
    if (Array.isArray(object)) if (key == "-") object.push(value);
    else {
      var index = parseInt(key, 10);
      object.splice(index, 0, value);
    }
    else object[key] = value;
  }
  function _remove(object, key) {
    if (Array.isArray(object)) {
      var index = parseInt(key, 10);
      object.splice(index, 1);
    } else delete object[key];
  }
  function add(object, operation) {
    var endpoint = pointer_1.Pointer.fromJSON(operation.path).evaluate(object);
    return endpoint.parent === void 0 ? new MissingError(operation.path) : (_add(endpoint.parent, endpoint.key, (0, util_1.clone)(operation.value)), null);
  }
  exports.add = add;
  function remove(object, operation) {
    var endpoint = pointer_1.Pointer.fromJSON(operation.path).evaluate(object);
    return endpoint.value === void 0 ? new MissingError(operation.path) : (_remove(endpoint.parent, endpoint.key), null);
  }
  exports.remove = remove;
  function replace(object, operation) {
    var endpoint = pointer_1.Pointer.fromJSON(operation.path).evaluate(object);
    if (endpoint.parent === null) return new MissingError(operation.path);
    if (Array.isArray(endpoint.parent)) {
      if (parseInt(endpoint.key, 10) >= endpoint.parent.length) return new MissingError(operation.path);
    } else if (endpoint.value === void 0) return new MissingError(operation.path);
    return endpoint.parent[endpoint.key] = (0, util_1.clone)(operation.value), null;
  }
  exports.replace = replace;
  function move(object, operation) {
    var from_endpoint = pointer_1.Pointer.fromJSON(operation.from).evaluate(object);
    if (from_endpoint.value === void 0) return new MissingError(operation.from);
    var endpoint = pointer_1.Pointer.fromJSON(operation.path).evaluate(object);
    return endpoint.parent === void 0 ? new MissingError(operation.path) : (_remove(from_endpoint.parent, from_endpoint.key), _add(endpoint.parent, endpoint.key, from_endpoint.value), null);
  }
  exports.move = move;
  function copy(object, operation) {
    var from_endpoint = pointer_1.Pointer.fromJSON(operation.from).evaluate(object);
    if (from_endpoint.value === void 0) return new MissingError(operation.from);
    var endpoint = pointer_1.Pointer.fromJSON(operation.path).evaluate(object);
    return endpoint.parent === void 0 ? new MissingError(operation.path) : (_add(endpoint.parent, endpoint.key, (0, util_1.clone)(from_endpoint.value)), null);
  }
  exports.copy = copy;
  function test(object, operation) {
    var endpoint = pointer_1.Pointer.fromJSON(operation.path).evaluate(object);
    return (0, diff_1.diffAny)(endpoint.value, operation.value, new pointer_1.Pointer()).length ? new TestError(endpoint.value, operation.value) : null;
  }
  exports.test = test;
  var InvalidOperationError = function(_super) {
    __extends(InvalidOperationError2, _super);
    function InvalidOperationError2(operation) {
      var _this = _super.call(this, "Invalid operation: ".concat(operation.op)) || this;
      return _this.operation = operation, _this.name = "InvalidOperationError", _this;
    }
    return InvalidOperationError2;
  }(Error);
  exports.InvalidOperationError = InvalidOperationError;
  function apply(object, operation) {
    switch (operation.op) {
      case "add":
        return add(object, operation);
      case "remove":
        return remove(object, operation);
      case "replace":
        return replace(object, operation);
      case "move":
        return move(object, operation);
      case "copy":
        return copy(object, operation);
      case "test":
        return test(object, operation);
    }
    return new InvalidOperationError(operation);
  }
  exports.apply = apply;
} });
var require_rfc6902 = __commonJS2({ "../../node_modules/rfc6902/index.js"(exports) {
  "use strict";
  Object.defineProperty(exports, "__esModule", { value: true });
  exports.createTests = exports.createPatch = exports.applyPatch = exports.Pointer = void 0;
  var pointer_1 = require_pointer();
  Object.defineProperty(exports, "Pointer", { enumerable: true, get: function() {
    return pointer_1.Pointer;
  } });
  var patch_1 = require_patch(), diff_1 = require_diff();
  function applyPatch(object, patch) {
    return patch.map(function(operation) {
      return (0, patch_1.apply)(object, operation);
    });
  }
  exports.applyPatch = applyPatch;
  function wrapVoidableDiff(diff2) {
    function wrappedDiff(input, output, ptr) {
      var custom_patch = diff2(input, output, ptr);
      return Array.isArray(custom_patch) ? custom_patch : (0, diff_1.diffAny)(input, output, ptr, wrappedDiff);
    }
    return wrappedDiff;
  }
  function createPatch2(input, output, diff2) {
    var ptr = new pointer_1.Pointer();
    return (diff2 ? wrapVoidableDiff(diff2) : diff_1.diffAny)(input, output, ptr);
  }
  exports.createPatch = createPatch2;
  function createTest(input, path) {
    var endpoint = pointer_1.Pointer.fromJSON(path).evaluate(input);
    if (endpoint !== void 0) return { op: "test", path, value: endpoint.value };
  }
  function createTests(input, patch) {
    var tests = new Array();
    return patch.filter(diff_1.isDestructive).forEach(function(operation) {
      var pathTest = createTest(input, operation.path);
      if (pathTest && tests.push(pathTest), "from" in operation) {
        var fromTest = createTest(input, operation.from);
        fromTest && tests.push(fromTest);
      }
    }), tests;
  }
  exports.createTests = createTests;
} });
function AddressDisplay(props) {
  let address = props.value;
  return address ? (0, import_jsx_runtime4.jsx)(import_jsx_runtime4.Fragment, { children: ll(address) }) : null;
}
var DEFAULT_IGNORED_PROPERTIES = ["meta", "implicitRules", "contained", "extension", "modifierExtension"];
var DEFAULT_IGNORED_NON_NESTED_PROPERTIES = ["language", "text"];
var ElementsContext = (0, import_react20.createContext)({ path: "", profileUrl: void 0, elements: /* @__PURE__ */ Object.create(null), elementsByPath: /* @__PURE__ */ Object.create(null), getExtendedProps: () => ({ readonly: false, hidden: false }), accessPolicyResource: void 0, debugMode: false, isDefaultContext: true });
ElementsContext.displayName = "ElementsContext";
var EXTENSION_KEYS = ["extension", "modifierExtension"];
var IGNORED_PROPERTIES = ["id", ...DEFAULT_IGNORED_PROPERTIES].filter((prop) => !EXTENSION_KEYS.includes(prop));
function getElementsToRender(inputElements) {
  return Object.entries(inputElements).filter(([key, element]) => {
    var _a;
    return !K(element.type) || element.max === 0 || element.path.toLowerCase().endsWith("extension.url") && element.fixed || EXTENSION_KEYS.includes(key) && !K((_a = element.slicing) == null ? void 0 : _a.slices) || IGNORED_PROPERTIES.includes(key) ? false : !(DEFAULT_IGNORED_NON_NESTED_PROPERTIES.includes(key) && element.path.split(".").length === 2 || key.includes("."));
  });
}
function getLine(address, index) {
  return address.line && address.line.length > index ? address.line[index] : "";
}
function setLine(address, index, str) {
  let line = address.line || [];
  for (; line.length <= index; ) line.push("");
  return line[index] = str, { ...address, line };
}
function AddressInput(props) {
  let [value, setValue] = (0, import_react19.useState)(props.defaultValue || {}), valueRef = (0, import_react19.useRef)();
  valueRef.current = value;
  let { getExtendedProps } = (0, import_react19.useContext)(ElementsContext), [useProps2, typeProps, line1Props, line2Props, cityProps, stateProps, postalCodeProps] = (0, import_react19.useMemo)(() => ["use", "type", "line1", "line2", "city", "state", "postalCode"].map((field) => getExtendedProps(props.path + "." + field)), [getExtendedProps, props.path]);
  function setValueWrapper(newValue) {
    setValue(newValue), props.onChange && props.onChange(newValue);
  }
  function setUse(use) {
    setValueWrapper({ ...valueRef.current, use });
  }
  function setType(type) {
    setValueWrapper({ ...valueRef.current, type });
  }
  function setLine1(line1) {
    setValueWrapper(setLine(valueRef.current || {}, 0, line1));
  }
  function setLine2(line2) {
    setValueWrapper(setLine(valueRef.current || {}, 1, line2));
  }
  function setCity(city) {
    setValueWrapper({ ...valueRef.current, city });
  }
  function setState(state) {
    setValueWrapper({ ...valueRef.current, state });
  }
  function setPostalCode(postalCode) {
    setValueWrapper({ ...valueRef.current, postalCode });
  }
  return (0, import_jsx_runtime5.jsxs)(Group, { gap: "xs", wrap: "nowrap", grow: true, children: [(0, import_jsx_runtime5.jsx)(NativeSelect, { disabled: props.disabled || (useProps2 == null ? void 0 : useProps2.readonly), "data-testid": "address-use", defaultValue: value.use, onChange: (e) => setUse(e.currentTarget.value), data: ["", "home", "work", "temp", "old", "billing"] }), (0, import_jsx_runtime5.jsx)(NativeSelect, { disabled: props.disabled || (typeProps == null ? void 0 : typeProps.readonly), "data-testid": "address-type", defaultValue: value.type, onChange: (e) => setType(e.currentTarget.value), data: ["", "postal", "physical", "both"] }), (0, import_jsx_runtime5.jsx)(TextInput, { disabled: props.disabled || (line1Props == null ? void 0 : line1Props.readonly), placeholder: "Line 1", defaultValue: getLine(value, 0), onChange: (e) => setLine1(e.currentTarget.value) }), (0, import_jsx_runtime5.jsx)(TextInput, { disabled: props.disabled || (line2Props == null ? void 0 : line2Props.readonly), placeholder: "Line 2", defaultValue: getLine(value, 1), onChange: (e) => setLine2(e.currentTarget.value) }), (0, import_jsx_runtime5.jsx)(TextInput, { disabled: props.disabled || (cityProps == null ? void 0 : cityProps.readonly), placeholder: "City", defaultValue: value.city, onChange: (e) => setCity(e.currentTarget.value) }), (0, import_jsx_runtime5.jsx)(TextInput, { disabled: props.disabled || (stateProps == null ? void 0 : stateProps.readonly), placeholder: "State", defaultValue: value.state, onChange: (e) => setState(e.currentTarget.value) }), (0, import_jsx_runtime5.jsx)(TextInput, { disabled: props.disabled || (postalCodeProps == null ? void 0 : postalCodeProps.readonly), placeholder: "Postal Code", defaultValue: value.postalCode, onChange: (e) => setPostalCode(e.currentTarget.value) })] });
}
function AnnotationInput(props) {
  let author = me(), [value, setValue] = (0, import_react21.useState)(props.defaultValue || {});
  function setText(text) {
    let newValue = text ? { text, authorReference: author && te(author), time: (/* @__PURE__ */ new Date()).toISOString() } : {};
    setValue(newValue), props.onChange && props.onChange(newValue);
  }
  return (0, import_jsx_runtime6.jsx)(TextInput, { disabled: props.disabled, name: props.name, placeholder: "Annotation text", defaultValue: value.text, onChange: (e) => setText(e.currentTarget.value) });
}
var defaultAttributes = { outline: { xmlns: "http://www.w3.org/2000/svg", width: 24, height: 24, viewBox: "0 0 24 24", fill: "none", stroke: "currentColor", strokeWidth: 2, strokeLinecap: "round", strokeLinejoin: "round" }, filled: { xmlns: "http://www.w3.org/2000/svg", width: 24, height: 24, viewBox: "0 0 24 24", fill: "currentColor", stroke: "none" } };
var createReactComponent = (type, iconName, iconNamePascal, iconNode) => {
  let Component2 = (0, import_react23.forwardRef)(({ color = "currentColor", size = 24, stroke = 2, title, className, children: children2, ...rest }, ref) => (0, import_react23.createElement)("svg", { ref, ...defaultAttributes[type], width: size, height: size, className: ["tabler-icon", `tabler-icon-${iconName}`, className].join(" "), ...type === "filled" ? { fill: color } : { strokeWidth: stroke, stroke: color }, ...rest }, [title && (0, import_react23.createElement)("title", { key: "svg-title" }, title), ...iconNode.map(([tag, attrs]) => (0, import_react23.createElement)(tag, attrs)), ...Array.isArray(children2) ? children2 : [children2]]));
  return Component2.displayName = `${iconNamePascal}`, Component2;
};
var IconAdjustmentsHorizontal = createReactComponent("outline", "adjustments-horizontal", "IconAdjustmentsHorizontal", [["path", { d: "M14 6m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0", key: "svg-0" }], ["path", { d: "M4 6l8 0", key: "svg-1" }], ["path", { d: "M16 6l4 0", key: "svg-2" }], ["path", { d: "M8 12m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0", key: "svg-3" }], ["path", { d: "M4 12l2 0", key: "svg-4" }], ["path", { d: "M10 12l10 0", key: "svg-5" }], ["path", { d: "M17 18m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0", key: "svg-6" }], ["path", { d: "M4 18l11 0", key: "svg-7" }], ["path", { d: "M19 18l1 0", key: "svg-8" }]]);
var IconAlertCircle = createReactComponent("outline", "alert-circle", "IconAlertCircle", [["path", { d: "M3 12a9 9 0 1 0 18 0a9 9 0 0 0 -18 0", key: "svg-0" }], ["path", { d: "M12 8v4", key: "svg-1" }], ["path", { d: "M12 16h.01", key: "svg-2" }]]);
var IconArrowDown = createReactComponent("outline", "arrow-down", "IconArrowDown", [["path", { d: "M12 5l0 14", key: "svg-0" }], ["path", { d: "M18 13l-6 6", key: "svg-1" }], ["path", { d: "M6 13l6 6", key: "svg-2" }]]);
var IconArrowRight = createReactComponent("outline", "arrow-right", "IconArrowRight", [["path", { d: "M5 12l14 0", key: "svg-0" }], ["path", { d: "M13 18l6 -6", key: "svg-1" }], ["path", { d: "M13 6l6 6", key: "svg-2" }]]);
var IconArrowUp = createReactComponent("outline", "arrow-up", "IconArrowUp", [["path", { d: "M12 5l0 14", key: "svg-0" }], ["path", { d: "M18 11l-6 -6", key: "svg-1" }], ["path", { d: "M6 11l6 -6", key: "svg-2" }]]);
var IconBleachOff = createReactComponent("outline", "bleach-off", "IconBleachOff", [["path", { d: "M5 19h14m1.986 -1.977a2 2 0 0 0 -.146 -.773l-7.1 -12.25a2 2 0 0 0 -3.5 0l-.815 1.405m-1.488 2.568l-4.797 8.277a2 2 0 0 0 1.75 2.75", key: "svg-0" }], ["path", { d: "M3 3l18 18", key: "svg-1" }]]);
var IconBleach = createReactComponent("outline", "bleach", "IconBleach", [["path", { d: "M5 19h14a2 2 0 0 0 1.84 -2.75l-7.1 -12.25a2 2 0 0 0 -3.5 0l-7.1 12.25a2 2 0 0 0 1.75 2.75", key: "svg-0" }]]);
var IconBoxMultiple = createReactComponent("outline", "box-multiple", "IconBoxMultiple", [["path", { d: "M7 3m0 2a2 2 0 0 1 2 -2h10a2 2 0 0 1 2 2v10a2 2 0 0 1 -2 2h-10a2 2 0 0 1 -2 -2z", key: "svg-0" }], ["path", { d: "M17 17v2a2 2 0 0 1 -2 2h-10a2 2 0 0 1 -2 -2v-10a2 2 0 0 1 2 -2h2", key: "svg-1" }]]);
var IconBracketsContain = createReactComponent("outline", "brackets-contain", "IconBracketsContain", [["path", { d: "M7 4h-4v16h4", key: "svg-0" }], ["path", { d: "M17 4h4v16h-4", key: "svg-1" }], ["path", { d: "M8 16h.01", key: "svg-2" }], ["path", { d: "M12 16h.01", key: "svg-3" }], ["path", { d: "M16 16h.01", key: "svg-4" }]]);
var IconBucketOff = createReactComponent("outline", "bucket-off", "IconBucketOff", [["path", { d: "M5.029 5.036c-.655 .58 -1.029 1.25 -1.029 1.964c0 2.033 3.033 3.712 6.96 3.967m3.788 -.21c3.064 -.559 5.252 -2.029 5.252 -3.757c0 -2.21 -3.582 -4 -8 -4c-1.605 0 -3.1 .236 -4.352 .643", key: "svg-0" }], ["path", { d: "M4 7c0 .664 .088 1.324 .263 1.965l2.737 10.035c.5 1.5 2.239 2 5 2s4.5 -.5 5 -2c.1 -.3 .252 -.812 .457 -1.535m.862 -3.146c.262 -.975 .735 -2.76 1.418 -5.354a7.45 7.45 0 0 0 .263 -1.965", key: "svg-1" }], ["path", { d: "M3 3l18 18", key: "svg-2" }]]);
var IconBucket = createReactComponent("outline", "bucket", "IconBucket", [["path", { d: "M12 7m-8 0a8 4 0 1 0 16 0a8 4 0 1 0 -16 0", key: "svg-0" }], ["path", { d: "M4 7c0 .664 .088 1.324 .263 1.965l2.737 10.035c.5 1.5 2.239 2 5 2s4.5 -.5 5 -2c.333 -1 1.246 -4.345 2.737 -10.035a7.45 7.45 0 0 0 .263 -1.965", key: "svg-1" }]]);
var IconCalendar = createReactComponent("outline", "calendar", "IconCalendar", [["path", { d: "M4 7a2 2 0 0 1 2 -2h12a2 2 0 0 1 2 2v12a2 2 0 0 1 -2 2h-12a2 2 0 0 1 -2 -2v-12z", key: "svg-0" }], ["path", { d: "M16 3v4", key: "svg-1" }], ["path", { d: "M8 3v4", key: "svg-2" }], ["path", { d: "M4 11h16", key: "svg-3" }], ["path", { d: "M11 15h1", key: "svg-4" }], ["path", { d: "M12 15v3", key: "svg-5" }]]);
var IconCheck = createReactComponent("outline", "check", "IconCheck", [["path", { d: "M5 12l5 5l10 -10", key: "svg-0" }]]);
var IconCheckbox = createReactComponent("outline", "checkbox", "IconCheckbox", [["path", { d: "M9 11l3 3l8 -8", key: "svg-0" }], ["path", { d: "M20 12v6a2 2 0 0 1 -2 2h-12a2 2 0 0 1 -2 -2v-12a2 2 0 0 1 2 -2h9", key: "svg-1" }]]);
var IconChevronDown = createReactComponent("outline", "chevron-down", "IconChevronDown", [["path", { d: "M6 9l6 6l6 -6", key: "svg-0" }]]);
var IconChevronUp = createReactComponent("outline", "chevron-up", "IconChevronUp", [["path", { d: "M6 15l6 -6l6 6", key: "svg-0" }]]);
var IconCircleMinus = createReactComponent("outline", "circle-minus", "IconCircleMinus", [["path", { d: "M12 12m-9 0a9 9 0 1 0 18 0a9 9 0 1 0 -18 0", key: "svg-0" }], ["path", { d: "M9 12l6 0", key: "svg-1" }]]);
var IconCirclePlus = createReactComponent("outline", "circle-plus", "IconCirclePlus", [["path", { d: "M3 12a9 9 0 1 0 18 0a9 9 0 0 0 -18 0", key: "svg-0" }], ["path", { d: "M9 12h6", key: "svg-1" }], ["path", { d: "M12 9v6", key: "svg-2" }]]);
var IconCloudUpload = createReactComponent("outline", "cloud-upload", "IconCloudUpload", [["path", { d: "M7 18a4.6 4.4 0 0 1 0 -9a5 4.5 0 0 1 11 2h1a3.5 3.5 0 0 1 0 7h-1", key: "svg-0" }], ["path", { d: "M9 15l3 -3l3 3", key: "svg-1" }], ["path", { d: "M12 12l0 9", key: "svg-2" }]]);
var IconColumns = createReactComponent("outline", "columns", "IconColumns", [["path", { d: "M4 6l5.5 0", key: "svg-0" }], ["path", { d: "M4 10l5.5 0", key: "svg-1" }], ["path", { d: "M4 14l5.5 0", key: "svg-2" }], ["path", { d: "M4 18l5.5 0", key: "svg-3" }], ["path", { d: "M14.5 6l5.5 0", key: "svg-4" }], ["path", { d: "M14.5 10l5.5 0", key: "svg-5" }], ["path", { d: "M14.5 14l5.5 0", key: "svg-6" }], ["path", { d: "M14.5 18l5.5 0", key: "svg-7" }]]);
var IconCopy = createReactComponent("outline", "copy", "IconCopy", [["path", { d: "M7 7m0 2.667a2.667 2.667 0 0 1 2.667 -2.667h8.666a2.667 2.667 0 0 1 2.667 2.667v8.666a2.667 2.667 0 0 1 -2.667 2.667h-8.666a2.667 2.667 0 0 1 -2.667 -2.667z", key: "svg-0" }], ["path", { d: "M4.012 16.737a2.005 2.005 0 0 1 -1.012 -1.737v-10c0 -1.1 .9 -2 2 -2h10c.75 0 1.158 .385 1.5 1", key: "svg-1" }]]);
var IconCurrencyDollar = createReactComponent("outline", "currency-dollar", "IconCurrencyDollar", [["path", { d: "M16.7 8a3 3 0 0 0 -2.7 -2h-4a3 3 0 0 0 0 6h4a3 3 0 0 1 0 6h-4a3 3 0 0 1 -2.7 -2", key: "svg-0" }], ["path", { d: "M12 3v3m0 12v3", key: "svg-1" }]]);
var IconDots = createReactComponent("outline", "dots", "IconDots", [["path", { d: "M5 12m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0", key: "svg-0" }], ["path", { d: "M12 12m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0", key: "svg-1" }], ["path", { d: "M19 12m-1 0a1 1 0 1 0 2 0a1 1 0 1 0 -2 0", key: "svg-2" }]]);
var IconEdit = createReactComponent("outline", "edit", "IconEdit", [["path", { d: "M7 7h-1a2 2 0 0 0 -2 2v9a2 2 0 0 0 2 2h9a2 2 0 0 0 2 -2v-1", key: "svg-0" }], ["path", { d: "M20.385 6.585a2.1 2.1 0 0 0 -2.97 -2.97l-8.415 8.385v3h3l8.385 -8.415z", key: "svg-1" }], ["path", { d: "M16 5l3 3", key: "svg-2" }]]);
var IconEqualNot = createReactComponent("outline", "equal-not", "IconEqualNot", [["path", { d: "M5 10h14", key: "svg-0" }], ["path", { d: "M5 14h14", key: "svg-1" }], ["path", { d: "M5 19l14 -14", key: "svg-2" }]]);
var IconEqual = createReactComponent("outline", "equal", "IconEqual", [["path", { d: "M5 10h14", key: "svg-0" }], ["path", { d: "M5 14h14", key: "svg-1" }]]);
var IconFileAlert = createReactComponent("outline", "file-alert", "IconFileAlert", [["path", { d: "M14 3v4a1 1 0 0 0 1 1h4", key: "svg-0" }], ["path", { d: "M17 21h-10a2 2 0 0 1 -2 -2v-14a2 2 0 0 1 2 -2h7l5 5v11a2 2 0 0 1 -2 2z", key: "svg-1" }], ["path", { d: "M12 17l.01 0", key: "svg-2" }], ["path", { d: "M12 11l0 3", key: "svg-3" }]]);
var IconFilePlus = createReactComponent("outline", "file-plus", "IconFilePlus", [["path", { d: "M14 3v4a1 1 0 0 0 1 1h4", key: "svg-0" }], ["path", { d: "M17 21h-10a2 2 0 0 1 -2 -2v-14a2 2 0 0 1 2 -2h7l5 5v11a2 2 0 0 1 -2 2z", key: "svg-1" }], ["path", { d: "M12 11l0 6", key: "svg-2" }], ["path", { d: "M9 14l6 0", key: "svg-3" }]]);
var IconFilter = createReactComponent("outline", "filter", "IconFilter", [["path", { d: "M4 4h16v2.172a2 2 0 0 1 -.586 1.414l-4.414 4.414v7l-6 2v-8.5l-4.48 -4.928a2 2 0 0 1 -.52 -1.345v-2.227z", key: "svg-0" }]]);
var IconGenderFemale = createReactComponent("outline", "gender-female", "IconGenderFemale", [["path", { d: "M12 9m-5 0a5 5 0 1 0 10 0a5 5 0 1 0 -10 0", key: "svg-0" }], ["path", { d: "M12 14v7", key: "svg-1" }], ["path", { d: "M9 18h6", key: "svg-2" }]]);
var IconGenderMale = createReactComponent("outline", "gender-male", "IconGenderMale", [["path", { d: "M10 14m-5 0a5 5 0 1 0 10 0a5 5 0 1 0 -10 0", key: "svg-0" }], ["path", { d: "M19 5l-5.4 5.4", key: "svg-1" }], ["path", { d: "M19 5h-5", key: "svg-2" }], ["path", { d: "M19 5v5", key: "svg-3" }]]);
var IconLogout = createReactComponent("outline", "logout", "IconLogout", [["path", { d: "M14 8v-2a2 2 0 0 0 -2 -2h-7a2 2 0 0 0 -2 2v12a2 2 0 0 0 2 2h7a2 2 0 0 0 2 -2v-2", key: "svg-0" }], ["path", { d: "M9 12h12l-3 -3", key: "svg-1" }], ["path", { d: "M18 15l3 -3", key: "svg-2" }]]);
var IconMathGreater = createReactComponent("outline", "math-greater", "IconMathGreater", [["path", { d: "M5 18l14 -6l-14 -6", key: "svg-0" }]]);
var IconMathLower = createReactComponent("outline", "math-lower", "IconMathLower", [["path", { d: "M19 18l-14 -6l14 -6", key: "svg-0" }]]);
var IconMessage = createReactComponent("outline", "message", "IconMessage", [["path", { d: "M8 9h8", key: "svg-0" }], ["path", { d: "M8 13h6", key: "svg-1" }], ["path", { d: "M18 4a3 3 0 0 1 3 3v8a3 3 0 0 1 -3 3h-5l-5 3v-3h-2a3 3 0 0 1 -3 -3v-8a3 3 0 0 1 3 -3h12z", key: "svg-2" }]]);
var IconPlus = createReactComponent("outline", "plus", "IconPlus", [["path", { d: "M12 5l0 14", key: "svg-0" }], ["path", { d: "M5 12l14 0", key: "svg-1" }]]);
var IconRefresh = createReactComponent("outline", "refresh", "IconRefresh", [["path", { d: "M20 11a8.1 8.1 0 0 0 -15.5 -2m-.5 -4v4h4", key: "svg-0" }], ["path", { d: "M4 13a8.1 8.1 0 0 0 15.5 2m.5 4v-4h-4", key: "svg-1" }]]);
var IconSearch = createReactComponent("outline", "search", "IconSearch", [["path", { d: "M10 10m-7 0a7 7 0 1 0 14 0a7 7 0 1 0 -14 0", key: "svg-0" }], ["path", { d: "M21 21l-6 -6", key: "svg-1" }]]);
var IconSettings = createReactComponent("outline", "settings", "IconSettings", [["path", { d: "M10.325 4.317c.426 -1.756 2.924 -1.756 3.35 0a1.724 1.724 0 0 0 2.573 1.066c1.543 -.94 3.31 .826 2.37 2.37a1.724 1.724 0 0 0 1.065 2.572c1.756 .426 1.756 2.924 0 3.35a1.724 1.724 0 0 0 -1.066 2.573c.94 1.543 -.826 3.31 -2.37 2.37a1.724 1.724 0 0 0 -2.572 1.065c-.426 1.756 -2.924 1.756 -3.35 0a1.724 1.724 0 0 0 -2.573 -1.066c-1.543 .94 -3.31 -.826 -2.37 -2.37a1.724 1.724 0 0 0 -1.065 -2.572c-1.756 -.426 -1.756 -2.924 0 -3.35a1.724 1.724 0 0 0 1.066 -2.573c-.94 -1.543 .826 -3.31 2.37 -2.37c1 .608 2.296 .07 2.572 -1.065z", key: "svg-0" }], ["path", { d: "M9 12a3 3 0 1 0 6 0a3 3 0 0 0 -6 0", key: "svg-1" }]]);
var IconSortAscending = createReactComponent("outline", "sort-ascending", "IconSortAscending", [["path", { d: "M4 6l7 0", key: "svg-0" }], ["path", { d: "M4 12l7 0", key: "svg-1" }], ["path", { d: "M4 18l9 0", key: "svg-2" }], ["path", { d: "M15 9l3 -3l3 3", key: "svg-3" }], ["path", { d: "M18 6l0 12", key: "svg-4" }]]);
var IconSortDescending = createReactComponent("outline", "sort-descending", "IconSortDescending", [["path", { d: "M4 6l9 0", key: "svg-0" }], ["path", { d: "M4 12l7 0", key: "svg-1" }], ["path", { d: "M4 18l7 0", key: "svg-2" }], ["path", { d: "M15 15l3 3l3 -3", key: "svg-3" }], ["path", { d: "M18 6l0 12", key: "svg-4" }]]);
var IconSquare = createReactComponent("outline", "square", "IconSquare", [["path", { d: "M3 3m0 2a2 2 0 0 1 2 -2h14a2 2 0 0 1 2 2v14a2 2 0 0 1 -2 2h-14a2 2 0 0 1 -2 -2z", key: "svg-0" }]]);
var IconStethoscope = createReactComponent("outline", "stethoscope", "IconStethoscope", [["path", { d: "M6 4h-1a2 2 0 0 0 -2 2v3.5h0a5.5 5.5 0 0 0 11 0v-3.5a2 2 0 0 0 -2 -2h-1", key: "svg-0" }], ["path", { d: "M8 15a6 6 0 1 0 12 0v-3", key: "svg-1" }], ["path", { d: "M11 3v2", key: "svg-2" }], ["path", { d: "M6 3v2", key: "svg-3" }], ["path", { d: "M20 10m-2 0a2 2 0 1 0 4 0a2 2 0 1 0 -4 0", key: "svg-4" }]]);
var IconSwitchHorizontal = createReactComponent("outline", "switch-horizontal", "IconSwitchHorizontal", [["path", { d: "M16 3l4 4l-4 4", key: "svg-0" }], ["path", { d: "M10 7l10 0", key: "svg-1" }], ["path", { d: "M8 13l-4 4l4 4", key: "svg-2" }], ["path", { d: "M4 17l9 0", key: "svg-3" }]]);
var IconTableExport = createReactComponent("outline", "table-export", "IconTableExport", [["path", { d: "M12.5 21h-7.5a2 2 0 0 1 -2 -2v-14a2 2 0 0 1 2 -2h14a2 2 0 0 1 2 2v7.5", key: "svg-0" }], ["path", { d: "M3 10h18", key: "svg-1" }], ["path", { d: "M10 3v18", key: "svg-2" }], ["path", { d: "M16 19h6", key: "svg-3" }], ["path", { d: "M19 16l3 3l-3 3", key: "svg-4" }]]);
var IconTrash = createReactComponent("outline", "trash", "IconTrash", [["path", { d: "M4 7l16 0", key: "svg-0" }], ["path", { d: "M10 11l0 6", key: "svg-1" }], ["path", { d: "M14 11l0 6", key: "svg-2" }], ["path", { d: "M5 7l1 12a2 2 0 0 0 2 2h8a2 2 0 0 0 2 -2l1 -12", key: "svg-3" }], ["path", { d: "M9 7v-3a1 1 0 0 1 1 -1h4a1 1 0 0 1 1 1v3", key: "svg-4" }]]);
var IconUserSquare = createReactComponent("outline", "user-square", "IconUserSquare", [["path", { d: "M9 10a3 3 0 1 0 6 0a3 3 0 0 0 -6 0", key: "svg-0" }], ["path", { d: "M6 21v-1a4 4 0 0 1 4 -4h4a4 4 0 0 1 4 4v1", key: "svg-1" }], ["path", { d: "M3 5a2 2 0 0 1 2 -2h14a2 2 0 0 1 2 2v14a2 2 0 0 1 -2 2h-14a2 2 0 0 1 -2 -2v-14z", key: "svg-2" }]]);
var IconX = createReactComponent("outline", "x", "IconX", [["path", { d: "M18 6l-12 12", key: "svg-0" }], ["path", { d: "M6 6l12 12", key: "svg-1" }]]);
var ErrorBoundary = class extends import_react24.Component {
  constructor(props) {
    super(props), this.state = { lastLocation: window.location.toString() };
  }
  static getDerivedStateFromError(error) {
    return { error, lastLocation: window.location.toString() };
  }
  componentDidUpdate(_prevProps, _prevState) {
    window.location.toString() !== this.state.lastLocation && this.setState({ lastLocation: window.location.toString(), error: void 0 });
  }
  shouldComponentUpdate(nextProps, nextState) {
    return !!(this.props.children !== nextProps.children || nextState.error && !this.state.error || this.state.lastLocation !== window.location.toString());
  }
  componentDidCatch(error, errorInfo) {
    console.error("Uncaught error:", error, errorInfo);
  }
  render() {
    return this.state.error ? (0, import_jsx_runtime7.jsx)(Alert, { icon: (0, import_jsx_runtime7.jsx)(IconAlertCircle, { size: 16 }), title: "Something went wrong", color: "red", children: Ne(this.state.error) }) : this.props.children;
  }
};
function Loading() {
  return (0, import_jsx_runtime8.jsx)(Center, { style: { width: "100%", height: "100vh" }, children: (0, import_jsx_runtime8.jsx)(Loader, {}) });
}
var AppShell_default = { main: "AppShell_main" };
function r(e) {
  var t, f, n = "";
  if (typeof e == "string" || typeof e == "number") n += e;
  else if (typeof e == "object") if (Array.isArray(e)) {
    var o = e.length;
    for (t = 0; t < o; t++) e[t] && (f = r(e[t])) && (n && (n += " "), n += f);
  } else for (f in e) e[f] && (n && (n += " "), n += f);
  return n;
}
function clsx() {
  for (var e, t, f = 0, n = "", o = arguments.length; f < o; f++) (e = arguments[f]) && (t = r(e)) && (n && (n += " "), n += t);
  return n;
}
var clsx_default = clsx;
function killEvent(e) {
  e.preventDefault(), e.stopPropagation();
}
function isCheckboxCell(el) {
  if (isCheckboxElement(el)) return true;
  if (el instanceof HTMLTableCellElement) {
    let children2 = el.children;
    if (children2.length === 1 && isCheckboxElement(children2[0])) return true;
  }
  return false;
}
function isCheckboxElement(el) {
  return el instanceof HTMLInputElement && el.type === "checkbox";
}
function MedplumLink(props) {
  let navigate = fe2(), { to, suffix, label, onClick, children: children2, ...rest } = props, href = getHref(to);
  return suffix && (href += "/" + suffix), (0, import_jsx_runtime9.jsx)(Anchor, { href, "aria-label": label, onClick: (e) => {
    killEvent(e), onClick ? onClick(e) : to && navigate(href);
  }, ...rest, children: children2 });
}
function getHref(to) {
  if (to) {
    if (typeof to == "string") return getStringHref(to);
    if (I(to)) return getResourceHref(to);
    if (ue(to)) return getReferenceHref(to);
  }
  return "#";
}
function getStringHref(to) {
  return to.startsWith("http://") || to.startsWith("https://") || to.startsWith("/") ? to : "/" + to;
}
function getResourceHref(to) {
  return `/${to.resourceType}/${to.id}`;
}
function getReferenceHref(to) {
  return `/${to.reference}`;
}
function getInitials(input) {
  let words = input.split(" ").filter(Boolean);
  return words.length > 1 ? words[0][0] + words[words.length - 1][0] : words.length === 1 ? words[0][0] : "";
}
function ResourceAvatar(props) {
  let resource = Ue(props.value), text = resource ? Eo(resource) : props.alt ?? "", initials = getInitials(text), uncachedImageUrl = (resource && Bu(resource)) ?? props.src, imageUrl = Oe(uncachedImageUrl ?? void 0), radius = props.radius ?? "xl", avatarProps = { ...props, value: void 0, link: void 0 };
  return props.link ? (0, import_jsx_runtime10.jsx)(MedplumLink, { to: resource, children: (0, import_jsx_runtime10.jsx)(Avatar, { src: imageUrl, alt: text, radius, ...avatarProps, children: initials }) }) : (0, import_jsx_runtime10.jsx)(Avatar, { src: imageUrl, alt: text, radius, ...avatarProps, children: initials });
}
var Header_default = { logoButton: "Header_logoButton", user: "Header_user", userName: "Header_userName", userActive: "Header_userActive" };
function HumanNameDisplay(props) {
  let name = props.value;
  return name ? (0, import_jsx_runtime11.jsx)(import_jsx_runtime11.Fragment, { children: lt(name, props.options) }) : null;
}
function HeaderDropdown(props) {
  var _a, _b, _c;
  let context = P2(), { medplum, profile, navigate } = context, logins = medplum.getLogins(), { colorScheme, setColorScheme } = useMantineColorScheme();
  return (0, import_jsx_runtime12.jsxs)(import_jsx_runtime12.Fragment, { children: [(0, import_jsx_runtime12.jsxs)(Stack, { align: "center", p: "xl", children: [(0, import_jsx_runtime12.jsx)(ResourceAvatar, { size: "xl", radius: 100, value: context.profile }), (0, import_jsx_runtime12.jsx)(HumanNameDisplay, { value: (_b = (_a = context.profile) == null ? void 0 : _a.name) == null ? void 0 : _b[0] }), (0, import_jsx_runtime12.jsx)(Text, { c: "dimmed", size: "xs", children: (_c = medplum.getActiveLogin()) == null ? void 0 : _c.project.display })] }), logins.length > 1 && (0, import_jsx_runtime12.jsx)(Menu.Divider, {}), logins.map((login) => login.profile.reference !== le(context.profile) && (0, import_jsx_runtime12.jsx)(Menu.Item, { onClick: () => {
    medplum.setActiveLogin(login).then(() => window.location.reload()).catch(console.log);
  }, children: (0, import_jsx_runtime12.jsxs)(Group, { children: [(0, import_jsx_runtime12.jsx)(Avatar, { radius: "xl" }), (0, import_jsx_runtime12.jsxs)("div", { style: { flex: 1 }, children: [(0, import_jsx_runtime12.jsx)(Text, { size: "sm", fw: 500, children: login.profile.display }), (0, import_jsx_runtime12.jsx)(Text, { c: "dimmed", size: "xs", children: login.project.display })] })] }) }, login.profile.reference)), (0, import_jsx_runtime12.jsx)(Menu.Divider, {}), (0, import_jsx_runtime12.jsx)(Group, { justify: "center", children: (0, import_jsx_runtime12.jsx)(SegmentedControl, { size: "xs", value: colorScheme, onChange: (newValue) => setColorScheme(newValue), data: [{ label: "Light", value: "light" }, { label: "Dark", value: "dark" }, { label: "Auto", value: "auto" }] }) }), (0, import_jsx_runtime12.jsx)(Menu.Divider, {}), (0, import_jsx_runtime12.jsx)(Menu.Item, { leftSection: (0, import_jsx_runtime12.jsx)(IconSwitchHorizontal, { size: 14, stroke: 1.5 }), onClick: () => navigate("/signin"), children: "Add another account" }), (0, import_jsx_runtime12.jsx)(Menu.Item, { leftSection: (0, import_jsx_runtime12.jsx)(IconSettings, { size: 14, stroke: 1.5 }), onClick: () => navigate(`/${le(profile)}`), children: "Account settings" }), (0, import_jsx_runtime12.jsx)(Menu.Item, { leftSection: (0, import_jsx_runtime12.jsx)(IconLogout, { size: 14, stroke: 1.5 }), onClick: async () => {
    await medplum.signOut(), navigate("/signin");
  }, children: "Sign out" }), (0, import_jsx_runtime12.jsx)(Text, { size: "xs", c: "dimmed", ta: "center", children: props.version })] });
}
var AsyncAutocompleteTestIds = { selectedItems: "selected-items", options: "options" };
function AsyncAutocomplete(props) {
  let combobox = useCombobox({ onDropdownClose: () => combobox.resetSelectedOption(), onDropdownOpen: () => combobox.updateSelectedOptionIndex("active") }), { name, label, description, error, defaultValue: defaultValue2, toOption: toOption4, loadOptions, itemComponent, pillComponent, emptyComponent, onChange, onCreate, creatable, clearable, required, placeholder, leftSection, maxValues, optionsDropdownMaxHeight = 320, minInputLength = 0, ...rest } = props, disabled = rest.disabled, defaultItems = toDefaultItems(defaultValue2), [search, setSearch] = (0, import_react27.useState)(""), [timer, setTimer] = (0, import_react27.useState)(), [abortController, setAbortController] = (0, import_react27.useState)(), [autoSubmit, setAutoSubmit] = (0, import_react27.useState)(), [selected, setSelected] = (0, import_react27.useState)(defaultItems.map(toOption4)), [options, setOptions] = (0, import_react27.useState)([]), ItemComponent3 = itemComponent ?? DefaultItemComponent, PillComponent = pillComponent ?? DefaultPillComponent, EmptyComponent = emptyComponent ?? DefaultEmptyComponent, searchRef = (0, import_react27.useRef)();
  searchRef.current = search;
  let lastLoadOptionsRef = (0, import_react27.useRef)(), lastValueRef = (0, import_react27.useRef)(), timerRef = (0, import_react27.useRef)();
  timerRef.current = timer;
  let abortControllerRef = (0, import_react27.useRef)();
  abortControllerRef.current = abortController;
  let autoSubmitRef = (0, import_react27.useRef)();
  autoSubmitRef.current = autoSubmit;
  let optionsRef = (0, import_react27.useRef)();
  optionsRef.current = options;
  let handleTimer = (0, import_react27.useCallback)(() => {
    var _a;
    if (setTimer(void 0), searchRef.current === lastValueRef.current && loadOptions === lastLoadOptionsRef.current || (((_a = searchRef.current) == null ? void 0 : _a.length) ?? 0) < minInputLength) return;
    lastValueRef.current = searchRef.current, lastLoadOptionsRef.current = loadOptions;
    let newAbortController = new AbortController();
    setAbortController(newAbortController), loadOptions(searchRef.current ?? "", newAbortController.signal).then((newValues) => {
      newAbortController.signal.aborted || (setOptions(newValues.map(toOption4)), autoSubmitRef.current ? (newValues.length > 0 && onChange(newValues.slice(0, 1)), setAutoSubmit(false)) : newValues.length > 0 && combobox.openDropdown());
    }).catch((err) => {
      newAbortController.signal.aborted || err.message.includes("aborted") || showNotification({ color: "red", message: Ne(err) });
    }).finally(() => {
      newAbortController.signal.aborted || setAbortController(void 0);
    });
  }, [combobox, loadOptions, onChange, toOption4, minInputLength]), handleSearchChange = (0, import_react27.useCallback)((e) => {
    (options && options.length > 0 || creatable) && combobox.openDropdown(), combobox.updateSelectedOptionIndex(), setSearch(e.currentTarget.value), abortControllerRef.current && (abortControllerRef.current.abort(), setAbortController(void 0)), timerRef.current !== void 0 && window.clearTimeout(timerRef.current);
    let newTimer = window.setTimeout(() => handleTimer(), 100);
    setTimer(newTimer);
  }, [combobox, options, creatable, handleTimer]), addSelected = (0, import_react27.useCallback)((newValue) => {
    let alreadySelected = selected.some((v2) => v2.value === newValue), newSelected = alreadySelected ? selected.filter((v2) => v2.value !== newValue) : [...selected], option = options == null ? void 0 : options.find((option2) => option2.value === newValue);
    if (!option && creatable !== false && onCreate) {
      let createdResource = onCreate(newValue);
      option = toOption4(createdResource);
    }
    if (option) {
      if (maxValues === 0) {
        onChange([option.resource]), selected.length > 0 && setSelected([]);
        return;
      }
      alreadySelected || newSelected.push(option);
    }
    if (maxValues !== void 0) for (; newSelected.length > maxValues; ) newSelected.shift();
    onChange(newSelected.map((v2) => v2.resource)), setSelected(newSelected);
  }, [creatable, options, selected, maxValues, onChange, onCreate, toOption4]), handleValueSelect = (0, import_react27.useMemo)(() => {
    if (!disabled) return (val) => {
      disabled || (maxValues === 1 && (setSearch(""), setOptions([]), combobox.closeDropdown()), lastValueRef.current = void 0, addSelected(val === "$create" ? search : val));
    };
  }, [addSelected, combobox, disabled, maxValues, search]), handleValueRemove = (0, import_react27.useCallback)((item) => {
    let newSelected = selected.filter((v2) => v2.value !== item.value);
    onChange(newSelected.map((v2) => v2.resource)), setSelected(newSelected);
  }, [selected, onChange]), handleKeyDown = (0, import_react27.useCallback)((e) => {
    e.key === "Enter" ? (timer || abortController) && setAutoSubmit(true) : e.key === "Backspace" && search.length === 0 && (killEvent(e), handleValueRemove(selected[selected.length - 1]));
  }, [abortController, handleValueRemove, search.length, selected, timer]);
  (0, import_react27.useEffect)(() => () => {
    abortControllerRef.current && abortControllerRef.current.abort();
  }, []);
  let clearButton = !disabled && clearable && selected.length > 0 && (0, import_jsx_runtime13.jsx)(Combobox.ClearButton, { title: "Clear all", size: 16, onClear: () => {
    setSearch(""), setSelected([]), onChange([]), combobox.closeDropdown();
  } });
  return (0, import_jsx_runtime13.jsxs)(Combobox, { store: combobox, onOptionSubmit: handleValueSelect, withinPortal: true, shadow: "xl", ...rest, children: [(0, import_jsx_runtime13.jsx)(Combobox.DropdownTarget, { children: (0, import_jsx_runtime13.jsx)(PillsInput, { label, description, error, className: props.className, leftSection, rightSection: abortController ? (0, import_jsx_runtime13.jsx)(Loader, { size: 16 }) : clearButton, required, disabled, children: (0, import_jsx_runtime13.jsxs)(Pill.Group, { "data-testid": AsyncAutocompleteTestIds.selectedItems, children: [selected.map((item) => (0, import_jsx_runtime13.jsx)(PillComponent, { item, disabled, onRemove: () => handleValueRemove(item) }, item.value)), !disabled && (maxValues === void 0 || maxValues === 0 || selected.length < maxValues) && (0, import_jsx_runtime13.jsx)(Combobox.EventsTarget, { children: (0, import_jsx_runtime13.jsx)(PillsInput.Field, { role: "searchbox", name, value: search, placeholder, onFocus: handleSearchChange, onBlur: () => {
    combobox.closeDropdown(), setSearch("");
  }, onKeyDown: handleKeyDown, onChange: handleSearchChange }) })] }) }) }), (0, import_jsx_runtime13.jsx)(Combobox.Dropdown, { hidden: options.length === 0, "data-testid": AsyncAutocompleteTestIds.options, children: (0, import_jsx_runtime13.jsx)(Combobox.Options, { children: (0, import_jsx_runtime13.jsxs)(ScrollAreaAutosize, { type: "scroll", mah: optionsDropdownMaxHeight, children: [options.map((item) => {
    let active = selected.some((v2) => v2.value === item.value);
    return (0, import_jsx_runtime13.jsx)(Combobox.Option, { value: item.value, active, children: (0, import_jsx_runtime13.jsx)(ItemComponent3, { ...item, active }) }, item.value);
  }), creatable && search.trim().length > 0 && (0, import_jsx_runtime13.jsxs)(Combobox.Option, { value: "$create", children: ["+ Create ", search] }), !creatable && search.trim().length > 0 && options.length === 0 && (0, import_jsx_runtime13.jsx)(EmptyComponent, { search })] }) }) })] });
}
function toDefaultItems(defaultValue2) {
  return defaultValue2 ? Array.isArray(defaultValue2) ? defaultValue2 : [defaultValue2] : [];
}
function DefaultItemComponent(props) {
  return (0, import_jsx_runtime13.jsxs)(Group, { gap: "xs", children: [props.active && (0, import_jsx_runtime13.jsx)(IconCheck, { size: 12 }), (0, import_jsx_runtime13.jsx)("span", { children: props.label })] });
}
function DefaultPillComponent({ item, disabled, onRemove }) {
  return (0, import_jsx_runtime13.jsx)(Pill, { withRemoveButton: !disabled, onRemove, children: item.label });
}
function DefaultEmptyComponent() {
  return (0, import_jsx_runtime13.jsx)(Combobox.Empty, { children: "Nothing found" });
}
var HeaderSearchInput_default = { searchInput: "HeaderSearchInput_searchInput" };
function toOption(resource) {
  return { value: resource.id, label: Eo(resource), resource };
}
function HeaderSearchInput(props) {
  let navigate = fe2(), medplum = b(), loadData = (0, import_react26.useCallback)(async (input, signal) => {
    let query = buildGraphQLQuery(input), options = { signal }, response = await medplum.graphql(query, void 0, void 0, options);
    return getResourcesFromResponse(response, input);
  }, [medplum]), handleSelect = (0, import_react26.useCallback)((item) => {
    item.length > 0 && navigate(`/${le(item[0])}`);
  }, [navigate]);
  return (0, import_jsx_runtime14.jsx)(AsyncAutocomplete, { size: "sm", radius: "md", className: HeaderSearchInput_default.searchInput, leftSection: (0, import_jsx_runtime14.jsx)(IconSearch, { size: 16 }), placeholder: "Search", itemComponent: ItemComponent, toOption, onChange: handleSelect, loadOptions: loadData, maxValues: 0, clearable: false }, `${props.pathname}?${props.searchParams}`);
}
var ItemComponent = (0, import_react26.forwardRef)(({ resource, active: _active, ...others }, ref) => {
  var _a;
  let helpText;
  return resource.resourceType === "Patient" ? helpText = resource.birthDate : resource.resourceType === "ServiceRequest" && (helpText = (_a = resource.subject) == null ? void 0 : _a.display), (0, import_jsx_runtime14.jsx)("div", { ref, ...others, children: (0, import_jsx_runtime14.jsxs)(Group, { wrap: "nowrap", children: [(0, import_jsx_runtime14.jsx)(ResourceAvatar, { value: resource }), (0, import_jsx_runtime14.jsxs)("div", { children: [(0, import_jsx_runtime14.jsx)(Text, { children: Eo(resource) }), (0, import_jsx_runtime14.jsx)(Text, { size: "xs", c: "dimmed", children: helpText })] })] }) });
});
function buildGraphQLQuery(input) {
  let escaped = JSON.stringify(input);
  return Qu(input) ? `{
      Patients1: PatientList(_id: ${escaped}, _count: 1) {
        resourceType
        id
        identifier {
          system
          value
        }
        name {
          given
          family
        }
        birthDate
      }
      ServiceRequestList(_id: ${escaped}, _count: 1) {
        resourceType
        id
        identifier {
          system
          value
        }
        subject {
          display
        }
      }
    }`.replace(/\s+/g, " ") : `{
    Patients1: PatientList(name: ${escaped}, _count: 5) {
      resourceType
      id
      identifier {
        system
        value
      }
      name {
        given
        family
      }
      birthDate
    }
    Patients2: PatientList(identifier: ${escaped}, _count: 5) {
      resourceType
      id
      identifier {
        system
        value
      }
      name {
        given
        family
      }
      birthDate
    }
    ServiceRequestList(identifier: ${escaped}, _count: 5) {
      resourceType
      id
      identifier {
        system
        value
      }
      subject {
        display
      }
    }
  }`.replace(/\s+/g, " ");
}
function getResourcesFromResponse(response, query) {
  let resources = [];
  return response.data.Patients1 && resources.push(...response.data.Patients1), response.data.Patients2 && resources.push(...response.data.Patients2), response.data.ServiceRequestList && resources.push(...response.data.ServiceRequestList), sortByRelevance(dedupeResources(resources), query).slice(0, 5);
}
function dedupeResources(resources) {
  let ids = /* @__PURE__ */ new Set(), result = [];
  for (let resource of resources) ids.has(resource.id) || (ids.add(resource.id), result.push(resource));
  return result;
}
function sortByRelevance(resources, query) {
  return resources.sort((a, b2) => getResourceScore(b2, query) - getResourceScore(a, query));
}
function getResourceScore(resource, query) {
  let bestScore = 0;
  if (resource.identifier) for (let identifier of resource.identifier) bestScore = Math.max(bestScore, getStringScore(identifier.value, query));
  if (resource.resourceType === "Patient" && resource.name) for (let name of resource.name) bestScore = Math.max(bestScore, getStringScore(lt(name), query));
  return bestScore;
}
function getStringScore(str, query) {
  if (!str) return 0;
  let index = str.toLowerCase().indexOf(query.toLowerCase());
  return index < 0 ? 0 : 100 - index;
}
function Header(props) {
  var _a;
  let profile = me(), [userMenuOpened, setUserMenuOpened] = (0, import_react25.useState)(false);
  return (0, import_jsx_runtime15.jsx)(AppShell.Header, { p: 8, style: { zIndex: 101 }, children: (0, import_jsx_runtime15.jsxs)(Group, { justify: "space-between", children: [(0, import_jsx_runtime15.jsxs)(Group, { gap: "xs", children: [(0, import_jsx_runtime15.jsx)(UnstyledButton, { className: Header_default.logoButton, onClick: props.navbarToggle, children: props.logo }), !props.headerSearchDisabled && (0, import_jsx_runtime15.jsx)(HeaderSearchInput, { pathname: props.pathname, searchParams: props.searchParams })] }), (0, import_jsx_runtime15.jsxs)(Group, { gap: "lg", pr: "sm", children: [props.notifications, (0, import_jsx_runtime15.jsxs)(Menu, { width: 260, shadow: "xl", position: "bottom-end", transitionProps: { transition: "pop-top-right" }, opened: userMenuOpened, onClose: () => setUserMenuOpened(false), children: [(0, import_jsx_runtime15.jsx)(Menu.Target, { children: (0, import_jsx_runtime15.jsx)(UnstyledButton, { className: clsx_default(Header_default.user, { [Header_default.userActive]: userMenuOpened }), onClick: () => setUserMenuOpened((o) => !o), children: (0, import_jsx_runtime15.jsxs)(Group, { gap: 7, children: [(0, import_jsx_runtime15.jsx)(ResourceAvatar, { value: profile, radius: "xl", size: 24 }), (0, import_jsx_runtime15.jsx)(Text, { size: "sm", className: Header_default.userName, children: lt((_a = profile == null ? void 0 : profile.name) == null ? void 0 : _a[0]) }), (0, import_jsx_runtime15.jsx)(IconChevronDown, { size: 12, stroke: 1.5 })] }) }) }), (0, import_jsx_runtime15.jsx)(Menu.Dropdown, { children: (0, import_jsx_runtime15.jsx)(HeaderDropdown, { version: props.version }) })] })] })] }) });
}
function parseForm(form) {
  let result = {};
  for (let element of Array.from(form.elements)) element instanceof HTMLInputElement ? parseInputElement(result, element) : element instanceof HTMLTextAreaElement ? result[element.name] = element.value : element instanceof HTMLSelectElement && parseSelectElement(result, element);
  return result;
}
function parseInputElement(result, el) {
  el.disabled || (el.type === "checkbox" || el.type === "radio") && !el.checked || (result[el.name] = el.value);
}
function parseSelectElement(result, el) {
  result[el.name] = el.value;
}
function Form(props) {
  return (0, import_jsx_runtime16.jsx)("form", { style: props.style, "data-testid": props.testid, onSubmit: (e) => {
    e.preventDefault();
    let formData = parseForm(e.target);
    props.onSubmit && props.onSubmit(formData);
  }, children: props.children });
}
function BookmarkDialog(props) {
  let medplum = b(), config = medplum.getUserConfiguration();
  function submitHandler(formData) {
    var _a, _b, _c;
    let { menuname, bookmarkname: name } = formData, target = `${props.pathname}?${props.searchParams.toString()}`, newConfig = de(config);
    (_c = (_b = (_a = newConfig.menu) == null ? void 0 : _a.find(({ title }) => title === menuname)) == null ? void 0 : _b.link) == null ? void 0 : _c.push({ name, target }), medplum.updateResource(newConfig).then((res) => {
      config.menu = res.menu, medplum.dispatchEvent({ type: "change" }), showNotification({ color: "green", message: "Success" }), props.onOk();
    }).catch((err) => {
      showNotification({ color: "red", message: Ne(err) });
    });
  }
  return (0, import_jsx_runtime17.jsx)(Modal, { title: "Add Bookmark", closeButtonProps: { "aria-label": "Close" }, opened: props.visible, onClose: props.onCancel, children: (0, import_jsx_runtime17.jsx)(Form, { onSubmit: submitHandler, children: (0, import_jsx_runtime17.jsxs)(Stack, { children: [(0, import_jsx_runtime17.jsx)(SelectMenu, { config }), (0, import_jsx_runtime17.jsx)(TextInput, { label: "Bookmark Name", type: "text", name: "bookmarkname", placeholder: "Bookmark Name", withAsterisk: true }), (0, import_jsx_runtime17.jsx)(Group, { justify: "flex-end", children: (0, import_jsx_runtime17.jsx)(Button, { mt: "sm", type: "submit", children: "OK" }) })] }) }) });
}
function SelectMenu(props) {
  function userConfigToMenu(config) {
    var _a;
    return (_a = config == null ? void 0 : config.menu) == null ? void 0 : _a.map((menu) => menu.title);
  }
  let menus = userConfigToMenu(props.config);
  return (0, import_jsx_runtime17.jsx)(NativeSelect, { name: "menuname", defaultValue: menus[0], label: "Select Menu Option", data: menus, withAsterisk: true });
}
function toKey(element) {
  return typeof element.code == "string" ? element.code : JSON.stringify(element);
}
function getDisplay(item) {
  return typeof item.display == "string" ? item.display : toKey(item);
}
function toOption2(element) {
  return { value: toKey(element), label: getDisplay(element), resource: element };
}
function createValue(input) {
  return { code: input, display: input };
}
function ValueSetAutocomplete(props) {
  let medplum = b(), { binding, creatable, clearable, expandParams, withHelpText, ...rest } = props, loadValues = (0, import_react31.useCallback)(async (input, signal) => {
    var _a;
    if (!binding) return [];
    let valueSetElements = ((_a = (await medplum.valueSetExpand({ ...expandParams, url: binding, filter: input }, { signal })).expansion) == null ? void 0 : _a.contains) ?? [], newData = [];
    for (let valueSetElement of valueSetElements) valueSetElement.code && !newData.some((item) => item.code === valueSetElement.code) && newData.push(valueSetElement);
    return newData;
  }, [medplum, expandParams, binding]);
  return (0, import_jsx_runtime18.jsx)(AsyncAutocomplete, { ...rest, creatable: creatable ?? true, clearable: clearable ?? true, toOption: toOption2, loadOptions: loadValues, onCreate: createValue, itemComponent: withHelpText ? ItemComponent2 : void 0 });
}
var ItemComponent2 = (0, import_react31.forwardRef)(({ label, resource, active, ...others }, ref) => (0, import_jsx_runtime18.jsx)("div", { ref, ...others, children: (0, import_jsx_runtime18.jsxs)(Group, { wrap: "nowrap", gap: "xs", children: [active && (0, import_jsx_runtime18.jsx)(IconCheck, { size: 12 }), (0, import_jsx_runtime18.jsxs)("div", { children: [(0, import_jsx_runtime18.jsx)(Text, { children: label }), (0, import_jsx_runtime18.jsx)(Text, { size: "xs", c: "dimmed", children: `${resource.system}#${resource.code}` })] })] }) }));
function CodeInput(props) {
  let { defaultValue: defaultValue2, onChange, withHelpText, ...rest } = props, [value, setValue] = (0, import_react30.useState)(defaultValue2);
  function handleChange(newValues) {
    let newValue = newValues[0], newCode = valueSetElementToCode(newValue);
    setValue(newCode), onChange && onChange(newCode);
  }
  return (0, import_jsx_runtime19.jsx)(ValueSetAutocomplete, { defaultValue: codeToValueSetElement(value), onChange: handleChange, withHelpText: withHelpText ?? true, ...rest });
}
function codeToValueSetElement(code) {
  return code ? { code } : void 0;
}
function valueSetElementToCode(element) {
  return element == null ? void 0 : element.code;
}
function ResourceTypeInput(props) {
  let [resourceType, setResourceType] = (0, import_react29.useState)(props.defaultValue), onChange = props.onChange, setResourceTypeWrapper = (0, import_react29.useCallback)((newResourceType) => {
    setResourceType(newResourceType), onChange && onChange(newResourceType);
  }, [onChange]);
  return (0, import_jsx_runtime20.jsx)(CodeInput, { disabled: props.disabled, "data-autofocus": props.autoFocus, "data-testid": props.testId, defaultValue: resourceType, onChange: setResourceTypeWrapper, name: props.name, placeholder: props.placeholder, binding: "https://medplum.com/fhir/ValueSet/resource-types", creatable: false, maxValues: props.maxValues ?? 1, clearable: false, withHelpText: false });
}
var Navbar_default = { menuTitle: "Navbar_menuTitle", link: "Navbar_link", linkActive: "Navbar_linkActive" };
function Navbar(props) {
  var _a;
  let navigate = fe2(), activeLink = getActiveLink(props.pathname, props.searchParams, props.menus), [bookmarkDialogVisible, setBookmarkDialogVisible] = (0, import_react28.useState)(false);
  function onLinkClick(e, to) {
    e.stopPropagation(), e.preventDefault(), navigate(to), window.innerWidth < 768 && props.closeNavbar();
  }
  function navigateResourceType(resourceType) {
    resourceType && navigate(`/${resourceType}`);
  }
  return (0, import_jsx_runtime21.jsxs)(import_jsx_runtime21.Fragment, { children: [(0, import_jsx_runtime21.jsx)(AppShell.Navbar, { children: (0, import_jsx_runtime21.jsxs)(ScrollArea, { p: "xs", children: [!props.resourceTypeSearchDisabled && (0, import_jsx_runtime21.jsx)(AppShell.Section, { mb: "sm", children: (0, import_jsx_runtime21.jsx)(ResourceTypeInput, { name: "resourceType", placeholder: "Resource Type", maxValues: 0, onChange: (newValue) => navigateResourceType(newValue) }, window.location.pathname) }), (0, import_jsx_runtime21.jsxs)(AppShell.Section, { grow: true, children: [(_a = props.menus) == null ? void 0 : _a.map((menu) => {
    var _a2;
    return (0, import_jsx_runtime21.jsxs)(import_react28.Fragment, { children: [(0, import_jsx_runtime21.jsx)(Text, { className: Navbar_default.menuTitle, children: menu.title }), (_a2 = menu.links) == null ? void 0 : _a2.map((link) => (0, import_jsx_runtime21.jsxs)(NavbarLink, { to: link.href, active: link.href === (activeLink == null ? void 0 : activeLink.href), onClick: (e) => onLinkClick(e, link.href), children: [(0, import_jsx_runtime21.jsx)(NavLinkIcon, { to: link.href, icon: link.icon }), (0, import_jsx_runtime21.jsx)("span", { children: link.label })] }, link.href))] }, `menu-${menu.title}`);
  }), props.displayAddBookmark && (0, import_jsx_runtime21.jsx)(Button, { variant: "subtle", size: "xs", mt: "xl", leftSection: (0, import_jsx_runtime21.jsx)(IconPlus, { size: "0.75rem" }), onClick: () => setBookmarkDialogVisible(true), children: "Add Bookmark" })] })] }) }), props.pathname && props.searchParams && (0, import_jsx_runtime21.jsx)(BookmarkDialog, { pathname: props.pathname, searchParams: props.searchParams, visible: bookmarkDialogVisible, onOk: () => setBookmarkDialogVisible(false), onCancel: () => setBookmarkDialogVisible(false) })] });
}
function NavbarLink(props) {
  return (0, import_jsx_runtime21.jsx)(MedplumLink, { onClick: props.onClick, to: props.to, className: clsx_default(Navbar_default.link, { [Navbar_default.linkActive]: props.active }), children: props.children });
}
function NavLinkIcon(props) {
  return props.icon ? props.icon : (0, import_jsx_runtime21.jsx)(Space, { w: 30 });
}
function getActiveLink(currentPathname, currentSearchParams, menus) {
  if (!currentPathname || !currentSearchParams || !menus) return;
  let bestLink, bestScore = 0;
  for (let menu of menus) if (menu.links) for (let link of menu.links) {
    let score = getLinkScore(currentPathname, currentSearchParams, link.href);
    score > bestScore && (bestScore = score, bestLink = link);
  }
  return bestLink;
}
function getLinkScore(currentPathname, currentSearchParams, linkHref) {
  let linkUrl = new URL(linkHref, "https://example.com");
  if (currentPathname !== linkUrl.pathname) return 0;
  let ignoredParams = ["_count", "_offset"];
  for (let [key, value] of linkUrl.searchParams.entries()) if (!ignoredParams.includes(key) && currentSearchParams.get(key) !== value) return 0;
  let count = 1;
  for (let [key, value] of currentSearchParams.entries()) ignoredParams.includes(key) || linkUrl.searchParams.get(key) === value && count++;
  return count;
}
function AppShell2(props) {
  let [navbarOpen, setNavbarOpen] = (0, import_react22.useState)(localStorage.navbarOpen === "true"), medplum = b(), profile = me();
  (0, import_react22.useEffect)(() => {
    function eventListener() {
      showNotification({ id: "offline", color: "red", message: "No connection to server", autoClose: false });
    }
    return medplum.addEventListener("offline", eventListener), () => medplum.removeEventListener("offline", eventListener);
  }, [medplum]);
  function setNavbarOpenWrapper(open) {
    localStorage.navbarOpen = open.toString(), setNavbarOpen(open);
  }
  function closeNavbar() {
    setNavbarOpenWrapper(false);
  }
  function toggleNavbar() {
    setNavbarOpenWrapper(!navbarOpen);
  }
  return medplum.isLoading() ? (0, import_jsx_runtime22.jsx)(Loading, {}) : (0, import_jsx_runtime22.jsxs)(AppShell, { header: { height: 60 }, navbar: { width: 250, breakpoint: "sm", collapsed: { desktop: !profile || !navbarOpen, mobile: !profile || !navbarOpen } }, padding: 0, children: [profile && (0, import_jsx_runtime22.jsx)(Header, { pathname: props.pathname, searchParams: props.searchParams, headerSearchDisabled: props.headerSearchDisabled, logo: props.logo, version: props.version, navbarToggle: toggleNavbar, notifications: props.notifications }), profile && navbarOpen ? (0, import_jsx_runtime22.jsx)(Navbar, { pathname: props.pathname, searchParams: props.searchParams, menus: props.menus, closeNavbar, displayAddBookmark: props.displayAddBookmark, resourceTypeSearchDisabled: props.resourceTypeSearchDisabled }) : void 0, (0, import_jsx_runtime22.jsx)(AppShell.Main, { className: AppShell_default.main, children: (0, import_jsx_runtime22.jsx)(ErrorBoundary, { children: (0, import_jsx_runtime22.jsx)(import_react22.Suspense, { fallback: (0, import_jsx_runtime22.jsx)(Loading, {}), children: props.children }) }) })] });
}
function AttachmentDisplay(props) {
  let { contentType, url: uncachedUrl, title } = props.value ?? {}, url = Oe(uncachedUrl);
  return url ? (0, import_jsx_runtime23.jsxs)("div", { "data-testid": "attachment-display", children: [(contentType == null ? void 0 : contentType.startsWith("image/")) && (0, import_jsx_runtime23.jsx)("img", { "data-testid": "attachment-image", style: { maxWidth: props.maxWidth }, src: url, alt: title }), (contentType == null ? void 0 : contentType.startsWith("video/")) && (0, import_jsx_runtime23.jsx)("video", { "data-testid": "attachment-video", style: { maxWidth: props.maxWidth }, controls: true, children: (0, import_jsx_runtime23.jsx)("source", { type: contentType, src: url }) }), ((contentType == null ? void 0 : contentType.startsWith("text/")) || contentType === "application/json" || contentType === "application/pdf") && (0, import_jsx_runtime23.jsx)("div", { "data-testid": "attachment-iframe", style: { maxWidth: props.maxWidth, minHeight: 400 }, children: (0, import_jsx_runtime23.jsx)("iframe", { width: "100%", height: "400", src: url + "#navpanes=0", allowFullScreen: true, frameBorder: 0, seamless: true }) }), (0, import_jsx_runtime23.jsx)("div", { "data-testid": "download-link", style: { padding: "2px 16px 16px 16px" }, children: (0, import_jsx_runtime23.jsx)(Anchor, { href: uncachedUrl, "data-testid": "attachment-details", target: "_blank", rel: "noopener noreferrer", download: getDownloadName(title), children: title || "Download" }) })] }) : null;
}
function getDownloadName(title) {
  return (title == null ? void 0 : title.includes(".")) ? title : void 0;
}
var DescriptionList_default = { root: "DescriptionList_root", compact: "DescriptionList_compact" };
function DescriptionList(props) {
  let { children: children2, compact } = props;
  return (0, import_jsx_runtime24.jsx)("dl", { className: clsx_default(DescriptionList_default.root, { [DescriptionList_default.compact]: compact }), children: children2 });
}
function DescriptionListEntry(props) {
  return (0, import_jsx_runtime24.jsxs)(import_jsx_runtime24.Fragment, { children: [(0, import_jsx_runtime24.jsx)("dt", { children: props.term }), (0, import_jsx_runtime24.jsx)("dd", { children: props.children })] });
}
function AttachmentArrayDisplay(props) {
  var _a;
  let attachmentElements = (_a = props.values) == null ? void 0 : _a.map((v2, index) => (0, import_jsx_runtime25.jsx)("div", { children: (0, import_jsx_runtime25.jsx)(AttachmentDisplay, { value: v2, maxWidth: props.maxWidth }) }, "attatchment-" + index)), content;
  if (props.includeDescriptionListEntry) {
    if (props.property === void 0) throw new Error("props.property is required when includeDescriptionListEntry is true");
    if (!K(props.path)) throw new Error("props.path is required when includeDescriptionListEntry is true");
    let key = props.path.split(".").pop();
    content = (0, import_jsx_runtime25.jsx)(DescriptionListEntry, { term: Ol(key), children: attachmentElements });
  } else content = (0, import_jsx_runtime25.jsx)(import_jsx_runtime25.Fragment, { children: attachmentElements });
  return content;
}
function AttachmentButton(props) {
  let medplum = b(), fileInputRef = (0, import_react33.useRef)(null);
  function onClick(e) {
    var _a;
    killEvent(e), (_a = fileInputRef.current) == null ? void 0 : _a.click();
  }
  function onFileChange(e) {
    killEvent(e);
    let files = e.target.files;
    files && Array.from(files).forEach(processFile);
  }
  function processFile(file) {
    !file || !file.name || (props.onUploadStart && props.onUploadStart(), medplum.createAttachment({ data: file, contentType: file.type || "application/octet-stream", filename: file.name, securityContext: props.securityContext, onProgress: props.onUploadProgress }).then((attachment) => props.onUpload(attachment)).catch((err) => {
      props.onUploadError && props.onUploadError(Xe(err));
    }));
  }
  return (0, import_jsx_runtime26.jsxs)(import_jsx_runtime26.Fragment, { children: [(0, import_jsx_runtime26.jsx)("input", { disabled: props.disabled, type: "file", "data-testid": "upload-file-input", style: { display: "none" }, ref: fileInputRef, onChange: (e) => onFileChange(e) }), props.children({ onClick, disabled: props.disabled })] });
}
function AttachmentArrayInput(props) {
  let [values2, setValues] = (0, import_react32.useState)(props.defaultValue ?? []), valuesRef = (0, import_react32.useRef)();
  valuesRef.current = values2;
  function setValuesWrapper(newValues) {
    setValues(newValues), props.onChange && props.onChange(newValues);
  }
  return (0, import_jsx_runtime27.jsxs)("table", { style: { width: "100%" }, children: [(0, import_jsx_runtime27.jsxs)("colgroup", { children: [(0, import_jsx_runtime27.jsx)("col", { width: "97%" }), (0, import_jsx_runtime27.jsx)("col", { width: "3%" })] }), (0, import_jsx_runtime27.jsxs)("tbody", { children: [values2.map((v2, index) => (0, import_jsx_runtime27.jsxs)("tr", { children: [(0, import_jsx_runtime27.jsx)("td", { children: (0, import_jsx_runtime27.jsx)(AttachmentDisplay, { value: v2, maxWidth: 200 }) }), (0, import_jsx_runtime27.jsx)("td", { children: (0, import_jsx_runtime27.jsx)(ActionIcon, { disabled: props.disabled, title: "Remove", variant: "subtle", size: "sm", color: "gray", onClick: (e) => {
    killEvent(e);
    let copy = values2.slice();
    copy.splice(index, 1), setValuesWrapper(copy);
  }, children: (0, import_jsx_runtime27.jsx)(IconCircleMinus, {}) }) })] }, `${index}-${values2.length}`)), (0, import_jsx_runtime27.jsxs)("tr", { children: [(0, import_jsx_runtime27.jsx)("td", {}), (0, import_jsx_runtime27.jsx)("td", { children: (0, import_jsx_runtime27.jsx)(AttachmentButton, { disabled: props.disabled, onUpload: (attachment) => {
    setValuesWrapper([...valuesRef.current, attachment]);
  }, children: (props2) => (0, import_jsx_runtime27.jsx)(ActionIcon, { ...props2, title: "Add", variant: "subtle", size: "sm", color: props2.disabled ? "gray" : "green", children: (0, import_jsx_runtime27.jsx)(IconCloudUpload, {}) }) }) })] })] })] });
}
function AttachmentInput(props) {
  let [value, setValue] = (0, import_react34.useState)(props.defaultValue);
  function setValueWrapper(newValue) {
    setValue(newValue), props.onChange && props.onChange(newValue);
  }
  return value ? (0, import_jsx_runtime28.jsxs)(import_jsx_runtime28.Fragment, { children: [(0, import_jsx_runtime28.jsx)(AttachmentDisplay, { value, maxWidth: 200 }), (0, import_jsx_runtime28.jsx)(Button, { disabled: props.disabled, onClick: (e) => {
    killEvent(e), setValueWrapper(void 0);
  }, children: "Remove" })] }) : (0, import_jsx_runtime28.jsx)(AttachmentButton, { disabled: props.disabled, securityContext: props.securityContext, onUpload: setValueWrapper, children: (props2) => (0, import_jsx_runtime28.jsx)(Button, { ...props2, children: "Upload..." }) });
}
function CodeableConceptDisplay(props) {
  return (0, import_jsx_runtime29.jsx)(import_jsx_runtime29.Fragment, { children: at(props.value) });
}
function CodingDisplay(props) {
  return (0, import_jsx_runtime30.jsx)(import_jsx_runtime30.Fragment, { children: Ho(props.value) });
}
function ContactPointDisplay(props) {
  let contactPoint = props.value;
  if (!contactPoint) return null;
  let builder = [];
  return contactPoint.value && builder.push(contactPoint.value), (contactPoint.use || contactPoint.system) && (builder.push(" ["), contactPoint.use && builder.push(contactPoint.use), contactPoint.use && contactPoint.system && builder.push(" "), contactPoint.system && builder.push(contactPoint.system), builder.push("]")), (0, import_jsx_runtime31.jsx)(import_jsx_runtime31.Fragment, { children: builder.join("").trim() });
}
function ContactDetailDisplay(props) {
  var _a;
  let contactDetail = props.value;
  return contactDetail ? (0, import_jsx_runtime32.jsxs)(import_jsx_runtime32.Fragment, { children: [contactDetail.name, contactDetail.name && ": ", (_a = contactDetail.telecom) == null ? void 0 : _a.map((telecom) => (0, import_jsx_runtime32.jsx)(ContactPointDisplay, { value: telecom }, `telecom-${contactDetail.name}-${telecom.value}`))] }) : null;
}
function IdentifierDisplay(props) {
  var _a, _b;
  return (0, import_jsx_runtime33.jsxs)("div", { children: [(_a = props.value) == null ? void 0 : _a.system, ": ", (_b = props.value) == null ? void 0 : _b.value] });
}
function MoneyDisplay(props) {
  return (0, import_jsx_runtime34.jsx)(import_jsx_runtime34.Fragment, { children: gl(props.value) });
}
function QuantityDisplay(props) {
  return (0, import_jsx_runtime35.jsx)(import_jsx_runtime35.Fragment, { children: fe(props.value) });
}
function RangeDisplay(props) {
  return (0, import_jsx_runtime36.jsx)(import_jsx_runtime36.Fragment, { children: yl(props.value) });
}
function RatioDisplay(props) {
  let value = props.value;
  return value ? (0, import_jsx_runtime37.jsxs)(import_jsx_runtime37.Fragment, { children: [(0, import_jsx_runtime37.jsx)(QuantityDisplay, { value: value.numerator }), " / ", (0, import_jsx_runtime37.jsx)(QuantityDisplay, { value: value.denominator })] }) : null;
}
function ReferenceDisplay(props) {
  if (!props.value) return null;
  let displayString = props.value.display || props.value.reference || Fn(props.value);
  return props.link !== false && props.value.reference ? (0, import_jsx_runtime38.jsx)(MedplumLink, { to: props.value, children: displayString }) : (0, import_jsx_runtime38.jsx)(import_jsx_runtime38.Fragment, { children: displayString });
}
function assignValuesIntoSlices(values2, slices, slicing, profileUrl) {
  if (!K(slicing == null ? void 0 : slicing.slices)) return [values2];
  let slicedValues = new Array(slices.length + 1);
  for (let i = 0; i < slicedValues.length; i++) slicedValues[i] = [];
  for (let value of values2) {
    let sliceName = Vi(value, slices, slicing.discriminator, profileUrl), sliceIndex = sliceName ? slices.findIndex((slice) => slice.name === sliceName) : -1;
    sliceIndex === -1 && (sliceIndex = slices.length), slicedValues[sliceIndex].push(value);
  }
  return slicedValues;
}
async function prepareSlices({ medplum, property }) {
  return new Promise((resolve, reject) => {
    var _a, _b;
    if (!property.slicing) {
      resolve([]);
      return;
    }
    let supportedSlices = [], profileUrls = [], promises = [];
    for (let slice of property.slicing.slices) {
      if (!ki(slice)) {
        console.debug("Unsupported slice definition", slice);
        continue;
      }
      let profileUrl;
      K(slice.elements) || (profileUrl = (_b = (_a = slice.type[0]) == null ? void 0 : _a.profile) == null ? void 0 : _b[0]), supportedSlices.push(slice), profileUrls.push(profileUrl), profileUrl && promises.push(medplum.requestProfileSchema(profileUrl));
    }
    Promise.all(promises).then(() => {
      for (let i = 0; i < supportedSlices.length; i++) {
        let slice = supportedSlices[i], profileUrl = profileUrls[i];
        if (profileUrl) {
          let typeSchema = En(profileUrl);
          slice.typeSchema = typeSchema;
        }
      }
      resolve(supportedSlices);
    }).catch(reject);
  });
}
function maybeWrapWithContext(ContextProvider, contextValue, contents) {
  return contextValue !== void 0 ? (0, import_jsx_runtime39.jsx)(ContextProvider, { value: contextValue, children: contents }) : contents;
}
function SliceDisplay(props) {
  var _a, _b;
  let { slice, property } = props, sliceElements = ((_a = slice.typeSchema) == null ? void 0 : _a.elements) ?? slice.elements, parentContext = (0, import_react36.useContext)(ElementsContext), contextValue = (0, import_react36.useMemo)(() => {
    var _a2;
    if (K(sliceElements)) return Wr({ parentContext, elements: sliceElements, path: props.path, profileUrl: (_a2 = slice.typeSchema) == null ? void 0 : _a2.url });
  }, [parentContext, props.path, (_b = slice.typeSchema) == null ? void 0 : _b.url, sliceElements]);
  return maybeWrapWithContext(ElementsContext.Provider, contextValue, (0, import_jsx_runtime40.jsx)(import_jsx_runtime40.Fragment, { children: props.value.map((value, valueIndex) => (0, import_jsx_runtime40.jsx)("div", { children: (0, import_jsx_runtime40.jsx)(ResourcePropertyDisplay, { property, path: props.path, arrayElement: true, elementDefinitionType: slice.type[0], propertyType: slice.type[0].code, value, ignoreMissingValues: props.ignoreMissingValues, link: props.link }) }, `${valueIndex}-${props.value.length}`)) }));
}
function ResourceArrayDisplay(props) {
  var _a;
  let { property, propertyType } = props, medplum = b(), values2 = (0, import_react35.useMemo)(() => Array.isArray(props.values) ? props.values : [], [props.values]), [loading, setLoading] = (0, import_react35.useState)(true), [slices, setSlices] = (0, import_react35.useState)([]), [slicedValues, setSlicedValues] = (0, import_react35.useState)(() => [values2]), ctx = (0, import_react35.useContext)(ElementsContext);
  if ((0, import_react35.useEffect)(() => {
    prepareSlices({ medplum, property }).then((slices2) => {
      setSlices(slices2);
      let slicedValues2 = assignValuesIntoSlices(values2, slices2, property.slicing, ctx.profileUrl);
      setSlicedValues(slicedValues2), setLoading(false);
    }).catch((reason) => {
      console.error(reason), setLoading(false);
    });
  }, [medplum, property, ctx.profileUrl, setSlicedValues, values2]), loading) return (0, import_jsx_runtime41.jsx)("div", { children: "Loading..." });
  let nonSliceContent;
  if (((_a = property.type[0]) == null ? void 0 : _a.code) !== "Extension") {
    let nonSliceValues = slicedValues[slices.length], nonSliceElements = nonSliceValues.map((value, valueIndex) => (0, import_jsx_runtime41.jsx)("div", { children: (0, import_jsx_runtime41.jsx)(ResourcePropertyDisplay, { path: props.path, arrayElement: true, property, propertyType, value, ignoreMissingValues: props.ignoreMissingValues, link: props.link }) }, `${valueIndex}-${nonSliceValues.length}`));
    if (props.includeDescriptionListEntry) {
      if (!K(props.path)) throw new Error("props.path is required when includeDescriptionListEntry is true");
      let key = props.path.split(".").pop();
      nonSliceContent = (0, import_jsx_runtime41.jsx)(DescriptionListEntry, { term: Ol(key), children: nonSliceElements });
    } else nonSliceContent = (0, import_jsx_runtime41.jsx)(import_jsx_runtime41.Fragment, { children: nonSliceElements });
  }
  return (0, import_jsx_runtime41.jsxs)(import_jsx_runtime41.Fragment, { children: [slices.map((slice, sliceIndex) => {
    if (!props.path) throw Error(`Displaying a resource property with slices of type ${props.propertyType} requires path`);
    let sliceDisplay = (0, import_jsx_runtime41.jsx)(SliceDisplay, { path: props.path, slice, property, value: slicedValues[sliceIndex], ignoreMissingValues: props.ignoreMissingValues, link: props.link }, slice.name);
    return props.includeDescriptionListEntry && (sliceDisplay = (0, import_jsx_runtime41.jsx)(DescriptionListEntry, { term: Ol(slice.name), children: sliceDisplay }, slice.name)), sliceDisplay;
  }), nonSliceContent] });
}
function getValueAndType(context, path, profileUrl) {
  let typedResult = P(context, path, { profileUrl });
  return typedResult ? Array.isArray(typedResult) ? [typedResult.map((e) => e.value), typedResult[0].type] : [typedResult.value, typedResult.type] : [void 0, "undefined"];
}
function getValueAndTypeFromElement(typedValue, path, element) {
  let typedResult = go(typedValue, path, element);
  return typedResult ? Array.isArray(typedResult) ? [typedResult.map((e) => e.value), typedResult[0].type] : [typedResult.value, typedResult.type] : [void 0, "undefined"];
}
function ExtensionDisplay(props) {
  var _a;
  let { elementDefinitionType } = props, medplum = b(), ctx = (0, import_react37.useContext)(ElementsContext), [typeSchema, setTypeSchema] = (0, import_react37.useState)(Z("Extension")), profileUrl = (0, import_react37.useMemo)(() => {
    if (K(elementDefinitionType == null ? void 0 : elementDefinitionType.profile)) return elementDefinitionType.profile[0];
  }, [elementDefinitionType]), [loadingProfile, setLoadingProfile] = (0, import_react37.useState)(profileUrl !== void 0);
  if ((0, import_react37.useEffect)(() => {
    profileUrl && (setLoadingProfile(true), medplum.requestProfileSchema(profileUrl).then(() => {
      let profile = En(profileUrl);
      setLoadingProfile(false), profile && setTypeSchema(profile);
    }).catch((reason) => {
      setLoadingProfile(false), console.warn(reason);
    }));
  }, [medplum, profileUrl]), profileUrl && (loadingProfile || !Sn(profileUrl))) return (0, import_jsx_runtime42.jsx)("div", { children: "Loading..." });
  if (((_a = typeSchema.elements["value[x]"]) == null ? void 0 : _a.max) !== 0) {
    let [propertyValue, propertyType] = getValueAndType({ type: "Extension", value: props.value }, "value[x]", profileUrl ?? ctx.profileUrl);
    return (0, import_jsx_runtime42.jsx)(ResourcePropertyDisplay, { propertyType, value: propertyValue });
  }
  return (0, import_jsx_runtime42.jsx)(BackboneElementDisplay, { path: props.path, value: { type: typeSchema.type, value: props.value }, compact: props.compact, ignoreMissingValues: props.ignoreMissingValues, link: props.link, profileUrl });
}
function ResourcePropertyDisplay(props) {
  var _a;
  let { property, propertyType, value } = props;
  if ((_a = property == null ? void 0 : property.path) == null ? void 0 : _a.endsWith(".id")) return (0, import_jsx_runtime43.jsxs)(Box, { component: "div", style: { display: "flex", gap: 3, alignItems: "center" }, children: [value, !S(value) && (0, import_jsx_runtime43.jsx)(CopyButton, { value, timeout: 2e3, children: ({ copied, copy }) => (0, import_jsx_runtime43.jsx)(Tooltip, { label: copied ? "Copied" : "Copy", withArrow: true, position: "right", children: (0, import_jsx_runtime43.jsx)(ActionIcon, { variant: "subtle", color: copied ? "teal" : "gray", onClick: copy, children: copied ? (0, import_jsx_runtime43.jsx)(IconCheck, { size: "1rem" }) : (0, import_jsx_runtime43.jsx)(IconCopy, { size: "1rem" }) }) }) })] });
  if (property && (property.isArray || property.max > 1) && !props.arrayElement) return propertyType === l.Attachment ? (0, import_jsx_runtime43.jsx)(AttachmentArrayDisplay, { values: value, maxWidth: props.maxWidth, includeDescriptionListEntry: props.includeArrayDescriptionListEntry, property, path: props.path }) : (0, import_jsx_runtime43.jsx)(ResourceArrayDisplay, { path: props.path, property, propertyType, values: value, includeDescriptionListEntry: props.includeArrayDescriptionListEntry, ignoreMissingValues: props.ignoreMissingValues, link: props.link });
  switch (propertyType) {
    case l.boolean:
      return (0, import_jsx_runtime43.jsx)(import_jsx_runtime43.Fragment, { children: value === void 0 ? "" : (!!value).toString() });
    case l.SystemString:
    case l.string:
      return (0, import_jsx_runtime43.jsx)("div", { style: { whiteSpace: "pre-wrap" }, children: value });
    case l.code:
    case l.date:
    case l.decimal:
    case l.id:
    case l.integer:
    case l.positiveInt:
    case l.unsignedInt:
    case l.uri:
    case l.url:
      return (0, import_jsx_runtime43.jsx)(import_jsx_runtime43.Fragment, { children: value });
    case l.canonical:
      return (0, import_jsx_runtime43.jsx)(ReferenceDisplay, { value: { reference: value }, link: props.link });
    case l.dateTime:
    case l.instant:
      return (0, import_jsx_runtime43.jsx)(import_jsx_runtime43.Fragment, { children: Pr(value) });
    case l.markdown:
      return (0, import_jsx_runtime43.jsx)("pre", { children: value });
    case l.Address:
      return (0, import_jsx_runtime43.jsx)(AddressDisplay, { value });
    case l.Annotation:
      return (0, import_jsx_runtime43.jsx)(import_jsx_runtime43.Fragment, { children: value == null ? void 0 : value.text });
    case l.Attachment:
      return (0, import_jsx_runtime43.jsx)(AttachmentDisplay, { value, maxWidth: props.maxWidth });
    case l.CodeableConcept:
      return (0, import_jsx_runtime43.jsx)(CodeableConceptDisplay, { value });
    case l.Coding:
      return (0, import_jsx_runtime43.jsx)(CodingDisplay, { value });
    case l.ContactDetail:
      return (0, import_jsx_runtime43.jsx)(ContactDetailDisplay, { value });
    case l.ContactPoint:
      return (0, import_jsx_runtime43.jsx)(ContactPointDisplay, { value });
    case l.HumanName:
      return (0, import_jsx_runtime43.jsx)(HumanNameDisplay, { value });
    case l.Identifier:
      return (0, import_jsx_runtime43.jsx)(IdentifierDisplay, { value });
    case l.Money:
      return (0, import_jsx_runtime43.jsx)(MoneyDisplay, { value });
    case l.Period:
      return (0, import_jsx_runtime43.jsx)(import_jsx_runtime43.Fragment, { children: ml(value) });
    case l.Quantity:
    case l.Duration:
      return (0, import_jsx_runtime43.jsx)(QuantityDisplay, { value });
    case l.Range:
      return (0, import_jsx_runtime43.jsx)(RangeDisplay, { value });
    case l.Ratio:
      return (0, import_jsx_runtime43.jsx)(RatioDisplay, { value });
    case l.Reference:
      return (0, import_jsx_runtime43.jsx)(ReferenceDisplay, { value, link: props.link });
    case l.Timing:
      return (0, import_jsx_runtime43.jsx)(import_jsx_runtime43.Fragment, { children: hl(value) });
    case l.Dosage:
    case l.UsageContext:
      if (!props.path) throw Error(`Displaying property of type ${props.propertyType} requires path`);
      return (0, import_jsx_runtime43.jsx)(BackboneElementDisplay, { path: props.path, value: { type: propertyType, value }, compact: true, ignoreMissingValues: props.ignoreMissingValues });
    case l.Extension:
      if (!props.path) throw Error(`Displaying property of type ${props.propertyType} requires path`);
      return (0, import_jsx_runtime43.jsx)(ExtensionDisplay, { path: props.path, value, compact: true, ignoreMissingValues: props.ignoreMissingValues, elementDefinitionType: props.elementDefinitionType });
    default:
      if (!property) throw Error(`Displaying property of type ${props.propertyType} requires element schema`);
      if (!props.path) throw Error(`Displaying property of type ${props.propertyType} requires path`);
      return (0, import_jsx_runtime43.jsx)(BackboneElementDisplay, { path: props.path, value: { type: property.type[0].code, value }, compact: true, ignoreMissingValues: props.ignoreMissingValues });
  }
}
var EXTENSION_KEYS2 = ["extension", "modifierExtension"];
var IGNORED_PROPERTIES2 = DEFAULT_IGNORED_PROPERTIES.filter((prop) => !EXTENSION_KEYS2.includes(prop));
function BackboneElementDisplay(props) {
  let typedValue = props.value, { value, type: typeName } = typedValue, parentElementsContext = (0, import_react38.useContext)(ElementsContext), profileUrl = props.profileUrl ?? (parentElementsContext == null ? void 0 : parentElementsContext.profileUrl), typeSchema = (0, import_react38.useMemo)(() => Le(typeName, profileUrl), [profileUrl, typeName]), newElementsContext = (0, import_react38.useMemo)(() => {
    if (typeSchema) return Wr({ parentContext: parentElementsContext, elements: typeSchema.elements, path: props.path, profileUrl: typeSchema.url, accessPolicyResource: props.accessPolicyResource });
  }, [typeSchema, parentElementsContext, props.path, props.accessPolicyResource]);
  if (S(value)) return null;
  if (!typeSchema) return (0, import_jsx_runtime44.jsxs)("div", { children: [typeName, " not implemented"] });
  if (typeof value == "object" && "name" in value && Object.keys(value).length === 1 && typeof value.name == "string") return (0, import_jsx_runtime44.jsx)("div", { children: value.name });
  let elementsContext = newElementsContext ?? parentElementsContext;
  return maybeWrapWithContext(ElementsContext.Provider, newElementsContext, (0, import_jsx_runtime44.jsx)(DescriptionList, { compact: props.compact, children: Object.entries(elementsContext.elements).map(([key, property]) => {
    var _a;
    if (EXTENSION_KEYS2.includes(key) && S((_a = property.slicing) == null ? void 0 : _a.slices)) return null;
    if (IGNORED_PROPERTIES2.includes(key)) return null;
    if (DEFAULT_IGNORED_NON_NESTED_PROPERTIES.includes(key) && property.path.split(".").length === 2 || key.includes(".")) return null;
    let [propertyValue, propertyType] = getValueAndType(typedValue, key, elementsContext.profileUrl);
    if ((props.ignoreMissingValues || property.max === 0) && S(propertyValue) || props.path.endsWith(".extension") && (key === "url" || key === "id")) return null;
    let isArrayProperty = property.max > 1 || property.isArray, resourcePropertyDisplay = (0, import_jsx_runtime44.jsx)(ResourcePropertyDisplay, { property, propertyType, path: props.path + "." + key, value: propertyValue, ignoreMissingValues: props.ignoreMissingValues, includeArrayDescriptionListEntry: isArrayProperty, link: props.link }, key);
    return isArrayProperty ? resourcePropertyDisplay : (0, import_jsx_runtime44.jsx)(DescriptionListEntry, { term: Ol(key), children: resourcePropertyDisplay }, key);
  }) }));
}
var READ_ONLY_TOOLTIP_TEXT = "Read Only";
function maybeWrapWithTooltip(tooltipText, children2) {
  return tooltipText ? (0, import_jsx_runtime45.jsx)(Tooltip.Floating, { label: tooltipText, children: children2 }) : children2;
}
var FormSection_default = { dimmed: "FormSection_dimmed", preserveBreaks: "FormSection_preserveBreaks" };
function CheckboxFormSection(props) {
  let { debugMode } = (0, import_react41.useContext)(ElementsContext), label;
  return debugMode && props.fhirPath ? label = `${props.title} - ${props.fhirPath}` : label = props.title, maybeWrapWithTooltip((props == null ? void 0 : props.readonly) ? READ_ONLY_TOOLTIP_TEXT : void 0, (0, import_jsx_runtime46.jsxs)(Group, { wrap: "nowrap", "data-testid": props.testId, children: [(0, import_jsx_runtime46.jsx)("div", { children: props.children }), (0, import_jsx_runtime46.jsx)("div", { children: (0, import_jsx_runtime46.jsx)(Input.Wrapper, { id: props.htmlFor, label, classNames: { label: (props == null ? void 0 : props.readonly) ? FormSection_default.dimmed : void 0 }, description: props.description, withAsterisk: props.withAsterisk, children: null }) })] }));
}
function getErrorsForInput(outcome, expression) {
  var _a, _b, _c;
  return (_c = (_b = (_a = outcome == null ? void 0 : outcome.issue) == null ? void 0 : _a.filter((issue) => {
    var _a2;
    return isExpressionMatch((_a2 = issue.expression) == null ? void 0 : _a2[0], expression);
  })) == null ? void 0 : _b.map((issue) => {
    var _a2;
    return (_a2 = issue.details) == null ? void 0 : _a2.text;
  })) == null ? void 0 : _c.join(`
`);
}
function getIssuesForExpression(outcome, expression) {
  var _a;
  return (_a = outcome == null ? void 0 : outcome.issue) == null ? void 0 : _a.filter((issue) => {
    var _a2;
    return isExpressionMatch((_a2 = issue.expression) == null ? void 0 : _a2[0], expression);
  });
}
var ARRAY_INDEX_REGEX = /\[\d+\]/;
function isExpressionMatch(expr1, expr2) {
  let isExpr1Indexed = typeof expr1 == "string" && ARRAY_INDEX_REGEX.test(expr1), isExpr2Indexed = typeof expr2 == "string" && ARRAY_INDEX_REGEX.test(expr2);
  if (isExpr1Indexed !== isExpr2Indexed && (expr1 = expr1 == null ? void 0 : expr1.replace(ARRAY_INDEX_REGEX, ""), expr2 = expr2 == null ? void 0 : expr2.replace(ARRAY_INDEX_REGEX, "")), expr1 === expr2) return true;
  if (!expr1 || !expr2) return false;
  let dot1 = expr1.indexOf(".");
  if (dot1 >= 0 && expr1.substring(dot1 + 1) === expr2) return true;
  let dot2 = expr2.indexOf(".");
  return dot2 >= 0 && expr2.substring(dot2 + 1) === expr1;
}
function FormSection(props) {
  let { debugMode } = (0, import_react42.useContext)(ElementsContext), label;
  return debugMode && props.fhirPath ? label = `${props.title} - ${props.fhirPath}` : label = props.title, maybeWrapWithTooltip((props == null ? void 0 : props.readonly) ? READ_ONLY_TOOLTIP_TEXT : void 0, (0, import_jsx_runtime47.jsx)(Input.Wrapper, { id: props.htmlFor, label, classNames: { label: clsx_default({ [FormSection_default.dimmed]: props == null ? void 0 : props.readonly }, FormSection_default.preserveBreaks) }, description: props.description, withAsterisk: props.withAsterisk, error: getErrorsForInput(props.outcome, props.errorExpression ?? props.htmlFor), "data-testid": props.testId, children: props.children }));
}
function setPropertyValue(obj, key, propName, elementDefinition, value) {
  let types = elementDefinition.type;
  if (types.length > 1) for (let type of types) {
    let compoundKey = key.replace("[x]", w(type.code));
    compoundKey in obj && delete obj[compoundKey];
  }
  return obj[propName] = value, obj;
}
function isSupportedProfileStructureDefinition(profile) {
  return !!profile && !S(profile.url) && !S(profile.name);
}
function CodeableConceptInput(props) {
  let { defaultValue: defaultValue2, onChange, withHelpText, outcome: _outcome, path: _path, valuePath: _valuePath, ...rest } = props, [value, setValue] = (0, import_react44.useState)(defaultValue2);
  function handleChange(newValues) {
    let newConcept = valueSetElementToCodeableConcept(newValues);
    setValue(newConcept), onChange && onChange(newConcept);
  }
  return (0, import_jsx_runtime48.jsx)(ValueSetAutocomplete, { defaultValue: value && codeableConceptToValueSetElement(value), onChange: handleChange, withHelpText: withHelpText ?? true, ...rest });
}
function codeableConceptToValueSetElement(concept) {
  var _a;
  return (_a = concept.coding) == null ? void 0 : _a.map((c) => ({ system: c.system, code: c.code, display: c.display }));
}
function valueSetElementToCodeableConcept(elements) {
  if (elements.length !== 0) return { coding: elements.map((e) => ({ system: e.system, code: e.code, display: e.display })) };
}
function CodingInput(props) {
  let { defaultValue: defaultValue2, onChange, withHelpText, ...rest } = props, [value, setValue] = (0, import_react45.useState)(defaultValue2);
  function handleChange(newValues) {
    let newValue = newValues[0], newConcept = newValue && valueSetElementToCoding(newValue);
    setValue(newConcept), onChange && onChange(newConcept);
  }
  return (0, import_jsx_runtime49.jsx)(ValueSetAutocomplete, { defaultValue: value && codingToValueSetElement(value), maxValues: 1, onChange: handleChange, withHelpText: withHelpText ?? true, ...rest });
}
function codingToValueSetElement(coding) {
  return { system: coding.system, code: coding.code, display: coding.display };
}
function valueSetElementToCoding(element) {
  return { system: element.system, code: element.code, display: element.display };
}
function ContactPointInput(props) {
  let { path, outcome } = props, { elementsByPath, getExtendedProps } = (0, import_react47.useContext)(ElementsContext), [contactPoint, setContactPoint] = (0, import_react47.useState)(props.defaultValue), ref = (0, import_react47.useRef)();
  ref.current = contactPoint;
  let [systemElement, useElement, valueElement] = (0, import_react47.useMemo)(() => ["system", "use", "value"].map((field) => elementsByPath[path + "." + field]), [elementsByPath, path]), [systemProps, useProps2, valueProps] = (0, import_react47.useMemo)(() => ["system", "use", "value"].map((field) => getExtendedProps(path + "." + field)), [getExtendedProps, path]);
  function setContactPointWrapper(newValue) {
    newValue && Object.keys(newValue).length === 0 && (newValue = void 0), setContactPoint(newValue), props.onChange && props.onChange(newValue);
  }
  function setSystem(system) {
    let newValue = { ...ref.current, system };
    system || delete newValue.system, setContactPointWrapper(newValue);
  }
  function setUse(use) {
    let newValue = { ...ref.current, use };
    use || delete newValue.use, setContactPointWrapper(newValue);
  }
  function setValue(value) {
    let newValue = { ...ref.current, value };
    value || delete newValue.value, setContactPointWrapper(newValue);
  }
  let errorPath = props.valuePath ?? path;
  return (0, import_jsx_runtime50.jsxs)(Group, { gap: "xs", grow: true, wrap: "nowrap", align: "flex-start", children: [(0, import_jsx_runtime50.jsx)(NativeSelect, { disabled: props.disabled || (systemProps == null ? void 0 : systemProps.readonly), "data-testid": "system", defaultValue: contactPoint == null ? void 0 : contactPoint.system, required: ((systemElement == null ? void 0 : systemElement.min) ?? 0) > 0, onChange: (e) => setSystem(e.currentTarget.value), data: ["", "email", "phone", "fax", "pager", "sms", "other"], error: getErrorsForInput(outcome, errorPath + ".system") }), (0, import_jsx_runtime50.jsx)(NativeSelect, { disabled: props.disabled || (useProps2 == null ? void 0 : useProps2.readonly), "data-testid": "use", defaultValue: contactPoint == null ? void 0 : contactPoint.use, required: ((useElement == null ? void 0 : useElement.min) ?? 0) > 0, onChange: (e) => setUse(e.currentTarget.value), data: ["", "home", "work", "temp", "old", "mobile"], error: getErrorsForInput(outcome, errorPath + ".use") }), (0, import_jsx_runtime50.jsx)(TextInput, { disabled: props.disabled || (valueProps == null ? void 0 : valueProps.readonly), placeholder: "Value", defaultValue: contactPoint == null ? void 0 : contactPoint.value, required: ((valueElement == null ? void 0 : valueElement.min) ?? 0) > 0, onChange: (e) => setValue(e.currentTarget.value), error: getErrorsForInput(outcome, errorPath + ".value") })] });
}
function ContactDetailInput(props) {
  var _a;
  let [contactPoint, setContactDetail] = (0, import_react46.useState)(props.defaultValue), ref = (0, import_react46.useRef)();
  ref.current = contactPoint;
  let { getExtendedProps } = (0, import_react46.useContext)(ElementsContext), [nameProps, telecomProps] = (0, import_react46.useMemo)(() => ["name", "telecom"].map((field) => getExtendedProps(props.path + "." + field)), [getExtendedProps, props.path]);
  function setContactDetailWrapper(newValue) {
    setContactDetail(newValue), props.onChange && props.onChange(newValue);
  }
  function setName(name) {
    let newValue = { ...ref.current, name };
    name || delete newValue.name, setContactDetailWrapper(newValue);
  }
  function setTelecom(telecom) {
    let newValue = { ...ref.current, telecom: telecom && [telecom] };
    telecom || delete newValue.telecom, setContactDetailWrapper(newValue);
  }
  return (0, import_jsx_runtime51.jsxs)(Group, { gap: "xs", grow: true, wrap: "nowrap", children: [(0, import_jsx_runtime51.jsx)(TextInput, { disabled: props.disabled || (nameProps == null ? void 0 : nameProps.readonly), "data-testid": props.name + "-name", name: props.name + "-name", placeholder: "Name", style: { width: 180 }, defaultValue: contactPoint == null ? void 0 : contactPoint.name, onChange: (e) => setName(e.currentTarget.value) }), (0, import_jsx_runtime51.jsx)(ContactPointInput, { disabled: props.disabled || (telecomProps == null ? void 0 : telecomProps.readonly), name: props.name + "-telecom", path: props.path + ".telecom", defaultValue: (_a = contactPoint == null ? void 0 : contactPoint.telecom) == null ? void 0 : _a[0], onChange: setTelecom, outcome: props.outcome })] });
}
function convertIsoToLocal(isoString) {
  if (!isoString) return "";
  let date = new Date(isoString);
  return wr(date) ? date.toLocaleDateString("sv") + "T" + date.toLocaleTimeString("sv") : "";
}
function convertLocalToIso(localString) {
  if (!localString) return "";
  let date = new Date(localString);
  return wr(date) ? date.toISOString() : "";
}
function DateTimeInput(props) {
  return (0, import_jsx_runtime52.jsx)(TextInput, { id: props.name, name: props.name, label: props.label, "data-autofocus": props.autoFocus, "data-testid": props["data-testid"] ?? props.name, placeholder: props.placeholder, required: props.required, disabled: props.disabled, type: getInputType(), defaultValue: convertIsoToLocal(props.defaultValue), autoFocus: props.autoFocus, error: getErrorsForInput(props.outcome, props.name), onChange: (e) => {
    if (props.onChange) {
      let newValue = e.currentTarget.value;
      props.onChange(convertLocalToIso(newValue));
    }
  } });
}
function getInputType() {
  return "datetime-local";
}
function ExtensionInput(props) {
  let { propertyType } = props, medplum = b(), profileUrl = (0, import_react48.useMemo)(() => {
    if (K(propertyType.profile)) return propertyType.profile[0];
  }, [propertyType]), [loadingProfile, setLoadingProfile] = (0, import_react48.useState)(profileUrl !== void 0);
  return (0, import_react48.useEffect)(() => {
    profileUrl && (setLoadingProfile(true), medplum.requestProfileSchema(profileUrl).then(() => setLoadingProfile(false)).catch((reason) => {
      setLoadingProfile(false), console.warn(reason);
    }));
  }, [medplum, profileUrl]), profileUrl && (loadingProfile || !Sn(profileUrl)) ? (0, import_jsx_runtime53.jsx)("div", { children: "Loading..." }) : (0, import_jsx_runtime53.jsx)(BackboneElementInput, { profileUrl, path: props.path, typeName: "Extension", defaultValue: props.defaultValue, onChange: props.onChange });
}
function HumanNameInput(props) {
  var _a, _b, _c;
  let { outcome, path } = props, [value, setValue] = (0, import_react49.useState)(props.defaultValue), { getExtendedProps } = (0, import_react49.useContext)(ElementsContext), [useProps2, prefixProps, givenProps, familyProps, suffixProps] = (0, import_react49.useMemo)(() => ["use", "prefix", "given", "family", "suffix"].map((field) => getExtendedProps(props.path + "." + field)), [getExtendedProps, props.path]);
  function setValueWrapper(newValue) {
    setValue(newValue), props.onChange && props.onChange(newValue);
  }
  function setUse(use) {
    setValueWrapper({ ...value, use: use || void 0 });
  }
  function setPrefix(prefix) {
    setValueWrapper({ ...value, prefix: prefix ? prefix.split(" ") : void 0 });
  }
  function setGiven(given) {
    setValueWrapper({ ...value, given: given ? given.split(" ") : void 0 });
  }
  function setFamily(family) {
    setValueWrapper({ ...value, family: family || void 0 });
  }
  function setSuffix(suffix) {
    setValueWrapper({ ...value, suffix: suffix ? suffix.split(" ") : void 0 });
  }
  let errorPath = props.valuePath ?? path;
  return (0, import_jsx_runtime54.jsxs)(Group, { gap: "xs", grow: true, wrap: "nowrap", children: [(0, import_jsx_runtime54.jsx)(NativeSelect, { disabled: props.disabled || (useProps2 == null ? void 0 : useProps2.readonly), defaultValue: value == null ? void 0 : value.use, name: props.name + "-use", "data-testid": "use", onChange: (e) => setUse(e.currentTarget.value), data: ["", "temp", "old", "usual", "official", "nickname", "anonymous", "maiden"], error: getErrorsForInput(outcome, errorPath + ".use") }), (0, import_jsx_runtime54.jsx)(TextInput, { disabled: props.disabled || (prefixProps == null ? void 0 : prefixProps.readonly), placeholder: "Prefix", name: props.name + "-prefix", defaultValue: (_a = value == null ? void 0 : value.prefix) == null ? void 0 : _a.join(" "), onChange: (e) => setPrefix(e.currentTarget.value), error: getErrorsForInput(outcome, errorPath + ".prefix") }), (0, import_jsx_runtime54.jsx)(TextInput, { disabled: props.disabled || (givenProps == null ? void 0 : givenProps.readonly), placeholder: "Given", name: props.name + "-given", defaultValue: (_b = value == null ? void 0 : value.given) == null ? void 0 : _b.join(" "), onChange: (e) => setGiven(e.currentTarget.value), error: getErrorsForInput(outcome, errorPath + ".given") }), (0, import_jsx_runtime54.jsx)(TextInput, { disabled: props.disabled || (familyProps == null ? void 0 : familyProps.readonly), name: props.name + "-family", placeholder: "Family", defaultValue: value == null ? void 0 : value.family, onChange: (e) => setFamily(e.currentTarget.value), error: getErrorsForInput(outcome, errorPath + ".family") }), (0, import_jsx_runtime54.jsx)(TextInput, { disabled: props.disabled || (suffixProps == null ? void 0 : suffixProps.readonly), placeholder: "Suffix", name: props.name + "-suffix", defaultValue: (_c = value == null ? void 0 : value.suffix) == null ? void 0 : _c.join(" "), onChange: (e) => setSuffix(e.currentTarget.value), error: getErrorsForInput(outcome, errorPath + ".suffix") })] });
}
function IdentifierInput(props) {
  let [value, setValue] = (0, import_react50.useState)(props.defaultValue), { elementsByPath, getExtendedProps } = (0, import_react50.useContext)(ElementsContext), [systemElement, valueElement] = (0, import_react50.useMemo)(() => ["system", "value"].map((field) => elementsByPath[props.path + "." + field]), [elementsByPath, props.path]), [systemProps, valueProps] = (0, import_react50.useMemo)(() => ["system", "value"].map((field) => getExtendedProps(props.path + "." + field)), [getExtendedProps, props.path]);
  function setValueWrapper(newValue) {
    setValue(newValue), props.onChange && props.onChange(newValue);
  }
  let errorPath = props.valuePath ?? props.path;
  return (0, import_jsx_runtime55.jsxs)(Group, { gap: "xs", grow: true, wrap: "nowrap", align: "flex-start", children: [(0, import_jsx_runtime55.jsx)(TextInput, { disabled: props.disabled || (systemProps == null ? void 0 : systemProps.readonly), placeholder: "System", required: ((systemElement == null ? void 0 : systemElement.min) ?? 0) > 0, defaultValue: value == null ? void 0 : value.system, onChange: (e) => setValueWrapper({ ...value, system: e.currentTarget.value }), error: getErrorsForInput(props.outcome, errorPath + ".system") }), (0, import_jsx_runtime55.jsx)(TextInput, { disabled: props.disabled || (valueProps == null ? void 0 : valueProps.readonly), placeholder: "Value", required: ((valueElement == null ? void 0 : valueElement.min) ?? 0) > 0, defaultValue: value == null ? void 0 : value.value, onChange: (e) => setValueWrapper({ ...value, value: e.currentTarget.value }), error: getErrorsForInput(props.outcome, errorPath + ".value") })] });
}
var data = ["USD", "EUR", "CAD", "GBP", "AUD"];
function MoneyInput(props) {
  var _a;
  let { onChange } = props, [value, setValue] = (0, import_react51.useState)(props.defaultValue), { getExtendedProps } = (0, import_react51.useContext)(ElementsContext), [currencyProps, valueProps] = (0, import_react51.useMemo)(() => ["currency", "value"].map((field) => getExtendedProps(props.path + "." + field)), [getExtendedProps, props.path]), setValueWrapper = (0, import_react51.useCallback)((newValue) => {
    setValue(newValue), onChange && onChange(newValue);
  }, [onChange]), handleCurrencyChange = (0, import_react51.useCallback)((e) => {
    setValueWrapper({ ...value, currency: e.currentTarget.value });
  }, [value, setValueWrapper]), handleValueChange = (0, import_react51.useCallback)((e) => {
    setValueWrapper({ ...value, value: e.currentTarget.valueAsNumber });
  }, [value, setValueWrapper]), select = (0, import_jsx_runtime56.jsx)(NativeSelect, { disabled: props.disabled || (currencyProps == null ? void 0 : currencyProps.readonly), defaultValue: value == null ? void 0 : value.currency, data, styles: { input: { fontWeight: 500, borderTopLeftRadius: 0, borderBottomLeftRadius: 0, width: 92 } }, onChange: handleCurrencyChange });
  return (0, import_jsx_runtime56.jsx)(TextInput, { disabled: props.disabled || (valueProps == null ? void 0 : valueProps.readonly), type: "number", name: props.name, label: props.label, placeholder: props.placeholder ?? "Value", defaultValue: ((_a = value == null ? void 0 : value.value) == null ? void 0 : _a.toString()) ?? "USD", leftSection: (0, import_jsx_runtime56.jsx)(IconCurrencyDollar, { size: 14 }), rightSection: select, rightSectionWidth: 92, onChange: handleValueChange });
}
function PeriodInput(props) {
  let [value, setValue] = (0, import_react52.useState)(props.defaultValue), { getExtendedProps } = (0, import_react52.useContext)(ElementsContext), [startProps, endProps] = (0, import_react52.useMemo)(() => ["start", "end"].map((field) => getExtendedProps(props.path + "." + field)), [getExtendedProps, props.path]);
  function setValueWrapper(newValue) {
    setValue(newValue), props.onChange && props.onChange(newValue);
  }
  return (0, import_jsx_runtime57.jsxs)(Group, { gap: "xs", grow: true, wrap: "nowrap", children: [(0, import_jsx_runtime57.jsx)(DateTimeInput, { disabled: props.disabled || (startProps == null ? void 0 : startProps.readonly), name: props.name + ".start", placeholder: "Start", defaultValue: value == null ? void 0 : value.start, onChange: (newValue) => setValueWrapper({ ...value, start: newValue }) }), (0, import_jsx_runtime57.jsx)(DateTimeInput, { disabled: props.disabled || (endProps == null ? void 0 : endProps.readonly), name: props.name + ".end", placeholder: "End", defaultValue: value == null ? void 0 : value.end, onChange: (newValue) => setValueWrapper({ ...value, end: newValue }) })] });
}
function QuantityInput(props) {
  let [value, setValue] = (0, import_react53.useState)(props.defaultValue), { getExtendedProps } = (0, import_react53.useContext)(ElementsContext), [comparatorProps, valueProps, unitProps] = (0, import_react53.useMemo)(() => ["comparator", "value", "unit"].map((field) => getExtendedProps(props.path + "." + field)), [getExtendedProps, props.path]);
  function setValueWrapper(newValue) {
    setValue(newValue), props.onChange && props.onChange(newValue);
  }
  return (0, import_jsx_runtime58.jsxs)(Group, { gap: "xs", grow: true, wrap: "nowrap", children: [(0, import_jsx_runtime58.jsx)(NativeSelect, { disabled: props.disabled || (comparatorProps == null ? void 0 : comparatorProps.readonly), style: { width: 80 }, "data-testid": props.name + "-comparator", defaultValue: value == null ? void 0 : value.comparator, data: ["", "<", "<=", ">=", ">"], onChange: (e) => setValueWrapper({ ...value, comparator: e.currentTarget.value }) }), (0, import_jsx_runtime58.jsx)(TextInput, { disabled: props.disabled || (valueProps == null ? void 0 : valueProps.readonly), id: props.name, name: props.name, required: props.required, "data-autofocus": props.autoFocus, "data-testid": props.name + "-value", type: "number", placeholder: "Value", defaultValue: value == null ? void 0 : value.value, autoFocus: props.autoFocus, step: "any", onWheel: (e) => {
    props.disableWheel && e.currentTarget.blur();
  }, onChange: (e) => {
    setValueWrapper({ ...value, value: tryParseNumber(e.currentTarget.value) });
  } }), (0, import_jsx_runtime58.jsx)(TextInput, { disabled: props.disabled || (unitProps == null ? void 0 : unitProps.readonly), placeholder: "Unit", "data-testid": props.name + "-unit", defaultValue: value == null ? void 0 : value.unit, onChange: (e) => setValueWrapper({ ...value, unit: e.currentTarget.value }) })] });
}
function tryParseNumber(str) {
  if (str) return parseFloat(str);
}
function RangeInput(props) {
  let [value, setValue] = (0, import_react54.useState)(props.defaultValue), { getExtendedProps } = (0, import_react54.useContext)(ElementsContext), [lowProps, highProps] = (0, import_react54.useMemo)(() => ["low", "high"].map((field) => getExtendedProps(props.path + "." + field)), [getExtendedProps, props.path]);
  function setValueWrapper(newValue) {
    setValue(newValue), props.onChange && props.onChange(newValue);
  }
  return (0, import_jsx_runtime59.jsxs)(Group, { gap: "xs", grow: true, wrap: "nowrap", children: [(0, import_jsx_runtime59.jsx)(QuantityInput, { path: props.path + ".low", disabled: props.disabled || (lowProps == null ? void 0 : lowProps.readonly), name: props.name + "-low", defaultValue: value == null ? void 0 : value.low, onChange: (v2) => setValueWrapper({ ...value, low: v2 }) }), (0, import_jsx_runtime59.jsx)(QuantityInput, { path: props.path + ".high", disabled: props.disabled || (highProps == null ? void 0 : highProps.readonly), name: props.name + "-high", defaultValue: value == null ? void 0 : value.high, onChange: (v2) => setValueWrapper({ ...value, high: v2 }) })] });
}
function RatioInput(props) {
  let [value, setValue] = (0, import_react55.useState)(props.defaultValue), { getExtendedProps } = (0, import_react55.useContext)(ElementsContext), [numeratorProps, denominatorProps] = (0, import_react55.useMemo)(() => ["numerator", "denominator"].map((field) => getExtendedProps(props.path + "." + field)), [getExtendedProps, props.path]);
  function setValueWrapper(newValue) {
    setValue(newValue), props.onChange && props.onChange(newValue);
  }
  return (0, import_jsx_runtime60.jsxs)(Group, { gap: "xs", grow: true, wrap: "nowrap", children: [(0, import_jsx_runtime60.jsx)(QuantityInput, { path: props.path + ".numerator", disabled: props.disabled || (numeratorProps == null ? void 0 : numeratorProps.readonly), name: props.name + "-numerator", defaultValue: value == null ? void 0 : value.numerator, onChange: (v2) => setValueWrapper({ ...value, numerator: v2 }) }), (0, import_jsx_runtime60.jsx)(QuantityInput, { path: props.path + ".denominator", disabled: props.disabled || (denominatorProps == null ? void 0 : denominatorProps.readonly), name: props.name + "-denominator", defaultValue: value == null ? void 0 : value.denominator, onChange: (v2) => setValueWrapper({ ...value, denominator: v2 }) })] });
}
var SEARCH_CODES = { Device: "device-name", Observation: "code", Subscription: "criteria", User: "email:contains" };
var NAME_RESOURCE_TYPES = ["AccessPolicy", "Account", "ActivityDefinition", "Bot", "CapabilityStatement", "CareTeam", "ClientApplication", "CodeSystem", "CompartmentDefinition", "ConceptMap", "EffectEvidenceSynthesis", "Endpoint", "EventDefinition", "Evidence", "EvidenceVariable", "ExampleScenario", "GraphDefinition", "Group", "HealthcareService", "ImplementationGuide", "InsurancePlan", "Library", "Location", "Measure", "MedicinalProduct", "MessageDefinition", "NamingSystem", "OperationDefinition", "Organization", "Patient", "Person", "PlanDefinition", "Practitioner", "Project", "Questionnaire", "RelatedPerson", "ResearchDefinition", "ResearchElementDefinition", "ResearchStudy", "RiskEvidenceSynthesis", "SearchParameter", "StructureDefinition", "StructureMap", "TerminologyCapabilities", "TestScript", "UserConfiguration", "ValueSet"];
function toOption3(resource) {
  return { value: le(resource), label: Eo(resource), resource };
}
function ResourceInput(props) {
  let medplum = b(), { resourceType, searchCriteria } = props, [outcome, setOutcome] = (0, import_react57.useState)(), defaultValue2 = Ue(props.defaultValue, setOutcome), ItemComponent3 = props.itemComponent ?? DefaultItemComponent2, onChange = props.onChange, loadValues = (0, import_react57.useCallback)(async (input, signal) => {
    let searchCode = getSearchParamForResourceType(resourceType), searchParams = new URLSearchParams({ [searchCode]: input ?? "", _count: "10", ...searchCriteria });
    return await medplum.searchResources(resourceType, searchParams, { signal });
  }, [medplum, resourceType, searchCriteria]), handleChange = (0, import_react57.useCallback)((newResources) => {
    onChange && onChange(newResources[0]);
  }, [onChange]);
  return K(props.defaultValue) && !outcome && !defaultValue2 ? null : (0, import_jsx_runtime61.jsx)(AsyncAutocomplete, { disabled: props.disabled, name: props.name, label: props.label, error: props.error, required: props.required, itemComponent: ItemComponent3, defaultValue: defaultValue2, placeholder: props.placeholder, maxValues: 1, toOption: toOption3, loadOptions: loadValues, onChange: handleChange, clearable: true });
}
var DefaultItemComponent2 = (0, import_react57.forwardRef)(({ label, resource, active: _active, ...others }, ref) => (0, import_jsx_runtime61.jsx)("div", { ref, ...others, children: (0, import_jsx_runtime61.jsxs)(Group, { wrap: "nowrap", children: [(0, import_jsx_runtime61.jsx)(ResourceAvatar, { value: resource }), (0, import_jsx_runtime61.jsxs)("div", { children: [(0, import_jsx_runtime61.jsx)(Text, { children: label }), (0, import_jsx_runtime61.jsx)(Text, { size: "xs", c: "dimmed", children: resource.birthDate || resource.id })] })] }) }));
function getSearchParamForResourceType(resourceType) {
  return SEARCH_CODES[resourceType] ?? (NAME_RESOURCE_TYPES.includes(resourceType) ? "name" : "_id");
}
function ReferenceInput(props) {
  let { onChange } = props, medplum = b(), [value, setValue] = (0, import_react56.useState)(props.defaultValue), [targetTypes, setTargetTypes] = (0, import_react56.useState)(() => createTargetTypes(props.targetTypes)), [targetType, setTargetType] = (0, import_react56.useState)(() => getInitialTargetType(props.defaultValue, targetTypes)), promiseCache = (0, import_react56.useRef)(new At()), searchCriteria = (0, import_react56.useMemo)(() => (targetType == null ? void 0 : targetType.type) === "profile" ? { ...props.searchCriteria, _profile: targetType.value } : props.searchCriteria, [props.searchCriteria, targetType]);
  (0, import_react56.useEffect)(() => {
    let anyToFetch = false, newTargetTypePromises = targetTypes == null ? void 0 : targetTypes.map((tt) => {
      if (!shouldFetchResourceType(tt)) return Promise.resolve(tt);
      anyToFetch = true;
      let cacheKey = tt.value, cached = promiseCache.current.get(cacheKey);
      if (cached) return cached;
      let promise = fetchResourceTypeOfProfile(medplum, tt.value).then((profile) => {
        let newTargetType = { ...tt };
        return profile ? K(profile.type) ? (newTargetType.resourceType = profile.type, newTargetType.name = profile.name, newTargetType.title = profile.title) : (console.error(`StructureDefinition.type missing for ${tt.value}`), newTargetType.error = "StructureDefinition.type missing") : (console.error(`StructureDefinition not found for ${tt.value}`), newTargetType.error = "StructureDefinition not found"), newTargetType;
      }).catch((reason) => (console.error(reason), { ...tt, error: reason })), readablePromise = new M(promise);
      return promiseCache.current.set(cacheKey, readablePromise), readablePromise;
    });
    !newTargetTypePromises || !anyToFetch || Promise.all(newTargetTypePromises).then((newTargetTypes) => {
      if (setTargetTypes(newTargetTypes), !targetType) return;
      let index = newTargetTypes.findIndex((tt) => tt.value === targetType.value || tt.resourceType === targetType.resourceType);
      if (index === -1) {
        console.debug(`defaultValue had unexpected resourceType: ${targetType.resourceType}`);
        return;
      }
      setTargetType(newTargetTypes[index]);
    }).catch(console.error);
  }, [medplum, targetType, targetTypes]);
  let setValueHelper = (0, import_react56.useCallback)((item) => {
    let newValue = item ? te(item) : void 0;
    setValue(newValue), onChange && onChange(newValue);
  }, [onChange]), typeSelectOptions = (0, import_react56.useMemo)(() => targetTypes ? targetTypes.map((tt) => ({ value: tt.value, label: tt.type === "profile" ? tt.title ?? tt.name ?? tt.resourceType ?? tt.value : tt.value })) : [], [targetTypes]);
  return (0, import_jsx_runtime62.jsxs)(Group, { gap: "xs", grow: true, wrap: "nowrap", children: [targetTypes && targetTypes.length > 1 && (0, import_jsx_runtime62.jsx)(NativeSelect, { disabled: props.disabled, "data-autofocus": props.autoFocus, "data-testid": "reference-input-resource-type-select", defaultValue: targetType == null ? void 0 : targetType.resourceType, autoFocus: props.autoFocus, onChange: (e) => {
    let newValue = e.currentTarget.value, newTargetType = targetTypes.find((tt) => tt.value === newValue);
    setTargetType(newTargetType);
  }, data: typeSelectOptions }), !targetTypes && (0, import_jsx_runtime62.jsx)(ResourceTypeInput, { disabled: props.disabled, autoFocus: props.autoFocus, testId: "reference-input-resource-type-input", defaultValue: targetType == null ? void 0 : targetType.resourceType, onChange: (newResourceType) => {
    setTargetType(newResourceType ? { type: "resourceType", value: newResourceType, resourceType: newResourceType } : void 0);
  }, name: props.name + "-resourceType", placeholder: "Resource Type" }), (0, import_jsx_runtime62.jsx)(ResourceInput, { resourceType: targetType == null ? void 0 : targetType.resourceType, name: props.name + "-id", required: props.required, placeholder: props.placeholder, defaultValue: value, searchCriteria, onChange: setValueHelper, disabled: props.disabled })] });
}
function createTargetTypes(resourceTypesAndProfileUrls) {
  if (!resourceTypesAndProfileUrls || resourceTypesAndProfileUrls.length === 0 || resourceTypesAndProfileUrls.length === 1 && resourceTypesAndProfileUrls[0] === "Resource") return;
  let results = [];
  for (let value of resourceTypesAndProfileUrls) value.includes("/") ? results.push({ type: "profile", value }) : results.push({ type: "resourceType", value, resourceType: value });
  return results;
}
function getInitialTargetType(defaultValue2, targetTypes) {
  var _a;
  let defaultValueResourceType = (_a = defaultValue2 == null ? void 0 : defaultValue2.reference) == null ? void 0 : _a.split("/")[0];
  if (defaultValueResourceType) {
    let targetType = targetTypes == null ? void 0 : targetTypes.find((tt) => tt.resourceType === defaultValueResourceType);
    return targetType || { type: "resourceType", value: defaultValueResourceType, resourceType: defaultValueResourceType };
  }
  if (targetTypes && targetTypes.length > 0) return targetTypes[0];
}
async function fetchResourceTypeOfProfile(medplum, profileUrl) {
  let profile = En(profileUrl);
  if (profile) return { type: profile.type, name: profile.name, title: profile.title };
  let query = `{
      StructureDefinitionList(url: "${profileUrl}", _sort: "_lastUpdated", _count: 1) {
        type,
        name,
        title,
      }
    }`.replace(/\s+/g, " ");
  return (await medplum.graphql(query)).data.StructureDefinitionList[0];
}
function shouldFetchResourceType(targetType) {
  return targetType.type === "profile" && !(targetType == null ? void 0 : targetType.error) && S(targetType.resourceType);
}
var ResourceArrayInput_default = { indented: "ResourceArrayInput_indented" };
function ArrayAddButton({ propertyDisplayName, onClick, testId }) {
  let text = propertyDisplayName ? `Add ${propertyDisplayName}` : "Add";
  return propertyDisplayName ? (0, import_jsx_runtime63.jsx)(Button, { title: text, size: "sm", color: "green.6", variant: "subtle", "data-testid": testId, leftSection: (0, import_jsx_runtime63.jsx)(IconCirclePlus, { size: "1.25rem" }), onClick, children: text }) : (0, import_jsx_runtime63.jsx)(ActionIcon, { title: text, color: "green.6", "data-testid": testId, onClick, children: (0, import_jsx_runtime63.jsx)(IconCirclePlus, { size: "1.25rem" }) });
}
function ArrayRemoveButton({ propertyDisplayName, onClick, testId }) {
  return (0, import_jsx_runtime64.jsx)(ActionIcon, { title: propertyDisplayName ? `Remove ${propertyDisplayName}` : "Remove", color: "red.5", "data-testid": testId, variant: "subtle", onClick, children: (0, import_jsx_runtime64.jsx)(IconCircleMinus, { size: "1.25rem" }) });
}
function SliceInput(props) {
  var _a, _b;
  let { slice, property } = props, [values2, setValues] = (0, import_react59.useState)(props.defaultValue), sliceElements = ((_a = slice.typeSchema) == null ? void 0 : _a.elements) ?? slice.elements, parentElementsContextValue = (0, import_react59.useContext)(ElementsContext), contextValue = (0, import_react59.useMemo)(() => {
    var _a2;
    if (K(sliceElements)) return Wr({ parentContext: parentElementsContextValue, elements: sliceElements, path: props.path, profileUrl: (_a2 = slice.typeSchema) == null ? void 0 : _a2.url });
  }, [parentElementsContextValue, props.path, (_b = slice.typeSchema) == null ? void 0 : _b.url, sliceElements]);
  function setValuesWrapper(newValues) {
    setValues(newValues), props.onChange && props.onChange(newValues);
  }
  let required = slice.min > 0, indentedStack = S(slice.elements), propertyDisplayName = Yo(slice.name), showEmptyMessage = props.property.readonly && values2.length === 0;
  return maybeWrapWithContext(ElementsContext.Provider, contextValue, (0, import_jsx_runtime65.jsx)(FormSection, { title: propertyDisplayName, description: slice.definition, withAsterisk: required, fhirPath: `${property.path}:${slice.name}`, testId: props.testId, readonly: props.property.readonly, children: showEmptyMessage ? (0, import_jsx_runtime65.jsx)(Text, { c: "dimmed", children: "(empty)" }) : (0, import_jsx_runtime65.jsxs)(Stack, { className: indentedStack ? ResourceArrayInput_default.indented : void 0, children: [values2.map((value, valueIndex) => (0, import_jsx_runtime65.jsxs)(Group, { wrap: "nowrap", children: [(0, import_jsx_runtime65.jsx)("div", { style: { flexGrow: 1 }, "data-testid": props.testId && `${props.testId}-elements-${valueIndex}`, children: (0, import_jsx_runtime65.jsx)(ElementDefinitionTypeInput, { elementDefinitionType: slice.type[0], name: slice.name, defaultValue: value, onChange: (newValue) => {
    let newValues = [...values2];
    newValues[valueIndex] = newValue, setValuesWrapper(newValues);
  }, outcome: props.outcome, min: slice.min, max: slice.max, binding: slice.binding, path: props.path, valuePath: void 0, readOnly: props.property.readonly }) }), !props.property.readonly && values2.length > slice.min && (0, import_jsx_runtime65.jsx)(ArrayRemoveButton, { propertyDisplayName, testId: props.testId && `${props.testId}-remove-${valueIndex}`, onClick: (e) => {
    killEvent(e);
    let newValues = [...values2];
    newValues.splice(valueIndex, 1), setValuesWrapper(newValues);
  } })] }, `${valueIndex}-${values2.length}`)), !props.property.readonly && values2.length < slice.max && (0, import_jsx_runtime65.jsx)(Group, { wrap: "nowrap", style: { justifyContent: "flex-start" }, children: (0, import_jsx_runtime65.jsx)(ArrayAddButton, { propertyDisplayName, onClick: (e) => {
    killEvent(e);
    let newValues = [...values2, void 0];
    setValuesWrapper(newValues);
  }, testId: props.testId && `${props.testId}-add` }) })] }) }));
}
function getValuePath(elementPath, valuePath, arrayIndex) {
  return valuePath === void 0 ? elementPath : arrayIndex === void 0 ? valuePath : `${valuePath}[${arrayIndex}]`;
}
function ResourceArrayInput(props) {
  var _a;
  let { property } = props, medplum = b(), [loading, setLoading] = (0, import_react58.useState)(true), [slices, setSlices] = (0, import_react58.useState)([]), [defaultValue2] = (0, import_react58.useState)(() => Array.isArray(props.defaultValue) ? props.defaultValue : []), [slicedValues, setSlicedValues] = (0, import_react58.useState)(() => [defaultValue2]), ctx = (0, import_react58.useContext)(ElementsContext), propertyTypeCode = (_a = property.type[0]) == null ? void 0 : _a.code;
  (0, import_react58.useEffect)(() => {
    prepareSlices({ medplum, property }).then((slices2) => {
      setSlices(slices2);
      let slicedValues2 = assignValuesIntoSlices(defaultValue2, slices2, property.slicing, ctx.profileUrl);
      addPlaceholderValues(slicedValues2, slices2), setSlicedValues(slicedValues2), setLoading(false);
    }).catch((reason) => {
      console.error(reason), setLoading(false);
    });
  }, [medplum, property, defaultValue2, ctx.profileUrl, setSlicedValues]);
  function setValuesWrapper(newValues, sliceIndex) {
    let newSlicedValues = [...slicedValues];
    if (newSlicedValues[sliceIndex] = newValues, setSlicedValues(newSlicedValues), props.onChange) {
      let cleaned = newSlicedValues.flat().filter((val) => val !== void 0);
      props.onChange(cleaned);
    }
  }
  if (loading) return (0, import_jsx_runtime66.jsx)("div", { children: "Loading..." });
  let nonSliceIndex = slices.length, nonSliceValues = slicedValues[nonSliceIndex], showNonSliceValues = !(props.hideNonSliceValues ?? (propertyTypeCode === "Extension" && slices.length > 0)), propertyDisplayName = Ol(property.path), showEmptyMessage = props.property.readonly && slices.length === 0 && defaultValue2.length === 0;
  return (0, import_jsx_runtime66.jsxs)(Stack, { className: props.indent ? ResourceArrayInput_default.indented : void 0, children: [showEmptyMessage && (0, import_jsx_runtime66.jsx)(Text, { c: "dimmed", children: "(empty)" }), slices.map((slice, sliceIndex) => (0, import_jsx_runtime66.jsx)(SliceInput, { slice, path: props.path, valuePath: props.valuePath, property, defaultValue: slicedValues[sliceIndex], onChange: (newValue) => {
    setValuesWrapper(newValue, sliceIndex);
  }, testId: `slice-${slice.name}` }, slice.name)), showNonSliceValues && nonSliceValues.map((value, valueIndex) => (0, import_jsx_runtime66.jsxs)(Group, { wrap: "nowrap", style: { flexGrow: 1 }, children: [(0, import_jsx_runtime66.jsx)("div", { style: { flexGrow: 1 }, children: (0, import_jsx_runtime66.jsx)(ResourcePropertyInput, { arrayElement: true, property: props.property, name: props.name + "." + valueIndex, path: props.path, valuePath: getValuePath(props.path, props.valuePath, valueIndex), defaultValue: value, onChange: (newValue) => {
    let newNonSliceValues = [...nonSliceValues];
    newNonSliceValues[valueIndex] = newValue, setValuesWrapper(newNonSliceValues, nonSliceIndex);
  }, defaultPropertyType: void 0, outcome: props.outcome }) }), !props.property.readonly && (0, import_jsx_runtime66.jsx)(ArrayRemoveButton, { propertyDisplayName, testId: `nonsliced-remove-${valueIndex}`, onClick: (e) => {
    killEvent(e);
    let newNonSliceValues = [...nonSliceValues];
    newNonSliceValues.splice(valueIndex, 1), setValuesWrapper(newNonSliceValues, nonSliceIndex);
  } })] }, `${valueIndex}-${nonSliceValues.length}`)), !props.property.readonly && showNonSliceValues && slicedValues.flat().length < property.max && (0, import_jsx_runtime66.jsx)(Group, { wrap: "nowrap", style: { justifyContent: "flex-start" }, children: (0, import_jsx_runtime66.jsx)(ArrayAddButton, { propertyDisplayName, onClick: (e) => {
    killEvent(e);
    let newNonSliceValues = [...nonSliceValues];
    newNonSliceValues.push(void 0), setValuesWrapper(newNonSliceValues, nonSliceIndex);
  }, testId: "nonsliced-add" }) })] });
}
function addPlaceholderValues(slicedValues, slices) {
  for (let sliceIndex = 0; sliceIndex < slices.length; sliceIndex++) {
    let slice = slices[sliceIndex], sliceValues = slicedValues[sliceIndex];
    for (; sliceValues.length < slice.min; ) sliceValues.push(void 0);
  }
}
function SensitiveTextarea(props) {
  let [revealed, setRevealed] = (0, import_react60.useState)(false), clipboard = useClipboard(), ref = (0, import_react60.useRef)(null), styles = { ...props.styles };
  return revealed || (styles.input || (styles.input = {}), styles.input.WebkitTextSecurity = "disc"), (0, import_jsx_runtime67.jsxs)(Flex, { gap: "xs", children: [(0, import_jsx_runtime67.jsx)(Textarea, { ...props, styles: { ...styles, root: { ...styles.root ?? {}, flexGrow: 1 } }, ref, autosize: true, minRows: 1, onFocus: () => setRevealed(true), onBlur: () => setRevealed(false) }), (0, import_jsx_runtime67.jsx)(ActionIcon, { title: "Copy secret", onClick: () => {
    var _a;
    clipboard.copy((_a = ref.current) == null ? void 0 : _a.value), showNotification({ color: "green", message: "Copied" });
  }, children: (0, import_jsx_runtime67.jsx)(IconCopy, {}) })] });
}
var daysOfWeek = ["sun", "mon", "tue", "wed", "thu", "fri", "sat"];
function TimingInput(props) {
  let [value, setValue] = (0, import_react61.useState)(props.defaultValue), [open, setOpen] = (0, import_react61.useState)(!props.disabled && (props.defaultModalOpen ?? false)), valueRef = (0, import_react61.useRef)();
  return valueRef.current = value, (0, import_jsx_runtime68.jsxs)(import_jsx_runtime68.Fragment, { children: [(0, import_jsx_runtime68.jsxs)(Group, { gap: "xs", grow: true, wrap: "nowrap", children: [(0, import_jsx_runtime68.jsx)("span", { children: hl(valueRef.current) || "No repeat" }), (0, import_jsx_runtime68.jsx)(Button, { disabled: props.disabled, onClick: () => setOpen(true), children: "Edit" })] }), !props.disabled && (0, import_jsx_runtime68.jsx)(TimingEditorDialog, { path: props.path, visible: open, defaultValue: valueRef.current, onOk: (newValue) => {
    props.onChange && props.onChange(newValue), setValue(newValue), setOpen(false);
  }, onCancel: () => setOpen(false) })] });
}
var defaultValue = { repeat: { period: 1, periodUnit: "d" } };
function TimingEditorDialog(props) {
  let [value, setValue] = (0, import_react61.useState)(props.defaultValue || defaultValue), { getExtendedProps } = (0, import_react61.useContext)(ElementsContext), [eventProps, repeatProps, repeatPeriodProps, repeatPeriodUnitProps, repeatDayOfWeekProps] = (0, import_react61.useMemo)(() => ["event", "repeat", "repeat.period", "repeat.periodUnit", "repeat.dayOfWeek"].map((field) => getExtendedProps(props.path + "." + field)), [getExtendedProps, props.path]), valueRef = (0, import_react61.useRef)();
  valueRef.current = value;
  function setStart(newStart) {
    setValue({ ...valueRef.current, event: [newStart] });
  }
  function setRepeat(repeat) {
    setValue({ ...valueRef.current, repeat });
  }
  function setPeriod(newPeriod) {
    var _a;
    setRepeat({ ...(_a = valueRef.current) == null ? void 0 : _a.repeat, period: newPeriod });
  }
  function setPeriodUnit(newPeriodUnit) {
    var _a;
    setRepeat({ ...(_a = valueRef.current) == null ? void 0 : _a.repeat, periodUnit: newPeriodUnit });
  }
  function setDaysOfWeek(newDaysOfWeek) {
    var _a;
    setRepeat({ ...(_a = valueRef.current) == null ? void 0 : _a.repeat, dayOfWeek: newDaysOfWeek });
  }
  return (0, import_jsx_runtime68.jsx)(Modal, { title: "Timing", closeButtonProps: { "aria-label": "Close" }, opened: props.visible, onClose: () => props.onCancel(), children: (0, import_jsx_runtime68.jsxs)(Stack, { children: [(0, import_jsx_runtime68.jsx)(FormSection, { title: "Starts on", htmlFor: "timing-dialog-start", children: (0, import_jsx_runtime68.jsx)(DateTimeInput, { disabled: eventProps == null ? void 0 : eventProps.readonly, name: "timing-dialog-start", onChange: (newValue) => setStart(newValue) }) }), (0, import_jsx_runtime68.jsx)(Switch, { disabled: repeatProps == null ? void 0 : repeatProps.readonly, label: "Repeat", checked: !!value.repeat, onChange: (e) => setRepeat(e.currentTarget.checked ? defaultValue.repeat : void 0) }), value.repeat && (0, import_jsx_runtime68.jsxs)(import_jsx_runtime68.Fragment, { children: [(0, import_jsx_runtime68.jsx)(FormSection, { title: "Repeat every", htmlFor: "timing-dialog-period", children: (0, import_jsx_runtime68.jsxs)(Group, { gap: "xs", grow: true, wrap: "nowrap", children: [(0, import_jsx_runtime68.jsx)(TextInput, { disabled: repeatPeriodProps == null ? void 0 : repeatPeriodProps.readonly, type: "number", step: 1, id: "timing-dialog-period", name: "timing-dialog-period", defaultValue: value.repeat.period || 1, onChange: (e) => setPeriod(parseInt(e.currentTarget.value, 10) || 1) }), (0, import_jsx_runtime68.jsx)(NativeSelect, { disabled: repeatPeriodUnitProps == null ? void 0 : repeatPeriodUnitProps.readonly, id: "timing-dialog-periodUnit", name: "timing-dialog-periodUnit", defaultValue: value.repeat.periodUnit, onChange: (e) => setPeriodUnit(e.currentTarget.value), data: [{ label: "second", value: "s" }, { label: "minute", value: "min" }, { label: "hour", value: "h" }, { label: "day", value: "d" }, { label: "week", value: "wk" }, { label: "month", value: "mo" }, { label: "year", value: "a" }] })] }) }), value.repeat.periodUnit === "wk" && (0, import_jsx_runtime68.jsx)(FormSection, { title: "Repeat on", children: (0, import_jsx_runtime68.jsx)(Chip.Group, { multiple: true, onChange: setDaysOfWeek, children: (0, import_jsx_runtime68.jsx)(Group, { justify: "space-between", mt: "md", gap: "xs", children: daysOfWeek.map((day) => (0, import_jsx_runtime68.jsx)(Chip, { value: day, size: "xs", radius: "xl", disabled: repeatDayOfWeekProps == null ? void 0 : repeatDayOfWeekProps.readonly, children: day.charAt(0).toUpperCase() }, day)) }) }) })] }), (0, import_jsx_runtime68.jsx)(Group, { justify: "flex-end", children: (0, import_jsx_runtime68.jsx)(Button, { onClick: () => props.onOk(value), children: "OK" }) })] }) });
}
function ResourcePropertyInput(props) {
  var _a;
  let { property, name, onChange, defaultValue: defaultValue2 } = props, defaultPropertyType = props.defaultPropertyType && props.defaultPropertyType !== "undefined" ? props.defaultPropertyType : property.type[0].code, propertyTypes = property.type;
  if ((property.isArray || property.max > 1) && !props.arrayElement) {
    if (defaultPropertyType === l.Attachment) return (0, import_jsx_runtime69.jsx)(AttachmentArrayInput, { name, defaultValue: defaultValue2, onChange, disabled: property.readonly });
    let indent = ((_a = propertyTypes[0]) == null ? void 0 : _a.code) !== l.Extension;
    return (0, import_jsx_runtime69.jsx)(ResourceArrayInput, { property, name, path: props.path, valuePath: props.valuePath, defaultValue: defaultValue2, indent, onChange, outcome: props.outcome });
  } else return propertyTypes.length > 1 ? (0, import_jsx_runtime69.jsx)(ElementDefinitionInputSelector, { elementDefinitionTypes: propertyTypes, ...props }) : (0, import_jsx_runtime69.jsx)(ElementDefinitionTypeInput, { name, defaultValue: defaultValue2, onChange: (newValue) => {
    if (props.onChange) {
      let newPropName = props.name.replace("[x]", w(propertyTypes[0].code));
      props.onChange(newValue, newPropName);
    }
  }, outcome: props.outcome, elementDefinitionType: propertyTypes[0], min: property.min, max: property.min, binding: property.binding, path: props.path, valuePath: props.valuePath, readOnly: property.readonly });
}
function ElementDefinitionInputSelector(props) {
  let propertyTypes = props.elementDefinitionTypes, initialPropertyType;
  props.defaultPropertyType && (initialPropertyType = propertyTypes.find((t) => t.code === props.defaultPropertyType)), initialPropertyType || (initialPropertyType = propertyTypes[0]);
  let [selectedType, setSelectedType] = (0, import_react43.useState)(initialPropertyType);
  return (0, import_jsx_runtime69.jsxs)(Group, { gap: "xs", grow: true, wrap: "nowrap", align: "flex-start", children: [(0, import_jsx_runtime69.jsx)(NativeSelect, { disabled: props.property.readonly, style: { width: "200px" }, defaultValue: selectedType.code, "data-testid": props.name && props.name + "-selector", onChange: (e) => {
    setSelectedType(propertyTypes.find((type) => type.code === e.currentTarget.value));
  }, data: propertyTypes.map((type) => ({ value: type.code, label: type.code })) }), (0, import_jsx_runtime69.jsx)(ElementDefinitionTypeInput, { name: props.name, defaultValue: props.defaultValue, outcome: props.outcome, elementDefinitionType: selectedType, onChange: (newValue) => {
    props.onChange && props.onChange(newValue, props.name.replace("[x]", w(selectedType.code)));
  }, min: props.property.min, max: props.property.max, binding: props.property.binding, path: props.property.path, valuePath: props.valuePath, readOnly: props.property.readonly })] });
}
function ElementDefinitionTypeInput(props) {
  let { name, onChange, outcome, binding, path, valuePath, readOnly } = props, required = props.min !== void 0 && props.min > 0, propertyType = props.elementDefinitionType.code, elementsContext = (0, import_react43.useContext)(ElementsContext), defaultValue2 = (0, import_react43.useMemo)(() => {
    if (!Er(propertyType) || !S(props.defaultValue)) return props.defaultValue;
    let withDefaults = /* @__PURE__ */ Object.create(null);
    if (elementsContext.path === props.path) If(withDefaults, elementsContext.elements);
    else {
      let key = we(elementsContext.path, props.path);
      if (key === void 0) return props.defaultValue;
      If(withDefaults, elementsContext.elements, key);
    }
    return K(withDefaults) ? withDefaults : props.defaultValue;
  }, [propertyType, elementsContext.path, elementsContext.elements, props.path, props.defaultValue]);
  if (!propertyType) return (0, import_jsx_runtime69.jsx)("div", { children: "Property type not specified " });
  function getComplexInputProps() {
    return { name, defaultValue: defaultValue2, onChange, outcome, path, valuePath, disabled: readOnly };
  }
  function getPrimitiveInputProps() {
    let error = getErrorsForInput(props.outcome, valuePath ?? path);
    return { id: name, name, "data-testid": name, defaultValue: defaultValue2, required, error, disabled: readOnly };
  }
  switch (propertyType) {
    case l.SystemString:
    case l.canonical:
    case l.string:
    case l.time:
    case l.uri:
    case l.url:
      return props.path === "Project.secret.value[x]" ? (0, import_jsx_runtime69.jsx)(SensitiveTextarea, { ...getPrimitiveInputProps(), onChange: (e) => {
        props.onChange && props.onChange(e.currentTarget.value);
      } }) : (0, import_jsx_runtime69.jsx)(TextInput, { ...getPrimitiveInputProps(), onChange: (e) => {
        onChange && onChange(e.currentTarget.value);
      } });
    case l.date:
      return (0, import_jsx_runtime69.jsx)(TextInput, { ...getPrimitiveInputProps(), type: "date", onChange: (e) => {
        onChange && onChange(e.currentTarget.value);
      } });
    case l.dateTime:
    case l.instant:
      return (0, import_jsx_runtime69.jsx)(DateTimeInput, { ...getPrimitiveInputProps(), onChange, outcome });
    case l.decimal:
    case l.integer:
    case l.positiveInt:
    case l.unsignedInt:
      return (0, import_jsx_runtime69.jsx)(TextInput, { ...getPrimitiveInputProps(), type: "number", step: propertyType === l.decimal ? "any" : "1", onChange: (e) => {
        if (onChange) {
          let num = e.currentTarget.valueAsNumber;
          onChange(Number.isNaN(num) ? void 0 : num);
        }
      } });
    case l.code:
      return (0, import_jsx_runtime69.jsx)(CodeInput, { ...getPrimitiveInputProps(), error: void 0, onChange, binding: binding == null ? void 0 : binding.valueSet });
    case l.boolean:
      return (0, import_jsx_runtime69.jsx)(Checkbox, { ...getPrimitiveInputProps(), defaultChecked: !!defaultValue2, onChange: (e) => {
        onChange && onChange(e.currentTarget.checked);
      } });
    case l.base64Binary:
    case l.markdown:
      return (0, import_jsx_runtime69.jsx)(Textarea, { ...getPrimitiveInputProps(), spellCheck: propertyType !== l.base64Binary, onChange: (e) => {
        onChange && onChange(e.currentTarget.value);
      } });
    case l.Address:
      return (0, import_jsx_runtime69.jsx)(AddressInput, { ...getComplexInputProps() });
    case l.Annotation:
      return (0, import_jsx_runtime69.jsx)(AnnotationInput, { ...getComplexInputProps() });
    case l.Attachment:
      return (0, import_jsx_runtime69.jsx)(AttachmentInput, { ...getComplexInputProps() });
    case l.CodeableConcept:
      return (0, import_jsx_runtime69.jsx)(CodeableConceptInput, { binding: binding == null ? void 0 : binding.valueSet, ...getComplexInputProps() });
    case l.Coding:
      return (0, import_jsx_runtime69.jsx)(CodingInput, { binding: binding == null ? void 0 : binding.valueSet, ...getComplexInputProps() });
    case l.ContactDetail:
      return (0, import_jsx_runtime69.jsx)(ContactDetailInput, { ...getComplexInputProps() });
    case l.ContactPoint:
      return (0, import_jsx_runtime69.jsx)(ContactPointInput, { ...getComplexInputProps() });
    case l.Extension:
      return (0, import_jsx_runtime69.jsx)(ExtensionInput, { ...getComplexInputProps(), propertyType: props.elementDefinitionType });
    case l.HumanName:
      return (0, import_jsx_runtime69.jsx)(HumanNameInput, { ...getComplexInputProps() });
    case l.Identifier:
      return (0, import_jsx_runtime69.jsx)(IdentifierInput, { ...getComplexInputProps() });
    case l.Money:
      return (0, import_jsx_runtime69.jsx)(MoneyInput, { ...getComplexInputProps() });
    case l.Period:
      return (0, import_jsx_runtime69.jsx)(PeriodInput, { ...getComplexInputProps() });
    case l.Duration:
    case l.Quantity:
      return (0, import_jsx_runtime69.jsx)(QuantityInput, { ...getComplexInputProps() });
    case l.Range:
      return (0, import_jsx_runtime69.jsx)(RangeInput, { ...getComplexInputProps() });
    case l.Ratio:
      return (0, import_jsx_runtime69.jsx)(RatioInput, { ...getComplexInputProps() });
    case l.Reference:
      return (0, import_jsx_runtime69.jsx)(ReferenceInput, { ...getComplexInputProps(), targetTypes: getTargetTypes(props.elementDefinitionType) });
    case l.Timing:
      return (0, import_jsx_runtime69.jsx)(TimingInput, { ...getComplexInputProps() });
    case l.Dosage:
    case l.UsageContext:
    default:
      return (0, import_jsx_runtime69.jsx)(BackboneElementInput, { ...getComplexInputProps(), typeName: propertyType });
  }
}
var RESOURCE_TYPE_URL_PREFIXES = [`${Zr}/fhir/StructureDefinition/`, "https://medplum.com/fhir/StructureDefinition/"];
function getTargetTypes(elementDefinitionType) {
  var _a;
  return (_a = elementDefinitionType == null ? void 0 : elementDefinitionType.targetProfile) == null ? void 0 : _a.map((p) => {
    let resourceTypePrefix = RESOURCE_TYPE_URL_PREFIXES.find((prefix) => p.startsWith(prefix));
    return resourceTypePrefix ? p.slice(resourceTypePrefix.length) : p;
  });
}
function ElementsInput(props) {
  let [value, setValue] = (0, import_react40.useState)(props.defaultValue ?? {}), elementsContext = (0, import_react40.useContext)(ElementsContext), elementsToRender = (0, import_react40.useMemo)(() => getElementsToRender(elementsContext.elements), [elementsContext.elements]);
  function setValueWrapper(newValue) {
    setValue(newValue), props.onChange && props.onChange(newValue);
  }
  let typedValue = { type: props.type, value };
  return (0, import_jsx_runtime70.jsx)(Stack, { style: { flexGrow: 1 }, "data-testid": props.testId, children: elementsToRender.map(([key, element]) => {
    let [propertyValue, propertyType] = getValueAndTypeFromElement(typedValue, key, element), required = element.min !== void 0 && element.min > 0, valuePath = props.valuePath ? props.valuePath + "." + key : void 0, resourcePropertyInput = (0, import_jsx_runtime70.jsx)(ResourcePropertyInput, { property: element, name: key, path: props.path + "." + key, valuePath, defaultValue: propertyValue, defaultPropertyType: propertyType, onChange: (newValue, propName) => {
      setValueWrapper(setPropertyValue({ ...value }, key, propName ?? key, element, newValue));
    }, outcome: props.outcome }, key);
    return props.type === "Extension" || EXTENSION_KEYS.includes(key) ? resourcePropertyInput : element.type.length === 1 && element.type[0].code === "boolean" ? (0, import_jsx_runtime70.jsx)(CheckboxFormSection, { title: Ol(key), description: element.description, htmlFor: key, fhirPath: element.path, withAsterisk: required, readonly: element.readonly, children: resourcePropertyInput }, key) : (0, import_jsx_runtime70.jsx)(FormSection, { title: Ol(key), description: element.description, withAsterisk: required, htmlFor: key, outcome: props.outcome, fhirPath: element.path, errorExpression: valuePath, readonly: element.readonly, children: resourcePropertyInput }, key);
  }) });
}
function BackboneElementInput(props) {
  let [defaultValue2] = (0, import_react39.useState)(() => props.defaultValue ?? {}), parentElementsContext = (0, import_react39.useContext)(ElementsContext), profileUrl = props.profileUrl ?? (parentElementsContext == null ? void 0 : parentElementsContext.profileUrl), typeSchema = (0, import_react39.useMemo)(() => Le(props.typeName, profileUrl), [props.typeName, profileUrl]), type = (typeSchema == null ? void 0 : typeSchema.type) ?? props.typeName, contextValue = (0, import_react39.useMemo)(() => {
    if (typeSchema) return Wr({ parentContext: parentElementsContext, elements: typeSchema.elements, path: props.path, profileUrl: typeSchema.url, accessPolicyResource: props.accessPolicyResource });
  }, [typeSchema, parentElementsContext, props.path, props.accessPolicyResource]);
  return typeSchema ? maybeWrapWithContext(ElementsContext.Provider, contextValue, (0, import_jsx_runtime71.jsx)(ElementsInput, { path: props.path, valuePath: props.valuePath, type, defaultValue: defaultValue2, onChange: props.onChange, outcome: props.outcome })) : (0, import_jsx_runtime71.jsxs)("div", { children: [type, " not implemented"] });
}
var CalendarInput_default = { table: "CalendarInput_table" };
function getMonthString(date) {
  return date.toLocaleString("default", { month: "long" }) + " " + date.getFullYear();
}
function getStartMonth() {
  let result = /* @__PURE__ */ new Date();
  return result.setDate(1), result.setHours(0, 0, 0, 0), result;
}
function CalendarInput(props) {
  let { onChangeMonth, onClick } = props, [month, setMonth] = (0, import_react62.useState)(getStartMonth);
  function moveMonth(delta) {
    setMonth((currMonth) => {
      let newMonth = new Date(currMonth.getTime());
      return newMonth.setMonth(currMonth.getMonth() + delta), onChangeMonth(newMonth), newMonth;
    });
  }
  let grid = (0, import_react62.useMemo)(() => buildGrid(month, props.slots), [month, props.slots]);
  return (0, import_jsx_runtime72.jsxs)("div", { children: [(0, import_jsx_runtime72.jsxs)(Group, { justify: "space-between", gap: "xs", grow: true, wrap: "nowrap", children: [(0, import_jsx_runtime72.jsx)("p", { style: { flex: 1 }, children: getMonthString(month) }), (0, import_jsx_runtime72.jsxs)(Group, { justify: "flex-end", gap: "xs", children: [(0, import_jsx_runtime72.jsx)(Button, { variant: "outline", "aria-label": "Previous month", onClick: () => moveMonth(-1), children: "<" }), (0, import_jsx_runtime72.jsx)(Button, { variant: "outline", "aria-label": "Next month", onClick: () => moveMonth(1), children: ">" })] })] }), (0, import_jsx_runtime72.jsxs)("table", { className: CalendarInput_default.table, children: [(0, import_jsx_runtime72.jsx)("thead", { children: (0, import_jsx_runtime72.jsxs)("tr", { children: [(0, import_jsx_runtime72.jsx)("th", { children: "SUN" }), (0, import_jsx_runtime72.jsx)("th", { children: "MON" }), (0, import_jsx_runtime72.jsx)("th", { children: "TUE" }), (0, import_jsx_runtime72.jsx)("th", { children: "WED" }), (0, import_jsx_runtime72.jsx)("th", { children: "THU" }), (0, import_jsx_runtime72.jsx)("th", { children: "FRI" }), (0, import_jsx_runtime72.jsx)("th", { children: "SAT" })] }) }), (0, import_jsx_runtime72.jsx)("tbody", { children: grid.map((week, weekIndex) => (0, import_jsx_runtime72.jsx)("tr", { children: week.map((day, dayIndex) => (0, import_jsx_runtime72.jsx)("td", { children: day && (0, import_jsx_runtime72.jsx)(Button, { variant: "light", disabled: !day.available, onClick: () => onClick(day.date), children: day.date.getDate() }) }, "day-" + dayIndex)) }, "week-" + weekIndex)) })] })] });
}
function buildGrid(startDate, slots) {
  let d2 = new Date(startDate.getFullYear(), startDate.getMonth()), grid = [], row = [];
  for (let i = 0; i < d2.getDay(); i++) row.push(void 0);
  for (; d2.getMonth() === startDate.getMonth(); ) row.push({ date: new Date(d2.getTime()), available: isDayAvailable(d2, slots) }), d2.getDay() === 6 && (grid.push(row), row = []), d2.setDate(d2.getDate() + 1);
  if (d2.getDay() !== 0) {
    for (let i = d2.getDay(); i < 7; i++) row.push(void 0);
    grid.push(row);
  }
  return grid;
}
function isDayAvailable(day, slots) {
  for (let slot of slots) {
    let slotStart = new Date(slot.start);
    if (slotStart.getFullYear() === day.getFullYear() && slotStart.getMonth() === day.getMonth() && slotStart.getDate() === day.getDate()) return true;
  }
  return false;
}
var Container_default = { root: "Container_root" };
function Container2(props) {
  let { children: children2, ...others } = props;
  return (0, import_jsx_runtime73.jsx)(Container, { className: Container_default.root, ...others, children: children2 });
}
var NoteDisplay_default = { noteBody: "NoteDisplay_noteBody", noteCite: "NoteDisplay_noteCite", noteRoot: "NoteDisplay_noteRoot" };
function NoteDisplay({ value }) {
  return value ? (0, import_jsx_runtime74.jsx)(Stack, { justify: "flex-start", gap: "xs", children: value.map((note) => {
    var _a;
    return note.text && (0, import_jsx_runtime74.jsx)(Blockquote, { classNames: { cite: NoteDisplay_default.noteCite, root: NoteDisplay_default.noteRoot }, cite: ((_a = note.authorReference) == null ? void 0 : _a.display) || note.authorString, icon: null, children: note.text }, `note-${note.text}`);
  }) }) : null;
}
function ResourceName(props) {
  let { value, link, ...rest } = props, [outcome, setOutcome] = (0, import_react65.useState)(), resource = Ue(value, setOutcome), text;
  if (outcome && !rr(outcome)) text = `[${Ne(outcome)}]`;
  else if (resource) text = Eo(resource);
  else return null;
  return link ? (0, import_jsx_runtime75.jsx)(MedplumLink, { to: value, ...rest, children: text }) : (0, import_jsx_runtime75.jsx)(Text, { component: "span", ...rest, children: text });
}
function ResourceBadge(props) {
  return (0, import_jsx_runtime76.jsxs)(Group, { gap: "xs", children: [(0, import_jsx_runtime76.jsx)(ResourceAvatar, { size: 24, radius: 12, value: props.value, link: props.link }), (0, import_jsx_runtime76.jsx)(ResourceName, { value: props.value, link: props.link })] });
}
var statusToColor = { draft: "blue", active: "blue", "on-hold": "yellow", revoked: "red", completed: "green", "entered-in-error": "red", unknown: "gray", retired: "gray", registered: "blue", preliminary: "blue", final: "green", amended: "yellow", corrected: "yellow", cancelled: "red", requested: "blue", received: "blue", accepted: "blue", rejected: "red", ready: "blue", "in-progress": "blue", failed: "red", proposed: "blue", pending: "blue", booked: "blue", arrived: "blue", fulfilled: "green", noshow: "red", "checked-in": "blue", waitlist: "gray", routine: "gray", urgent: "red", asap: "red", stat: "red", "not-done": "red", connected: "green", disconnected: "red" };
function StatusBadge(props) {
  return (0, import_jsx_runtime77.jsx)(Badge, { color: statusToColor[props.status], children: props.status });
}
var DiagnosticReportDisplay_default = { table: "DiagnosticReportDisplay_table", criticalRow: "DiagnosticReportDisplay_criticalRow", noteBody: "DiagnosticReportDisplay_noteBody", noteCite: "DiagnosticReportDisplay_noteCite", noteRoot: "DiagnosticReportDisplay_noteRoot" };
DiagnosticReportDisplay.defaultProps = { hideObservationNotes: false, hideSpecimenInfo: false };
function DiagnosticReportDisplay(props) {
  var _a;
  let medplum = b(), diagnosticReport = Ue(props.value), [specimens, setSpecimens] = (0, import_react64.useState)();
  if ((0, import_react64.useEffect)(() => {
    (diagnosticReport == null ? void 0 : diagnosticReport.specimen) && Promise.allSettled(diagnosticReport.specimen.map((ref) => medplum.readReference(ref))).then((outcomes) => outcomes.filter((outcome) => outcome.status === "fulfilled").map((outcome) => outcome.value)).then(setSpecimens).catch(console.error);
  }, [medplum, diagnosticReport]), !diagnosticReport) return null;
  let specimenNotes = (specimens == null ? void 0 : specimens.flatMap((spec) => spec.note || [])) || [];
  if (diagnosticReport.presentedForm && diagnosticReport.presentedForm.length > 0) {
    let pf = diagnosticReport.presentedForm[0];
    ((_a = pf.contentType) == null ? void 0 : _a.startsWith("text/plain")) && pf.data && specimenNotes.push({ text: window.atob(pf.data) });
  }
  return (0, import_jsx_runtime78.jsxs)(Stack, { children: [(0, import_jsx_runtime78.jsx)(Title, { children: "Diagnostic Report" }), (0, import_jsx_runtime78.jsx)(DiagnosticReportHeader, { value: diagnosticReport }), specimens && !props.hideSpecimenInfo && SpecimenInfo(specimens), diagnosticReport.result && (0, import_jsx_runtime78.jsx)(ObservationTable, { hideObservationNotes: props.hideObservationNotes, value: diagnosticReport.result }), specimenNotes.length > 0 && (0, import_jsx_runtime78.jsx)(NoteDisplay, { value: specimenNotes })] });
}
function DiagnosticReportHeader({ value }) {
  var _a, _b;
  return (0, import_jsx_runtime78.jsxs)(Group, { mt: "md", gap: 30, children: [value.subject && (0, import_jsx_runtime78.jsxs)("div", { children: [(0, import_jsx_runtime78.jsx)(Text, { size: "xs", tt: "uppercase", c: "dimmed", children: "Subject" }), (0, import_jsx_runtime78.jsx)(ResourceBadge, { value: value.subject, link: true })] }), (_a = value.resultsInterpreter) == null ? void 0 : _a.map((interpreter) => (0, import_jsx_runtime78.jsxs)("div", { children: [(0, import_jsx_runtime78.jsx)(Text, { size: "xs", tt: "uppercase", c: "dimmed", children: "Interpreter" }), (0, import_jsx_runtime78.jsx)(ResourceBadge, { value: interpreter, link: true })] }, interpreter.reference)), (_b = value.performer) == null ? void 0 : _b.map((performer) => (0, import_jsx_runtime78.jsxs)("div", { children: [(0, import_jsx_runtime78.jsx)(Text, { size: "xs", tt: "uppercase", c: "dimmed", children: "Performer" }), (0, import_jsx_runtime78.jsx)(ResourceBadge, { value: performer, link: true })] }, performer.reference)), value.issued && (0, import_jsx_runtime78.jsxs)("div", { children: [(0, import_jsx_runtime78.jsx)(Text, { size: "xs", tt: "uppercase", c: "dimmed", children: "Issued" }), (0, import_jsx_runtime78.jsx)(Text, { children: Pr(value.issued) })] }), value.status && (0, import_jsx_runtime78.jsxs)("div", { children: [(0, import_jsx_runtime78.jsx)(Text, { size: "xs", tt: "uppercase", c: "dimmed", children: "Status" }), (0, import_jsx_runtime78.jsx)(Text, { children: w(value.status) })] })] });
}
function SpecimenInfo(specimens) {
  return (0, import_jsx_runtime78.jsxs)(Stack, { gap: "xs", children: [(0, import_jsx_runtime78.jsx)(Title, { order: 2, size: "h6", children: "Specimens" }), (0, import_jsx_runtime78.jsx)(List, { type: "ordered", children: specimens == null ? void 0 : specimens.map((specimen) => {
    var _a;
    return (0, import_jsx_runtime78.jsx)(List.Item, { ml: "sm", children: (0, import_jsx_runtime78.jsxs)(Group, { gap: 20, children: [(0, import_jsx_runtime78.jsxs)(Group, { gap: 5, children: [(0, import_jsx_runtime78.jsx)(Text, { fw: 500, children: "Collected:" }), " ", Pr((_a = specimen.collection) == null ? void 0 : _a.collectedDateTime)] }), (0, import_jsx_runtime78.jsxs)(Group, { gap: 5, children: [(0, import_jsx_runtime78.jsx)(Text, { fw: 500, children: "Received:" }), " ", Pr(specimen.receivedTime)] })] }) }, `specimen-${specimen.id}`);
  }) })] });
}
function ObservationTable(props) {
  return (0, import_jsx_runtime78.jsxs)("table", { className: DiagnosticReportDisplay_default.table, children: [(0, import_jsx_runtime78.jsx)("thead", { children: (0, import_jsx_runtime78.jsxs)("tr", { children: [(0, import_jsx_runtime78.jsx)("th", { children: "Test" }), (0, import_jsx_runtime78.jsx)("th", { children: "Value" }), (0, import_jsx_runtime78.jsx)("th", { children: "Reference Range" }), (0, import_jsx_runtime78.jsx)("th", { children: "Interpretation" }), (0, import_jsx_runtime78.jsx)("th", { children: "Category" }), (0, import_jsx_runtime78.jsx)("th", { children: "Performer" }), (0, import_jsx_runtime78.jsx)("th", { children: "Status" })] }) }), (0, import_jsx_runtime78.jsx)("tbody", { children: (0, import_jsx_runtime78.jsx)(ObservationRowGroup, { value: props.value, ancestorIds: props.ancestorIds, hideObservationNotes: props.hideObservationNotes }) })] });
}
function ObservationRowGroup(props) {
  var _a;
  return (0, import_jsx_runtime78.jsx)(import_jsx_runtime78.Fragment, { children: (_a = props.value) == null ? void 0 : _a.map((observation) => (0, import_jsx_runtime78.jsx)(ObservationRow, { value: observation, ancestorIds: props.ancestorIds, hideObservationNotes: props.hideObservationNotes }, `obs-${ue(observation) ? observation.reference : observation.id}`)) });
}
function ObservationRow(props) {
  var _a, _b;
  let observation = Ue(props.value);
  if (!observation || ((_a = props.ancestorIds) == null ? void 0 : _a.includes(observation.id))) return null;
  let displayNotes = !props.hideObservationNotes && observation.note, critical = isCritical(observation);
  return (0, import_jsx_runtime78.jsxs)(import_jsx_runtime78.Fragment, { children: [(0, import_jsx_runtime78.jsxs)("tr", { className: clsx_default({ [DiagnosticReportDisplay_default.criticalRow]: critical }), children: [(0, import_jsx_runtime78.jsx)("td", { rowSpan: displayNotes ? 2 : 1, children: (0, import_jsx_runtime78.jsx)(MedplumLink, { to: observation, children: (0, import_jsx_runtime78.jsx)(CodeableConceptDisplay, { value: observation.code }) }) }), (0, import_jsx_runtime78.jsx)("td", { children: (0, import_jsx_runtime78.jsx)(ObservationValueDisplay, { value: observation }) }), (0, import_jsx_runtime78.jsx)("td", { children: (0, import_jsx_runtime78.jsx)(ReferenceRangeDisplay, { value: observation.referenceRange }) }), (0, import_jsx_runtime78.jsx)("td", { children: observation.interpretation && observation.interpretation.length > 0 && (0, import_jsx_runtime78.jsx)(CodeableConceptDisplay, { value: observation.interpretation[0] }) }), (0, import_jsx_runtime78.jsx)("td", { children: observation.category && observation.category.length > 0 && (0, import_jsx_runtime78.jsx)(import_jsx_runtime78.Fragment, { children: observation.category.map((concept) => (0, import_jsx_runtime78.jsx)("div", { children: (0, import_jsx_runtime78.jsx)(CodeableConceptDisplay, { value: concept }) }, `category-${at(concept)}`)) }) }), (0, import_jsx_runtime78.jsx)("td", { children: (_b = observation.performer) == null ? void 0 : _b.map((performer) => (0, import_jsx_runtime78.jsx)(ReferenceDisplay, { value: performer }, performer.reference)) }), (0, import_jsx_runtime78.jsx)("td", { children: observation.status && (0, import_jsx_runtime78.jsx)(StatusBadge, { status: observation.status }) })] }), observation.hasMember && (0, import_jsx_runtime78.jsx)(ObservationRowGroup, { value: observation.hasMember, ancestorIds: props.ancestorIds ? [...props.ancestorIds, observation.id] : [observation.id], hideObservationNotes: props.hideObservationNotes }), displayNotes && (0, import_jsx_runtime78.jsx)("tr", { children: (0, import_jsx_runtime78.jsx)("td", { colSpan: 6, children: (0, import_jsx_runtime78.jsx)(NoteDisplay, { value: observation.note }) }) })] });
}
function ObservationValueDisplay(props) {
  let obs = props.value;
  return (0, import_jsx_runtime78.jsx)(import_jsx_runtime78.Fragment, { children: Qo(obs) });
}
function ReferenceRangeDisplay(props) {
  let range = props.value && props.value.length > 0 && props.value[0];
  return range ? range.text ? (0, import_jsx_runtime78.jsx)(import_jsx_runtime78.Fragment, { children: range.text }) : (0, import_jsx_runtime78.jsx)(RangeDisplay, { value: range }) : null;
}
function isCritical(observation) {
  var _a, _b, _c, _d;
  let code = (_d = (_c = (_b = (_a = observation.interpretation) == null ? void 0 : _a[0]) == null ? void 0 : _b.coding) == null ? void 0 : _c[0]) == null ? void 0 : _d.code;
  return code === "AA" || code === "LL" || code === "HH" || code === "A";
}
var Panel_default = { paper: "Panel_paper", fill: "Panel_fill" };
function Panel(props) {
  let { width, fill, className, children: children2, ...rest } = props, style = width ? { maxWidth: width } : void 0;
  return (0, import_jsx_runtime79.jsx)(Paper, { className: clsx_default(Panel_default.paper, fill && Panel_default.fill, className), style, shadow: "sm", radius: "sm", withBorder: true, ...rest, children: children2 });
}
var import_rfc6902 = __toESM2(require_rfc6902(), 1);
var ResourceDiffTable_default = { root: "ResourceDiffTable_root", removed: "ResourceDiffTable_removed", added: "ResourceDiffTable_added" };
function ResourceDiffTable(props) {
  let medplum = b(), { original, revised } = props, [schemaLoaded, setSchemaLoaded] = (0, import_react66.useState)(false);
  (0, import_react66.useEffect)(() => {
    medplum.requestSchema(props.original.resourceType).then(() => setSchemaLoaded(true)).catch(console.log);
  }, [medplum, props.original.resourceType]);
  let diffTable = (0, import_react66.useMemo)(() => {
    if (!schemaLoaded) return null;
    let typedOriginal = [g(original)], typedRevised = [g(revised)], result = [], patch = mergePatchOperations((0, import_rfc6902.createPatch)(original, revised));
    for (let op of patch) {
      let path = op.path, fhirPath = jsonPathToFhirPath(path), property = tryGetElementDefinition(original.resourceType, fhirPath), originalValue = op.op === "add" ? void 0 : A(fhirPath, typedOriginal), revisedValue = op.op === "remove" ? void 0 : A(fhirPath, typedRevised);
      result.push({ key: `op-${op.op}-${op.path}`, name: `${w(op.op)} ${fhirPath}`, path: (property == null ? void 0 : property.path) ?? original.resourceType + "." + fhirPath, property, originalValue: touchUpValue(property, originalValue), revisedValue: touchUpValue(property, revisedValue) });
    }
    return result;
  }, [schemaLoaded, original, revised]);
  return diffTable ? (0, import_jsx_runtime80.jsxs)(Table, { className: ResourceDiffTable_default.root, children: [(0, import_jsx_runtime80.jsx)(Table.Thead, { children: (0, import_jsx_runtime80.jsxs)(Table.Tr, { children: [(0, import_jsx_runtime80.jsx)(Table.Th, {}), (0, import_jsx_runtime80.jsx)(Table.Th, { children: "Before" }), (0, import_jsx_runtime80.jsx)(Table.Th, { children: "After" })] }) }), (0, import_jsx_runtime80.jsx)(Table.Tbody, { children: diffTable.map((row) => (0, import_jsx_runtime80.jsxs)(Table.Tr, { children: [(0, import_jsx_runtime80.jsx)(Table.Td, { children: row.name }), (0, import_jsx_runtime80.jsx)(Table.Td, { className: ResourceDiffTable_default.removed, children: row.originalValue && (0, import_jsx_runtime80.jsx)(ResourcePropertyDisplay, { path: row.path, property: row.property, propertyType: row.originalValue.type, value: row.originalValue.value, ignoreMissingValues: true }) }), (0, import_jsx_runtime80.jsx)(Table.Td, { className: ResourceDiffTable_default.added, children: row.revisedValue && (0, import_jsx_runtime80.jsx)(ResourcePropertyDisplay, { path: row.path, property: row.property, propertyType: row.revisedValue.type, value: row.revisedValue.value, ignoreMissingValues: true }) })] }, row.key)) })] }) : null;
}
function mergePatchOperations(patch) {
  let result = [];
  for (let patchOperation of patch) {
    let { op, path } = patchOperation;
    if (path.startsWith("/meta/author") || path.startsWith("/meta/compartment") || path.startsWith("/meta/lastUpdated") || path.startsWith("/meta/versionId")) continue;
    let count = patch.filter((el) => el.op === op && el.path === path).length, resultOperation = { op, path };
    count > 1 && (op === "add" || op === "remove") && /\/[0-9-]+$/.test(path) && (resultOperation.op = "replace", resultOperation.path = path.replace(/\/[^/]+$/, "")), result.some((el) => el.op === resultOperation.op && el.path === resultOperation.path) || result.push(resultOperation);
  }
  return result;
}
function jsonPathToFhirPath(path) {
  let parts = path.split("/").filter(Boolean), result = "";
  for (let i = 0; i < parts.length; i++) {
    let part = parts[i];
    part === "-" ? result += ".last()" : /^\d+$/.test(part) ? result += `[${part}]` : (i > 0 && (result += "."), result += part);
  }
  return result.endsWith(".url") && (result = result.replace(/\.url$/, "")), result;
}
function tryGetElementDefinition(resourceType, fhirPath) {
  var _a, _b;
  return (_b = (_a = kr(resourceType, { resourceType: "SearchParameter", base: [resourceType], code: resourceType + "." + fhirPath, expression: resourceType + "." + fhirPath })) == null ? void 0 : _a.elementDefinitions) == null ? void 0 : _b[0];
}
function touchUpValue(property, input) {
  return input && { type: Array.isArray(input) ? input[0].type : input.type, value: fixArray(input, !!(property == null ? void 0 : property.isArray)) };
}
function fixArray(input, isArray) {
  let inputValue = Fe(input).flatMap((v2) => v2.value);
  return isArray ? inputValue : inputValue[0];
}
function ResourceTable(props) {
  let { profileUrl } = props, medplum = b(), accessPolicy = medplum.getAccessPolicy(), value = Ue(props.value), [schemaLoaded, setSchemaLoaded] = (0, import_react67.useState)(false);
  (0, import_react67.useEffect)(() => {
    if (value) if (profileUrl) medplum.requestProfileSchema(profileUrl, { expandProfile: true }).then(() => {
      En(profileUrl) ? setSchemaLoaded(true) : console.error(`Schema not found for ${profileUrl}`);
    }).catch((reason) => {
      console.error("Error in requestProfileSchema", reason);
    });
    else {
      let schemaName = value.resourceType;
      medplum.requestSchema(schemaName).then(() => {
        setSchemaLoaded(true);
      }).catch(console.error);
    }
  }, [medplum, profileUrl, value]);
  let accessPolicyResource = (0, import_react67.useMemo)(() => value && Bp(value, Ns.READ, accessPolicy), [accessPolicy, value]);
  return !schemaLoaded || !value ? null : (0, import_jsx_runtime81.jsx)(BackboneElementDisplay, { path: value.resourceType, value: { type: value.resourceType, value: props.forceUseInput ? props.value : value }, profileUrl, ignoreMissingValues: props.ignoreMissingValues, accessPolicyResource });
}
var Timeline_default = { item: "Timeline_item", itemPadding: "Timeline_itemPadding" };
function Timeline(props) {
  return (0, import_jsx_runtime82.jsx)(Container2, { children: props.children });
}
function TimelineItem(props) {
  var _a, _b;
  let { resource, profile, padding, popupMenuItems, ...others } = props, author = profile ?? ((_a = resource.meta) == null ? void 0 : _a.author), dateTime = props.dateTime ?? ((_b = resource.meta) == null ? void 0 : _b.lastUpdated);
  return (0, import_jsx_runtime82.jsxs)(Panel, { "data-testid": "timeline-item", fill: true, ...others, children: [(0, import_jsx_runtime82.jsxs)(Group, { justify: "space-between", gap: 8, mx: "xs", my: "sm", children: [(0, import_jsx_runtime82.jsx)(ResourceAvatar, { value: author, link: true, size: "md" }), (0, import_jsx_runtime82.jsxs)("div", { style: { flex: 1 }, children: [(0, import_jsx_runtime82.jsx)(Text, { size: "sm", children: (0, import_jsx_runtime82.jsx)(ResourceName, { c: "dark", fw: 500, value: author, link: true }) }), (0, import_jsx_runtime82.jsxs)(Text, { size: "xs", children: [(0, import_jsx_runtime82.jsx)(MedplumLink, { c: "dimmed", to: props.resource, children: Pr(dateTime) }), (0, import_jsx_runtime82.jsx)(Text, { component: "span", c: "dimmed", mx: 8, children: "·" }), (0, import_jsx_runtime82.jsx)(MedplumLink, { c: "dimmed", to: props.resource, children: props.resource.resourceType })] })] }), popupMenuItems && (0, import_jsx_runtime82.jsxs)(Menu, { position: "bottom-end", shadow: "md", width: 200, children: [(0, import_jsx_runtime82.jsx)(Menu.Target, { children: (0, import_jsx_runtime82.jsx)(ActionIcon, { color: "gray", variant: "subtle", radius: "xl", "aria-label": `Actions for ${le(props.resource)}`, children: (0, import_jsx_runtime82.jsx)(IconDots, {}) }) }), popupMenuItems] })] }), (0, import_jsx_runtime82.jsx)(ErrorBoundary, { children: (0, import_jsx_runtime82.jsx)("div", { className: clsx_default(Timeline_default.item, { [Timeline_default.itemPadding]: padding }), children: props.children }) })] });
}
function sortByDateAndPriority(resources, timelineResource) {
  resources.sort((a, b2) => {
    let priority1 = getPriorityScore(a, timelineResource), priority2 = getPriorityScore(b2, timelineResource);
    return priority1 > priority2 ? 1 : priority1 < priority2 ? -1 : getTime(a, timelineResource) - getTime(b2, timelineResource);
  });
}
function getPriorityScore(resource, timelineResource) {
  if (!isSameResourceType(resource, timelineResource)) {
    let priority = resource.priority;
    if (typeof priority == "string") return { stat: 4, asap: 3, urgent: 2 }[priority] ?? 0;
  }
  return 0;
}
function getTime(resource, timelineResource) {
  var _a;
  if (!isSameResourceType(resource, timelineResource)) {
    if (resource.resourceType === "Communication" && resource.sent) return new Date(resource.sent).getTime();
    if ((resource.resourceType === "DiagnosticReport" || resource.resourceType === "Media" || resource.resourceType === "Observation") && resource.issued) return new Date(resource.issued).getTime();
    if (resource.resourceType === "DocumentReference" && resource.date) return new Date(resource.date).getTime();
  }
  let dateTime = (_a = resource.meta) == null ? void 0 : _a.lastUpdated;
  return dateTime ? new Date(dateTime).getTime() : 0;
}
function isSameResourceType(a, b2) {
  return !!b2 && a.resourceType === b2.resourceType && a.id === b2.id;
}
var ResourceTimeline_default = { pinnedComment: "ResourceTimeline_pinnedComment" };
function ResourceTimeline(props) {
  let medplum = b(), sender = medplum.getProfile(), inputRef = (0, import_react63.useRef)(null), resource = Ue(props.value), [history, setHistory] = (0, import_react63.useState)(), [items, setItems] = (0, import_react63.useState)([]), loadTimelineResources = props.loadTimelineResources, itemsRef = (0, import_react63.useRef)(items);
  itemsRef.current = items;
  let sortAndSetItems = (0, import_react63.useCallback)((newItems) => {
    sortByDateAndPriority(newItems, resource), newItems.reverse(), setItems(newItems);
  }, [resource]), handleBatchResponse = (0, import_react63.useCallback)((batchResponse) => {
    let newItems = [];
    for (let settledResult of batchResponse) {
      if (settledResult.status !== "fulfilled") continue;
      let bundle = settledResult.value;
      if (bundle.type === "history" && setHistory(bundle), bundle.entry) for (let entry of bundle.entry) newItems.push(entry.resource);
    }
    sortAndSetItems(newItems);
  }, [sortAndSetItems]), addResource = (0, import_react63.useCallback)((resource2) => sortAndSetItems([...itemsRef.current, resource2]), [sortAndSetItems]), loadTimeline = (0, import_react63.useCallback)(() => {
    var _a;
    let resourceType, id;
    "resourceType" in props.value ? (resourceType = props.value.resourceType, id = props.value.id) : [resourceType, id] = (_a = props.value.reference) == null ? void 0 : _a.split("/"), loadTimelineResources(medplum, resourceType, id).then(handleBatchResponse).catch(console.error);
  }, [medplum, props.value, loadTimelineResources, handleBatchResponse]);
  (0, import_react63.useEffect)(() => loadTimeline(), [loadTimeline]);
  function createComment(contentString) {
    !resource || !props.createCommunication || medplum.createResource(props.createCommunication(resource, sender, contentString)).then((result) => addResource(result)).catch(console.error);
  }
  function createMedia(attachment) {
    !resource || !props.createMedia || medplum.createResource(props.createMedia(resource, sender, attachment)).then((result) => addResource(result)).then(() => updateNotification({ id: "upload-notification", color: "teal", title: "Upload complete", message: "", icon: (0, import_jsx_runtime83.jsx)(IconCheck, { size: 16 }), autoClose: 2e3 })).catch((reason) => updateNotification({ id: "upload-notification", color: "red", title: "Upload error", message: Ne(reason), icon: (0, import_jsx_runtime83.jsx)(IconFileAlert, { size: 16 }), autoClose: 2e3 }));
  }
  function onUploadStart() {
    showNotification({ id: "upload-notification", loading: true, title: "Initializing upload...", message: "Please wait...", autoClose: false, withCloseButton: false });
  }
  function onUploadProgress(e) {
    updateNotification({ id: "upload-notification", loading: true, title: "Uploading...", message: getProgressMessage(e), autoClose: false, withCloseButton: false });
  }
  function onUploadError(outcome) {
    updateNotification({ id: "upload-notification", color: "red", title: "Upload error", message: Ne(outcome), icon: (0, import_jsx_runtime83.jsx)(IconFileAlert, { size: 16 }), autoClose: 2e3 });
  }
  return resource ? (0, import_jsx_runtime83.jsxs)(Timeline, { children: [props.createCommunication && (0, import_jsx_runtime83.jsx)(Panel, { children: (0, import_jsx_runtime83.jsx)(Form, { testid: "timeline-form", onSubmit: (formData) => {
    createComment(formData.text);
    let input = inputRef.current;
    input && (input.value = "", input.focus());
  }, children: (0, import_jsx_runtime83.jsxs)(Group, { gap: "xs", wrap: "nowrap", style: { width: "100%" }, children: [(0, import_jsx_runtime83.jsx)(ResourceAvatar, { value: sender }), (0, import_jsx_runtime83.jsx)(TextInput, { name: "text", ref: inputRef, placeholder: "Add comment", style: { width: "100%", maxWidth: 300 } }), (0, import_jsx_runtime83.jsx)(ActionIcon, { type: "submit", radius: "xl", color: "blue", variant: "filled", children: (0, import_jsx_runtime83.jsx)(IconMessage, { size: 16 }) }), (0, import_jsx_runtime83.jsx)(AttachmentButton, { securityContext: te(resource), onUpload: createMedia, onUploadStart, onUploadProgress, onUploadError, children: (props2) => (0, import_jsx_runtime83.jsx)(ActionIcon, { ...props2, radius: "xl", color: "blue", variant: "filled", children: (0, import_jsx_runtime83.jsx)(IconCloudUpload, { size: 16 }) }) })] }) }) }), items.map((item) => {
    var _a;
    if (!item) return null;
    let key = `${item.resourceType}/${item.id}/${(_a = item.meta) == null ? void 0 : _a.versionId}`, menu = props.getMenu ? props.getMenu({ primaryResource: resource, currentResource: item, reloadTimeline: loadTimeline }) : void 0;
    if (item.resourceType === resource.resourceType && item.id === resource.id) return (0, import_jsx_runtime83.jsx)(HistoryTimelineItem, { history, resource: item, popupMenuItems: menu }, key);
    switch (item.resourceType) {
      case "AuditEvent":
        return (0, import_jsx_runtime83.jsx)(AuditEventTimelineItem, { resource: item, popupMenuItems: menu }, key);
      case "Communication":
        return (0, import_jsx_runtime83.jsx)(CommunicationTimelineItem, { resource: item, popupMenuItems: menu }, key);
      case "DiagnosticReport":
        return (0, import_jsx_runtime83.jsx)(DiagnosticReportTimelineItem, { resource: item, popupMenuItems: menu }, key);
      case "Media":
        return (0, import_jsx_runtime83.jsx)(MediaTimelineItem, { resource: item, popupMenuItems: menu }, key);
      default:
        return (0, import_jsx_runtime83.jsx)(TimelineItem, { resource: item, padding: true, children: (0, import_jsx_runtime83.jsx)(ResourceTable, { value: item, ignoreMissingValues: true }) }, key);
    }
  })] }) : (0, import_jsx_runtime83.jsx)(Center, { style: { width: "100%", height: "100%" }, children: (0, import_jsx_runtime83.jsx)(Loader, {}) });
}
function HistoryTimelineItem(props) {
  let { history, resource, ...rest } = props, previous = getPrevious(history, resource);
  return previous ? (0, import_jsx_runtime83.jsx)(TimelineItem, { resource, padding: true, ...rest, children: (0, import_jsx_runtime83.jsx)(ResourceDiffTable, { original: previous, revised: props.resource }) }) : (0, import_jsx_runtime83.jsxs)(TimelineItem, { resource, padding: true, ...rest, children: [(0, import_jsx_runtime83.jsx)("h3", { children: "Created" }), (0, import_jsx_runtime83.jsx)(ResourceTable, { value: resource, ignoreMissingValues: true, forceUseInput: true })] });
}
function getPrevious(history, version) {
  let entries = history.entry ?? [], index = entries.findIndex((entry) => {
    var _a, _b, _c;
    return ((_b = (_a = entry.resource) == null ? void 0 : _a.meta) == null ? void 0 : _b.versionId) === ((_c = version.meta) == null ? void 0 : _c.versionId);
  });
  if (!(index >= entries.length - 1)) return entries[index + 1].resource;
}
function CommunicationTimelineItem(props) {
  var _a, _b;
  let className = !props.resource.priority || props.resource.priority === "routine" ? void 0 : ResourceTimeline_default.pinnedComment;
  return (0, import_jsx_runtime83.jsx)(TimelineItem, { resource: props.resource, profile: props.resource.sender, dateTime: props.resource.sent, padding: true, className, popupMenuItems: props.popupMenuItems, children: (0, import_jsx_runtime83.jsx)("p", { children: (_b = (_a = props.resource.payload) == null ? void 0 : _a[0]) == null ? void 0 : _b.contentString }) });
}
function MediaTimelineItem(props) {
  var _a;
  let contentType = (_a = props.resource.content) == null ? void 0 : _a.contentType, padding = contentType && !contentType.startsWith("image/") && !contentType.startsWith("video/") && contentType !== "application/pdf";
  return (0, import_jsx_runtime83.jsx)(TimelineItem, { resource: props.resource, padding: !!padding, popupMenuItems: props.popupMenuItems, children: (0, import_jsx_runtime83.jsx)(AttachmentDisplay, { value: props.resource.content }) });
}
function AuditEventTimelineItem(props) {
  return (0, import_jsx_runtime83.jsx)(TimelineItem, { resource: props.resource, padding: true, popupMenuItems: props.popupMenuItems, children: (0, import_jsx_runtime83.jsx)(ScrollArea, { children: (0, import_jsx_runtime83.jsx)("pre", { children: props.resource.outcomeDesc }) }) });
}
function DiagnosticReportTimelineItem(props) {
  return (0, import_jsx_runtime83.jsx)(TimelineItem, { resource: props.resource, padding: true, popupMenuItems: props.popupMenuItems, children: (0, import_jsx_runtime83.jsx)(DiagnosticReportDisplay, { value: props.resource }) });
}
function getProgressMessage(e) {
  if (e.lengthComputable) {
    let percent = 100 * e.loaded / e.total;
    return `Uploaded: ${formatFileSize(e.loaded)} / ${formatFileSize(e.total)} ${percent.toFixed(2)}%`;
  }
  return `Uploaded: ${formatFileSize(e.loaded)}`;
}
function formatFileSize(bytes) {
  if (bytes === 0) return "0.00 B";
  let e = Math.floor(Math.log(bytes) / Math.log(1024));
  return (bytes / Math.pow(1024, e)).toFixed(2) + " " + " KMGTP".charAt(e) + "B";
}
function DefaultResourceTimeline(props) {
  let { resource, ...rest } = props;
  return (0, import_jsx_runtime84.jsx)(ResourceTimeline, { value: resource, loadTimelineResources: async (medplum, resourceType, id) => {
    let ref = `${resourceType}/${id}`;
    return Promise.allSettled([medplum.readHistory(resourceType, id), medplum.search("Task", { _filter: `based-on eq ${ref} or focus eq ${ref} or subject eq ${ref}`, _count: 100 })]);
  }, ...rest });
}
function Document(props) {
  let { children: children2, ...others } = props;
  return (0, import_jsx_runtime85.jsx)(Container2, { children: (0, import_jsx_runtime85.jsx)(Panel, { ...others, children: children2 }) });
}
function EncounterTimeline(props) {
  let { encounter, ...rest } = props;
  return (0, import_jsx_runtime86.jsx)(ResourceTimeline, { value: encounter, loadTimelineResources: async (medplum, _resourceType, id) => Promise.allSettled([medplum.readHistory("Encounter", id), medplum.search("Communication", "encounter=Encounter/" + id), medplum.search("Media", "encounter=Encounter/" + id)]), createCommunication: (resource, sender, text) => ({ resourceType: "Communication", status: "completed", encounter: te(resource), subject: resource.subject, sender: te(sender), sent: (/* @__PURE__ */ new Date()).toISOString(), payload: [{ contentString: text }] }), createMedia: (resource, operator, content) => ({ resourceType: "Media", status: "completed", encounter: te(resource), subject: resource.subject, operator: te(operator), issued: (/* @__PURE__ */ new Date()).toISOString(), content }), ...rest });
}
function FhirPathDisplay(props) {
  let value;
  try {
    value = ke(props.path, props.resource);
  } catch (err) {
    return console.warn("FhirPathDisplay:", err), null;
  }
  if (value.length > 1) throw new Error(`Component "path" for "FhirPathDisplay" must resolve to a single element.        Received ${value.length} elements        [${JSON.stringify(value, null, 2)}]`);
  return (0, import_jsx_runtime87.jsx)(ResourcePropertyDisplay, { value: value[0] || "", propertyType: props.propertyType });
}
function OperationOutcomeAlert(props) {
  var _a;
  let issues = ((_a = props.outcome) == null ? void 0 : _a.issue) || props.issues;
  return !issues || issues.length === 0 ? null : (0, import_jsx_runtime88.jsx)(Alert, { icon: (0, import_jsx_runtime88.jsx)(IconAlertCircle, { size: 16 }), color: "red", children: issues.map((issue) => {
    var _a2;
    return (0, import_jsx_runtime88.jsx)("div", { "data-testid": "text-field-error", children: Yi(issue) }, (_a2 = issue.details) == null ? void 0 : _a2.text);
  }) });
}
function SearchExportDialog(props) {
  return (0, import_jsx_runtime89.jsxs)(Modal, { title: "Export", closeButtonProps: { "aria-label": "Close" }, opened: props.visible, onClose: props.onCancel, children: [(0, import_jsx_runtime89.jsxs)(Box, { display: "flex", style: { justifyContent: "space-between" }, children: [props.exportCsv && (0, import_jsx_runtime89.jsx)(ExportButton, { text: "CSV", exportLogic: props.exportCsv, onCancel: props.onCancel }), props.exportTransactionBundle && (0, import_jsx_runtime89.jsx)(ExportButton, { text: "Transaction Bundle", exportLogic: props.exportTransactionBundle, onCancel: props.onCancel })] }), (0, import_jsx_runtime89.jsx)(Text, { style: { marginTop: "10px", marginLeft: "2px" }, children: "Limited to 1000 records" })] });
}
function ExportButton(props) {
  return (0, import_jsx_runtime89.jsx)(Button, { onClick: () => {
    props.exportLogic(), props.onCancel();
  }, children: `Export as ${props.text}` });
}
var searchParamToOperators = { string: [ai.EQUALS, ai.NOT, ai.CONTAINS, ai.EXACT], fulltext: [ai.EQUALS, ai.NOT, ai.CONTAINS, ai.EXACT], token: [ai.EQUALS, ai.NOT], reference: [ai.EQUALS, ai.NOT], numeric: [ai.EQUALS, ai.NOT_EQUALS, ai.GREATER_THAN, ai.LESS_THAN, ai.GREATER_THAN_OR_EQUALS, ai.LESS_THAN_OR_EQUALS], quantity: [ai.EQUALS, ai.NOT_EQUALS, ai.GREATER_THAN, ai.LESS_THAN, ai.GREATER_THAN_OR_EQUALS, ai.LESS_THAN_OR_EQUALS], date: [ai.EQUALS, ai.NOT_EQUALS, ai.GREATER_THAN, ai.LESS_THAN, ai.GREATER_THAN_OR_EQUALS, ai.LESS_THAN_OR_EQUALS, ai.STARTS_AFTER, ai.ENDS_BEFORE, ai.APPROXIMATELY], datetime: [ai.EQUALS, ai.NOT_EQUALS, ai.GREATER_THAN, ai.LESS_THAN, ai.GREATER_THAN_OR_EQUALS, ai.LESS_THAN_OR_EQUALS, ai.STARTS_AFTER, ai.ENDS_BEFORE, ai.APPROXIMATELY] };
var operatorNames = { eq: "equals", ne: "not equals", gt: "greater than", lt: "less than", ge: "greater than or equals", le: "less than or equals", sa: "starts after", eb: "ends before", ap: "approximately", sw: "starts with", contains: "contains", exact: "exact", text: "text", not: "not", above: "above", below: "below", in: "in", "not-in": "not in", "of-type": "of type", missing: "missing", present: "present", identifier: "identifier", iterate: "iterate" };
function setFilters(definition, filters) {
  return { ...definition, filters, offset: 0, name: void 0 };
}
function clearFilters(definition) {
  return setFilters(definition, []);
}
function clearFiltersOnField(definition, code) {
  return setFilters(definition, (definition.filters ?? []).filter((f) => f.code !== code));
}
function addFilter(definition, field, op, value, opt_clear) {
  opt_clear && (definition = clearFiltersOnField(definition, field));
  let nextFilters = [];
  return definition.filters && nextFilters.push(...definition.filters), nextFilters.push({ code: field, operator: op, value: value ?? "" }), setFilters(definition, nextFilters);
}
function addField(definition, field) {
  var _a;
  if ((_a = definition.fields) == null ? void 0 : _a.includes(field)) return definition;
  let newFields = [];
  return definition.fields && newFields.push(...definition.fields), newFields.push(field), { ...definition, fields: newFields, name: void 0 };
}
function deleteFilter(definition, index) {
  if (!definition.filters) return definition;
  let newFilters = [...definition.filters];
  return newFilters.splice(index, 1), { ...definition, filters: newFilters, name: void 0 };
}
function addYesterdayFilter(definition, field) {
  return addDayFilter(definition, field, -1);
}
function addTodayFilter(definition, field) {
  return addDayFilter(definition, field, 0);
}
function addTomorrowFilter(definition, field) {
  return addDayFilter(definition, field, 1);
}
function addDayFilter(definition, field, delta) {
  let startTime = /* @__PURE__ */ new Date();
  startTime.setDate(startTime.getDate() + delta), startTime.setHours(0, 0, 0, 0);
  let endTime = new Date(startTime.getTime());
  return endTime.setDate(endTime.getDate() + 1), endTime.setTime(endTime.getTime() - 1), addDateFilterBetween(definition, field, startTime, endTime);
}
function addLastMonthFilter(definition, field) {
  return addMonthFilter(definition, field, -1);
}
function addThisMonthFilter(definition, field) {
  return addMonthFilter(definition, field, 0);
}
function addNextMonthFilter(definition, field) {
  return addMonthFilter(definition, field, 1);
}
function addMonthFilter(definition, field, delta) {
  let startTime = /* @__PURE__ */ new Date();
  startTime.setMonth(startTime.getMonth() + delta), startTime.setDate(1), startTime.setHours(0, 0, 0, 0);
  let endTime = new Date(startTime.getTime());
  return endTime.setMonth(endTime.getMonth() + 1), endTime.setDate(1), endTime.setHours(0, 0, 0, 0), endTime.setTime(endTime.getTime() - 1), addDateFilterBetween(definition, field, startTime, endTime);
}
function addYearToDateFilter(definition, field) {
  let startTime = /* @__PURE__ */ new Date();
  return startTime.setMonth(0), startTime.setDate(1), startTime.setHours(0, 0, 0, 0), addDateFilterBetween(definition, field, startTime, /* @__PURE__ */ new Date());
}
function addDateFilterBetween(definition, field, d1, d2) {
  return definition = clearFiltersOnField(definition, field), definition = addDateFilterImpl(definition, field, ai.GREATER_THAN_OR_EQUALS, d1), definition = addDateFilterImpl(definition, field, ai.LESS_THAN_OR_EQUALS, d2), definition;
}
function addDateFilterImpl(definition, field, op, value) {
  return addFilter(definition, field, op, value.toISOString());
}
function addMissingFilter(definition, field, value = true) {
  return addFilter(definition, field, ai.MISSING, value.toString());
}
function setOffset(definition, offset) {
  return definition.offset === offset ? definition : { ...definition, offset, name: void 0 };
}
function setPage(definition, page) {
  let count = definition.count ?? Sp, newOffset = (page - 1) * count;
  return setOffset(definition, newOffset);
}
function setSort(definition, sort, desc) {
  return sort === getSortField(definition) && desc !== void 0 && desc === isSortDescending(definition) ? definition : { ...definition, sortRules: [{ code: sort, descending: !!desc }], name: void 0 };
}
function toggleSort(definition, key) {
  let desc = false;
  return getSortField(definition) === key && (desc = !isSortDescending(definition)), setSort(definition, key, desc);
}
function getSortField(definition) {
  let sortRules = definition.sortRules;
  if (!sortRules || sortRules.length === 0) return;
  let field = sortRules[0].code;
  return field.startsWith("-") ? field.substr(1) : field;
}
function isSortDescending(definition) {
  let sortRules = definition.sortRules;
  return !sortRules || sortRules.length === 0 ? false : !!sortRules[0].descending;
}
function getSearchOperators(searchParam) {
  return searchParamToOperators[searchParam.type];
}
function getOpString(op) {
  return operatorNames[op] ?? "";
}
function buildFieldNameString(key) {
  let tmp = key;
  return tmp.includes(".") && (tmp = tmp.split(".").pop()), tmp === "versionId" ? "Version ID" : (tmp = tmp.replace("[x]", ""), tmp = tmp.replace(/([A-Z])/g, " $1"), tmp = tmp.replace(/[-_]/g, " "), tmp = tmp.replace(/\s+/g, " "), tmp = tmp.trim(), tmp.toLowerCase() === "id" ? "ID" : tmp.split(/\s/).map(w).join(" "));
}
function renderValue(resource, field) {
  var _a, _b;
  let key = field.name;
  return key === "id" ? resource.id : key === "meta.versionId" ? (_a = resource.meta) == null ? void 0 : _a.versionId : key === "_lastUpdated" ? Pr((_b = resource.meta) == null ? void 0 : _b.lastUpdated) : field.elementDefinition && `${resource.resourceType}.${field.name}` === field.elementDefinition.path ? renderPropertyValue(resource, field.elementDefinition) : field.searchParams && field.searchParams.length === 1 && field.name === field.searchParams[0].code ? renderSearchParameterValue(resource, field.searchParams[0]) : null;
}
function renderPropertyValue(resource, elementDefinition) {
  var _a, _b, _c;
  let path = ((_c = (_b = (_a = elementDefinition.path) == null ? void 0 : _a.split(".")) == null ? void 0 : _b.pop()) == null ? void 0 : _c.replaceAll("[x]", "")) ?? "", [value, propertyType] = getValueAndType({ type: resource.resourceType, value: resource }, path);
  return value ? (0, import_jsx_runtime90.jsx)(ResourcePropertyDisplay, { path: elementDefinition.path, property: elementDefinition, propertyType, value, maxWidth: 200, ignoreMissingValues: true, link: false }) : null;
}
function renderSearchParameterValue(resource, searchParam) {
  let value = A(searchParam.expression, [{ type: resource.resourceType, value: resource }]);
  return !value || value.length === 0 ? null : (0, import_jsx_runtime90.jsx)(import_jsx_runtime90.Fragment, { children: value.map((v2, index) => (0, import_jsx_runtime90.jsx)(ResourcePropertyDisplay, { propertyType: v2.type, value: v2.value, maxWidth: 200, ignoreMissingValues: true, link: false }, `${index}-${value.length}`)) });
}
function SearchFieldEditor(props) {
  let wasDropdownOpen = (0, import_react70.useRef)(false), [state, setState] = (0, import_react70.useState)({ search: JSON.parse(Fn(props.search)) }), [isDropdownOpen, setIsDropdownOpen] = (0, import_react70.useState)(false);
  (0, import_react70.useEffect)(() => {
    setState({ search: props.search });
  }, [props.search]);
  let allFields = (0, import_react70.useMemo)(() => {
    if (!props.visible) return [];
    let resourceType = props.search.resourceType, typeSchema = Z(resourceType), searchParams = wl(resourceType);
    return ut(getFieldsList(typeSchema, searchParams)).map((field) => ({ value: field, label: buildFieldNameString(field) }));
  }, [props.visible, props.search.resourceType]);
  if (!props.visible) return null;
  function handleChange(newFields) {
    setState({ search: { ...state.search, fields: newFields } });
  }
  return (0, import_jsx_runtime91.jsx)(Modal, { title: "Fields", closeButtonProps: { "aria-label": "Close" }, opened: props.visible, onClose: () => {
    props.onCancel();
  }, size: "auto", withOverlay: true, closeOnClickOutside: false, overlayProps: { onMouseDownCapture: () => {
    wasDropdownOpen.current = isDropdownOpen;
  }, onClick: () => {
    wasDropdownOpen.current || props.onCancel(), wasDropdownOpen.current = false;
  }, children: (0, import_jsx_runtime91.jsx)("div", { "data-testid": "overlay-child" }) }, children: (0, import_jsx_runtime91.jsxs)(Stack, { children: [(0, import_jsx_runtime91.jsx)(MultiSelect, { style: { width: 550 }, placeholder: "Select fields to display", data: allFields, value: state.search.fields ?? [], onChange: handleChange, onDropdownOpen: () => setIsDropdownOpen(true), onDropdownClose: () => setIsDropdownOpen(false), maxDropdownHeight: "250px", clearButtonProps: { "aria-label": "Clear selection" }, clearable: true, searchable: true }), (0, import_jsx_runtime91.jsx)(Group, { justify: "flex-end", children: (0, import_jsx_runtime91.jsx)(Button, { onClick: () => props.onOk(state.search), children: "OK" }) })] }) });
}
function getFieldsList(typeSchema, searchParams) {
  let result = [], keys = /* @__PURE__ */ new Set(), names = /* @__PURE__ */ new Set();
  for (let key of Object.keys(typeSchema.elements)) result.push(key), keys.add(key.toLowerCase()), names.add(buildFieldNameString(key));
  if (searchParams) for (let code of Object.keys(searchParams)) {
    let name = buildFieldNameString(code);
    !keys.has(code) && !names.has(name) && (result.push(code), keys.add(code), names.add(name));
  }
  return result;
}
function SearchFilterValueInput(props) {
  let details = kr(props.resourceType, props.searchParam), name = props.name ?? "filter-value";
  switch (details.type) {
    case ti.REFERENCE:
      return (0, import_jsx_runtime92.jsx)(ReferenceInput, { name, defaultValue: props.defaultValue ? { reference: props.defaultValue } : void 0, targetTypes: props.searchParam.target, autoFocus: props.autoFocus, onChange: (newReference) => {
        newReference ? props.onChange(newReference.reference) : props.onChange("");
      } });
    case ti.BOOLEAN:
      return (0, import_jsx_runtime92.jsx)(Checkbox, { name, "data-autofocus": props.autoFocus, "data-testid": name, defaultChecked: props.defaultValue === "true", autoFocus: props.autoFocus, onChange: (e) => props.onChange(e.currentTarget.checked.toString()) });
    case ti.DATE:
      return (0, import_jsx_runtime92.jsx)(TextInput, { type: "date", name, "data-autofocus": props.autoFocus, "data-testid": name, defaultValue: props.defaultValue, autoFocus: props.autoFocus, onChange: (e) => props.onChange(e.currentTarget.value) });
    case ti.DATETIME:
      return (0, import_jsx_runtime92.jsx)(DateTimeInput, { name, defaultValue: props.defaultValue, autoFocus: props.autoFocus, onChange: props.onChange });
    case ti.NUMBER:
      return (0, import_jsx_runtime92.jsx)(TextInput, { type: "number", name, "data-autofocus": props.autoFocus, "data-testid": name, defaultValue: props.defaultValue, autoFocus: props.autoFocus, onChange: (e) => props.onChange(e.currentTarget.value) });
    case ti.QUANTITY:
      return (0, import_jsx_runtime92.jsx)(QuantityInput, { name, path: "", defaultValue: tryParseQuantity(props.defaultValue), autoFocus: props.autoFocus, onChange: (newQuantity) => {
        newQuantity ? props.onChange(`${newQuantity.value}`) : props.onChange("");
      } });
    default:
      return (0, import_jsx_runtime92.jsx)(TextInput, { name, "data-autofocus": props.autoFocus, "data-testid": name, defaultValue: props.defaultValue, autoFocus: props.autoFocus, onChange: (e) => props.onChange(e.currentTarget.value), placeholder: "Search value" });
  }
}
function tryParseQuantity(value) {
  if (value) {
    let [valueString, systemString, unitString] = value.split("|");
    if (valueString) return { value: parseFloat(valueString), system: systemString, unit: unitString };
  }
}
function SearchFilterEditor(props) {
  let [search, setSearch] = (0, import_react71.useState)(de(props.search)), searchRef = (0, import_react71.useRef)(search);
  searchRef.current = search, (0, import_react71.useEffect)(() => {
    setSearch(de(props.search));
  }, [props.search]);
  function onAddFilter(filter) {
    setSearch(addFilter(searchRef.current, filter.code, filter.operator, filter.value));
  }
  if (!props.visible) return null;
  let resourceType = props.search.resourceType, searchParams = wl(resourceType) ?? {}, filters = search.filters || [];
  return (0, import_jsx_runtime93.jsx)(Modal, { title: "Filters", closeButtonProps: { "aria-label": "Close" }, size: 900, opened: props.visible, onClose: props.onCancel, children: (0, import_jsx_runtime93.jsxs)(Form, { onSubmit: () => props.onOk(searchRef.current), children: [(0, import_jsx_runtime93.jsxs)("div", { children: [(0, import_jsx_runtime93.jsxs)("table", { children: [(0, import_jsx_runtime93.jsxs)("colgroup", { children: [(0, import_jsx_runtime93.jsx)("col", { style: { width: 200 } }), (0, import_jsx_runtime93.jsx)("col", { style: { width: 200 } }), (0, import_jsx_runtime93.jsx)("col", { style: { width: 380 } }), (0, import_jsx_runtime93.jsx)("col", { style: { width: 40 } })] }), (0, import_jsx_runtime93.jsx)("thead", { children: (0, import_jsx_runtime93.jsxs)("tr", { children: [(0, import_jsx_runtime93.jsx)("th", { children: "Field" }), (0, import_jsx_runtime93.jsx)("th", { children: "Operation" }), (0, import_jsx_runtime93.jsx)("th", { children: "Value" }), (0, import_jsx_runtime93.jsx)("th", {})] }) }), (0, import_jsx_runtime93.jsx)("tbody", { children: filters.map((filter, index) => (0, import_jsx_runtime93.jsx)(FilterRowInput, { id: `filter-${index}-row`, resourceType, searchParams, value: filter, onChange: (newFilter) => {
    let newFilters = [...filters];
    newFilters[index] = newFilter, setSearch(setFilters(searchRef.current, newFilters));
  }, onDelete: () => setSearch(deleteFilter(searchRef.current, index)) }, `filter-${index}-row`)) })] }), (0, import_jsx_runtime93.jsx)(ArrayAddButton, { propertyDisplayName: "Filter", onClick: () => onAddFilter({}) })] }), (0, import_jsx_runtime93.jsx)(Group, { justify: "flex-end", mt: "xl", children: (0, import_jsx_runtime93.jsx)(Button, { type: "submit", children: "OK" }) })] }) });
}
function FilterRowInput(props) {
  let value = props.value, valueRef = (0, import_react71.useRef)(value);
  valueRef.current = value;
  function setFilterCode(newCode) {
    valueRef.current.code = newCode, valueRef.current.operator = ai.EQUALS, valueRef.current.value = "", props.onChange(valueRef.current);
  }
  function setFilterOperator(newOperator) {
    valueRef.current.operator = newOperator, valueRef.current.value = "", props.onChange(valueRef.current);
  }
  function setFilterValue(newFilterValue) {
    valueRef.current.value = newFilterValue, props.onChange(valueRef.current);
  }
  let searchParam = props.searchParams[value.code], operators = searchParam && getSearchOperators(searchParam);
  return (0, import_jsx_runtime93.jsxs)("tr", { children: [(0, import_jsx_runtime93.jsx)("td", { children: (0, import_jsx_runtime93.jsx)(NativeSelect, { "data-testid": `${props.id}-filter-field`, defaultValue: props.value.code, onChange: (e) => setFilterCode(e.currentTarget.value), data: ["", ...Object.keys(props.searchParams).map((param) => ({ value: param, label: buildFieldNameString(param) }))] }) }), (0, import_jsx_runtime93.jsx)("td", { children: operators && (0, import_jsx_runtime93.jsx)(NativeSelect, { "data-testid": `${props.id}-filter-operation`, defaultValue: value.operator, onChange: (e) => setFilterOperator(e.currentTarget.value), data: ["", ...operators.map((op) => ({ value: op, label: getOpString(op) }))] }) }), (0, import_jsx_runtime93.jsx)("td", { children: searchParam && value.operator && (0, import_jsx_runtime93.jsx)(SearchFilterValueInput, { name: `${props.id}-filter-value`, resourceType: props.resourceType, searchParam, defaultValue: value.value, onChange: setFilterValue }) }), (0, import_jsx_runtime93.jsx)("td", { children: props.onDelete && (0, import_jsx_runtime93.jsx)(ActionIcon, { variant: "outline", color: "red", radius: "xl", "aria-label": "Delete filter", onClick: props.onDelete, children: (0, import_jsx_runtime93.jsx)(IconX, { style: { width: "70%", height: "70%" }, stroke: 1.5 }) }) })] });
}
function SearchFilterValueDialog(props) {
  let [value, setValue] = (0, import_react72.useState)(props.defaultValue ?? "");
  if (!props.visible || !props.searchParam || !props.filter) return null;
  function onOk() {
    props.onOk({ ...props.filter, value });
  }
  return (0, import_jsx_runtime94.jsx)(Modal, { title: props.title, size: "xl", opened: props.visible, onClose: props.onCancel, children: (0, import_jsx_runtime94.jsx)(Form, { onSubmit: onOk, children: (0, import_jsx_runtime94.jsxs)(Grid, { children: [(0, import_jsx_runtime94.jsx)(Grid.Col, { span: 10, children: (0, import_jsx_runtime94.jsx)(SearchFilterValueInput, { resourceType: props.resourceType, searchParam: props.searchParam, defaultValue: value, autoFocus: true, onChange: setValue }) }), (0, import_jsx_runtime94.jsx)(Grid.Col, { span: 2, children: (0, import_jsx_runtime94.jsx)(Button, { onClick: onOk, fullWidth: true, children: "OK" }) })] }) }) });
}
function SearchFilterValueDisplay(props) {
  var _a;
  let { resourceType, filter } = props, searchParam = (_a = L.types[resourceType].searchParams) == null ? void 0 : _a[filter.code];
  if (searchParam) {
    if (searchParam.type === "reference" && (filter.operator === ai.EQUALS || filter.operator === ai.NOT_EQUALS)) return (0, import_jsx_runtime95.jsx)(ResourceName, { value: { reference: filter.value } });
    let searchParamDetails = kr(resourceType, searchParam);
    if (filter.code === "_lastUpdated" || searchParamDetails.type === ti.DATETIME) return (0, import_jsx_runtime95.jsx)(import_jsx_runtime95.Fragment, { children: Pr(filter.value) });
  }
  return (0, import_jsx_runtime95.jsx)(import_jsx_runtime95.Fragment, { children: filter.value });
}
function SearchPopupMenu(props) {
  if (!props.searchParams) return null;
  function onSort(searchParam, desc) {
    onChange(setSort(props.search, searchParam.code, desc));
  }
  function onClear(searchParam) {
    onChange(clearFiltersOnField(props.search, searchParam.code));
  }
  function onPrompt(searchParam, operator) {
    props.onPrompt(searchParam, { code: searchParam.code, operator, value: "" });
  }
  function onChange(definition) {
    props.onChange(definition);
  }
  return props.searchParams.length === 1 ? (0, import_jsx_runtime96.jsx)(SearchParameterSubMenu, { search: props.search, searchParam: props.searchParams[0], onSort, onPrompt, onChange, onClear }) : (0, import_jsx_runtime96.jsx)(Menu.Dropdown, { children: props.searchParams.map((searchParam) => (0, import_jsx_runtime96.jsx)(Menu.Item, { children: buildFieldNameString(searchParam.code) }, searchParam.code)) });
}
function SearchParameterSubMenu(props) {
  switch (props.searchParam.type) {
    case "date":
      return (0, import_jsx_runtime96.jsx)(DateFilterSubMenu, { ...props });
    case "number":
    case "quantity":
      return (0, import_jsx_runtime96.jsx)(NumericFilterSubMenu, { ...props });
    case "reference":
      return (0, import_jsx_runtime96.jsx)(ReferenceFilterSubMenu, { ...props });
    case "string":
      return (0, import_jsx_runtime96.jsx)(TextFilterSubMenu, { ...props });
    case "token":
    case "uri":
      return (0, import_jsx_runtime96.jsx)(TokenFilterSubMenu, { ...props });
    default:
      return (0, import_jsx_runtime96.jsxs)(import_jsx_runtime96.Fragment, { children: ["Unknown search param type: ", props.searchParam.type] });
  }
}
function DateFilterSubMenu(props) {
  let { searchParam } = props, code = searchParam.code;
  return (0, import_jsx_runtime96.jsxs)(Menu.Dropdown, { children: [(0, import_jsx_runtime96.jsx)(Menu.Item, { leftSection: (0, import_jsx_runtime96.jsx)(IconSortAscending, { size: 14 }), onClick: () => props.onSort(searchParam, false), children: "Sort Oldest to Newest" }), (0, import_jsx_runtime96.jsx)(Menu.Item, { leftSection: (0, import_jsx_runtime96.jsx)(IconSortDescending, { size: 14 }), onClick: () => props.onSort(searchParam, true), children: "Sort Newest to Oldest" }), (0, import_jsx_runtime96.jsx)(Menu.Divider, {}), (0, import_jsx_runtime96.jsx)(Menu.Item, { leftSection: (0, import_jsx_runtime96.jsx)(IconEqual, { size: 14 }), onClick: () => props.onPrompt(searchParam, ai.EQUALS), children: "Equals..." }), (0, import_jsx_runtime96.jsx)(Menu.Item, { leftSection: (0, import_jsx_runtime96.jsx)(IconEqualNot, { size: 14 }), onClick: () => props.onPrompt(searchParam, ai.NOT_EQUALS), children: "Does not equal..." }), (0, import_jsx_runtime96.jsx)(Menu.Divider, {}), (0, import_jsx_runtime96.jsx)(Menu.Item, { leftSection: (0, import_jsx_runtime96.jsx)(IconMathLower, { size: 14 }), onClick: () => props.onPrompt(searchParam, ai.ENDS_BEFORE), children: "Before..." }), (0, import_jsx_runtime96.jsx)(Menu.Item, { leftSection: (0, import_jsx_runtime96.jsx)(IconMathGreater, { size: 14 }), onClick: () => props.onPrompt(searchParam, ai.STARTS_AFTER), children: "After..." }), (0, import_jsx_runtime96.jsx)(Menu.Item, { leftSection: (0, import_jsx_runtime96.jsx)(IconBracketsContain, { size: 14 }), onClick: () => props.onPrompt(searchParam, ai.EQUALS), children: "Between..." }), (0, import_jsx_runtime96.jsx)(Menu.Divider, {}), (0, import_jsx_runtime96.jsx)(Menu.Item, { leftSection: (0, import_jsx_runtime96.jsx)(IconCalendar, { size: 14 }), onClick: () => props.onChange(addTomorrowFilter(props.search, code)), children: "Tomorrow" }), (0, import_jsx_runtime96.jsx)(Menu.Item, { leftSection: (0, import_jsx_runtime96.jsx)(IconCalendar, { size: 14 }), onClick: () => props.onChange(addTodayFilter(props.search, code)), children: "Today" }), (0, import_jsx_runtime96.jsx)(Menu.Item, { leftSection: (0, import_jsx_runtime96.jsx)(IconCalendar, { size: 14 }), onClick: () => props.onChange(addYesterdayFilter(props.search, code)), children: "Yesterday" }), (0, import_jsx_runtime96.jsx)(Menu.Divider, {}), (0, import_jsx_runtime96.jsx)(Menu.Item, { leftSection: (0, import_jsx_runtime96.jsx)(IconCalendar, { size: 14 }), onClick: () => props.onChange(addNextMonthFilter(props.search, code)), children: "Next Month" }), (0, import_jsx_runtime96.jsx)(Menu.Item, { leftSection: (0, import_jsx_runtime96.jsx)(IconCalendar, { size: 14 }), onClick: () => props.onChange(addThisMonthFilter(props.search, code)), children: "This Month" }), (0, import_jsx_runtime96.jsx)(Menu.Item, { leftSection: (0, import_jsx_runtime96.jsx)(IconCalendar, { size: 14 }), onClick: () => props.onChange(addLastMonthFilter(props.search, code)), children: "Last Month" }), (0, import_jsx_runtime96.jsx)(Menu.Divider, {}), (0, import_jsx_runtime96.jsx)(Menu.Item, { leftSection: (0, import_jsx_runtime96.jsx)(IconCalendar, { size: 14 }), onClick: () => props.onChange(addYearToDateFilter(props.search, code)), children: "Year to date" }), (0, import_jsx_runtime96.jsx)(CommonMenuItems, { ...props })] });
}
function NumericFilterSubMenu(props) {
  let { searchParam } = props;
  return (0, import_jsx_runtime96.jsxs)(Menu.Dropdown, { children: [(0, import_jsx_runtime96.jsx)(Menu.Item, { leftSection: (0, import_jsx_runtime96.jsx)(IconSortAscending, { size: 14 }), onClick: () => props.onSort(searchParam, false), children: "Sort Smallest to Largest" }), (0, import_jsx_runtime96.jsx)(Menu.Item, { leftSection: (0, import_jsx_runtime96.jsx)(IconSortDescending, { size: 14 }), onClick: () => props.onSort(searchParam, true), children: "Sort Largest to Smallest" }), (0, import_jsx_runtime96.jsx)(Menu.Divider, {}), (0, import_jsx_runtime96.jsx)(Menu.Item, { leftSection: (0, import_jsx_runtime96.jsx)(IconEqual, { size: 14 }), onClick: () => props.onPrompt(searchParam, ai.EQUALS), children: "Equals..." }), (0, import_jsx_runtime96.jsx)(Menu.Item, { leftSection: (0, import_jsx_runtime96.jsx)(IconEqualNot, { size: 14 }), onClick: () => props.onPrompt(searchParam, ai.NOT_EQUALS), children: "Does not equal..." }), (0, import_jsx_runtime96.jsx)(Menu.Divider, {}), (0, import_jsx_runtime96.jsx)(Menu.Item, { leftSection: (0, import_jsx_runtime96.jsx)(IconMathGreater, { size: 14 }), onClick: () => props.onPrompt(searchParam, ai.GREATER_THAN), children: "Greater than..." }), (0, import_jsx_runtime96.jsx)(Menu.Item, { leftSection: (0, import_jsx_runtime96.jsx)(IconSettings, { size: 14 }), onClick: () => props.onPrompt(searchParam, ai.GREATER_THAN_OR_EQUALS), children: "Greater than or equal to..." }), (0, import_jsx_runtime96.jsx)(Menu.Item, { leftSection: (0, import_jsx_runtime96.jsx)(IconMathLower, { size: 14 }), onClick: () => props.onPrompt(searchParam, ai.LESS_THAN), children: "Less than..." }), (0, import_jsx_runtime96.jsx)(Menu.Item, { leftSection: (0, import_jsx_runtime96.jsx)(IconSettings, { size: 14 }), onClick: () => props.onPrompt(searchParam, ai.LESS_THAN_OR_EQUALS), children: "Less than or equal to..." }), (0, import_jsx_runtime96.jsx)(CommonMenuItems, { ...props })] });
}
function ReferenceFilterSubMenu(props) {
  let { searchParam } = props;
  return (0, import_jsx_runtime96.jsxs)(Menu.Dropdown, { children: [(0, import_jsx_runtime96.jsx)(Menu.Item, { leftSection: (0, import_jsx_runtime96.jsx)(IconEqual, { size: 14 }), onClick: () => props.onPrompt(searchParam, ai.EQUALS), children: "Equals..." }), (0, import_jsx_runtime96.jsx)(Menu.Item, { leftSection: (0, import_jsx_runtime96.jsx)(IconEqualNot, { size: 14 }), onClick: () => props.onPrompt(searchParam, ai.NOT), children: "Does not equal..." }), (0, import_jsx_runtime96.jsx)(CommonMenuItems, { ...props })] });
}
function TextFilterSubMenu(props) {
  let { searchParam } = props;
  return (0, import_jsx_runtime96.jsxs)(Menu.Dropdown, { children: [(0, import_jsx_runtime96.jsx)(Menu.Item, { leftSection: (0, import_jsx_runtime96.jsx)(IconSortAscending, { size: 14 }), onClick: () => props.onSort(searchParam, false), children: "Sort A to Z" }), (0, import_jsx_runtime96.jsx)(Menu.Item, { leftSection: (0, import_jsx_runtime96.jsx)(IconSortDescending, { size: 14 }), onClick: () => props.onSort(searchParam, true), children: "Sort Z to A" }), (0, import_jsx_runtime96.jsx)(Menu.Divider, {}), (0, import_jsx_runtime96.jsx)(Menu.Item, { leftSection: (0, import_jsx_runtime96.jsx)(IconEqual, { size: 14 }), onClick: () => props.onPrompt(searchParam, ai.EQUALS), children: "Equals..." }), (0, import_jsx_runtime96.jsx)(Menu.Item, { leftSection: (0, import_jsx_runtime96.jsx)(IconEqualNot, { size: 14 }), onClick: () => props.onPrompt(searchParam, ai.NOT), children: "Does not equal..." }), (0, import_jsx_runtime96.jsx)(Menu.Divider, {}), (0, import_jsx_runtime96.jsx)(Menu.Item, { leftSection: (0, import_jsx_runtime96.jsx)(IconBucket, { size: 14 }), onClick: () => props.onPrompt(searchParam, ai.CONTAINS), children: "Contains..." }), (0, import_jsx_runtime96.jsx)(Menu.Item, { leftSection: (0, import_jsx_runtime96.jsx)(IconBucketOff, { size: 14 }), onClick: () => props.onPrompt(searchParam, ai.EQUALS), children: "Does not contain..." }), (0, import_jsx_runtime96.jsx)(CommonMenuItems, { ...props })] });
}
function TokenFilterSubMenu(props) {
  let { searchParam } = props;
  return (0, import_jsx_runtime96.jsxs)(Menu.Dropdown, { children: [(0, import_jsx_runtime96.jsx)(Menu.Item, { leftSection: (0, import_jsx_runtime96.jsx)(IconEqual, { size: 14 }), onClick: () => props.onPrompt(searchParam, ai.EQUALS), children: "Equals..." }), (0, import_jsx_runtime96.jsx)(Menu.Item, { leftSection: (0, import_jsx_runtime96.jsx)(IconEqualNot, { size: 14 }), onClick: () => props.onPrompt(searchParam, ai.NOT), children: "Does not equal..." }), (0, import_jsx_runtime96.jsx)(CommonMenuItems, { ...props })] });
}
function CommonMenuItems(props) {
  let { searchParam } = props, code = searchParam.code;
  return (0, import_jsx_runtime96.jsxs)(import_jsx_runtime96.Fragment, { children: [(0, import_jsx_runtime96.jsx)(Menu.Divider, {}), (0, import_jsx_runtime96.jsx)(Menu.Item, { leftSection: (0, import_jsx_runtime96.jsx)(IconBleach, { size: 14 }), onClick: () => props.onChange(addMissingFilter(props.search, code)), children: "Missing" }), (0, import_jsx_runtime96.jsx)(Menu.Item, { leftSection: (0, import_jsx_runtime96.jsx)(IconBleachOff, { size: 14 }), onClick: () => props.onChange(addMissingFilter(props.search, code, false)), children: "Not missing" }), (0, import_jsx_runtime96.jsx)(Menu.Divider, {}), (0, import_jsx_runtime96.jsx)(Menu.Item, { leftSection: (0, import_jsx_runtime96.jsx)(IconX, { size: 14 }), onClick: () => props.onClear(searchParam), children: "Clear filters" })] });
}
var SearchControl_default = { root: "SearchControl_root", table: "SearchControl_table", tr: "SearchControl_tr", th: "SearchControl_th", control: "SearchControl_control", icon: "SearchControl_icon" };
function getFieldDefinitions(search) {
  let resourceType = search.resourceType, fields = [];
  for (let name of search.fields || ["id", "_lastUpdated"]) fields.push(getFieldDefinition(resourceType, name));
  return fields;
}
function getFieldDefinition(resourceType, name) {
  var _a;
  if (name === "_lastUpdated") return { name: "_lastUpdated", searchParams: [{ resourceType: "SearchParameter", base: ["Resource"], code: "_lastUpdated", name: "_lastUpdated", type: "date", expression: "Resource.meta.lastUpdated" }] };
  if (name === "meta.versionId") return { name: "meta.versionId", searchParams: [{ resourceType: "SearchParameter", base: ["Resource"], code: "_versionId", name: "_versionId", type: "token", expression: "Resource.meta.versionId" }] };
  let exactElementDefinition = st(resourceType, name), exactSearchParam = Al(resourceType, name.toLowerCase());
  if (exactElementDefinition && exactSearchParam) return { name, elementDefinition: exactElementDefinition, searchParams: [exactSearchParam] };
  if (exactElementDefinition) {
    let allSearchParams = wl(resourceType), searchParams;
    if (allSearchParams) {
      let pathRegex = new RegExp(`${resourceType}\\.${name.replaceAll("[x]", "")}([^\\w-]|$)`);
      searchParams = Object.values(allSearchParams).filter((p) => !!p.expression && pathRegex.test(p == null ? void 0 : p.expression)), searchParams.length === 0 && (searchParams = void 0);
    }
    return { name, elementDefinition: exactElementDefinition, searchParams };
  }
  if (exactSearchParam) {
    let details = kr(resourceType, exactSearchParam);
    return { name, elementDefinition: (_a = details.elementDefinitions) == null ? void 0 : _a[0], searchParams: [exactSearchParam] };
  }
  return { name };
}
var SearchChangeEvent = class extends Event {
  constructor(definition) {
    super("change"), this.definition = definition;
  }
};
var SearchLoadEvent = class extends Event {
  constructor(response) {
    super("load"), this.response = response;
  }
};
var SearchClickEvent = class extends Event {
  constructor(resource, browserEvent) {
    super("click"), this.resource = resource, this.browserEvent = browserEvent;
  }
};
function SearchControl(props) {
  var _a, _b, _c, _d;
  let medplum = b(), [outcome, setOutcome] = (0, import_react69.useState)(), { search, onLoad } = props, [memoizedSearch, setMemoizedSearch] = (0, import_react69.useState)(search);
  ee(search, memoizedSearch) || setMemoizedSearch(search);
  let [state, setState] = (0, import_react69.useState)({ selected: {}, fieldEditorVisible: false, filterEditorVisible: false, exportDialogVisible: false, filterDialogVisible: false }), stateRef = (0, import_react69.useRef)(state);
  stateRef.current = state;
  let total = memoizedSearch.total ?? "accurate", loadResults = (0, import_react69.useCallback)((options) => {
    setOutcome(void 0), medplum.requestSchema(memoizedSearch.resourceType).then(() => medplum.search(memoizedSearch.resourceType, wp({ ...memoizedSearch, total, fields: void 0 }), options)).then((response) => {
      setState({ ...stateRef.current, searchResponse: response }), onLoad && onLoad(new SearchLoadEvent(response));
    }).catch((reason) => {
      setState({ ...stateRef.current, searchResponse: void 0 }), setOutcome(Xe(reason));
    });
  }, [medplum, memoizedSearch, total, onLoad]), refreshResults = (0, import_react69.useCallback)(() => {
    setState({ ...stateRef.current, searchResponse: void 0 }), loadResults({ cache: "reload" });
  }, [loadResults]);
  (0, import_react69.useEffect)(() => {
    loadResults();
  }, [loadResults]);
  function handleSingleCheckboxClick(e, id) {
    e.stopPropagation();
    let checked = e.target.checked, newSelected = { ...stateRef.current.selected };
    checked ? newSelected[id] = true : delete newSelected[id], setState({ ...stateRef.current, selected: newSelected });
  }
  function handleAllCheckboxClick(e) {
    e.stopPropagation();
    let checked = e.target.checked, newSelected = {}, searchResponse = stateRef.current.searchResponse;
    checked && (searchResponse == null ? void 0 : searchResponse.entry) && searchResponse.entry.forEach((entry) => {
      var _a2;
      ((_a2 = entry.resource) == null ? void 0 : _a2.id) && (newSelected[entry.resource.id] = true);
    }), setState({ ...stateRef.current, selected: newSelected });
  }
  function isAllSelected() {
    var _a2, _b2;
    let state2 = stateRef.current;
    if (!((_a2 = state2.searchResponse) == null ? void 0 : _a2.entry) || state2.searchResponse.entry.length === 0) return false;
    for (let e of state2.searchResponse.entry) if (((_b2 = e.resource) == null ? void 0 : _b2.id) && !state2.selected[e.resource.id]) return false;
    return true;
  }
  function emitSearchChange(newSearch) {
    props.onChange && props.onChange(new SearchChangeEvent(newSearch));
  }
  function handleRowClick(e, resource) {
    if (isCheckboxCell(e.target) || e.button === 2) return;
    killEvent(e);
    let isAux = e.button === 1 || e.ctrlKey || e.metaKey;
    !isAux && props.onClick && props.onClick(new SearchClickEvent(resource, e)), isAux && props.onAuxClick && props.onAuxClick(new SearchClickEvent(resource, e));
  }
  function isExportPassed() {
    return !!(props.onExport ?? props.onExportCsv ?? props.onExportTransactionBundle);
  }
  if (outcome) return (0, import_jsx_runtime97.jsx)(OperationOutcomeAlert, { outcome });
  if (!vn(memoizedSearch.resourceType)) return (0, import_jsx_runtime97.jsx)(Center, { style: { width: "100%", height: "100%" }, children: (0, import_jsx_runtime97.jsx)(Loader, {}) });
  let checkboxColumn = props.checkboxesEnabled, fields = getFieldDefinitions(memoizedSearch), resourceType = memoizedSearch.resourceType, lastResult = state.searchResponse, resources = (_a = lastResult == null ? void 0 : lastResult.entry) == null ? void 0 : _a.map((e) => e.resource), buttonVariant = "subtle", buttonColor = "gray", iconSize = 16, isMobile = window.innerWidth < 768;
  return (0, import_jsx_runtime97.jsxs)("div", { className: SearchControl_default.root, "data-testid": "search-control", children: [!props.hideToolbar && (0, import_jsx_runtime97.jsxs)(Group, { justify: "space-between", mb: "xl", children: [(0, import_jsx_runtime97.jsxs)(Group, { gap: 2, children: [(0, import_jsx_runtime97.jsx)(Button, { size: "compact-md", variant: buttonVariant, color: buttonColor, leftSection: (0, import_jsx_runtime97.jsx)(IconColumns, { size: iconSize }), onClick: () => setState({ ...stateRef.current, fieldEditorVisible: true }), children: "Fields" }), (0, import_jsx_runtime97.jsx)(Button, { size: "compact-md", variant: buttonVariant, color: buttonColor, leftSection: (0, import_jsx_runtime97.jsx)(IconFilter, { size: iconSize }), onClick: () => setState({ ...stateRef.current, filterEditorVisible: true }), children: "Filters" }), props.onNew && (0, import_jsx_runtime97.jsx)(Button, { size: "compact-md", variant: buttonVariant, color: buttonColor, leftSection: (0, import_jsx_runtime97.jsx)(IconFilePlus, { size: iconSize }), onClick: props.onNew, children: "New..." }), !isMobile && isExportPassed() && (0, import_jsx_runtime97.jsx)(Button, { size: "compact-md", variant: buttonVariant, color: buttonColor, leftSection: (0, import_jsx_runtime97.jsx)(IconTableExport, { size: iconSize }), onClick: props.onExport ? props.onExport : () => setState({ ...stateRef.current, exportDialogVisible: true }), children: "Export..." }), !isMobile && props.onDelete && (0, import_jsx_runtime97.jsx)(Button, { size: "compact-md", variant: buttonVariant, color: buttonColor, leftSection: (0, import_jsx_runtime97.jsx)(IconTrash, { size: iconSize }), onClick: () => props.onDelete(Object.keys(state.selected)), children: "Delete..." }), !isMobile && props.onBulk && (0, import_jsx_runtime97.jsx)(Button, { size: "compact-md", variant: buttonVariant, color: buttonColor, leftSection: (0, import_jsx_runtime97.jsx)(IconBoxMultiple, { size: iconSize }), onClick: () => props.onBulk(Object.keys(state.selected)), children: "Bulk..." })] }), (0, import_jsx_runtime97.jsxs)(Group, { gap: 2, children: [lastResult && (0, import_jsx_runtime97.jsxs)(Text, { size: "xs", c: "dimmed", "data-testid": "count-display", children: [getStart(memoizedSearch, lastResult).toLocaleString(), "-", getEnd(memoizedSearch, lastResult).toLocaleString(), lastResult.total !== void 0 && ` of ${memoizedSearch.total === "estimate" ? "~" : ""}${(_b = lastResult.total) == null ? void 0 : _b.toLocaleString()}`] }), (0, import_jsx_runtime97.jsx)(ActionIcon, { variant: buttonVariant, color: buttonColor, title: "Refresh", onClick: refreshResults, children: (0, import_jsx_runtime97.jsx)(IconRefresh, { size: iconSize }) })] })] }), (0, import_jsx_runtime97.jsxs)(Table, { className: SearchControl_default.table, children: [(0, import_jsx_runtime97.jsxs)(Table.Thead, { children: [(0, import_jsx_runtime97.jsxs)(Table.Tr, { children: [checkboxColumn && (0, import_jsx_runtime97.jsx)(Table.Th, { children: (0, import_jsx_runtime97.jsx)("input", { type: "checkbox", value: "checked", "aria-label": "all-checkbox", "data-testid": "all-checkbox", checked: isAllSelected(), onChange: (e) => handleAllCheckboxClick(e) }) }), fields.map((field) => (0, import_jsx_runtime97.jsx)(Table.Th, { children: (0, import_jsx_runtime97.jsxs)(Menu, { shadow: "md", width: 240, position: "bottom-end", children: [(0, import_jsx_runtime97.jsx)(Menu.Target, { children: (0, import_jsx_runtime97.jsx)(UnstyledButton, { className: SearchControl_default.control, p: 2, children: (0, import_jsx_runtime97.jsxs)(Group, { justify: "space-between", wrap: "nowrap", children: [(0, import_jsx_runtime97.jsx)(Text, { fw: 500, children: buildFieldNameString(field.name) }), (0, import_jsx_runtime97.jsx)(Center, { className: SearchControl_default.icon, children: (0, import_jsx_runtime97.jsx)(IconAdjustmentsHorizontal, { size: 14, stroke: 1.5 }) })] }) }) }), (0, import_jsx_runtime97.jsx)(SearchPopupMenu, { search: memoizedSearch, searchParams: field.searchParams, onPrompt: (searchParam, filter) => {
    setState({ ...stateRef.current, filterDialogVisible: true, filterDialogSearchParam: searchParam, filterDialogFilter: filter });
  }, onChange: (result) => {
    emitSearchChange(result);
  } })] }) }, field.name))] }), !props.hideFilters && (0, import_jsx_runtime97.jsxs)(Table.Tr, { children: [checkboxColumn && (0, import_jsx_runtime97.jsx)(Table.Th, {}), fields.map((field) => (0, import_jsx_runtime97.jsx)(Table.Th, { children: field.searchParams && (0, import_jsx_runtime97.jsx)(FilterDescription, { resourceType, searchParams: field.searchParams, filters: memoizedSearch.filters }) }, field.name))] })] }), (0, import_jsx_runtime97.jsx)(Table.Tbody, { children: resources == null ? void 0 : resources.map((resource) => resource && (0, import_jsx_runtime97.jsxs)(Table.Tr, { className: SearchControl_default.tr, "data-testid": "search-control-row", onClick: (e) => handleRowClick(e, resource), onAuxClick: (e) => handleRowClick(e, resource), children: [checkboxColumn && (0, import_jsx_runtime97.jsx)(Table.Td, { children: (0, import_jsx_runtime97.jsx)("input", { type: "checkbox", value: "checked", "data-testid": "row-checkbox", "aria-label": `Checkbox for ${resource.id}`, checked: !!state.selected[resource.id], onChange: (e) => handleSingleCheckboxClick(e, resource.id) }) }), fields.map((field) => (0, import_jsx_runtime97.jsx)(Table.Td, { children: renderValue(resource, field) }, field.name))] }, resource.id)) })] }), !(resources == null ? void 0 : resources.length) && (0, import_jsx_runtime97.jsx)(Container2, { children: (0, import_jsx_runtime97.jsx)(Center, { style: { height: 150 }, children: (0, import_jsx_runtime97.jsx)(Text, { size: "xl", c: "dimmed", children: "No results" }) }) }), lastResult && (0, import_jsx_runtime97.jsx)(Center, { m: "md", p: "md", children: (0, import_jsx_runtime97.jsx)(Pagination, { value: getPage(memoizedSearch), total: getTotalPages(memoizedSearch, lastResult), onChange: (newPage) => emitSearchChange(setPage(memoizedSearch, newPage)), getControlProps: (control) => {
    switch (control) {
      case "previous":
        return { "aria-label": "Previous page" };
      case "next":
        return { "aria-label": "Next page" };
      default:
        return {};
    }
  } }) }), (0, import_jsx_runtime97.jsx)(SearchFieldEditor, { search: memoizedSearch, visible: stateRef.current.fieldEditorVisible, onOk: (result) => {
    emitSearchChange(result), setState({ ...stateRef.current, fieldEditorVisible: false });
  }, onCancel: () => {
    setState({ ...stateRef.current, fieldEditorVisible: false });
  } }), (0, import_jsx_runtime97.jsx)(SearchFilterEditor, { search: memoizedSearch, visible: stateRef.current.filterEditorVisible, onOk: (result) => {
    emitSearchChange(result), setState({ ...stateRef.current, filterEditorVisible: false });
  }, onCancel: () => {
    setState({ ...stateRef.current, filterEditorVisible: false });
  } }), (0, import_jsx_runtime97.jsx)(SearchExportDialog, { visible: stateRef.current.exportDialogVisible, exportCsv: props.onExportCsv, exportTransactionBundle: props.onExportTransactionBundle, onCancel: () => {
    setState({ ...stateRef.current, exportDialogVisible: false });
  } }), (0, import_jsx_runtime97.jsx)(SearchFilterValueDialog, { visible: stateRef.current.filterDialogVisible, title: ((_c = state.filterDialogSearchParam) == null ? void 0 : _c.code) ? buildFieldNameString(state.filterDialogSearchParam.code) : "", resourceType, searchParam: state.filterDialogSearchParam, filter: state.filterDialogFilter, defaultValue: "", onOk: (filter) => {
    emitSearchChange(addFilter(memoizedSearch, filter.code, filter.operator, filter.value)), setState({ ...stateRef.current, filterDialogVisible: false });
  }, onCancel: () => {
    setState({ ...stateRef.current, filterDialogVisible: false });
  } }, (_d = state.filterDialogSearchParam) == null ? void 0 : _d.code)] });
}
var MemoizedSearchControl = SearchControl;
function FilterDescription(props) {
  let filters = (props.filters ?? []).filter((f) => props.searchParams.find((p) => p.code === f.code));
  return filters.length === 0 ? (0, import_jsx_runtime97.jsx)("span", { children: "no filters" }) : (0, import_jsx_runtime97.jsx)(import_jsx_runtime97.Fragment, { children: filters.map((filter) => (0, import_jsx_runtime97.jsxs)("div", { children: [getOpString(filter.operator), " ", (0, import_jsx_runtime97.jsx)(SearchFilterValueDisplay, { resourceType: props.resourceType, filter })] }, `filter-${filter.code}-${filter.operator}-${filter.value}`)) });
}
function getPage(search) {
  return Math.floor((search.offset ?? 0) / (search.count ?? Sp)) + 1;
}
function getTotalPages(search, lastResult) {
  let pageSize = search.count ?? Sp, total = getTotal(search, lastResult);
  return Math.ceil(total / pageSize);
}
function getStart(search, lastResult) {
  return Math.min(getTotal(search, lastResult), (search.offset ?? 0) + 1);
}
function getEnd(search, lastResult) {
  var _a;
  return Math.max(getStart(search, lastResult) + (((_a = lastResult.entry) == null ? void 0 : _a.length) ?? 0) - 1, 0);
}
function getTotal(search, lastResult) {
  var _a, _b;
  let total = lastResult.total;
  return total === void 0 && (total = (search.offset ?? 0) + (((_a = lastResult.entry) == null ? void 0 : _a.length) ?? 0) + (((_b = lastResult.link) == null ? void 0 : _b.some((l2) => l2.relation === "next")) ? 1 : 0)), total;
}
function FhirPathTable(props) {
  let medplum = b(), [schemaLoaded, setSchemaLoaded] = (0, import_react68.useState)(false), [outcome, setOutcome] = (0, import_react68.useState)(), { query, fields } = props, [response, setResponse] = (0, import_react68.useState)(), [selected, setSelected] = (0, import_react68.useState)({}), responseRef = (0, import_react68.useRef)();
  responseRef.current = response;
  let selectedRef = (0, import_react68.useRef)({});
  selectedRef.current = selected, (0, import_react68.useEffect)(() => {
    setOutcome(void 0), medplum.graphql(query).then(setResponse).catch((err) => setOutcome(Xe(err)));
  }, [medplum, query]);
  function handleSingleCheckboxClick(e, id) {
    e.stopPropagation();
    let checked = e.target.checked, newSelected = { ...selectedRef.current };
    checked ? newSelected[id] = true : delete newSelected[id], setSelected(newSelected);
  }
  function handleAllCheckboxClick(e) {
    var _a;
    e.stopPropagation();
    let checked = e.target.checked, newSelected = {}, resources = (_a = responseRef.current) == null ? void 0 : _a.data.ResourceList;
    checked && resources && resources.forEach((resource) => {
      resource.id && (newSelected[resource.id] = true);
    }), setSelected(newSelected);
  }
  function isAllSelected() {
    var _a;
    let resources = (_a = responseRef.current) == null ? void 0 : _a.data.ResourceList;
    if (!resources || resources.length === 0) return false;
    for (let resource of resources) if (resource.id && !selectedRef.current[resource.id]) return false;
    return true;
  }
  function handleRowClick(e, resource) {
    isCheckboxCell(e.target) || (killEvent(e), e.button !== 1 && props.onClick && props.onClick(new SearchClickEvent(resource, e)), e.button === 1 && props.onAuxClick && props.onAuxClick(new SearchClickEvent(resource, e)));
  }
  if ((0, import_react68.useEffect)(() => {
    medplum.requestSchema(props.resourceType).then(() => setSchemaLoaded(true)).catch(console.log);
  }, [medplum, props.resourceType]), !schemaLoaded) return (0, import_jsx_runtime98.jsx)(Loader, {});
  let checkboxColumn = props.checkboxesEnabled;
  return (0, import_jsx_runtime98.jsxs)("div", { onContextMenu: (e) => killEvent(e), "data-testid": "search-control", children: [(0, import_jsx_runtime98.jsxs)(Table, { children: [(0, import_jsx_runtime98.jsx)(Table.Thead, { children: (0, import_jsx_runtime98.jsxs)(Table.Tr, { children: [checkboxColumn && (0, import_jsx_runtime98.jsx)(Table.Th, { children: (0, import_jsx_runtime98.jsx)("input", { type: "checkbox", value: "checked", "aria-label": "all-checkbox", "data-testid": "all-checkbox", checked: isAllSelected(), onChange: (e) => handleAllCheckboxClick(e) }) }), fields.map((field) => (0, import_jsx_runtime98.jsx)(Table.Th, { children: field.name }, field.name))] }) }), (0, import_jsx_runtime98.jsx)(Table.Tbody, { children: response == null ? void 0 : response.data.ResourceList.map((resource) => resource && (0, import_jsx_runtime98.jsxs)(Table.Tr, { "data-testid": "search-control-row", onClick: (e) => handleRowClick(e, resource), onAuxClick: (e) => handleRowClick(e, resource), children: [checkboxColumn && (0, import_jsx_runtime98.jsx)(Table.Td, { children: (0, import_jsx_runtime98.jsx)("input", { type: "checkbox", value: "checked", "data-testid": "row-checkbox", "aria-label": `Checkbox for ${resource.id}`, checked: !!selected[resource.id], onChange: (e) => handleSingleCheckboxClick(e, resource.id) }) }), fields.map((field) => (0, import_jsx_runtime98.jsx)(Table.Td, { children: (0, import_jsx_runtime98.jsx)(FhirPathDisplay, { propertyType: field.propertyType, path: field.fhirPath, resource }) }, field.name))] }, resource.id)) })] }), (response == null ? void 0 : response.data.ResourceList.length) === 0 && (0, import_jsx_runtime98.jsx)("div", { "data-testid": "empty-search", children: "No results" }), outcome && (0, import_jsx_runtime98.jsx)("div", { "data-testid": "search-error", children: (0, import_jsx_runtime98.jsx)("pre", { style: { textAlign: "left" }, children: JSON.stringify(outcome, void 0, 2) }) }), props.onBulk && (0, import_jsx_runtime98.jsx)(Button, { onClick: () => props.onBulk(Object.keys(selectedRef.current)), children: "Bulk..." })] });
}
var MemoizedFhirPathTable = (0, import_react68.memo)(FhirPathTable);
function Logo(props) {
  return (0, import_jsx_runtime99.jsxs)("svg", { xmlns: "http://www.w3.org/2000/svg", viewBox: "0 0 491 491", style: { width: props.size, height: props.size }, children: [(0, import_jsx_runtime99.jsx)("title", { children: "Medplum Logo" }), (0, import_jsx_runtime99.jsx)("path", { fill: props.fill ?? "#ad7136", d: "M282 67c6-16 16-29 29-40L289 0c-22 17-37 41-43 68l17 23 19-24z" }), (0, import_jsx_runtime99.jsx)("path", { fill: props.fill ?? "#946af9", d: "M311 63c-17 0-33 4-48 11-16-7-32-11-49-11-87 0-158 96-158 214s71 214 158 214c17 0 33-4 49-11 15 7 31 11 48 11 87 0 158-96 158-214S398 63 311 63z" }), (0, import_jsx_runtime99.jsx)("path", { fill: props.fill ?? "#7857c5", d: "M231 489l-17 2c-87 0-158-96-158-214S127 63 214 63l17 1c-39 12-70 102-70 213s31 201 70 212z" }), (0, import_jsx_runtime99.jsx)("path", { fill: props.fill ?? "#40bc26", d: "M207 220a176 176 0 01-177 43A176 176 0 01251 43l1 5c17 59 2 125-45 172z" }), (0, import_jsx_runtime99.jsx)("path", { fill: props.fill ?? "#33961e", d: "M252 48A421 421 0 0057 270l-27-7A176 176 0 01251 43l1 5z" })] });
}
function MeasureReportGroupDisplay(props) {
  let { group } = props;
  return (0, import_jsx_runtime100.jsx)(Paper, { withBorder: true, radius: "md", p: "xs", display: "flex", style: { alignItems: "center", justifyContent: "center" }, children: (0, import_jsx_runtime100.jsxs)(Group, { children: [group.measureScore && (0, import_jsx_runtime100.jsx)(MeasureScore, { group }), !group.measureScore && (0, import_jsx_runtime100.jsx)(MeasureReportPopulation, { group })] }) });
}
function MeasureTitle(props) {
  let { measure } = props;
  return (0, import_jsx_runtime100.jsxs)(import_jsx_runtime100.Fragment, { children: [(0, import_jsx_runtime100.jsx)(Text, { fz: "md", fw: 500, mb: 8, children: measure.title }), (0, import_jsx_runtime100.jsx)(Text, { fz: "xs", c: "dimmed", mb: 8, children: measure.subtitle })] });
}
function MeasureReportPopulation(props) {
  let { group } = props, populations = group.population, numerator = populations == null ? void 0 : populations.find((p) => at(p.code) === "numerator"), denominator = populations == null ? void 0 : populations.find((p) => at(p.code) === "denominator"), numeratorCount = numerator == null ? void 0 : numerator.count, denominatorCount = denominator == null ? void 0 : denominator.count;
  if (denominatorCount === 0) return (0, import_jsx_runtime100.jsxs)(Box, { children: [(0, import_jsx_runtime100.jsx)(Title, { order: 3, children: "Not Applicable" }), (0, import_jsx_runtime100.jsx)(Text, { children: `Denominator: ${denominatorCount}` })] });
  if (numeratorCount === void 0 || denominatorCount === void 0) return (0, import_jsx_runtime100.jsxs)(Box, { children: [(0, import_jsx_runtime100.jsx)(Title, { order: 3, children: "Insufficient Data" }), (0, import_jsx_runtime100.jsx)(Text, { children: `Numerator: ${numeratorCount}` }), (0, import_jsx_runtime100.jsx)(Text, { children: `Denominator: ${denominatorCount}` })] });
  let value = numeratorCount / denominatorCount * 100;
  return (0, import_jsx_runtime100.jsx)(RingProgress, { size: 120, thickness: 12, roundCaps: true, sections: [{ value, color: groupColor(value) }], label: (0, import_jsx_runtime100.jsx)(Flex, { justify: "center", children: (0, import_jsx_runtime100.jsxs)(Text, { fw: 700, fz: 18, children: [numeratorCount, " / ", denominatorCount] }) }) });
}
function MeasureScore(props) {
  var _a, _b, _c;
  let { group } = props, unit = ((_a = group.measureScore) == null ? void 0 : _a.unit) ?? ((_b = group.measureScore) == null ? void 0 : _b.code);
  return (0, import_jsx_runtime100.jsx)(import_jsx_runtime100.Fragment, { children: unit === "%" ? (0, import_jsx_runtime100.jsx)(RingProgress, { size: 120, thickness: 12, roundCaps: true, sections: [{ value: groupValue(group), color: groupColor(((_c = group == null ? void 0 : group.measureScore) == null ? void 0 : _c.value) ?? 0) }], label: (0, import_jsx_runtime100.jsx)(Flex, { justify: "center", children: (0, import_jsx_runtime100.jsx)(Text, { fw: 700, fz: 18, children: (0, import_jsx_runtime100.jsx)(QuantityDisplay, { value: group.measureScore }) }) }) }) : (0, import_jsx_runtime100.jsx)(Flex, { h: 120, align: "center", children: (0, import_jsx_runtime100.jsx)(Title, { order: 3, children: (0, import_jsx_runtime100.jsx)(QuantityDisplay, { value: group.measureScore }) }) }) });
}
function groupValue(group) {
  var _a, _b;
  let score = (_a = group.measureScore) == null ? void 0 : _a.value, unit = (_b = group.measureScore) == null ? void 0 : _b.unit;
  return score ? score <= 1 && unit === "%" ? score * 100 : score : 0;
}
function groupColor(score) {
  return score <= 33 ? "red" : score <= 67 ? "yellow" : "green";
}
function MeasureReportDisplay(props) {
  var _a;
  let report = Ue(props.measureReport), [measure] = Ae("Measure", { url: report == null ? void 0 : report.measure });
  return report ? (0, import_jsx_runtime101.jsxs)(Box, { children: [measure && (0, import_jsx_runtime101.jsx)(MeasureTitle, { measure }), (0, import_jsx_runtime101.jsx)(SimpleGrid, { cols: { base: 3, sm: 1 }, spacing: { base: "md", sm: "sm" }, children: (_a = report.group) == null ? void 0 : _a.map((group, idx) => (0, import_jsx_runtime101.jsx)(MeasureReportGroupDisplay, { group }, group.id ?? idx)) })] }) : null;
}
function NotificationIcon(props) {
  let medplum = b(), { label, resourceType, countCriteria, subscriptionCriteria, onClick } = props, [unreadCount, setUnreadCount] = (0, import_react73.useState)(0), updateCount = (0, import_react73.useCallback)((cache) => {
    medplum.search(resourceType, countCriteria, { cache }).then((result) => setUnreadCount(result.total)).catch(console.error);
  }, [medplum, resourceType, countCriteria]);
  (0, import_react73.useEffect)(() => {
    updateCount("default");
  }, [updateCount]), Ze(subscriptionCriteria, () => {
    updateCount("reload");
  });
  let icon = (0, import_jsx_runtime102.jsx)(Tooltip, { label, children: (0, import_jsx_runtime102.jsx)(ActionIcon, { variant: "subtle", color: "gray", size: "lg", "aria-label": label, onClick, children: props.iconComponent }) });
  return unreadCount > 0 ? (0, import_jsx_runtime102.jsx)(Indicator, { inline: true, label: unreadCount.toLocaleString(), size: 16, offset: 2, position: "bottom-end", color: "red", children: icon }) : icon;
}
var HTTP = "http://";
var PATIENT_ALLERGY_PROFILE = Zr + "/fhir/us/core/StructureDefinition/us-core-allergyintolerance";
function AllergyDialog(props) {
  var _a, _b, _c, _d;
  let { patient, encounter, allergy, onSubmit } = props, [code, setCode] = (0, import_react76.useState)(allergy == null ? void 0 : allergy.code), [clinicalStatus, setClinicalStatus] = (0, import_react76.useState)(allergy == null ? void 0 : allergy.clinicalStatus), handleSubmit = (0, import_react76.useCallback)((formData) => {
    onSubmit(ol({ ...allergy, resourceType: "AllergyIntolerance", patient: te(patient), encounter: encounter ? te(encounter) : void 0, code, clinicalStatus, onsetDateTime: formData.onsetDateTime ? formData.onsetDateTime : void 0, reaction: formData.reaction ? [{ manifestation: [{ text: formData.reaction }] }] : void 0 }, PATIENT_ALLERGY_PROFILE));
  }, [patient, encounter, allergy, code, clinicalStatus, onSubmit]);
  return (0, import_jsx_runtime103.jsx)(Form, { onSubmit: handleSubmit, children: (0, import_jsx_runtime103.jsxs)(Stack, { children: [(0, import_jsx_runtime103.jsx)(CodeableConceptInput, { name: "allergy", label: "Code", path: "AllergyIntolerance.code", "data-autofocus": true, binding: HTTP + "cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1186.8", maxValues: 1, defaultValue: allergy == null ? void 0 : allergy.code, onChange: (code2) => setCode(code2), outcome: void 0 }), (0, import_jsx_runtime103.jsx)(TextInput, { name: "reaction", label: "Reaction", defaultValue: (_d = (_c = (_b = (_a = allergy == null ? void 0 : allergy.reaction) == null ? void 0 : _a[0]) == null ? void 0 : _b.manifestation) == null ? void 0 : _c[0]) == null ? void 0 : _d.text }), (0, import_jsx_runtime103.jsx)(CodeableConceptInput, { name: "clinicalStatus", label: "Clinical Status", path: "AllergyIntolerance.clinicalStatus", binding: Zr + "/fhir/ValueSet/allergyintolerance-clinical", maxValues: 1, defaultValue: allergy == null ? void 0 : allergy.clinicalStatus, onChange: (clinicalStatus2) => setClinicalStatus(clinicalStatus2), outcome: void 0 }), (0, import_jsx_runtime103.jsx)(DateTimeInput, { name: "onsetDateTime", label: "Onset", defaultValue: allergy == null ? void 0 : allergy.recordedDate }), (0, import_jsx_runtime103.jsx)(Group, { justify: "flex-end", gap: 4, mt: "md", children: (0, import_jsx_runtime103.jsx)(Button, { type: "submit", children: "Save" }) })] }) }, allergy == null ? void 0 : allergy.id);
}
function ConceptBadge(props) {
  let { resource, onEdit } = props, rightSection;
  return onEdit && (rightSection = (0, import_jsx_runtime104.jsx)(IconEdit, { "aria-label": `Edit ${Eo(resource)}`, size: 12, onClick: (e) => {
    killEvent(e), onEdit(resource);
  } })), (0, import_jsx_runtime104.jsx)(MedplumLink, { to: resource, children: (0, import_jsx_runtime104.jsx)(Badge, { variant: "light", maw: "100%", rightSection, children: Eo(resource) }) }, resource.id);
}
function Allergies(props) {
  let medplum = b(), { patient, encounter } = props, [allergies, setAllergies] = (0, import_react75.useState)(props.allergies), [opened, { open, close }] = useDisclosure(false), [editAllergy, setEditAllergy] = (0, import_react75.useState)(), handleSubmit = (0, import_react75.useCallback)(async (allergy) => {
    if (allergy.id) {
      let updatedAllergy = await medplum.updateResource(allergy);
      setAllergies(allergies.map((a) => a.id === updatedAllergy.id ? updatedAllergy : a));
    } else {
      let newAllergy = await medplum.createResource(allergy);
      setAllergies([...allergies, newAllergy]);
    }
    setEditAllergy(void 0), close();
  }, [medplum, allergies, close]);
  return (0, import_jsx_runtime105.jsxs)(import_jsx_runtime105.Fragment, { children: [(0, import_jsx_runtime105.jsxs)(Group, { justify: "space-between", children: [(0, import_jsx_runtime105.jsx)(Text, { fz: "md", fw: 700, children: "Allergies" }), (0, import_jsx_runtime105.jsx)(Anchor, { component: "button", onClick: (e) => {
    killEvent(e), setEditAllergy(void 0), open();
  }, children: "+ Add" })] }), allergies.length > 0 ? (0, import_jsx_runtime105.jsx)(Box, { children: allergies.map((allergy) => (0, import_jsx_runtime105.jsx)(ConceptBadge, { resource: allergy, onEdit: (a) => {
    setEditAllergy(a), open();
  } }, allergy.id)) }) : (0, import_jsx_runtime105.jsx)(Text, { children: "(none)" }), (0, import_jsx_runtime105.jsx)(Modal, { opened, onClose: close, title: editAllergy ? "Edit Allergy" : "Add Allergy", children: (0, import_jsx_runtime105.jsx)(AllergyDialog, { patient, encounter, allergy: editAllergy, onSubmit: handleSubmit }) })] });
}
var HTTP2 = "http://";
var statusValues = ["active", "stopped", "on-hold", "cancelled", "completed", "entered-in-error", "draft", "unknown"];
function MedicationDialog(props) {
  let me2 = me(), { patient, encounter, medication, onSubmit } = props, [code, setCode] = (0, import_react78.useState)(medication == null ? void 0 : medication.medicationCodeableConcept), handleSubmit = (0, import_react78.useCallback)((formData) => {
    if (!me2) throw new Error("Not signed in");
    onSubmit(ol({ ...medication, resourceType: "MedicationRequest", status: formData.status, intent: (medication == null ? void 0 : medication.intent) ?? "order", encounter: (medication == null ? void 0 : medication.encounter) ?? (encounter && te(encounter)), requester: (medication == null ? void 0 : medication.requester) ?? te(me2), medicationCodeableConcept: code, subject: te(patient) }, Zr + "/fhir/us/core/StructureDefinition/us-core-medicationrequest"));
  }, [me2, onSubmit, medication, encounter, code, patient]);
  return me2 ? (0, import_jsx_runtime106.jsx)(Form, { onSubmit: handleSubmit, children: (0, import_jsx_runtime106.jsxs)(Stack, { children: [(0, import_jsx_runtime106.jsx)(CodeableConceptInput, { name: "request", path: "MedicationRequest.medication[x]", "data-autofocus": true, binding: HTTP2 + "cts.nlm.nih.gov/fhir/ValueSet/2.16.840.1.113762.1.4.1010.4", maxValues: 1, defaultValue: medication == null ? void 0 : medication.medicationCodeableConcept, onChange: (request) => setCode(request), outcome: void 0 }), (0, import_jsx_runtime106.jsx)(Radio.Group, { name: "status", label: "Request Status", required: true, defaultValue: medication == null ? void 0 : medication.status, children: statusValues.map((sv) => (0, import_jsx_runtime106.jsx)(Radio, { value: sv, label: sv, my: "xs", required: true }, sv)) }), (0, import_jsx_runtime106.jsx)(Group, { justify: "flex-end", gap: 4, children: (0, import_jsx_runtime106.jsx)(Button, { type: "submit", children: "Save" }) })] }) }) : (0, import_jsx_runtime106.jsx)(Alert, { color: "red", children: "Not signed in" });
}
function Medications(props) {
  let medplum = b(), [medicationRequests, setMedicationRequests] = (0, import_react77.useState)(props.medicationRequests), [editMedication, setEditMedication] = (0, import_react77.useState)(), [opened, { open, close }] = useDisclosure(false), handleSubmit = (0, import_react77.useCallback)(async (medication) => {
    if (medication.id) {
      let updatedMedication = await medplum.updateResource(medication);
      setMedicationRequests(medicationRequests.map((m) => m.id === updatedMedication.id ? updatedMedication : m));
    } else {
      let newMedication = await medplum.createResource(medication);
      setMedicationRequests([newMedication, ...medicationRequests]);
    }
    setEditMedication(void 0), close();
  }, [medplum, medicationRequests, close]);
  return (0, import_jsx_runtime107.jsxs)(import_jsx_runtime107.Fragment, { children: [(0, import_jsx_runtime107.jsxs)(Group, { justify: "space-between", children: [(0, import_jsx_runtime107.jsx)(Text, { fz: "md", fw: 700, children: "Medications" }), (0, import_jsx_runtime107.jsx)(Anchor, { component: "button", onClick: (e) => {
    killEvent(e), setEditMedication(void 0), open();
  }, children: "+ Add" })] }), medicationRequests.length > 0 ? (0, import_jsx_runtime107.jsx)(Box, { children: medicationRequests.map((request) => (0, import_jsx_runtime107.jsx)(ConceptBadge, { resource: request, onEdit: (mr) => {
    setEditMedication(mr), open();
  } }, request.id)) }) : (0, import_jsx_runtime107.jsx)(Text, { children: "(none)" }), (0, import_jsx_runtime107.jsx)(Modal, { opened, onClose: close, title: editMedication ? "Edit Medication" : "Add Medication", children: (0, import_jsx_runtime107.jsx)(MedicationDialog, { patient: props.patient, encounter: props.encounter, medication: editMedication, onSubmit: handleSubmit }) })] });
}
function ConditionDialog(props) {
  let { patient, encounter, condition, onSubmit } = props, [code, setCode] = (0, import_react80.useState)(condition == null ? void 0 : condition.code), [clinicalStatus, setClinicalStatus] = (0, import_react80.useState)(condition == null ? void 0 : condition.clinicalStatus), handleSubmit = (0, import_react80.useCallback)((formData) => {
    let updatedCondition = ol({ ...condition, resourceType: "Condition", category: [{ coding: [{ system: gc + "/CodeSystem/condition-category", code: "problem-list-item", display: "Problem List Item" }], text: "Problem List Item" }], subject: te(patient), encounter: encounter && te(encounter), code, clinicalStatus, onsetDateTime: formData.onsetDateTime ? convertLocalToIso(formData.onsetDateTime) : void 0 }, Zr + "/fhir/us/core/StructureDefinition/us-core-condition-problems-health-concerns");
    onSubmit(updatedCondition);
  }, [patient, encounter, condition, code, clinicalStatus, onSubmit]);
  return (0, import_jsx_runtime108.jsx)(Form, { onSubmit: handleSubmit, children: (0, import_jsx_runtime108.jsxs)(Stack, { children: [(0, import_jsx_runtime108.jsx)(CodeableConceptInput, { name: "code", label: "Problem", path: "Condition.code", "data-autofocus": true, binding: Zr + "/fhir/us/core/ValueSet/us-core-condition-code", defaultValue: condition == null ? void 0 : condition.code, onChange: (code2) => setCode(code2), outcome: void 0 }), (0, import_jsx_runtime108.jsx)(CodeableConceptInput, { name: "clinicalStatus", label: "Status", path: "Condition.clinicalStatus", binding: Zr + "/fhir/ValueSet/condition-clinical", defaultValue: condition == null ? void 0 : condition.clinicalStatus, onChange: (clinicalStatus2) => setClinicalStatus(clinicalStatus2), outcome: void 0 }), (0, import_jsx_runtime108.jsx)(DateTimeInput, { name: "onsetDateTime", label: "Dx Date", defaultValue: condition == null ? void 0 : condition.onsetDateTime, required: true }), (0, import_jsx_runtime108.jsx)(Group, { justify: "flex-end", gap: 4, mt: "md", children: (0, import_jsx_runtime108.jsx)(Button, { type: "submit", children: "Save" }) })] }) }, condition == null ? void 0 : condition.id);
}
function ProblemList(props) {
  let medplum = b(), { patient, encounter } = props, [problems, setProblems] = (0, import_react79.useState)(props.problems), [editCondition, setEditCondition] = (0, import_react79.useState)(), [opened, { open, close }] = useDisclosure(false), handleSubmit = (0, import_react79.useCallback)(async (condition) => {
    if (condition.id) {
      let updatedCondition = await medplum.updateResource(condition);
      setProblems(problems.map((p) => p.id === updatedCondition.id ? updatedCondition : p));
    } else {
      let newCondition = await medplum.createResource(condition);
      setProblems([...problems, newCondition]);
    }
    setEditCondition(void 0), close();
  }, [medplum, problems, close]);
  return (0, import_jsx_runtime109.jsxs)(import_jsx_runtime109.Fragment, { children: [(0, import_jsx_runtime109.jsxs)(Group, { justify: "space-between", children: [(0, import_jsx_runtime109.jsx)(Text, { fz: "md", fw: 700, children: "Problem List" }), (0, import_jsx_runtime109.jsx)(Anchor, { component: "button", onClick: (e) => {
    killEvent(e), setEditCondition(void 0), open();
  }, children: "+ Add" })] }), problems.length > 0 ? (0, import_jsx_runtime109.jsx)(Grid, { gutter: "xs", children: problems.map((problem) => {
    var _a;
    return (0, import_jsx_runtime109.jsxs)(import_react79.Fragment, { children: [(0, import_jsx_runtime109.jsx)(Grid.Col, { span: 2, children: (_a = problem.onsetDateTime) == null ? void 0 : _a.substring(0, 4) }), (0, import_jsx_runtime109.jsx)(Grid.Col, { span: 10, children: (0, import_jsx_runtime109.jsx)(ConceptBadge, { resource: problem, onEdit: (c) => {
      setEditCondition(c), open();
    } }, problem.id) })] }, problem.id);
  }) }) : (0, import_jsx_runtime109.jsx)(Text, { children: "(none)" }), (0, import_jsx_runtime109.jsx)(Modal, { opened, onClose: close, title: editCondition ? "Edit Problem" : "Add Problem", children: (0, import_jsx_runtime109.jsx)(ConditionDialog, { patient, encounter, condition: editCondition, onSubmit: handleSubmit }) })] });
}
var NULLFLAVOR = gc + "/CodeSystem/v3-NullFlavor";
var CodesToText = { 38628009: "Homosexual", 20430005: "Heterosexual", 42035005: "Bisexual", OTH: "Other", UNK: "Unknown", ASKU: "Asked but no answer" };
var CodesToSystem = { 38628009: dc, 20430005: dc, 42035005: dc, OTH: NULLFLAVOR, UNK: NULLFLAVOR, ASKU: NULLFLAVOR };
function SexualOrientation(props) {
  let medplum = b(), { patient, encounter } = props, [sexualOrientation, setSexualOrientation] = (0, import_react81.useState)(props.sexualOrientation), [opened, { open, close }] = useDisclosure(false), handleSubmit = (0, import_react81.useCallback)((formData) => {
    let code = formData.sexualOrientation;
    medplum.createResource({ resourceType: "Observation", meta: { profile: [Zr + "/fhir/us/core/ValueSet/us-core-sexual-orientation"] }, status: "final", category: [{ coding: [{ system: gc + "/CodeSystem/observation-category", code: "social-history", display: "Social History" }], text: "Social History" }], code: { coding: [{ system: pc, code: "76690-7", display: "Sexual orientation" }], text: "Sexual orientation" }, subject: te(patient), encounter: encounter ? te(encounter) : void 0, effectiveDateTime: (/* @__PURE__ */ new Date()).toISOString(), valueCodeableConcept: { coding: [{ system: CodesToSystem[code], code: formData.sexualOrientation }], text: CodesToText[code] } }).then((newSexualOrientation) => {
      setSexualOrientation(newSexualOrientation), close();
    }).catch(console.error);
  }, [medplum, patient, encounter, close]);
  return (0, import_jsx_runtime110.jsxs)(import_jsx_runtime110.Fragment, { children: [(0, import_jsx_runtime110.jsxs)(Group, { justify: "space-between", children: [(0, import_jsx_runtime110.jsx)(Text, { fz: "md", fw: 700, children: "Sexual Orientation" }), (0, import_jsx_runtime110.jsx)(Anchor, { href: "#", onClick: (e) => {
    killEvent(e), open();
  }, children: "+ Edit" })] }), (sexualOrientation == null ? void 0 : sexualOrientation.valueCodeableConcept) ? (0, import_jsx_runtime110.jsx)(Box, { children: (0, import_jsx_runtime110.jsx)(Badge, { variant: "light", children: (0, import_jsx_runtime110.jsx)(CodeableConceptDisplay, { value: sexualOrientation.valueCodeableConcept }) }) }) : (0, import_jsx_runtime110.jsx)(Text, { children: "(none)" }), (0, import_jsx_runtime110.jsx)(Modal, { opened, onClose: close, title: "Set Sexual Orientation", children: (0, import_jsx_runtime110.jsx)(Form, { onSubmit: handleSubmit, children: (0, import_jsx_runtime110.jsxs)(Stack, { children: [(0, import_jsx_runtime110.jsx)(Radio.Group, { name: "sexualOrientation", label: "Sexual Orientation", required: true, children: Object.entries(CodesToText).map(([code, text]) => (0, import_jsx_runtime110.jsx)(Radio, { value: code, label: text, my: "xs" }, code)) }), (0, import_jsx_runtime110.jsx)(Group, { justify: "flex-end", gap: 4, mt: "md", children: (0, import_jsx_runtime110.jsx)(Button, { type: "submit", children: "Save" }) })] }) }) })] });
}
var smokingStatusOptions = { 266919005: "Never smoked tobacco", 266927001: "Tobacco smoking consumption unknown", "428041000124106": "Occasional tobacco smoker", "428061000124105": "Light tobacco smoker", "428071000124103": "Heavy tobacco smoker", 449868002: "Smokes tobacco daily", 77176002: "Smoker", 8517006: "Ex-smoker" };
function SmokingStatus(props) {
  let medplum = b(), { patient, encounter } = props, [smokingStatus, setSmokingStatus] = (0, import_react82.useState)(props.smokingStatus), [opened, { open, close }] = useDisclosure(false), handleSubmit = (0, import_react82.useCallback)((formData) => {
    medplum.createResource({ resourceType: "Observation", meta: { profile: [Zr + "/fhir/us/core/StructureDefinition/us-core-smokingstatus"] }, status: "final", category: [{ coding: [{ system: "http://terminology.hl7.org/CodeSystem/observation-category", code: "social-history", display: "Social History" }], text: "Social History" }], code: { coding: [{ system: pc, code: "72166-2", display: "Tobacco smoking status" }], text: "Tobacco smoking status" }, subject: te(patient), encounter: encounter ? te(encounter) : void 0, effectiveDateTime: (/* @__PURE__ */ new Date()).toISOString(), valueCodeableConcept: { coding: [{ system: dc, version: dc + "/731000124108", code: formData.smokingStatus }], text: smokingStatusOptions[formData.smokingStatus] } }).then((newSmokingStatus) => {
      setSmokingStatus(newSmokingStatus), close();
    }).catch(console.error);
  }, [medplum, patient, encounter, close]);
  return (0, import_jsx_runtime111.jsxs)(import_jsx_runtime111.Fragment, { children: [(0, import_jsx_runtime111.jsxs)(Group, { justify: "space-between", children: [(0, import_jsx_runtime111.jsx)(Text, { fz: "md", fw: 700, children: "Smoking Status" }), (0, import_jsx_runtime111.jsx)(Anchor, { href: "#", onClick: (e) => {
    killEvent(e), open();
  }, children: "+ Edit" })] }), (smokingStatus == null ? void 0 : smokingStatus.valueCodeableConcept) ? (0, import_jsx_runtime111.jsx)(Box, { children: (0, import_jsx_runtime111.jsx)(Badge, { variant: "light", children: (0, import_jsx_runtime111.jsx)(CodeableConceptDisplay, { value: smokingStatus.valueCodeableConcept }) }) }) : (0, import_jsx_runtime111.jsx)(Text, { children: "(none)" }), (0, import_jsx_runtime111.jsx)(Modal, { opened, onClose: close, title: "Set Smoking Status", children: (0, import_jsx_runtime111.jsx)(Form, { onSubmit: handleSubmit, children: (0, import_jsx_runtime111.jsxs)(Stack, { children: [(0, import_jsx_runtime111.jsx)(Radio.Group, { name: "smokingStatus", label: "Smoking Status", required: true, children: Object.entries(smokingStatusOptions).map(([code, text]) => (0, import_jsx_runtime111.jsx)(Radio, { value: code, label: text, my: "xs" }, code)) }), (0, import_jsx_runtime111.jsx)(Group, { justify: "flex-end", gap: 4, mt: "md", children: (0, import_jsx_runtime111.jsx)(Button, { type: "submit", children: "Save" }) })] }) }) })] });
}
function getObservationValue(observations, code) {
  var _a;
  return (_a = observations.find((o) => {
    var _a2, _b;
    return ((_b = (_a2 = o.code) == null ? void 0 : _a2.coding) == null ? void 0 : _b[0].code) === code;
  })) == null ? void 0 : _a.valueQuantity;
}
function getCompoundObservationValue(observations, code, innerCode) {
  var _a, _b, _c;
  return (_c = (_b = (_a = observations.find((o) => {
    var _a2, _b2;
    return ((_b2 = (_a2 = o.code) == null ? void 0 : _a2.coding) == null ? void 0 : _b2[0].code) === code;
  })) == null ? void 0 : _a.component) == null ? void 0 : _b.find((c) => {
    var _a2, _b2;
    return ((_b2 = (_a2 = c.code) == null ? void 0 : _a2.coding) == null ? void 0 : _b2[0].code) === innerCode;
  })) == null ? void 0 : _c.valueQuantity;
}
function createObservation(patient, encounter, code, title, valueQuantity) {
  if (isValidNumber(valueQuantity.value)) return { ...createBaseObservation(patient, encounter, code, title), valueQuantity };
}
function createCompoundObservation(patient, encounter, code, title, components) {
  let component = components.filter((c) => {
    var _a;
    return isValidNumber((_a = c.valueQuantity) == null ? void 0 : _a.value);
  });
  if (component.length !== 0) return { ...createBaseObservation(patient, encounter, code, title), component };
}
function createBaseObservation(patient, encounter, code, title) {
  return { resourceType: "Observation", status: "preliminary", subject: te(patient), encounter: encounter ? te(encounter) : void 0, effectiveDateTime: (/* @__PURE__ */ new Date()).toISOString(), category: [{ coding: [{ system: "http://terminology.hl7.org/CodeSystem/observation-category", code: "vital-signs", display: "Vital Signs" }] }], code: createLoincCode(code, title) };
}
function createLoincCode(code, display) {
  return { coding: [{ code, display, system: pc }], text: display };
}
function createQuantity(value, unit) {
  return { value, system: Yr, unit, code: unit };
}
function isValidNumber(value) {
  return value !== void 0 && !isNaN(value) && isFinite(value);
}
var LOINC_CODES = { bloodPressure: { code: "85354-9", title: "Blood Pressure", unit: "mm[Hg]" }, heartRate: { code: "8867-4", title: "Heart Rate", unit: "/min" }, bodyTemperature: { code: "8310-5", title: "Body Temperature", unit: "Cel" }, respiratoryRate: { code: "9279-1", title: "Respiratory Rate", unit: "/min" }, height: { code: "8302-2", title: "height", unit: "cm" }, weight: { code: "29463-7", title: "weight", unit: "kg" }, bmi: { code: "39156-5", title: "BMI", unit: "kg/m2" }, oxygen: { code: "2708-6", title: "Oxygen", unit: "%" }, headCircumference: { code: "9843-4", title: "Head Circumference", unit: "cm" } };
var SYSTOLIC = "8480-6";
var DIASTOLIC = "8462-4";
function Vitals(props) {
  let medplum = b(), { patient, encounter } = props, [vitals, setVitals] = (0, import_react83.useState)(props.vitals), [opened, { open, close }] = useDisclosure(false), handleSubmit = (0, import_react83.useCallback)((formData) => {
    let newObservations = Object.entries(LOINC_CODES).map(([name, meta]) => name === "bloodPressure" ? createCompoundObservation(patient, encounter, meta.code, meta.title, [{ code: createLoincCode(SYSTOLIC, "Systolic blood pressure"), valueQuantity: createQuantity(parseFloat(formData.systolic), "mm[Hg]") }, { code: createLoincCode(DIASTOLIC, "Diastolic blood pressure"), valueQuantity: createQuantity(parseFloat(formData.diastolic), "mm[Hg]") }]) : createObservation(patient, encounter, meta.code, meta.title, createQuantity(parseFloat(formData[name]), meta.unit))).filter(Boolean);
    Promise.all(newObservations.map((obs) => medplum.createResource(obs))).then((newVitals) => setVitals([...newVitals, ...vitals])).catch(console.error), close();
  }, [medplum, patient, encounter, vitals, close]);
  return (0, import_jsx_runtime112.jsxs)(import_jsx_runtime112.Fragment, { children: [(0, import_jsx_runtime112.jsxs)(Group, { justify: "space-between", children: [(0, import_jsx_runtime112.jsx)(Text, { fz: "md", fw: 700, children: "Vitals" }), (0, import_jsx_runtime112.jsx)(Anchor, { href: "#", onClick: (e) => {
    killEvent(e), open();
  }, children: "+ Add" })] }), (0, import_jsx_runtime112.jsxs)(Grid, { children: [(0, import_jsx_runtime112.jsx)(Grid.Col, { span: 3, ta: "right", c: "dimmed", children: "BP Sys" }), (0, import_jsx_runtime112.jsx)(Grid.Col, { span: 3, children: (0, import_jsx_runtime112.jsx)(QuantityDisplay, { value: getCompoundObservationValue(vitals, LOINC_CODES.bloodPressure.code, SYSTOLIC) }) }), (0, import_jsx_runtime112.jsx)(Grid.Col, { span: 3, ta: "right", c: "dimmed", children: "BP Dias" }), (0, import_jsx_runtime112.jsx)(Grid.Col, { span: 3, children: (0, import_jsx_runtime112.jsx)(QuantityDisplay, { value: getCompoundObservationValue(vitals, LOINC_CODES.bloodPressure.code, DIASTOLIC) }) }), (0, import_jsx_runtime112.jsx)(Grid.Col, { span: 3, ta: "right", c: "dimmed", children: "HR" }), (0, import_jsx_runtime112.jsx)(Grid.Col, { span: 3, children: (0, import_jsx_runtime112.jsx)(QuantityDisplay, { value: getObservationValue(vitals, LOINC_CODES.heartRate.code) }) }), (0, import_jsx_runtime112.jsx)(Grid.Col, { span: 3, ta: "right", c: "dimmed", children: "Temp" }), (0, import_jsx_runtime112.jsx)(Grid.Col, { span: 3, children: (0, import_jsx_runtime112.jsx)(QuantityDisplay, { value: getObservationValue(vitals, LOINC_CODES.bodyTemperature.code) }) }), (0, import_jsx_runtime112.jsx)(Grid.Col, { span: 3, ta: "right", c: "dimmed", children: "RR" }), (0, import_jsx_runtime112.jsx)(Grid.Col, { span: 3, children: (0, import_jsx_runtime112.jsx)(QuantityDisplay, { value: getObservationValue(vitals, LOINC_CODES.respiratoryRate.code) }) }), (0, import_jsx_runtime112.jsx)(Grid.Col, { span: 3, ta: "right", c: "dimmed", children: "Height" }), (0, import_jsx_runtime112.jsx)(Grid.Col, { span: 3, children: (0, import_jsx_runtime112.jsx)(QuantityDisplay, { value: getObservationValue(vitals, LOINC_CODES.height.code) }) }), (0, import_jsx_runtime112.jsx)(Grid.Col, { span: 3, ta: "right", c: "dimmed", children: "Weight" }), (0, import_jsx_runtime112.jsx)(Grid.Col, { span: 3, children: (0, import_jsx_runtime112.jsx)(QuantityDisplay, { value: getObservationValue(vitals, LOINC_CODES.weight.code) }) }), (0, import_jsx_runtime112.jsx)(Grid.Col, { span: 3, ta: "right", c: "dimmed", children: "BMI" }), (0, import_jsx_runtime112.jsx)(Grid.Col, { span: 3, children: (0, import_jsx_runtime112.jsx)(QuantityDisplay, { value: getObservationValue(vitals, LOINC_CODES.bmi.code) }) }), (0, import_jsx_runtime112.jsx)(Grid.Col, { span: 3, ta: "right", c: "dimmed", children: "O2" }), (0, import_jsx_runtime112.jsx)(Grid.Col, { span: 3, children: (0, import_jsx_runtime112.jsx)(QuantityDisplay, { value: getObservationValue(vitals, LOINC_CODES.oxygen.code) }) }), (0, import_jsx_runtime112.jsx)(Grid.Col, { span: 3, ta: "right", c: "dimmed", children: "HC" }), (0, import_jsx_runtime112.jsx)(Grid.Col, { span: 3, children: (0, import_jsx_runtime112.jsx)(QuantityDisplay, { value: getObservationValue(vitals, LOINC_CODES.headCircumference.code) }) })] }), (0, import_jsx_runtime112.jsx)(Modal, { opened, onClose: close, title: "Add Vitals", children: (0, import_jsx_runtime112.jsxs)(Form, { onSubmit: handleSubmit, children: [(0, import_jsx_runtime112.jsxs)(Stack, { children: [(0, import_jsx_runtime112.jsxs)(Group, { grow: true, children: [(0, import_jsx_runtime112.jsx)(TextInput, { name: "systolic", label: "BP Sys", "data-autofocus": true, autoFocus: true }), (0, import_jsx_runtime112.jsx)(TextInput, { name: "diastolic", label: "BP Dias" })] }), (0, import_jsx_runtime112.jsxs)(Group, { grow: true, children: [(0, import_jsx_runtime112.jsx)(TextInput, { name: "heartRate", label: "HR" }), (0, import_jsx_runtime112.jsx)(TextInput, { name: "bodyTemperature", label: "Temp" })] }), (0, import_jsx_runtime112.jsxs)(Group, { grow: true, children: [(0, import_jsx_runtime112.jsx)(TextInput, { name: "respiratoryRate", label: "RR" }), (0, import_jsx_runtime112.jsx)(TextInput, { name: "height", label: "height" })] }), (0, import_jsx_runtime112.jsxs)(Group, { grow: true, children: [(0, import_jsx_runtime112.jsx)(TextInput, { name: "weight", label: "Wt" }), (0, import_jsx_runtime112.jsx)(TextInput, { name: "bmi", label: "BMI" })] }), (0, import_jsx_runtime112.jsxs)(Group, { grow: true, children: [(0, import_jsx_runtime112.jsx)(TextInput, { name: "oxygen", label: "O2" }), (0, import_jsx_runtime112.jsx)(TextInput, { name: "headCircumference", label: "HC" })] }), (0, import_jsx_runtime112.jsx)(Textarea, { name: "notes", label: "Notes" })] }), (0, import_jsx_runtime112.jsx)(Group, { justify: "flex-end", gap: 4, mt: "md", children: (0, import_jsx_runtime112.jsx)(Button, { type: "submit", children: "Save" }) })] }) })] });
}
function getGenderIcon(patient) {
  switch (patient == null ? void 0 : patient.gender) {
    case "female":
      return IconGenderFemale;
    case "male":
      return IconGenderMale;
    default:
      return;
  }
}
function pluralize(count, singular, plural) {
  return count === 0 ? `No ${plural}` : count === 1 ? `1 ${singular}` : `${count} ${plural}`;
}
function PatientSummary(props) {
  var _a, _b, _c, _d, _e;
  let medplum = b(), { patient: propsPatient, background, appointmentsUrl: propsAppointmentsUrl, encountersUrl: propsEncountersUrl, ...cardProps } = props, patient = Ue(propsPatient), [medicalData, setMedicalData] = (0, import_react74.useState)(), appointmentsUrl = "appointmentsUrl" in props ? propsAppointmentsUrl : "#", encountersUrl = "encountersUrl" in props ? propsEncountersUrl : "#";
  (0, import_react74.useEffect)(() => {
    let ref = `Patient/${pe(propsPatient)}`, searchMeta = { _count: 100, _sort: "-_lastUpdated" }, today = (/* @__PURE__ */ new Date()).toISOString().substring(0, 10);
    Promise.all([medplum.searchResources("AllergyIntolerance", { patient: ref, ...searchMeta }), medplum.searchResources("Condition", { patient: ref, ...searchMeta }), medplum.searchResources("MedicationRequest", { subject: ref, ...searchMeta }), medplum.searchResources("Observation", { subject: ref, ...searchMeta }), medplum.searchResources("Appointment", { patient: ref, date: `ge${today}`, status: "proposed,pending,booked", ...searchMeta }), medplum.searchResources("Encounter", { subject: ref, date: `le${today}`, status: "finished", ...searchMeta })]).then((results) => {
      let observations = results[3];
      setMedicalData({ allergies: results[0], problems: results[1], medicationRequests: results[2], sexualOrientation: observations.find((obs) => {
        var _a2, _b2;
        return ((_b2 = (_a2 = obs.code) == null ? void 0 : _a2.coding) == null ? void 0 : _b2[0].code) === "76690-7";
      }), smokingStatus: observations.find((obs) => {
        var _a2, _b2;
        return ((_b2 = (_a2 = obs.code) == null ? void 0 : _a2.coding) == null ? void 0 : _b2[0].code) === "72166-2";
      }), vitals: observations.filter((obs) => {
        var _a2, _b2, _c2;
        return ((_c2 = (_b2 = (_a2 = obs.category) == null ? void 0 : _a2[0]) == null ? void 0 : _b2.coding) == null ? void 0 : _c2[0].code) === "vital-signs";
      }), appointments: results[4], encounters: results[5] });
    }).catch(console.error);
  }, [medplum, propsPatient]);
  let links = (0, import_react74.useMemo)(() => {
    var _a2, _b2;
    let appointmentsLink = appointmentsUrl === void 0 ? void 0 : (0, import_jsx_runtime113.jsx)(MedplumLink, { to: appointmentsUrl, children: pluralize((_a2 = medicalData == null ? void 0 : medicalData.appointments) == null ? void 0 : _a2.length, "upcoming appointment", "upcoming appointments") }, "appt"), encountersLink = encountersUrl === void 0 ? void 0 : (0, import_jsx_runtime113.jsx)(MedplumLink, { to: encountersUrl, children: pluralize((_b2 = medicalData == null ? void 0 : medicalData.encounters) == null ? void 0 : _b2.length, "documented visit", "documented visits") }, "enc");
    return [appointmentsLink, encountersLink].filter(Boolean);
  }, [appointmentsUrl, (_a = medicalData == null ? void 0 : medicalData.appointments) == null ? void 0 : _a.length, (_b = medicalData == null ? void 0 : medicalData.encounters) == null ? void 0 : _b.length, encountersUrl]);
  if (!patient) return null;
  let GenderIconComponent = getGenderIcon(patient);
  return (0, import_jsx_runtime113.jsxs)(Card, { ...cardProps, children: [(0, import_jsx_runtime113.jsx)(Card.Section, { h: 100, style: { background } }), (0, import_jsx_runtime113.jsx)(ResourceAvatar, { value: patient, size: 80, radius: 80, mx: "auto", mt: -50, style: { border: "2px solid white" } }), (0, import_jsx_runtime113.jsx)(Text, { ta: "center", fz: "lg", fw: 500, children: lt((_c = patient.name) == null ? void 0 : _c[0]) }), patient.birthDate && (0, import_jsx_runtime113.jsxs)(Text, { ta: "center", fz: "xs", c: "dimmed", children: [patient.birthDate, " (", ju(patient.birthDate), ")"] }), (0, import_jsx_runtime113.jsx)(Paper, { withBorder: true, p: "md", my: "md", children: (0, import_jsx_runtime113.jsxs)(Group, { wrap: "nowrap", justify: "space-evenly", children: [(0, import_jsx_runtime113.jsxs)(Flex, { justify: "center", align: "center", direction: "column", gap: 0, children: [(0, import_jsx_runtime113.jsx)(IconUserSquare, { size: 24, color: "gray" }), (0, import_jsx_runtime113.jsx)(Text, { fz: "xs", ta: "center", style: { whiteSpace: "nowrap" }, children: "Self" })] }), (0, import_jsx_runtime113.jsxs)(Flex, { justify: "center", align: "center", direction: "column", gap: 0, children: [(0, import_jsx_runtime113.jsx)(IconStethoscope, { size: 24, color: "gray" }), (0, import_jsx_runtime113.jsx)(Text, { fz: "xs", style: { whiteSpace: "nowrap" }, children: ((_e = (_d = patient == null ? void 0 : patient.generalPractitioner) == null ? void 0 : _d[0]) == null ? void 0 : _e.display) ?? "No provider" })] }), GenderIconComponent && (0, import_jsx_runtime113.jsxs)(Flex, { justify: "center", align: "center", direction: "column", gap: 0, children: [(0, import_jsx_runtime113.jsx)(GenderIconComponent, { size: 24, color: "gray" }), (0, import_jsx_runtime113.jsx)(Text, { fz: "xs", style: { whiteSpace: "nowrap" }, children: patient.gender })] })] }) }), (0, import_jsx_runtime113.jsxs)(Stack, { gap: "xs", children: [links.length > 0 && (0, import_jsx_runtime113.jsxs)(import_jsx_runtime113.Fragment, { children: [links, (0, import_jsx_runtime113.jsx)(Divider, {})] }), medicalData && (0, import_jsx_runtime113.jsxs)(import_jsx_runtime113.Fragment, { children: [(0, import_jsx_runtime113.jsx)(Allergies, { patient, allergies: medicalData.allergies }), (0, import_jsx_runtime113.jsx)(Divider, {}), (0, import_jsx_runtime113.jsx)(ProblemList, { patient, problems: medicalData.problems }), (0, import_jsx_runtime113.jsx)(Divider, {}), (0, import_jsx_runtime113.jsx)(Medications, { patient, medicationRequests: medicalData.medicationRequests }), (0, import_jsx_runtime113.jsx)(Divider, {}), (0, import_jsx_runtime113.jsx)(SexualOrientation, { patient, sexualOrientation: medicalData.sexualOrientation }), (0, import_jsx_runtime113.jsx)(Divider, {}), (0, import_jsx_runtime113.jsx)(SmokingStatus, { patient, smokingStatus: medicalData.smokingStatus }), (0, import_jsx_runtime113.jsx)(Divider, {}), (0, import_jsx_runtime113.jsx)(Vitals, { patient, vitals: medicalData.vitals })] })] })] });
}
function PatientTimeline(props) {
  let { patient, ...rest } = props, loadTimelineResources = (0, import_react84.useCallback)((medplum, resourceType, id) => {
    let ref = `${resourceType}/${id}`, _count = 100;
    return Promise.allSettled([medplum.readHistory("Patient", id), medplum.search("Communication", { subject: ref, _count }), medplum.search("Device", { patient: ref, _count }), medplum.search("DeviceRequest", { patient: ref, _count }), medplum.search("DiagnosticReport", { subject: ref, _count }), medplum.search("Media", { subject: ref, _count }), medplum.search("ServiceRequest", { subject: ref, _count }), medplum.search("Task", { subject: ref, _count })]);
  }, []);
  return (0, import_jsx_runtime114.jsx)(ResourceTimeline, { value: patient, loadTimelineResources, createCommunication: (resource, sender, text) => ({ resourceType: "Communication", status: "completed", subject: te(resource), sender: te(sender), sent: (/* @__PURE__ */ new Date()).toISOString(), payload: [{ contentString: text }] }), createMedia: (resource, operator, content) => ({ resourceType: "Media", status: "completed", subject: te(resource), operator: te(operator), issued: (/* @__PURE__ */ new Date()).toISOString(), content }), ...rest });
}
var PlanDefinitionBuilder_default = { section: "PlanDefinitionBuilder_section", hovering: "PlanDefinitionBuilder_hovering", editing: "PlanDefinitionBuilder_editing", bottomActions: "PlanDefinitionBuilder_bottomActions" };
function PlanDefinitionBuilder(props) {
  let medplum = b(), defaultValue2 = Ue(props.value), [schemaLoaded, setSchemaLoaded] = (0, import_react85.useState)(false), [selectedKey, setSelectedKey] = (0, import_react85.useState)(), [hoverKey, setHoverKey] = (0, import_react85.useState)(), [value, setValue] = (0, import_react85.useState)();
  function handleDocumentMouseOver() {
    setHoverKey(void 0);
  }
  function handleDocumentClick() {
    setSelectedKey(void 0);
  }
  let valueRef = (0, import_react85.useRef)();
  if (valueRef.current = value, (0, import_react85.useEffect)(() => {
    medplum.requestSchema("PlanDefinition").then(() => setSchemaLoaded(true)).catch(console.log);
  }, [medplum]), (0, import_react85.useEffect)(() => (setValue(ensurePlanDefinitionKeys(defaultValue2 ?? { resourceType: "PlanDefinition", status: "active" })), document.addEventListener("mouseover", handleDocumentMouseOver), document.addEventListener("click", handleDocumentClick), () => {
    document.removeEventListener("mouseover", handleDocumentMouseOver), document.removeEventListener("click", handleDocumentClick);
  }), [defaultValue2]), !schemaLoaded || !value) return null;
  function changeProperty(property, newValue) {
    setValue({ ...valueRef.current, [property]: newValue });
  }
  return (0, import_jsx_runtime115.jsx)("div", { children: (0, import_jsx_runtime115.jsxs)(Form, { testid: "questionnaire-form", onSubmit: () => props.onSubmit(value), children: [(0, import_jsx_runtime115.jsx)(TextInput, { label: "Plan Title", defaultValue: value.title, onChange: (e) => changeProperty("title", e.currentTarget.value) }), (0, import_jsx_runtime115.jsx)(ActionArrayBuilder, { actions: value.action || [], selectedKey, setSelectedKey, hoverKey, setHoverKey, onChange: (x) => changeProperty("action", x) }), (0, import_jsx_runtime115.jsx)(Button, { type: "submit", children: "Save" })] }) });
}
function ActionArrayBuilder(props) {
  let actionsRef = (0, import_react85.useRef)();
  actionsRef.current = props.actions;
  function changeAction(changedAction) {
    props.onChange(actionsRef.current.map((i) => i.id === changedAction.id ? changedAction : i));
  }
  function addAction(addedAction) {
    props.onChange([...actionsRef.current, addedAction]), props.setSelectedKey(addedAction.id);
  }
  function removeAction(removedAction) {
    props.onChange(actionsRef.current.filter((i) => i !== removedAction));
  }
  return (0, import_jsx_runtime115.jsxs)("div", { className: PlanDefinitionBuilder_default.section, children: [props.actions.map((action) => (0, import_jsx_runtime115.jsx)("div", { children: (0, import_jsx_runtime115.jsx)(ActionBuilder, { action, selectedKey: props.selectedKey, setSelectedKey: props.setSelectedKey, hoverKey: props.hoverKey, setHoverKey: props.setHoverKey, onChange: changeAction, onRemove: () => removeAction(action) }) }, action.id)), (0, import_jsx_runtime115.jsx)("div", { className: PlanDefinitionBuilder_default.bottomActions, children: (0, import_jsx_runtime115.jsx)(Anchor, { href: "#", onClick: (e) => {
    killEvent(e), addAction({ id: generateId() });
  }, children: "Add action" }) })] });
}
function ActionBuilder(props) {
  let { action } = props, actionType = getInitialActionType(action), editing = props.selectedKey === props.action.id, hovering = props.hoverKey === props.action.id;
  function onClick(e) {
    e.stopPropagation(), props.setSelectedKey(props.action.id);
  }
  function onHover(e) {
    killEvent(e), props.setHoverKey(props.action.id);
  }
  let className = clsx_default(PlanDefinitionBuilder_default.section, { [PlanDefinitionBuilder_default.editing]: editing, [PlanDefinitionBuilder_default.hovering]: hovering && !editing });
  return (0, import_jsx_runtime115.jsxs)("div", { "data-testid": action.id, className, onClick, onMouseOver: onHover, onFocus: onHover, children: [editing ? (0, import_jsx_runtime115.jsx)(ActionEditor, { action, actionType, onChange: props.onChange, selectedKey: props.selectedKey, setSelectedKey: props.setSelectedKey, hoverKey: props.hoverKey, setHoverKey: props.setHoverKey, onRemove: props.onRemove }) : (0, import_jsx_runtime115.jsx)(ActionDisplay, { action, actionType }), (0, import_jsx_runtime115.jsx)("div", { className: PlanDefinitionBuilder_default.bottomActions, children: (0, import_jsx_runtime115.jsx)(Anchor, { href: "#", onClick: (e) => {
    e.preventDefault(), props.onRemove();
  }, children: "Remove" }) })] });
}
var timingProperty = { path: "PlanDefinition.action.timing[x]", min: 0, max: 1, description: "", isArray: false, constraints: [], type: ["dateTime", "Period", "Range", "Timing"].map((t) => ({ code: t })) };
function ActionDisplay(props) {
  let { action, actionType } = props, [propertyValue, propertyType] = getActionTiming(action);
  return (0, import_jsx_runtime115.jsxs)("div", { children: [(0, import_jsx_runtime115.jsxs)("div", { children: [action.title || "Untitled", " ", actionType && `(${actionType})`] }), action.definitionCanonical && (0, import_jsx_runtime115.jsx)("div", { children: (0, import_jsx_runtime115.jsx)(ReferenceDisplay, { value: { reference: action.definitionCanonical } }) }), propertyValue && (0, import_jsx_runtime115.jsx)("div", { children: (0, import_jsx_runtime115.jsx)(ResourcePropertyDisplay, { property: timingProperty, propertyType, value: propertyValue }) })] });
}
function ActionEditor(props) {
  let { action } = props, [actionType, setActionType] = (0, import_react85.useState)(props.actionType);
  function changeProperty(property, value) {
    props.onChange({ ...action, [property]: value });
  }
  return (0, import_jsx_runtime115.jsxs)(Stack, { gap: "xl", children: [(0, import_jsx_runtime115.jsx)(TextInput, { name: `actionTitle-${action.id}`, label: "Title", defaultValue: action.title, onChange: (e) => changeProperty("title", e.currentTarget.value) }), (0, import_jsx_runtime115.jsx)(TextInput, { name: `actionDescription-${action.id}`, label: "Description", defaultValue: action.description, onChange: (e) => changeProperty("description", e.currentTarget.value) }), (0, import_jsx_runtime115.jsx)(NativeSelect, { label: "Type of Action", description: "The type of the action to be performed.", name: `actionType-${action.id}`, defaultValue: actionType, onChange: (e) => setActionType(e.currentTarget.value), data: ["", "appointment", "lab", "questionnaire", "task"] }), action.action && action.action.length > 0 && (0, import_jsx_runtime115.jsx)(ActionArrayBuilder, { actions: action.action, selectedKey: props.selectedKey, setSelectedKey: props.setSelectedKey, hoverKey: props.hoverKey, setHoverKey: props.setHoverKey, onChange: (x) => changeProperty("action", x) }), (() => {
    switch (actionType) {
      case "appointment":
        return (0, import_jsx_runtime115.jsx)(ActionResourceTypeBuilder, { title: "Appointment", description: "The subject must schedule an appointment from the schedule.", resourceType: "Schedule", action, onChange: props.onChange });
      case "lab":
        return (0, import_jsx_runtime115.jsx)(ActionResourceTypeBuilder, { title: "Lab", description: "The subject must complete the following lab panel.", resourceType: "ActivityDefinition", action, onChange: props.onChange });
      case "questionnaire":
        return (0, import_jsx_runtime115.jsx)(ActionResourceTypeBuilder, { title: "Questionnaire", description: "The subject must complete the selected questionnaire.", resourceType: "Questionnaire", action, onChange: props.onChange });
      case "task":
        return (0, import_jsx_runtime115.jsx)(ActionResourceTypeBuilder, { title: "Task", description: "The subject must complete the following task.", resourceType: "ActivityDefinition", action, onChange: props.onChange });
      default:
        return null;
    }
  })(), (0, import_jsx_runtime115.jsx)(FormSection, { title: "Timing", description: "When the action should take place.", children: (0, import_jsx_runtime115.jsx)(ActionTimingInput, { name: "timing-" + action.id, action, onChange: props.onChange }) })] });
}
function ActionResourceTypeBuilder(props) {
  let { id, definitionCanonical } = props.action, reference = (definitionCanonical == null ? void 0 : definitionCanonical.startsWith(props.resourceType + "/")) ? { reference: definitionCanonical } : void 0;
  return (0, import_jsx_runtime115.jsx)(ResourceInput, { name: id, resourceType: props.resourceType, defaultValue: reference, loadOnFocus: true, onChange: (newValue) => {
    newValue ? props.onChange({ ...props.action, definitionCanonical: le(newValue) }) : props.onChange({ ...props.action, definitionCanonical: void 0 });
  } });
}
function ActionTimingInput(props) {
  let value = props.action, key = "timing", [propertyValue, propertyType] = getActionTiming(value);
  return (0, import_jsx_runtime115.jsx)(ResourcePropertyInput, { property: timingProperty, name: "timing[x]", path: "PlanDefinition.timing[x]", defaultValue: propertyValue, defaultPropertyType: propertyType, onChange: (newValue, propName) => {
    props.onChange(setPropertyValue(value, key, propName ?? key, timingProperty, newValue));
  }, outcome: void 0 });
}
function getInitialActionType(action) {
  var _a, _b, _c;
  if ((_a = action.definitionCanonical) == null ? void 0 : _a.startsWith("Schedule")) return "appointment";
  if ((_b = action.definitionCanonical) == null ? void 0 : _b.startsWith("Questionnaire/")) return "questionnaire";
  if ((_c = action.definitionCanonical) == null ? void 0 : _c.startsWith("ActivityDefinition/")) return "task";
}
function getActionTiming(action) {
  return getValueAndType({ type: "PlanDefinitionAction", value: action }, "timing");
}
var nextId = 1;
function generateId(existing) {
  if (existing) {
    if (existing.startsWith("id-")) {
      let existingNum = parseInt(existing.substring(3), 10);
      isNaN(existingNum) || (nextId = Math.max(nextId, existingNum + 1));
    }
    return existing;
  }
  return "id-" + nextId++;
}
function ensurePlanDefinitionKeys(planDefinition) {
  return { ...planDefinition, action: ensurePlanDefinitionActionKeys(planDefinition.action) };
}
function ensurePlanDefinitionActionKeys(actions) {
  if (actions) return actions.map((action) => ({ ...action, id: generateId(action.id), action: ensurePlanDefinitionActionKeys(action.action) }));
}
var QuestionnaireItemType = ((QuestionnaireItemType2) => (QuestionnaireItemType2.group = "group", QuestionnaireItemType2.display = "display", QuestionnaireItemType2.question = "question", QuestionnaireItemType2.boolean = "boolean", QuestionnaireItemType2.decimal = "decimal", QuestionnaireItemType2.integer = "integer", QuestionnaireItemType2.date = "date", QuestionnaireItemType2.dateTime = "dateTime", QuestionnaireItemType2.time = "time", QuestionnaireItemType2.string = "string", QuestionnaireItemType2.text = "text", QuestionnaireItemType2.url = "url", QuestionnaireItemType2.choice = "choice", QuestionnaireItemType2.openChoice = "open-choice", QuestionnaireItemType2.attachment = "attachment", QuestionnaireItemType2.reference = "reference", QuestionnaireItemType2.quantity = "quantity", QuestionnaireItemType2))(QuestionnaireItemType || {});
function isChoiceQuestion(item) {
  return item.type === "choice" || item.type === "open-choice";
}
function isQuestionEnabled(item, questionnaireResponse) {
  var _a;
  let extension = X(item, Zr + "/fhir/uv/sdc/StructureDefinition/sdc-questionnaire-enableWhenExpression");
  if (questionnaireResponse && extension) {
    let expression = (_a = extension.valueExpression) == null ? void 0 : _a.expression;
    if (expression) {
      let value = g(questionnaireResponse), result = A(expression, [value], { "%resource": value });
      return N(result);
    }
  }
  if (!item.enableWhen) return true;
  let enableBehavior = item.enableBehavior ?? "any";
  for (let enableWhen of item.enableWhen) {
    let actualAnswers = getByLinkId(questionnaireResponse == null ? void 0 : questionnaireResponse.item, enableWhen.question);
    if (enableWhen.operator === "exists" && !enableWhen.answerBoolean && !(actualAnswers == null ? void 0 : actualAnswers.length)) {
      if (enableBehavior === "any") return true;
      continue;
    }
    let { anyMatch, allMatch } = checkAnswers(enableWhen, actualAnswers, enableBehavior);
    if (enableBehavior === "any" && anyMatch) return true;
    if (enableBehavior === "all" && !allMatch) return false;
  }
  return enableBehavior !== "any";
}
function getNewMultiSelectValues(selected, propertyName, item) {
  return selected.map((o) => {
    var _a;
    let option = (_a = item.answerOption) == null ? void 0 : _a.find((option2) => Ho(option2.valueCoding) === o || option2[propertyName] === o), optionValue = getItemAnswerOptionValue(option ?? {});
    return { [propertyName]: optionValue == null ? void 0 : optionValue.value };
  });
}
function getByLinkId(responseItems, linkId) {
  if (responseItems) for (let response of responseItems) {
    if (response.linkId === linkId) return response.answer;
    if (response.item) {
      let nestedAnswer = getByLinkId(response.item, linkId);
      if (nestedAnswer) return nestedAnswer;
    }
  }
}
function evaluateMatch(actualAnswer, expectedAnswer, operator) {
  if (operator === "exists") return !!actualAnswer === expectedAnswer.value;
  if (actualAnswer) {
    let fhirPathOperator = operator === "=" || operator === "!=" ? operator == null ? void 0 : operator.replace("=", "~") : operator, [{ value }] = A(`%actualAnswer ${fhirPathOperator} %expectedAnswer`, [actualAnswer], { "%actualAnswer": actualAnswer, "%expectedAnswer": expectedAnswer });
    return value;
  } else return false;
}
function checkAnswers(enableWhen, answers, enableBehavior) {
  let actualAnswers = answers || [], expectedAnswer = getItemEnableWhenValueAnswer(enableWhen), anyMatch = false, allMatch = true;
  for (let actualAnswerValue of actualAnswers) {
    let actualAnswer = getResponseItemAnswerValue(actualAnswerValue), { operator } = enableWhen;
    if (evaluateMatch(actualAnswer, expectedAnswer, operator) ? anyMatch = true : allMatch = false, enableBehavior === "any" && anyMatch) break;
  }
  return { anyMatch, allMatch };
}
function getQuestionnaireItemReferenceTargetTypes(item) {
  var _a, _b;
  let extension = X(item, "http://hl7.org/fhir/StructureDefinition/questionnaire-referenceResource");
  if (extension) {
    if (extension.valueCode !== void 0) return [extension.valueCode];
    if (extension.valueCodeableConcept) return (_b = (_a = extension.valueCodeableConcept) == null ? void 0 : _a.coding) == null ? void 0 : _b.map((c) => c.code);
  }
}
function setQuestionnaireItemReferenceTargetTypes(item, targetTypes) {
  var _a;
  let result = de(item), extension = X(result, "http://hl7.org/fhir/StructureDefinition/questionnaire-referenceResource");
  return !targetTypes || targetTypes.length === 0 ? (extension && (result.extension = (_a = result.extension) == null ? void 0 : _a.filter((e) => e !== extension)), result) : (extension || (result.extension || (result.extension = []), extension = { url: "http://hl7.org/fhir/StructureDefinition/questionnaire-referenceResource" }, result.extension.push(extension)), targetTypes.length === 1 ? (extension.valueCode = targetTypes[0], delete extension.valueCodeableConcept) : (extension.valueCodeableConcept = { coding: targetTypes.map((t) => ({ code: t })) }, delete extension.valueCode), result);
}
function getQuestionnaireItemReferenceFilter(item, subject, encounter) {
  let extension = X(item, "http://hl7.org/fhir/StructureDefinition/questionnaire-referenceFilter");
  if (!(extension == null ? void 0 : extension.valueString)) return;
  let filter = extension.valueString;
  (subject == null ? void 0 : subject.reference) && (filter = filter.replaceAll("$subj", subject.reference)), (encounter == null ? void 0 : encounter.reference) && (filter = filter.replaceAll("$encounter", encounter.reference));
  let result = {}, parts = filter.split("&");
  for (let part of parts) {
    let [key, value] = Rr(part, "=", 2);
    result[key] = value;
  }
  return result;
}
function buildInitialResponse(questionnaire) {
  return { resourceType: "QuestionnaireResponse", questionnaire: le(questionnaire), item: buildInitialResponseItems(questionnaire.item), status: "in-progress" };
}
function buildInitialResponseItems(items) {
  return (items == null ? void 0 : items.map(buildInitialResponseItem)) ?? [];
}
function buildInitialResponseItem(item) {
  var _a;
  return { id: generateId2(), linkId: item.linkId, text: item.text, item: buildInitialResponseItems(item.item), answer: ((_a = item.initial) == null ? void 0 : _a.map(buildInitialResponseAnswer)) ?? [] };
}
var nextId2 = 1;
function generateId2() {
  return "id-" + nextId2++;
}
function buildInitialResponseAnswer(answer) {
  return { ...answer };
}
function formatReferenceString(typedValue) {
  return typedValue.value.display || typedValue.value.reference || Fn(typedValue.value);
}
function getNumberOfPages(questionnaire) {
  var _a, _b, _c, _d, _e;
  let firstItem = (_a = questionnaire == null ? void 0 : questionnaire.item) == null ? void 0 : _a[0];
  return firstItem && ((_e = (_d = (_c = (_b = X(firstItem, "http://hl7.org/fhir/StructureDefinition/questionnaire-itemControl")) == null ? void 0 : _b.valueCodeableConcept) == null ? void 0 : _c.coding) == null ? void 0 : _d[0]) == null ? void 0 : _e.code) === "page" ? questionnaire.item.length : 1;
}
function getItemInitialValue(initial) {
  return xo({ type: "QuestionnaireItemInitial", value: initial }, "value");
}
function getItemAnswerOptionValue(option) {
  return xo({ type: "QuestionnaireItemAnswerOption", value: option }, "value");
}
function getItemEnableWhenValueAnswer(enableWhen) {
  return xo({ type: "QuestionnaireItemEnableWhen", value: enableWhen }, "answer");
}
function getResponseItemAnswerValue(answer) {
  return xo({ type: "QuestionnaireResponseItemAnswer", value: answer }, "value");
}
var QuestionnaireFormContext = (0, import_react88.createContext)({});
function QuestionnaireFormItem(props) {
  let context = (0, import_react87.useContext)(QuestionnaireFormContext), item = props.item, response = props.response;
  function onChangeAnswer(newResponseAnswer) {
    var _a, _b, _c, _d;
    let updatedAnswers;
    Array.isArray(newResponseAnswer) ? updatedAnswers = newResponseAnswer : props.index >= (((_b = (_a = props.response) == null ? void 0 : _a.answer) == null ? void 0 : _b.length) ?? 0) ? updatedAnswers = (((_c = props.response) == null ? void 0 : _c.answer) ?? []).concat([newResponseAnswer]) : updatedAnswers = (((_d = props.response) == null ? void 0 : _d.answer) ?? []).map((a, idx) => idx === props.index ? newResponseAnswer : a) ?? [], props.onChange({ id: response == null ? void 0 : response.id, linkId: response == null ? void 0 : response.linkId, text: item.text, answer: updatedAnswers });
  }
  let type = item.type;
  if (!type) return null;
  let name = item.linkId;
  if (!name) return null;
  let initial = item.initial && item.initial.length > 0 ? item.initial[0] : void 0, defaultValue2 = getCurrentAnswer(response, props.index) ?? getItemInitialValue(initial);
  switch (type) {
    case "display":
      return (0, import_jsx_runtime116.jsx)("p", { children: props.item.text }, props.item.linkId);
    case "boolean":
      return (0, import_jsx_runtime116.jsx)(CheckboxFormSection, { title: props.item.text, htmlFor: props.item.linkId, children: (0, import_jsx_runtime116.jsx)(Checkbox, { id: props.item.linkId, name: props.item.linkId, defaultChecked: defaultValue2 == null ? void 0 : defaultValue2.value, onChange: (e) => onChangeAnswer({ valueBoolean: e.currentTarget.checked }) }) }, props.item.linkId);
    case "decimal":
      return (0, import_jsx_runtime116.jsx)(TextInput, { type: "number", step: "any", id: name, name, required: item.required, defaultValue: defaultValue2 == null ? void 0 : defaultValue2.value, onChange: (e) => onChangeAnswer({ valueDecimal: e.currentTarget.valueAsNumber }) });
    case "integer":
      return (0, import_jsx_runtime116.jsx)(TextInput, { type: "number", step: 1, id: name, name, required: item.required, defaultValue: defaultValue2 == null ? void 0 : defaultValue2.value, onChange: (e) => onChangeAnswer({ valueInteger: e.currentTarget.valueAsNumber }) });
    case "date":
      return (0, import_jsx_runtime116.jsx)(TextInput, { type: "date", id: name, name, required: item.required, defaultValue: defaultValue2 == null ? void 0 : defaultValue2.value, onChange: (e) => onChangeAnswer({ valueDate: e.currentTarget.value }) });
    case "dateTime":
      return (0, import_jsx_runtime116.jsx)(DateTimeInput, { name, required: item.required, defaultValue: defaultValue2 == null ? void 0 : defaultValue2.value, onChange: (newValue) => onChangeAnswer({ valueDateTime: newValue }) });
    case "time":
      return (0, import_jsx_runtime116.jsx)(TextInput, { type: "time", id: name, name, required: item.required, defaultValue: defaultValue2 == null ? void 0 : defaultValue2.value, onChange: (e) => onChangeAnswer({ valueTime: e.currentTarget.value }) });
    case "string":
    case "url":
      return (0, import_jsx_runtime116.jsx)(TextInput, { id: name, name, required: item.required, defaultValue: defaultValue2 == null ? void 0 : defaultValue2.value, onChange: (e) => onChangeAnswer({ valueString: e.currentTarget.value }) });
    case "text":
      return (0, import_jsx_runtime116.jsx)(Textarea, { id: name, name, required: item.required, defaultValue: defaultValue2 == null ? void 0 : defaultValue2.value, onChange: (e) => onChangeAnswer({ valueString: e.currentTarget.value }) });
    case "attachment":
      return (0, import_jsx_runtime116.jsx)(Group, { py: 4, children: (0, import_jsx_runtime116.jsx)(AttachmentInput, { path: "", name, defaultValue: defaultValue2 == null ? void 0 : defaultValue2.value, onChange: (newValue) => onChangeAnswer({ valueAttachment: newValue }) }) });
    case "reference":
      return (0, import_jsx_runtime116.jsx)(ReferenceInput, { name, required: item.required, targetTypes: getQuestionnaireItemReferenceTargetTypes(item), searchCriteria: getQuestionnaireItemReferenceFilter(item, context.subject, context.encounter), defaultValue: defaultValue2 == null ? void 0 : defaultValue2.value, onChange: (newValue) => onChangeAnswer({ valueReference: newValue }) });
    case "quantity":
      return (0, import_jsx_runtime116.jsx)(QuantityInput, { path: "", name, required: item.required, defaultValue: defaultValue2 == null ? void 0 : defaultValue2.value, onChange: (newValue) => onChangeAnswer({ valueQuantity: newValue }), disableWheel: true });
    case "choice":
    case "open-choice":
      return isDropDownChoice(item) && !item.answerValueSet ? (0, import_jsx_runtime116.jsx)(QuestionnaireChoiceDropDownInput, { name, item, initial, response, onChangeAnswer: (e) => onChangeAnswer(e) }) : isMultiSelectChoice(item) && !item.answerValueSet ? (0, import_jsx_runtime116.jsx)(QuestionnaireMultiSelectInput, { name, item, initial, response, onChangeAnswer: (e) => onChangeAnswer(e) }) : (0, import_jsx_runtime116.jsx)(QuestionnaireChoiceSetInput, { name, item, initial, response, onChangeAnswer: (e) => onChangeAnswer(e) });
    default:
      return null;
  }
}
function QuestionnaireChoiceDropDownInput(props) {
  var _a;
  let { name, item, initial, response } = props;
  if (!((_a = item.answerOption) == null ? void 0 : _a.length)) return (0, import_jsx_runtime116.jsx)(NoAnswerDisplay, {});
  let initialValue = getItemInitialValue(initial), data2 = [""];
  for (let option of item.answerOption) {
    let optionValue = getItemAnswerOptionValue(option);
    data2.push(typedValueToString(optionValue));
  }
  let defaultValue2 = getCurrentAnswer(response) ?? initialValue;
  if (item.repeats) {
    let { propertyName, data: data3 } = formatSelectData(props.item), currentAnswer = getCurrentMultiSelectAnswer(response);
    return (0, import_jsx_runtime116.jsx)(MultiSelect, { data: data3, placeholder: "Select items", searchable: true, defaultValue: currentAnswer || [typedValueToString(initialValue)], onChange: (selected) => {
      let values2 = getNewMultiSelectValues(selected, propertyName, item);
      props.onChangeAnswer(values2);
    } });
  }
  return (0, import_jsx_runtime116.jsx)(NativeSelect, { id: name, name, onChange: (e) => {
    let index = e.currentTarget.selectedIndex;
    if (index === 0) {
      props.onChangeAnswer({});
      return;
    }
    let option = item.answerOption[index - 1], optionValue = getItemAnswerOptionValue(option), propertyName = "value" + w(optionValue.type);
    props.onChangeAnswer({ [propertyName]: optionValue.value });
  }, defaultValue: Ho(defaultValue2 == null ? void 0 : defaultValue2.value) || (defaultValue2 == null ? void 0 : defaultValue2.value), data: data2 });
}
function QuestionnaireMultiSelectInput(props) {
  var _a;
  let { item, initial, response } = props;
  if (!((_a = item.answerOption) == null ? void 0 : _a.length)) return (0, import_jsx_runtime116.jsx)(NoAnswerDisplay, {});
  let initialValue = getItemInitialValue(initial), { propertyName, data: data2 } = formatSelectData(props.item), currentAnswer = getCurrentMultiSelectAnswer(response);
  return (0, import_jsx_runtime116.jsx)(MultiSelect, { data: data2, placeholder: "Select items", searchable: true, defaultValue: currentAnswer || [typedValueToString(initialValue)], onChange: (selected) => {
    let values2 = getNewMultiSelectValues(selected, propertyName, item);
    props.onChangeAnswer(values2);
  } });
}
function QuestionnaireChoiceSetInput(props) {
  var _a;
  let { name, item, initial, onChangeAnswer, response } = props;
  return !((_a = item.answerOption) == null ? void 0 : _a.length) && !item.answerValueSet ? (0, import_jsx_runtime116.jsx)(NoAnswerDisplay, {}) : item.answerValueSet ? (0, import_jsx_runtime116.jsx)(CodingInput, { path: "", name, binding: item.answerValueSet, onChange: (code) => onChangeAnswer({ valueCoding: code }), creatable: item.type === "open-choice" }) : (0, import_jsx_runtime116.jsx)(QuestionnaireChoiceRadioInput, { name: (response == null ? void 0 : response.id) ?? name, item, initial, response, onChangeAnswer });
}
function QuestionnaireChoiceRadioInput(props) {
  let { name, item, initial, onChangeAnswer, response } = props, valueElementDefinition = st("QuestionnaireItemAnswerOption", "value[x]"), initialValue = getItemInitialValue(initial), options = [], defaultValue2;
  if (item.answerOption) for (let i = 0; i < item.answerOption.length; i++) {
    let option = item.answerOption[i], optionName = `${name}-option-${i}`, optionValue = getItemAnswerOptionValue(option);
    (optionValue == null ? void 0 : optionValue.value) && (initialValue && Fn(optionValue) === Fn(initialValue) && (defaultValue2 = optionName), options.push([optionName, optionValue]));
  }
  let defaultAnswer = getCurrentAnswer(response), answerLinkId = getCurrentRadioAnswer(options, defaultAnswer);
  return (0, import_jsx_runtime116.jsx)(Radio.Group, { name, value: answerLinkId ?? defaultValue2, onChange: (newValue) => {
    let option = options.find((option2) => option2[0] === newValue);
    if (option) {
      let optionValue = option[1], propertyName = "value" + w(optionValue.type);
      onChangeAnswer({ [propertyName]: optionValue.value });
    }
  }, children: options.map(([optionName, optionValue]) => (0, import_jsx_runtime116.jsx)(Radio, { id: optionName, value: optionName, py: 4, label: (0, import_jsx_runtime116.jsx)(ResourcePropertyDisplay, { property: valueElementDefinition, propertyType: optionValue.type, value: optionValue.value }) }, optionName)) });
}
function NoAnswerDisplay() {
  return (0, import_jsx_runtime116.jsx)(TextInput, { disabled: true, placeholder: "No Answers Defined" });
}
function getCurrentAnswer(response, index = 0) {
  let results = response.answer;
  return getItemAnswerOptionValue((results == null ? void 0 : results[index]) ?? {});
}
function getCurrentMultiSelectAnswer(response) {
  let results = response.answer;
  return results ? results.map((a) => getItemAnswerOptionValue(a)).map((type) => Ho(type == null ? void 0 : type.value) || (type == null ? void 0 : type.value)) : [];
}
function getCurrentRadioAnswer(options, defaultAnswer) {
  var _a;
  return (_a = options.find((option) => ee(option[1].value, defaultAnswer == null ? void 0 : defaultAnswer.value))) == null ? void 0 : _a[0];
}
function typedValueToString(typedValue) {
  if (typedValue) return typedValue.type === "CodeableConcept" ? at(typedValue.value) : typedValue.type === "Coding" ? Ho(typedValue.value) : typedValue.type === "Reference" ? formatReferenceString(typedValue) : typedValue.value.toString();
}
function isDropDownChoice(item) {
  var _a;
  return !!((_a = item.extension) == null ? void 0 : _a.some((e) => {
    var _a2, _b, _c;
    return e.url === "http://hl7.org/fhir/StructureDefinition/questionnaire-itemControl" && ((_c = (_b = (_a2 = e.valueCodeableConcept) == null ? void 0 : _a2.coding) == null ? void 0 : _b[0]) == null ? void 0 : _c.code) === "drop-down";
  }));
}
function isMultiSelectChoice(item) {
  var _a;
  return !!((_a = item.extension) == null ? void 0 : _a.some((e) => {
    var _a2, _b, _c;
    return e.url === Zr + "/fhir/StructureDefinition/questionnaire-itemControl" && ((_c = (_b = (_a2 = e.valueCodeableConcept) == null ? void 0 : _a2.coding) == null ? void 0 : _b[0]) == null ? void 0 : _c.code) === "multi-select";
  }));
}
function formatSelectData(item) {
  var _a;
  if (((_a = item.answerOption) == null ? void 0 : _a.length) === 0) return { propertyName: "", data: [] };
  let option = item.answerOption[0], optionValue = getItemAnswerOptionValue(option), propertyName = "value" + w(optionValue.type), data2 = (item.answerOption ?? []).map((a) => ({ value: getValueAndLabel(a, propertyName), label: getValueAndLabel(a, propertyName) }));
  return { propertyName, data: data2 };
}
function getValueAndLabel(option, propertyName) {
  var _a;
  return Ho(option.valueCoding) || ((_a = option[propertyName]) == null ? void 0 : _a.toString());
}
var QuestionnaireBuilder_default = { section: "QuestionnaireBuilder_section", hovering: "QuestionnaireBuilder_hovering", editing: "QuestionnaireBuilder_editing", questionBody: "QuestionnaireBuilder_questionBody", topActions: "QuestionnaireBuilder_topActions", bottomActions: "QuestionnaireBuilder_bottomActions", movementActions: "QuestionnaireBuilder_movementActions", movementIcons: "QuestionnaireBuilder_movementIcons", columnAlignment: "QuestionnaireBuilder_columnAlignment", linkIdInput: "QuestionnaireBuilder_linkIdInput", typeSelect: "QuestionnaireBuilder_typeSelect", preserveBreaks: "QuestionnaireBuilder_preserveBreaks" };
function QuestionnaireBuilder(props) {
  let medplum = b(), defaultValue2 = Ue(props.questionnaire), [schemaLoaded, setSchemaLoaded] = (0, import_react86.useState)(false), [value, setValue] = (0, import_react86.useState)(), [selectedKey, setSelectedKey] = (0, import_react86.useState)(), [hoverKey, setHoverKey] = (0, import_react86.useState)();
  function handleDocumentMouseOver() {
    setHoverKey(void 0);
  }
  function handleDocumentClick() {
    setSelectedKey(void 0);
  }
  (0, import_react86.useEffect)(() => {
    medplum.requestSchema("Questionnaire").then(() => setSchemaLoaded(true)).catch(console.log);
  }, [medplum]), (0, import_react86.useEffect)(() => (setValue(ensureQuestionnaireKeys(defaultValue2 ?? { resourceType: "Questionnaire", status: "active" })), document.addEventListener("mouseover", handleDocumentMouseOver), document.addEventListener("click", handleDocumentClick), () => {
    document.removeEventListener("mouseover", handleDocumentMouseOver), document.removeEventListener("click", handleDocumentClick);
  }), [defaultValue2]);
  let handleChange = (questionnaire, disableSubmit) => {
    setValue(questionnaire), props.autoSave && !disableSubmit && props.onSubmit && props.onSubmit(questionnaire);
  };
  return !schemaLoaded || !value ? null : (0, import_jsx_runtime117.jsx)("div", { children: (0, import_jsx_runtime117.jsxs)(Form, { testid: "questionnaire-form", onSubmit: () => props.onSubmit(value), children: [(0, import_jsx_runtime117.jsx)(ItemBuilder, { item: value, selectedKey, setSelectedKey, hoverKey, setHoverKey, onChange: handleChange }), (0, import_jsx_runtime117.jsx)(Button, { type: "submit", children: "Save" })] }) });
}
function ItemBuilder(props) {
  var _a;
  let resource = props.item, item = props.item, isResource2 = I(props.item), isContainer = isResource2 || item.type === "group", linkId = item.linkId ?? "[untitled]", editing = props.selectedKey === props.item.id, hovering = props.hoverKey === props.item.id, itemRef = (0, import_react86.useRef)();
  itemRef.current = props.item;
  function onClick(e) {
    killEvent(e), props.setSelectedKey(props.item.id);
  }
  function onHover(e) {
    killEvent(e), props.setHoverKey(props.item.id);
  }
  function changeItem(changedItem) {
    var _a2;
    let curr = itemRef.current;
    props.onChange({ ...curr, item: (_a2 = curr.item) == null ? void 0 : _a2.map((i) => i.id === changedItem.id ? changedItem : i) });
  }
  function addItem(addedItem, disableSubmit) {
    props.onChange({ ...props.item, item: [...props.item.item ?? [], addedItem] }, disableSubmit);
  }
  function removeItem(removedItem) {
    var _a2;
    props.onChange({ ...props.item, item: (_a2 = props.item.item) == null ? void 0 : _a2.filter((i) => i !== removedItem) });
  }
  function changeProperty(property, value) {
    props.onChange({ ...itemRef.current, [property]: value });
  }
  function updateItem(updatedItem) {
    props.onChange({ ...props.item, ...updatedItem });
  }
  function toggleRepeatable(item2) {
    var _a2;
    props.onChange({ ...props.item, item: (_a2 = props.item.item) == null ? void 0 : _a2.map((i) => i === item2 ? { ...i, repeats: !i.repeats } : i) });
  }
  function moveItem(itemIndex, delta) {
    let updatedItems = reorderItems(props.item.item, itemIndex, delta);
    props.onChange({ ...props.item, item: updatedItems });
  }
  let className = clsx_default(QuestionnaireBuilder_default.section, { [QuestionnaireBuilder_default.editing]: editing, [QuestionnaireBuilder_default.hovering]: hovering && !editing });
  return (0, import_jsx_runtime117.jsxs)("div", { "data-testid": item.linkId, className, onClick, onMouseOver: onHover, onFocus: onHover, children: [(0, import_jsx_runtime117.jsx)("div", { className: QuestionnaireBuilder_default.questionBody, children: editing ? (0, import_jsx_runtime117.jsxs)(import_jsx_runtime117.Fragment, { children: [isResource2 && (0, import_jsx_runtime117.jsx)(TextInput, { size: "xl", defaultValue: resource.title, onBlur: (e) => changeProperty("title", e.currentTarget.value) }), !isResource2 && (0, import_jsx_runtime117.jsx)(Textarea, { autosize: true, minRows: 2, defaultValue: item.text, onBlur: (e) => changeProperty("text", e.currentTarget.value) }), item.type === "reference" && (0, import_jsx_runtime117.jsx)(ReferenceProfiles, { item, onChange: updateItem }), isChoiceQuestion(item) && (0, import_jsx_runtime117.jsx)(AnswerBuilder, { item, onChange: (item2) => updateItem(item2) })] }) : (0, import_jsx_runtime117.jsxs)(import_jsx_runtime117.Fragment, { children: [resource.title && (0, import_jsx_runtime117.jsx)(Title, { children: resource.title }), item.text && (0, import_jsx_runtime117.jsx)("div", { className: QuestionnaireBuilder_default.preserveBreaks, children: item.text }), !isContainer && (0, import_jsx_runtime117.jsx)(QuestionnaireFormItem, { item, index: 0, onChange: () => {
  }, response: { linkId: item.linkId } })] }) }), (_a = item.item) == null ? void 0 : _a.map((item2, i) => (0, import_jsx_runtime117.jsx)("div", { children: (0, import_jsx_runtime117.jsx)(ItemBuilder, { item: item2, selectedKey: props.selectedKey, setSelectedKey: props.setSelectedKey, hoverKey: props.hoverKey, isFirst: i === 0, isLast: i === (props.item.item ?? []).length - 1, setHoverKey: props.setHoverKey, onChange: changeItem, onRemove: () => removeItem(item2), onRepeatable: toggleRepeatable, onMoveUp: () => moveItem(i, -1), onMoveDown: () => moveItem(i, 1) }) }, item2.id)), !isContainer && (0, import_jsx_runtime117.jsx)("div", { className: QuestionnaireBuilder_default.topActions, children: editing ? (0, import_jsx_runtime117.jsxs)(import_jsx_runtime117.Fragment, { children: [(0, import_jsx_runtime117.jsx)(TextInput, { size: "xs", className: QuestionnaireBuilder_default.linkIdInput, defaultValue: item.linkId, onBlur: (e) => changeProperty("linkId", e.currentTarget.value) }), !isContainer && (0, import_jsx_runtime117.jsx)(NativeSelect, { size: "xs", className: QuestionnaireBuilder_default.typeSelect, defaultValue: item.type, onChange: (e) => changeProperty("type", e.currentTarget.value), data: [{ value: "display", label: "Display" }, { value: "boolean", label: "Boolean" }, { value: "decimal", label: "Decimal" }, { value: "integer", label: "Integer" }, { value: "date", label: "Date" }, { value: "dateTime", label: "Date/Time" }, { value: "time", label: "Time" }, { value: "string", label: "String" }, { value: "text", label: "Text" }, { value: "url", label: "URL" }, { value: "choice", label: "Choice" }, { value: "open-choice", label: "Open Choice" }, { value: "attachment", label: "Attachment" }, { value: "reference", label: "Reference" }, { value: "quantity", label: "Quantity" }] })] }) : (0, import_jsx_runtime117.jsx)("div", { children: linkId }) }), !isResource2 && (0, import_jsx_runtime117.jsx)(Box, { className: QuestionnaireBuilder_default.movementActions, children: (0, import_jsx_runtime117.jsxs)(Box, { className: QuestionnaireBuilder_default.columnAlignment, children: [!props.isFirst && (0, import_jsx_runtime117.jsx)(Anchor, { href: "#", onClick: (e) => {
    e.preventDefault(), props.onMoveUp && props.onMoveUp();
  }, children: (0, import_jsx_runtime117.jsx)(IconArrowUp, { "data-testid": "up-button", size: 15, className: QuestionnaireBuilder_default.movementIcons }) }), !props.isLast && (0, import_jsx_runtime117.jsx)(Anchor, { href: "#", onClick: (e) => {
    e.preventDefault(), props.onMoveDown && props.onMoveDown();
  }, children: (0, import_jsx_runtime117.jsx)(IconArrowDown, { "data-testid": "down-button", size: 15, className: QuestionnaireBuilder_default.movementIcons }) })] }) }), (0, import_jsx_runtime117.jsxs)("div", { className: QuestionnaireBuilder_default.bottomActions, children: [isContainer && (0, import_jsx_runtime117.jsxs)(import_jsx_runtime117.Fragment, { children: [(0, import_jsx_runtime117.jsx)(Anchor, { href: "#", onClick: (e) => {
    e.preventDefault(), addItem({ id: generateId3(), linkId: generateLinkId("q"), type: "string", text: "Question" });
  }, children: "Add item" }), (0, import_jsx_runtime117.jsx)(Anchor, { href: "#", onClick: (e) => {
    e.preventDefault(), addItem({ id: generateId3(), linkId: generateLinkId("g"), type: "group", text: "Group" }, true);
  }, children: "Add group" })] }), isResource2 && (0, import_jsx_runtime117.jsx)(Anchor, { href: "#", onClick: (e) => {
    e.preventDefault(), addItem(createPage(), true);
  }, children: "Add Page" }), editing && !isResource2 && (0, import_jsx_runtime117.jsxs)(import_jsx_runtime117.Fragment, { children: [(0, import_jsx_runtime117.jsx)(Anchor, { href: "#", onClick: (e) => {
    e.preventDefault(), props.onRepeatable && props.onRepeatable(item);
  }, children: item.repeats ? "Remove Repeatable" : "Make Repeatable" }), (0, import_jsx_runtime117.jsx)(Anchor, { href: "#", onClick: (e) => {
    e.preventDefault(), props.onRemove && props.onRemove();
  }, children: "Remove" })] })] })] });
}
function AnswerBuilder(props) {
  let property = st("QuestionnaireItemAnswerOption", "value[x]"), options = props.item.answerOption ?? [];
  return (0, import_jsx_runtime117.jsxs)("div", { children: [props.item.answerValueSet !== void 0 ? (0, import_jsx_runtime117.jsx)(TextInput, { placeholder: "Enter Value Set", defaultValue: props.item.answerValueSet, onChange: (e) => props.onChange({ ...props.item, answerValueSet: e.target.value }) }) : (0, import_jsx_runtime117.jsx)(AnswerOptionsInput, { options, property, item: props.item, onChange: props.onChange }), (0, import_jsx_runtime117.jsxs)(Box, { display: "flex", children: [(0, import_jsx_runtime117.jsx)(Anchor, { href: "#", onClick: (e) => {
    killEvent(e), props.onChange({ ...props.item, answerValueSet: void 0, answerOption: [...options, { id: generateId3() }] });
  }, children: "Add choice" }), (0, import_jsx_runtime117.jsx)(Space, { w: "lg" }), (0, import_jsx_runtime117.jsx)(Anchor, { href: "#", onClick: (e) => {
    killEvent(e), props.onChange({ ...props.item, answerOption: [], answerValueSet: "" });
  }, children: "Add value set" })] })] });
}
function AnswerOptionsInput(props) {
  return (0, import_jsx_runtime117.jsx)("div", { children: props.options.map((option) => {
    let [propertyValue, propertyType] = getValueAndType({ type: "QuestionnaireItemAnswerOption", value: option }, "value");
    return (0, import_jsx_runtime117.jsxs)("div", { style: { display: "flex", flexDirection: "row", justifyContent: "space-between", alignItems: "center", width: "80%" }, children: [(0, import_jsx_runtime117.jsx)("div", { children: (0, import_jsx_runtime117.jsx)(ResourcePropertyInput, { name: "value[x]", path: "Questionnaire.answerOption.value[x]", property: props.property, defaultPropertyType: propertyType, defaultValue: propertyValue, onChange: (newValue, propName) => {
      let newOptions = [...props.options], index = newOptions.findIndex((o) => o.id === option.id);
      newOptions[index] = { id: option.id, [propName]: newValue }, props.onChange({ ...props.item, answerOption: newOptions });
    }, outcome: void 0 }, option.id) }), (0, import_jsx_runtime117.jsx)("div", { children: (0, import_jsx_runtime117.jsx)(Anchor, { href: "#", onClick: (e) => {
      killEvent(e), props.onChange({ ...props.item, answerOption: props.options.filter((o) => o.id !== option.id) });
    }, children: "Remove" }) })] }, option.id);
  }) });
}
function ReferenceProfiles(props) {
  let targetTypes = getQuestionnaireItemReferenceTargetTypes(props.item) ?? [];
  return (0, import_jsx_runtime117.jsxs)(import_jsx_runtime117.Fragment, { children: [targetTypes.map((targetType, index) => (0, import_jsx_runtime117.jsxs)(Group, { children: [(0, import_jsx_runtime117.jsx)(ResourceTypeInput, { name: "resourceType", placeholder: "Resource Type", defaultValue: targetType, onChange: (newValue) => {
    props.onChange(setQuestionnaireItemReferenceTargetTypes(props.item, targetTypes.map((t) => t === targetType ? newValue : t)));
  } }), (0, import_jsx_runtime117.jsx)(Anchor, { href: "#", onClick: (e) => {
    killEvent(e), props.onChange(setQuestionnaireItemReferenceTargetTypes(props.item, targetTypes.filter((t) => t !== targetType)));
  }, children: "Remove" })] }, `${targetType}-${index}`)), (0, import_jsx_runtime117.jsx)(Anchor, { href: "#", onClick: (e) => {
    killEvent(e), props.onChange(setQuestionnaireItemReferenceTargetTypes(props.item, [...targetTypes, ""]));
  }, children: "Add Resource Type" })] });
}
var nextLinkId = 1;
var nextId3 = 1;
function generateLinkId(prefix) {
  return prefix + nextLinkId++;
}
function generateId3() {
  return "id-" + nextId3++;
}
function ensureQuestionnaireKeys(questionnaire) {
  return { ...questionnaire, id: questionnaire.id || generateId3(), item: ensureQuestionnaireItemKeys(questionnaire.item) };
}
function ensureQuestionnaireItemKeys(items) {
  if (items) return items.forEach((item) => {
    var _a, _b;
    ((_a = item.id) == null ? void 0 : _a.match(/^id-\d+$/)) && (nextId3 = Math.max(nextId3, parseInt(item.id.substring(3), 10) + 1)), ((_b = item.linkId) == null ? void 0 : _b.match(/^q\d+$/)) && (nextLinkId = Math.max(nextLinkId, parseInt(item.linkId.substring(1), 10) + 1));
  }), items.map((item) => ({ ...item, id: item.id || generateId3(), item: ensureQuestionnaireItemKeys(item.item), answerOption: ensureQuestionnaireOptionKeys(item.answerOption) }));
}
function ensureQuestionnaireOptionKeys(options) {
  if (options) return options.map((option) => ({ ...option, id: option.id || generateId3() }));
}
function createPage() {
  return { id: generateId3(), linkId: generateLinkId("s"), type: "group", text: "New Page", extension: [{ url: "http://hl7.org/fhir/StructureDefinition/questionnaire-itemControl", valueCodeableConcept: { coding: [{ system: "http://hl7.org/fhir/questionnaire-item-control", code: "page" }] } }] };
}
function reorderItems(items, itemIndex, delta) {
  let currentItems = items ?? [], newIndex = itemIndex + delta;
  if (newIndex < 0 || newIndex >= currentItems.length) return currentItems;
  let updatedItems = [...currentItems];
  return [updatedItems[itemIndex], updatedItems[newIndex]] = [updatedItems[newIndex], updatedItems[itemIndex]], updatedItems;
}
function QuestionnaireRepeatableItem(props) {
  let { item, response, onChange } = props, [number, setNumber] = (0, import_react90.useState)(getNumberOfRepeats(item, response ?? { linkId: item.linkId }));
  if (!props.checkForQuestionEnabled(item) || !response) return null;
  if (item.type === "display") return (0, import_jsx_runtime118.jsx)("p", { children: item.text }, item.linkId);
  let showAddButton = (item == null ? void 0 : item.repeats) && item.type !== "choice" && item.type !== "open-choice";
  return item.type === "boolean" ? (0, import_jsx_runtime118.jsx)(QuestionnaireFormItem, { item, response, onChange: (r2) => onChange([r2]), index: 0 }, item.linkId) : (0, import_jsx_runtime118.jsxs)(FormSection, { htmlFor: props.item.linkId, title: props.item.text, withAsterisk: props.item.required, children: [[...Array(number)].map((_2, index) => (0, import_jsx_runtime118.jsx)(QuestionnaireFormItem, { item, response, onChange: (r2) => onChange([r2]), index }, `${item.linkId}-${index}`)), showAddButton && (0, import_jsx_runtime118.jsx)(Anchor, { onClick: () => setNumber((n) => n + 1), children: "Add Item" })] }, props.item.linkId);
}
function getNumberOfRepeats(item, response) {
  if (item.type === "choice" || item.type === "open-choice") return 1;
  let answers = response.answer;
  return (answers == null ? void 0 : answers.length) ? answers.length : 1;
}
function QuestionnaireRepeatedGroup(props) {
  let [responses, setResponses] = (0, import_react91.useState)(props.response);
  if (responses.length === 0) return null;
  function handleRepeatableGroup(newResponseItems, index) {
    let newResponses = responses.map((responses2, idx) => idx === index ? newResponseItems[0] : responses2);
    setResponses(newResponses), props.onChange(newResponses);
  }
  function insertNewGroup() {
    let newResponse = buildInitialResponseItem(props.item);
    setResponses([...responses, newResponse]);
  }
  return (0, import_jsx_runtime119.jsxs)(import_jsx_runtime119.Fragment, { children: [responses.map((response, idx) => (0, import_jsx_runtime119.jsx)(QuestionnaireGroup, { item: props.item, response, checkForQuestionEnabled: props.checkForQuestionEnabled, onChange: (r2) => handleRepeatableGroup(r2, idx) }, response.id)), props.item.repeats && (0, import_jsx_runtime119.jsx)(Anchor, { onClick: insertNewGroup, children: `Add Group: ${props.item.text}` })] });
}
function QuestionnaireGroup(props) {
  var _a;
  let { response, checkForQuestionEnabled, onChange } = props;
  function onSetGroup(newResponseItem) {
    var _a2, _b;
    let mergedResponse = (_b = (_a2 = response.item) == null ? void 0 : _a2.map((current) => newResponseItem.find((newResponse2) => newResponse2.id === current.id) ?? current)) == null ? void 0 : _b.concat(newResponseItem.slice(1)), groupResponse = { ...response, item: mergedResponse };
    onChange([groupResponse]);
  }
  return props.checkForQuestionEnabled(props.item) ? (0, import_jsx_runtime119.jsxs)("div", { children: [props.item.text && (0, import_jsx_runtime119.jsx)(Title, { order: 3, mb: "md", children: props.item.text }), (0, import_jsx_runtime119.jsx)(Stack, { children: (_a = props.item.item) == null ? void 0 : _a.map((item) => {
    var _a2, _b, _c;
    return item.type === "group" ? item.repeats ? (0, import_jsx_runtime119.jsx)(QuestionnaireRepeatedGroup, { item, response: ((_a2 = response.item) == null ? void 0 : _a2.filter((i) => i.linkId === item.linkId)) ?? [], checkForQuestionEnabled, onChange: onSetGroup }, item.linkId) : (0, import_jsx_runtime119.jsx)(QuestionnaireGroup, { item, checkForQuestionEnabled, response: ((_b = response.item) == null ? void 0 : _b.find((i) => i.linkId === item.linkId)) ?? { linkId: item.linkId }, onChange: onSetGroup }, item.linkId) : (0, import_jsx_runtime119.jsx)(QuestionnaireRepeatableItem, { item, response: (_c = response.item) == null ? void 0 : _c.find((i) => i.linkId === item.linkId), onChange: onSetGroup, checkForQuestionEnabled }, item.linkId);
  }) })] }, props.item.linkId) : null;
}
function QuestionnairePageSequence(props) {
  let { items, response, activePage, onChange, nextStep, prevStep, numberOfPages, renderPages, submitButtonText, excludeButtons, checkForQuestionEnabled } = props, form = items.map((item) => {
    var _a;
    let itemResponse = ((_a = response == null ? void 0 : response.item) == null ? void 0 : _a.filter((i) => i.linkId === item.linkId)) ?? [], repeatedItem = item.type === "group" ? (0, import_jsx_runtime120.jsx)(QuestionnaireRepeatedGroup, { item, response: itemResponse, onChange, checkForQuestionEnabled }, item.linkId) : (0, import_jsx_runtime120.jsx)(QuestionnaireRepeatableItem, { item, response: itemResponse == null ? void 0 : itemResponse[0], onChange, checkForQuestionEnabled }, item.linkId);
    return renderPages ? (0, import_jsx_runtime120.jsx)(Stepper.Step, { label: item.text, children: repeatedItem }, item.linkId) : repeatedItem;
  });
  return (0, import_jsx_runtime120.jsxs)(import_jsx_runtime120.Fragment, { children: [renderPages && (0, import_jsx_runtime120.jsx)(Stepper, { active: activePage ?? 0, allowNextStepsSelect: false, p: 6, children: form }), !renderPages && (0, import_jsx_runtime120.jsx)(Stack, { children: form }), !excludeButtons && (0, import_jsx_runtime120.jsx)(ButtonGroup, { activePage: activePage ?? 0, numberOfPages, nextStep: renderPages ? nextStep : void 0, prevStep: renderPages ? prevStep : void 0, renderPages, submitButtonText })] });
}
function ButtonGroup(props) {
  let showBackButton = props.renderPages && props.activePage > 0, showNextButton = props.renderPages && props.activePage < props.numberOfPages - 1, showSubmitButton = !props.renderPages || props.activePage === props.numberOfPages - 1;
  return (0, import_jsx_runtime120.jsxs)(Group, { justify: "flex-end", mt: "xl", gap: "xs", children: [showBackButton && (0, import_jsx_runtime120.jsx)(Button, { onClick: props.prevStep, children: "Back" }), showNextButton && (0, import_jsx_runtime120.jsx)(Button, { onClick: (e) => {
    let form = e.currentTarget.closest("form");
    props.nextStep && form.reportValidity() && props.nextStep();
  }, children: "Next" }), showSubmitButton && (0, import_jsx_runtime120.jsx)(Button, { type: "submit", children: props.submitButtonText ?? "Submit" })] });
}
function QuestionnaireForm(props) {
  let medplum = b(), { subject, source: sourceFromProps } = props, questionnaire = Ue(props.questionnaire), prevQuestionnaire = Me(questionnaire), [response, setResponse] = (0, import_react89.useState)(), [activePage, setActivePage] = (0, import_react89.useState)(0), onChangeRef = (0, import_react89.useRef)(props.onChange);
  onChangeRef.current = props.onChange;
  let onSubmitRef = (0, import_react89.useRef)(props.onSubmit);
  onSubmitRef.current = props.onSubmit, (0, import_react89.useEffect)(() => {
    questionnaire && getQuestionnaireIdentity(prevQuestionnaire) === getQuestionnaireIdentity(questionnaire) || setResponse(questionnaire ? buildInitialResponse(questionnaire) : void 0);
  }, [questionnaire, prevQuestionnaire]), (0, import_react89.useEffect)(() => {
    if (response && onChangeRef.current) try {
      onChangeRef.current(response);
    } catch (e) {
      console.error("Error invoking QuestionnaireForm.onChange callback", e);
    }
  }, [response]);
  let setItems = (0, import_react89.useCallback)((newResponseItems) => {
    setResponse((prevResponse) => {
      let currentItems = (prevResponse == null ? void 0 : prevResponse.item) ?? [];
      return { resourceType: "QuestionnaireResponse", status: "in-progress", item: mergeItems(currentItems, Array.isArray(newResponseItems) ? newResponseItems : [newResponseItems]) };
    });
  }, []), handleSubmit = (0, import_react89.useCallback)(() => {
    let onSubmit = onSubmitRef.current;
    if (onSubmit && response) {
      let source = sourceFromProps;
      if (!source) {
        let profile = medplum.getProfile();
        profile && (source = te(profile));
      }
      onSubmit({ ...response, questionnaire: le(questionnaire), subject, source, authored: (/* @__PURE__ */ new Date()).toISOString(), status: "completed" });
    }
  }, [medplum, questionnaire, response, subject, sourceFromProps]);
  function checkForQuestionEnabled(item) {
    return isQuestionEnabled(item, response);
  }
  if (!questionnaire || !response) return null;
  let numberOfPages = getNumberOfPages(questionnaire), nextStep = () => setActivePage((current) => current + 1), prevStep = () => setActivePage((current) => current - 1);
  return (0, import_jsx_runtime121.jsx)(QuestionnaireFormContext.Provider, { value: { subject: props.subject, encounter: props.encounter }, children: (0, import_jsx_runtime121.jsxs)(Form, { testid: "questionnaire-form", onSubmit: handleSubmit, children: [questionnaire.title && (0, import_jsx_runtime121.jsx)(Title, { children: questionnaire.title }), (0, import_jsx_runtime121.jsx)(QuestionnairePageSequence, { items: questionnaire.item ?? [], response, onChange: setItems, renderPages: !props.disablePagination && numberOfPages > 1, activePage, numberOfPages, excludeButtons: props.excludeButtons, submitButtonText: props.submitButtonText, checkForQuestionEnabled, nextStep, prevStep })] }) });
}
function mergeIndividualItems(prevItem, newItem) {
  let mergedNestedItems = mergeItems(prevItem.item ?? [], newItem.item ?? []);
  return { ...newItem, item: mergedNestedItems.length > 0 ? mergedNestedItems : void 0, answer: newItem.answer && newItem.answer.length > 0 ? newItem.answer : prevItem.answer };
}
function mergeItems(prevItems, newItems) {
  let result = [], usedIds = /* @__PURE__ */ new Set();
  for (let prevItem of prevItems) {
    let itemId = prevItem.id, newItem = newItems.find((item) => item.id === itemId);
    newItem ? (result.push(mergeIndividualItems(prevItem, newItem)), usedIds.add(newItem.id)) : result.push(prevItem);
  }
  for (let newItem of newItems) usedIds.has(newItem.id) || result.push(newItem);
  return result;
}
function getQuestionnaireIdentity(questionnaire) {
  return (questionnaire == null ? void 0 : questionnaire.id) || questionnaire;
}
var ReferenceRangeEditor_default = { section: "ReferenceRangeEditor_section" };
var intervalFilters = ["gender", "age", "gestationalAge", "context", "appliesTo", "category"];
var defaultProps3 = { definition: { resourceType: "ObservationDefinition", code: { text: "" } }, onSubmit: () => {
} };
function ReferenceRangeEditor(props) {
  props = Object.assign(defaultProps3, props);
  let defaultDefinition = props.definition, [intervalGroups, setIntervalGroups] = (0, import_react92.useState)([]), [groupId, setGroupId] = (0, import_react92.useState)(1), [intervalId, setIntervalId] = (0, import_react92.useState)(1);
  return (0, import_react92.useEffect)(() => {
    let definition = ensureQualifiedIntervalKeys(defaultDefinition, setIntervalId);
    setIntervalGroups(groupQualifiedIntervals(definition.qualifiedInterval || [], setGroupId));
  }, [defaultDefinition]), (0, import_jsx_runtime122.jsxs)(Form, { testid: "reference-range-editor", onSubmit: submitDefinition, children: [(0, import_jsx_runtime122.jsx)(Stack, { children: intervalGroups.map((intervalGroup) => {
    var _a;
    return (0, import_jsx_runtime122.jsx)(ReferenceRangeGroupEditor, { unit: getUnitString((_a = defaultDefinition.quantitativeDetails) == null ? void 0 : _a.unit), onChange: changeInterval, onAdd: addInterval, onRemove: removeInterval, onRemoveGroup: removeGroup, intervalGroup }, `group-${intervalGroup.id}`);
  }) }), (0, import_jsx_runtime122.jsx)(ActionIcon, { title: "Add Group", variant: "subtle", size: "sm", onClick: (e) => {
    killEvent(e), addGroup({ id: `group-id-${groupId}`, filters: {}, intervals: [] }), setGroupId((id) => id + 1);
  }, children: (0, import_jsx_runtime122.jsx)(IconCirclePlus, {}) }), (0, import_jsx_runtime122.jsx)(Group, { justify: "flex-end", children: (0, import_jsx_runtime122.jsx)(Button, { type: "submit", children: "Save" }) })] });
  function submitDefinition() {
    let qualifiedInterval = intervalGroups.flatMap((group) => group.intervals).filter((interval) => !isEmptyInterval(interval));
    props.onSubmit({ ...defaultDefinition, qualifiedInterval });
  }
  function addGroup(addedGroup) {
    setIntervalGroups((currentGroups) => [...currentGroups, addedGroup]);
  }
  function removeGroup(removedGroup) {
    setIntervalGroups((currentGroups) => currentGroups.filter((group) => group.id !== removedGroup.id));
  }
  function changeInterval(groupId2, changedInterval) {
    setIntervalGroups((groups) => {
      groups = [...groups];
      let currentGroup = groups.find((g2) => g2.id === groupId2), index = currentGroup == null ? void 0 : currentGroup.intervals.findIndex((interval) => interval.id === changedInterval.id);
      return index !== void 0 && (currentGroup == null ? void 0 : currentGroup.intervals[index]) && (currentGroup.intervals[index] = changedInterval), groups;
    });
  }
  function addInterval(groupId2, addedInterval) {
    addedInterval.id === void 0 && (addedInterval.id = `id-${intervalId}`, setIntervalId((id) => id + 1)), setIntervalGroups((groups) => {
      groups = [...groups];
      let currentGroupIndex = groups.findIndex((g2) => g2.id === groupId2);
      if (currentGroupIndex !== -1) {
        let currentGroup = { ...groups[currentGroupIndex] };
        addedInterval = { ...addedInterval, ...currentGroup.filters }, currentGroup.intervals = [...currentGroup.intervals, addedInterval], groups[currentGroupIndex] = currentGroup;
      }
      return groups;
    });
  }
  function removeInterval(groupId2, removedInterval) {
    setIntervalGroups((groups) => {
      groups = [...groups];
      let currentGroup = groups.find((g2) => g2.id === groupId2);
      return currentGroup && (currentGroup.intervals = currentGroup.intervals.filter((interval) => interval.id !== removedInterval.id)), groups;
    });
  }
}
function ReferenceRangeGroupEditor(props) {
  let { intervalGroup, unit } = props;
  return (0, import_jsx_runtime122.jsx)(Container2, { "data-testid": intervalGroup.id, className: ReferenceRangeEditor_default.section, children: (0, import_jsx_runtime122.jsxs)(Stack, { gap: "lg", children: [(0, import_jsx_runtime122.jsx)(Group, { justify: "flex-end", children: (0, import_jsx_runtime122.jsx)(ActionIcon, { title: "Remove Group", variant: "subtle", "data-testid": `remove-group-button-${intervalGroup.id}`, size: "sm", onClick: (e) => {
    killEvent(e), props.onRemoveGroup(intervalGroup);
  }, children: (0, import_jsx_runtime122.jsx)(IconCircleMinus, {}) }, `remove-group-button-${intervalGroup.id}`) }), (0, import_jsx_runtime122.jsx)(ReferenceRangeGroupFilters, { intervalGroup, onChange: props.onChange }), (0, import_jsx_runtime122.jsx)(Divider, {}), intervalGroup.intervals.map((interval) => (0, import_jsx_runtime122.jsxs)(Stack, { gap: "xs", children: [(0, import_jsx_runtime122.jsxs)(Group, { children: [(0, import_jsx_runtime122.jsx)(TextInput, { "data-testid": `condition-${interval.id}`, defaultValue: interval.condition, label: "Condition: ", size: "sm", onChange: (e) => {
    killEvent(e), props.onChange(intervalGroup.id, { ...interval, condition: e.currentTarget.value.trim() });
  } }, `condition-${interval.id}`), (0, import_jsx_runtime122.jsx)(ActionIcon, { title: "Remove Interval", variant: "subtle", size: "sm", "data-testid": `remove-interval-${interval.id}`, onClick: (e) => {
    killEvent(e), props.onRemove(intervalGroup.id, interval);
  }, children: (0, import_jsx_runtime122.jsx)(IconCircleMinus, {}) }, `remove-interval-${interval.id}`)] }), (0, import_jsx_runtime122.jsx)(RangeInput, { path: "", onChange: (range) => {
    props.onChange(intervalGroup.id, { ...interval, range });
  }, name: `range-${interval.id}`, defaultValue: interval.range }, `range-${interval.id}`)] }, `interval-${interval.id}`)), (0, import_jsx_runtime122.jsx)(ActionIcon, { title: "Add Interval", variant: "subtle", size: "sm", onClick: (e) => {
    killEvent(e), props.onAdd(intervalGroup.id, { range: { low: { unit }, high: { unit } } });
  }, children: (0, import_jsx_runtime122.jsx)(IconCirclePlus, {}) })] }) });
}
function ReferenceRangeGroupFilters(props) {
  var _a, _b;
  let { intervalGroup, onChange } = props;
  intervalGroup.filters.age || (intervalGroup.filters.age = {});
  for (let key of ["low", "high"]) ((_a = intervalGroup.filters.age[key]) == null ? void 0 : _a.unit) || (intervalGroup.filters.age[key] = { ...intervalGroup.filters.age[key], unit: "years", system: "http://unitsofmeasure.org" });
  return (0, import_jsx_runtime122.jsxs)(Stack, { style: { maxWidth: "50%" }, children: [(0, import_jsx_runtime122.jsx)(Group, { children: (0, import_jsx_runtime122.jsx)(NativeSelect, { data: ["", "male", "female"], label: "Gender:", defaultValue: intervalGroup.filters.gender || "", onChange: (e) => {
    for (let interval of intervalGroup.intervals) {
      let newGender = e.currentTarget.value;
      newGender === "" && (newGender = void 0), onChange(intervalGroup.id, { ...interval, gender: newGender });
    }
  } }) }), (0, import_jsx_runtime122.jsxs)(Group, { gap: "xs", children: [(0, import_jsx_runtime122.jsx)(Text, { component: "label", htmlFor: `div-age-${intervalGroup.id}`, children: "Age:" }), (0, import_jsx_runtime122.jsx)("div", { id: `div-age-${intervalGroup.id}`, children: (0, import_jsx_runtime122.jsx)(RangeInput, { path: "", name: `age-${intervalGroup.id}`, defaultValue: intervalGroup.filters.age, onChange: (ageRange) => {
    for (let interval of intervalGroup.intervals) onChange(intervalGroup.id, { ...interval, age: ageRange });
  } }, `age-${intervalGroup.id}`) })] }), (0, import_jsx_runtime122.jsx)(NativeSelect, { data: ["", "pre-puberty", "follicular", "midcycle", "luteal", "postmenopausal"], label: "Endocrine:", defaultValue: ((_b = intervalGroup.filters.context) == null ? void 0 : _b.text) || "", onChange: (e) => {
    for (let interval of intervalGroup.intervals) {
      let newEndocrine = e.currentTarget.value;
      newEndocrine === "" ? (newEndocrine = void 0, onChange(intervalGroup.id, { ...interval, context: void 0 })) : onChange(intervalGroup.id, { ...interval, context: { text: newEndocrine, coding: [{ code: newEndocrine, system: "http://terminology.hl7.org/CodeSystem/referencerange-meaning" }] } });
    }
  } }), (0, import_jsx_runtime122.jsx)(NativeSelect, { data: ["", "reference", "critical", "absolute"], label: "Category: ", defaultValue: intervalGroup.filters.category, onChange: (e) => {
    for (let interval of intervalGroup.intervals) {
      let newCategory = e.currentTarget.value;
      newCategory === "" ? onChange(intervalGroup.id, { ...interval, category: void 0 }) : onChange(intervalGroup.id, { ...interval, category: newCategory });
    }
  } })] });
}
function ensureQualifiedIntervalKeys(definition, setIntervalId) {
  let intervals = definition.qualifiedInterval || [], nextId4 = Math.max(...intervals.map((interval) => {
    var _a;
    let existingNum = parseInt(((_a = interval.id) == null ? void 0 : _a.substring(3)) || "", 10);
    return isNaN(existingNum) ? Number.NEGATIVE_INFINITY : existingNum;
  })) + 1;
  return Number.isFinite(nextId4) || (nextId4 = 1), definition = { ...definition, qualifiedInterval: intervals.map((interval) => ({ ...interval, id: interval.id || `id-${nextId4++}` })) }, setIntervalId(nextId4), definition;
}
function groupQualifiedIntervals(intervals, setGroupId) {
  let groupId = 1, groups = {};
  for (let interval of intervals) {
    let groupKey = generateGroupKey(interval);
    groupKey in groups || (groups[groupKey] = { id: `group-id-${groupId++}`, filters: Object.fromEntries(intervalFilters.map((f) => [f, interval[f]])), intervals: [] }), groups[groupKey].intervals.push(interval);
  }
  return setGroupId(groupId), Object.values(groups);
}
function generateGroupKey(interval) {
  var _a, _b;
  return [`gender=${interval.gender}`, `age=${yl(interval.age)}`, `gestationalAge=${yl(interval.gestationalAge)}`, `context=${(_a = interval.context) == null ? void 0 : _a.text}`, `appliesTo=${(_b = interval.appliesTo) == null ? void 0 : _b.map((c) => c.text).join("+")}`, `category=${interval.category}`].join(":");
}
function getUnitString(unit) {
  return unit && (Sr(unit, "http://unitsofmeasure.org") || unit.text);
}
function isEmptyInterval(interval) {
  var _a, _b, _c, _d;
  return ((_b = (_a = interval.range) == null ? void 0 : _a.low) == null ? void 0 : _b.value) === void 0 && ((_d = (_c = interval.range) == null ? void 0 : _c.high) == null ? void 0 : _d.value) === void 0;
}
function RequestGroupDisplay(props) {
  var _a;
  let medplum = b(), requestGroup = Ue(props.value), [startedLoading, setStartedLoading] = (0, import_react93.useState)(false), [responseBundle, setResponseBundle] = (0, import_react93.useState)();
  if ((0, import_react93.useEffect)(() => {
    requestGroup && !startedLoading && (medplum.executeBatch(buildBatchRequest(requestGroup)).then(setResponseBundle).catch(console.log), setStartedLoading(true));
  }, [medplum, requestGroup, startedLoading]), !requestGroup || !responseBundle) return null;
  return (0, import_jsx_runtime123.jsx)(Grid, { children: (_a = requestGroup.action) == null ? void 0 : _a.map((action, index) => {
    var _a2, _b, _c, _d, _e, _f;
    let task = action.resource && findBundleEntry(action.resource), taskInput = (_b = (_a2 = task == null ? void 0 : task.input) == null ? void 0 : _a2[0]) == null ? void 0 : _b.valueReference, taskOutput = (_d = (_c = task == null ? void 0 : task.output) == null ? void 0 : _c[0]) == null ? void 0 : _d.valueReference;
    return (0, import_jsx_runtime123.jsxs)(import_react93.Fragment, { children: [(0, import_jsx_runtime123.jsx)(Grid.Col, { span: 1, p: "md", children: (task == null ? void 0 : task.status) === "completed" ? (0, import_jsx_runtime123.jsx)(IconCheckbox, {}) : (0, import_jsx_runtime123.jsx)(IconSquare, { color: "gray" }) }), (0, import_jsx_runtime123.jsxs)(Grid.Col, { span: 9, p: "xs", children: [(0, import_jsx_runtime123.jsx)(Text, { fw: 500, children: action.title }), action.description && (0, import_jsx_runtime123.jsx)("div", { children: action.description }), (0, import_jsx_runtime123.jsxs)("div", { children: ["Last edited by ", (0, import_jsx_runtime123.jsx)(ResourceName, { value: (_e = task == null ? void 0 : task.meta) == null ? void 0 : _e.author }), " on ", Pr((_f = task == null ? void 0 : task.meta) == null ? void 0 : _f.lastUpdated)] }), (0, import_jsx_runtime123.jsxs)("div", { children: ["Status: ", (0, import_jsx_runtime123.jsx)(StatusBadge, { status: (task == null ? void 0 : task.status) || "unknown" })] })] }), (0, import_jsx_runtime123.jsxs)(Grid.Col, { span: 2, p: "md", children: [taskInput && !taskOutput && (0, import_jsx_runtime123.jsx)(Button, { onClick: () => props.onStart(task, taskInput), children: "Start" }), taskInput && taskOutput && (0, import_jsx_runtime123.jsx)(Button, { onClick: () => props.onEdit(task, taskInput, taskOutput), children: "Edit" })] })] }, `action-${index}`);
  }) });
  function buildBatchRequest(request) {
    var _a2;
    let batchEntries = [];
    if (request.action) for (let action of request.action) ((_a2 = action.resource) == null ? void 0 : _a2.reference) && batchEntries.push({ request: { method: "GET", url: action.resource.reference } });
    return { resourceType: "Bundle", type: "batch", entry: batchEntries };
  }
  function findBundleEntry(reference) {
    for (let entry of (responseBundle == null ? void 0 : responseBundle.entry) ?? []) if (entry.resource && reference.reference === le(entry.resource)) return entry.resource;
  }
}
function diff(original, revised) {
  let path = buildPath(original, revised);
  return buildRevisions(path, original, revised);
}
function buildPath(orig, rev) {
  let N3 = orig.length, M2 = rev.length, MAX = N3 + M2 + 1, size = 1 + 2 * MAX, middle = size / 2 | 0, diagonal = new Array(size);
  diagonal[middle + 1] = { i: 0, j: -1, prev: void 0, snake: true };
  for (let d2 = 0; d2 < MAX; d2++) {
    for (let k2 = -d2; k2 <= d2; k2 += 2) {
      let kmiddle = middle + k2, kplus = kmiddle + 1, kminus = kmiddle - 1, kplusNode = diagonal[kplus], kminusNode = diagonal[kminus], prev, i = 0;
      k2 === -d2 || k2 !== d2 && kminusNode.i < kplusNode.i ? (i = kplusNode.i, prev = kplusNode) : (i = kminusNode.i + 1, prev = kminusNode), diagonal[kminus] = void 0;
      let j = i - k2, node = { i, j, prev: previousSnake(prev), snake: false };
      for (; i < N3 && j < M2 && orig[i] === rev[j]; ) i++, j++;
      if (i > node.i && (node = { i, j, prev: node, snake: true }), diagonal[kmiddle] = node, i >= N3 && j >= M2) return diagonal[kmiddle];
    }
    diagonal[middle + d2 - 1] = void 0;
  }
}
function buildRevisions(startNode, orig, rev) {
  let deltas = [], path = startNode;
  for (path.snake && (path = path.prev); (path == null ? void 0 : path.prev) && path.prev.j >= 0; ) {
    let i = path.i, j = path.j;
    path = path.prev;
    let ianchor = path.i, janchor = path.j, original = { position: ianchor, lines: orig.slice(ianchor, i) }, revised = { position: janchor, lines: rev.slice(janchor, j) }, type;
    original.lines.length === 0 && revised.lines.length > 0 ? type = "insert" : original.lines.length > 0 && revised.lines.length === 0 ? type = "delete" : type = "change", deltas.push({ original, revised, type }), path.snake && (path = path.prev);
  }
  return deltas;
}
function previousSnake(node) {
  return node && !node.snake && node.prev ? node.prev : node;
}
function blame(history) {
  let versions = (history.entry ?? []).filter((entry) => !!entry.resource).map((entry) => {
    var _a;
    return { meta: (_a = entry.resource) == null ? void 0 : _a.meta, lines: Fn(entry.resource, true).match(/[^\r\n]+/g) };
  }).sort((a, b2) => a.meta.lastUpdated.localeCompare(b2.meta.lastUpdated));
  if (!versions.length) return [];
  let table = versions[0].lines.map((line) => ({ id: versions[0].meta.versionId, meta: versions[0].meta, value: line, span: 1 }));
  return compareVersions(table, versions), combineSpans(table), table;
}
function compareVersions(table, versions) {
  for (let i = 1; i < versions.length; i++) {
    let revisions = diff(versions[i - 1].lines, versions[i].lines);
    for (let revision of revisions) {
      let position = revision.original.position, oldLines = revision.original.lines, newLines = revision.revised.lines;
      if ((revision.type === "delete" || revision.type === "change") && table.splice(position, oldLines.length), revision.type === "insert" || revision.type === "change") for (let k2 = 0; k2 < revision.revised.lines.length; k2++) table.splice(position + k2, 0, { id: versions[i].meta.versionId, meta: versions[i].meta, value: newLines[k2], span: 1 });
    }
  }
}
function combineSpans(table) {
  let start = 0;
  for (; start < table.length; ) {
    let curr = start;
    for (; curr < table.length && table[curr].id === table[start].id; ) table[curr].span = -1, curr++;
    table[start].span = curr - start, start = curr;
  }
}
var ResourceBlame_default = { container: "ResourceBlame_container", root: "ResourceBlame_root", startRow: "ResourceBlame_startRow", normalRow: "ResourceBlame_normalRow", author: "ResourceBlame_author", dateTime: "ResourceBlame_dateTime", lineNumber: "ResourceBlame_lineNumber", line: "ResourceBlame_line", pre: "ResourceBlame_pre" };
function getVersionUrl(resource, versionId) {
  return `/${resource.resourceType}/${resource.id}/_history/${versionId}`;
}
function getTimeString(lastUpdated) {
  let seconds = Math.floor((Date.now() - Date.parse(lastUpdated)) / 1e3), years = Math.floor(seconds / 31536e3);
  if (years > 0) return pluralizeTime(years, "year");
  let months = Math.floor(seconds / 2592e3);
  if (months > 0) return pluralizeTime(months, "month");
  let days = Math.floor(seconds / 86400);
  if (days > 0) return pluralizeTime(days, "day");
  let hours = Math.floor(seconds / 3600);
  if (hours > 0) return pluralizeTime(hours, "hour");
  let minutes = Math.floor(seconds / 60);
  return minutes > 0 ? pluralizeTime(minutes, "minute") : pluralizeTime(seconds, "second");
}
function pluralizeTime(count, noun) {
  return `${count} ${count === 1 ? noun : noun + "s"} ago`;
}
function ResourceBlame(props) {
  var _a, _b;
  let medplum = b(), [value, setValue] = (0, import_react94.useState)(props.history);
  if ((0, import_react94.useEffect)(() => {
    !props.history && props.resourceType && props.id && medplum.readHistory(props.resourceType, props.id).then(setValue).catch(console.log);
  }, [medplum, props.history, props.resourceType, props.id]), !value) return (0, import_jsx_runtime124.jsx)("div", { children: "Loading..." });
  let resource = (_b = (_a = value.entry) == null ? void 0 : _a[0]) == null ? void 0 : _b.resource;
  if (!resource) return null;
  let table = blame(value);
  return (0, import_jsx_runtime124.jsx)("div", { className: ResourceBlame_default.container, children: (0, import_jsx_runtime124.jsx)("table", { className: ResourceBlame_default.root, children: (0, import_jsx_runtime124.jsx)("tbody", { children: table.map((row, index) => (0, import_jsx_runtime124.jsxs)("tr", { className: row.span > 0 ? ResourceBlame_default.startRow : ResourceBlame_default.normalRow, children: [row.span > 0 && (0, import_jsx_runtime124.jsxs)(import_jsx_runtime124.Fragment, { children: [(0, import_jsx_runtime124.jsx)("td", { className: ResourceBlame_default.author, rowSpan: row.span, children: (0, import_jsx_runtime124.jsx)(ResourceBadge, { value: row.meta.author, link: true }) }), (0, import_jsx_runtime124.jsx)("td", { className: ResourceBlame_default.dateTime, rowSpan: row.span, children: (0, import_jsx_runtime124.jsx)(MedplumLink, { to: getVersionUrl(resource, row.meta.versionId), children: getTimeString(row.meta.lastUpdated) }) })] }), (0, import_jsx_runtime124.jsx)("td", { className: ResourceBlame_default.lineNumber, children: index + 1 }), (0, import_jsx_runtime124.jsx)("td", { className: ResourceBlame_default.line, children: (0, import_jsx_runtime124.jsx)("pre", { className: ResourceBlame_default.pre, children: row.value }) })] }, "row-" + index)) }) }) });
}
var ResourceDiff_default = { removed: "ResourceDiff_removed", added: "ResourceDiff_added" };
function ResourceDiff(props) {
  let originalResource = props.original, revisedResource = props.revised;
  props.ignoreMeta && (originalResource = { ...originalResource, meta: void 0 }, revisedResource = { ...revisedResource, meta: void 0 });
  let original = Fn(originalResource, true).match(/[^\r\n]+/g), revised = Fn(revisedResource, true).match(/[^\r\n]+/g), deltas = diff(original, revised);
  return (0, import_jsx_runtime125.jsx)("pre", { style: { color: "gray" }, children: deltas.map((delta, index) => (0, import_jsx_runtime125.jsx)(ChangeDiff, { delta }, "delta" + index)) });
}
function ChangeDiff(props) {
  return (0, import_jsx_runtime125.jsxs)(import_jsx_runtime125.Fragment, { children: ["...", (0, import_jsx_runtime125.jsx)("br", {}), props.delta.original.lines.length > 0 && (0, import_jsx_runtime125.jsx)("div", { className: ResourceDiff_default.removed, children: props.delta.original.lines.join(`
`) }), props.delta.revised.lines.length > 0 && (0, import_jsx_runtime125.jsx)("div", { className: ResourceDiff_default.added, children: props.delta.revised.lines.join(`
`) }), "...", (0, import_jsx_runtime125.jsx)("br", {})] });
}
var ResourceForm_default = { splitButton: "ResourceForm_splitButton", menuControl: "ResourceForm_menuControl" };
function ResourceForm(props) {
  let { outcome } = props, medplum = b(), defaultValue2 = Ue(props.defaultValue), resourceType = defaultValue2 == null ? void 0 : defaultValue2.resourceType, [schemaLoaded, setSchemaLoaded] = (0, import_react95.useState)(false), [value, setValue] = (0, import_react95.useState)(), accessPolicy = medplum.getAccessPolicy(), theme = useMantineTheme();
  (0, import_react95.useEffect)(() => {
    if (defaultValue2) if (props.profileUrl) {
      let profileUrl = props.profileUrl;
      medplum.requestProfileSchema(props.profileUrl, { expandProfile: true }).then(() => {
        let profile = En(profileUrl);
        if (profile) {
          setSchemaLoaded(true);
          let modifiedDefaultValue = Of(defaultValue2, profile);
          setValue(modifiedDefaultValue);
        } else console.error(`Schema not found for ${profileUrl}`);
      }).catch((reason) => {
        console.error("Error in requestProfileSchema", reason);
      });
    } else medplum.requestSchema(resourceType).then(() => {
      setValue(defaultValue2), setSchemaLoaded(true);
    }).catch(console.log);
  }, [medplum, defaultValue2, resourceType, props.profileUrl]);
  let accessPolicyResource = (0, import_react95.useMemo)(() => defaultValue2 && Bp(defaultValue2, Ns.READ, accessPolicy), [accessPolicy, defaultValue2]), canWrite = (0, import_react95.useMemo)(() => medplum.isSuperAdmin() || !accessPolicy || !K(value == null ? void 0 : value.resourceType) ? true : Fs(accessPolicy, value == null ? void 0 : value.resourceType), [medplum, accessPolicy, value == null ? void 0 : value.resourceType]);
  return !schemaLoaded || !value ? (0, import_jsx_runtime126.jsx)("div", { children: "Loading..." }) : canWrite ? (0, import_jsx_runtime126.jsxs)("form", { noValidate: true, autoComplete: "off", onSubmit: (e) => {
    e.preventDefault(), props.onSubmit && props.onSubmit(value);
  }, children: [(0, import_jsx_runtime126.jsxs)(Stack, { mb: "xl", children: [(0, import_jsx_runtime126.jsx)(FormSection, { title: "Resource Type", htmlFor: "resourceType", outcome, children: (0, import_jsx_runtime126.jsx)(TextInput, { name: "resourceType", defaultValue: value.resourceType, disabled: true }) }), (0, import_jsx_runtime126.jsx)(FormSection, { title: "ID", htmlFor: "id", outcome, children: (0, import_jsx_runtime126.jsx)(TextInput, { name: "id", defaultValue: value.id, disabled: true }) })] }), (0, import_jsx_runtime126.jsx)(BackboneElementInput, { path: value.resourceType, valuePath: value.resourceType, typeName: resourceType, defaultValue: value, outcome, onChange: setValue, profileUrl: props.profileUrl, accessPolicyResource }), (0, import_jsx_runtime126.jsxs)(Group, { justify: "flex-end", mt: "xl", wrap: "nowrap", gap: 0, children: [(0, import_jsx_runtime126.jsx)(Button, { type: "submit", className: clsx_default((props.onPatch || props.onDelete) && ResourceForm_default.splitButton), children: (defaultValue2 == null ? void 0 : defaultValue2.id) ? "Update" : "Create" }), (props.onPatch || props.onDelete) && (0, import_jsx_runtime126.jsxs)(Menu, { transitionProps: { transition: "pop" }, position: "bottom-end", withinPortal: true, children: [(0, import_jsx_runtime126.jsx)(Menu.Target, { children: (0, import_jsx_runtime126.jsx)(ActionIcon, { variant: "filled", color: theme.primaryColor, size: 36, className: ResourceForm_default.menuControl, "aria-label": "More actions", children: (0, import_jsx_runtime126.jsx)(IconChevronDown, { size: 14, stroke: 1.5 }) }) }), (0, import_jsx_runtime126.jsxs)(Menu.Dropdown, { children: [props.onPatch && (0, import_jsx_runtime126.jsx)(Menu.Item, { leftSection: (0, import_jsx_runtime126.jsx)(IconEdit, { size: 14, stroke: 1.5 }), onClick: () => {
    props.onPatch(value);
  }, children: "Patch" }), props.onDelete && (0, import_jsx_runtime126.jsx)(Menu.Item, { color: "red", leftSection: (0, import_jsx_runtime126.jsx)(IconTrash, { size: 14, stroke: 1.5, color: "red" }), onClick: () => {
    props.onDelete(value);
  }, children: "Delete" })] })] })] })] }) : (0, import_jsx_runtime126.jsxs)(Alert, { color: "red", title: "Permission denied", icon: (0, import_jsx_runtime126.jsx)(IconAlertCircle, {}), children: ["Your access level prevents you from editing and creating ", value.resourceType, " resources."] });
}
function ResourceHistoryTable(props) {
  var _a;
  let medplum = b(), [value, setValue] = (0, import_react96.useState)(props.history);
  return (0, import_react96.useEffect)(() => {
    !props.history && props.resourceType && props.id && medplum.readHistory(props.resourceType, props.id).then(setValue).catch(console.log);
  }, [medplum, props.history, props.resourceType, props.id]), value ? (0, import_jsx_runtime127.jsxs)(Table, { withTableBorder: true, withRowBorders: true, withColumnBorders: true, children: [(0, import_jsx_runtime127.jsx)(Table.Thead, { children: (0, import_jsx_runtime127.jsxs)(Table.Tr, { children: [(0, import_jsx_runtime127.jsx)(Table.Th, { children: "Author" }), (0, import_jsx_runtime127.jsx)(Table.Th, { children: "Date" }), (0, import_jsx_runtime127.jsx)(Table.Th, { children: "Version" })] }) }), (0, import_jsx_runtime127.jsx)(Table.Tbody, { children: (_a = value.entry) == null ? void 0 : _a.map((entry, index) => (0, import_jsx_runtime127.jsx)(HistoryRow, { entry }, "entry-" + index)) })] }) : (0, import_jsx_runtime127.jsx)("div", { children: "Loading..." });
}
function HistoryRow(props) {
  var _a, _b, _c;
  let { response, resource } = props.entry;
  return resource ? (0, import_jsx_runtime127.jsxs)(Table.Tr, { children: [(0, import_jsx_runtime127.jsx)(Table.Td, { children: (0, import_jsx_runtime127.jsx)(ResourceBadge, { value: (_a = resource.meta) == null ? void 0 : _a.author, link: true }) }), (0, import_jsx_runtime127.jsx)(Table.Td, { children: Pr((_b = resource.meta) == null ? void 0 : _b.lastUpdated) }), (0, import_jsx_runtime127.jsx)(Table.Td, { children: (0, import_jsx_runtime127.jsx)(MedplumLink, { to: getVersionUrl2(resource), children: (_c = resource.meta) == null ? void 0 : _c.versionId }) })] }) : (0, import_jsx_runtime127.jsx)(Table.Tr, { children: (0, import_jsx_runtime127.jsx)(Table.Td, { colSpan: 3, children: Ne(response == null ? void 0 : response.outcome) }) });
}
function getVersionUrl2(resource) {
  var _a;
  return `/${resource.resourceType}/${resource.id}/_history/${(_a = resource.meta) == null ? void 0 : _a.versionId}`;
}
var Scheduler_default = { container: "Scheduler_container", info: "Scheduler_info", selection: "Scheduler_selection" };
function Scheduler(props) {
  var _a;
  let schedule = Ue(props.schedule), questionnaire = Ue(props.questionnaire), [month, setMonth] = (0, import_react97.useState)(getStartMonth()), [date, setDate] = (0, import_react97.useState)(), [slot, setSlot] = (0, import_react97.useState)(), [response, setResponse] = (0, import_react97.useState)(), [slots] = Qe("Slot", new URLSearchParams([["_count", (30 * 24).toString()], ["schedule", ue(props.schedule) ? props.schedule.reference : le(props.schedule)], ["start", "gt" + getStart2(month)], ["start", "lt" + getEnd2(month)]]));
  if (!schedule || !slots || !questionnaire) return null;
  let actor = (_a = schedule.actor) == null ? void 0 : _a[0];
  return (0, import_jsx_runtime128.jsxs)("div", { className: Scheduler_default.container, "data-testid": "scheduler", children: [(0, import_jsx_runtime128.jsxs)("div", { className: Scheduler_default.info, children: [actor && (0, import_jsx_runtime128.jsx)(ResourceAvatar, { value: actor, size: "xl" }), actor && (0, import_jsx_runtime128.jsx)(Text, { size: "xl", fw: 500, children: (0, import_jsx_runtime128.jsx)(ResourceName, { value: actor }) }), (0, import_jsx_runtime128.jsx)("p", { children: "1 hour" }), date && (0, import_jsx_runtime128.jsx)("p", { children: date.toLocaleDateString() }), slot && (0, import_jsx_runtime128.jsx)("p", { children: formatTime(new Date(slot.start)) })] }), (0, import_jsx_runtime128.jsxs)("div", { className: Scheduler_default.selection, children: [!date && (0, import_jsx_runtime128.jsxs)("div", { children: [(0, import_jsx_runtime128.jsx)("h3", { children: "Select date" }), (0, import_jsx_runtime128.jsx)(CalendarInput, { slots, onChangeMonth: setMonth, onClick: setDate })] }), date && !slot && (0, import_jsx_runtime128.jsxs)("div", { children: [(0, import_jsx_runtime128.jsx)("h3", { children: "Select time" }), (0, import_jsx_runtime128.jsx)(Stack, { children: slots.map((s) => {
    let slotStart = new Date(s.start);
    return slotStart.getTime() > date.getTime() && slotStart.getTime() < date.getTime() + 24 * 3600 * 1e3 && (0, import_jsx_runtime128.jsx)("div", { children: (0, import_jsx_runtime128.jsx)(Button, { variant: "outline", style: { width: 150 }, onClick: () => setSlot(s), children: formatTime(slotStart) }) }, s.id);
  }) })] }), date && slot && !response && (0, import_jsx_runtime128.jsx)(QuestionnaireForm, { questionnaire, submitButtonText: "Next", onSubmit: setResponse }), date && slot && response && (0, import_jsx_runtime128.jsxs)("div", { children: [(0, import_jsx_runtime128.jsx)("h3", { children: "You're all set!" }), (0, import_jsx_runtime128.jsx)("p", { children: "Check your email for a calendar invite." })] })] })] });
}
function getStart2(month) {
  return formatSlotInstant(month.getTime());
}
function getEnd2(month) {
  return formatSlotInstant(month.getTime() + 31 * 24 * 60 * 60 * 1e3);
}
function formatSlotInstant(time) {
  let date = new Date(Math.max(Date.now(), time));
  return date.setHours(0, 0, 0, 0), date.toISOString();
}
function formatTime(date) {
  return date.toLocaleTimeString([], { hour: "numeric", minute: "2-digit" });
}
function ServiceRequestTimeline(props) {
  let { serviceRequest, ...rest } = props;
  return (0, import_jsx_runtime129.jsx)(ResourceTimeline, { value: serviceRequest, loadTimelineResources: async (medplum, resourceType, id) => {
    let ref = `${resourceType}/${id}`, _count = 100;
    return Promise.allSettled([medplum.readHistory("ServiceRequest", id), medplum.search("Communication", { "based-on": ref, _count }), medplum.search("DiagnosticReport", { "based-on": ref, _count }), medplum.search("Media", { "based-on": ref, _count }), medplum.search("DocumentReference", { related: ref, _count }), medplum.search("Task", { _filter: `based-on eq ${ref} or focus eq ${ref} or subject eq ${ref}`, _count })]);
  }, createCommunication: (resource, sender, text) => ({ resourceType: "Communication", status: "completed", basedOn: [te(resource)], subject: resource.subject, sender: te(sender), sent: (/* @__PURE__ */ new Date()).toISOString(), payload: [{ contentString: text }] }), createMedia: (resource, operator, content) => ({ resourceType: "Media", status: "completed", basedOn: [te(resource)], subject: resource.subject, operator: te(operator), issued: (/* @__PURE__ */ new Date()).toISOString(), content }), ...rest });
}
function SmartAppLaunchLink(props) {
  let medplum = b(), { client, patient, encounter, children: children2, ...rest } = props;
  function launchApp() {
    medplum.createResource({ resourceType: "SmartAppLaunch", patient, encounter }).then((result) => {
      let url = new URL(client.launchUri);
      url.searchParams.set("iss", medplum.getBaseUrl() + "fhir/R4"), url.searchParams.set("launch", result.id), window.location.assign(url.toString());
    }).catch((err) => showNotification({ color: "red", message: Ne(err), autoClose: false }));
  }
  return (0, import_jsx_runtime130.jsx)(Anchor, { onClick: () => launchApp(), ...rest, children: children2 });
}
function NewProjectForm(props) {
  let medplum = b(), [outcome, setOutcome] = (0, import_react99.useState)();
  return (0, import_jsx_runtime131.jsxs)(Form, { onSubmit: async (formData) => {
    try {
      props.handleAuthResponse(await medplum.startNewProject({ login: props.login, projectName: formData.projectName }));
    } catch (err) {
      setOutcome(Xe(err));
    }
  }, children: [(0, import_jsx_runtime131.jsxs)(Center, { style: { flexDirection: "column" }, children: [(0, import_jsx_runtime131.jsx)(Logo, { size: 32 }), (0, import_jsx_runtime131.jsx)(Title, { children: "Create project" })] }), (0, import_jsx_runtime131.jsxs)(Stack, { gap: "xl", children: [(0, import_jsx_runtime131.jsx)(TextInput, { name: "projectName", label: "Project Name", placeholder: "My Project", required: true, autoFocus: true, error: getErrorsForInput(outcome, "projectName") }), (0, import_jsx_runtime131.jsxs)(Text, { c: "dimmed", size: "xs", children: ["By clicking submit you agree to the Medplum", " ", (0, import_jsx_runtime131.jsx)(Anchor, { href: "https://www.medplum.com/privacy", children: "Privacy Policy" }), " and ", (0, import_jsx_runtime131.jsx)(Anchor, { href: "https://www.medplum.com/terms", children: "Terms of Service" }), "."] })] }), (0, import_jsx_runtime131.jsx)(Group, { justify: "flex-end", mt: "xl", wrap: "nowrap", children: (0, import_jsx_runtime131.jsx)(Button, { type: "submit", children: "Create project" }) })] });
}
function createScriptTag(src, onload) {
  let head = document.getElementsByTagName("head")[0], script = document.createElement("script");
  script.async = true, script.src = src, script.onload = onload ?? null, head.appendChild(script);
}
function GoogleButton(props) {
  let medplum = b(), { googleClientId, handleGoogleCredential } = props, parentRef = (0, import_react101.useRef)(null), [scriptLoaded, setScriptLoaded] = (0, import_react101.useState)(typeof google < "u"), [initialized, setInitialized] = (0, import_react101.useState)(false), [buttonRendered, setButtonRendered] = (0, import_react101.useState)(false);
  return (0, import_react101.useEffect)(() => {
    if (typeof google > "u") {
      createScriptTag("https://accounts.google.com/gsi/client", () => setScriptLoaded(true));
      return;
    }
    initialized || (google.accounts.id.initialize({ client_id: googleClientId, callback: handleGoogleCredential }), setInitialized(true)), parentRef.current && !buttonRendered && (google.accounts.id.renderButton(parentRef.current, {}), setButtonRendered(true));
  }, [medplum, googleClientId, initialized, scriptLoaded, parentRef, buttonRendered, handleGoogleCredential]), googleClientId ? (0, import_jsx_runtime132.jsx)("div", { ref: parentRef }) : null;
}
function getGoogleClientId(clientId) {
  if (clientId) return clientId;
  if (typeof window < "u") {
    let origin = window.location.protocol + "//" + window.location.host;
    if ((("undefined" == null ? void 0 : "undefined".split(",")) ?? []).includes(origin)) return "__GOOGLE_CLIENT_ID__";
  }
}
function initRecaptcha(siteKey) {
  typeof grecaptcha > "u" && createScriptTag("https://www.google.com/recaptcha/api.js?render=" + siteKey);
}
function getRecaptcha(siteKey) {
  return new Promise((resolve, reject) => {
    grecaptcha.ready(async () => {
      try {
        resolve(await grecaptcha.execute(siteKey, { action: "submit" }));
      } catch (err) {
        reject(err);
      }
    });
  });
}
function NewUserForm(props) {
  let googleClientId = getGoogleClientId(props.googleClientId), recaptchaSiteKey = props.recaptchaSiteKey, medplum = b(), [outcome, setOutcome] = (0, import_react100.useState)(), issues = getIssuesForExpression(outcome, void 0);
  return (0, import_react100.useEffect)(() => {
    recaptchaSiteKey && initRecaptcha(recaptchaSiteKey);
  }, [recaptchaSiteKey]), (0, import_jsx_runtime133.jsxs)(Form, { onSubmit: async (formData) => {
    try {
      let recaptchaToken = "";
      recaptchaSiteKey && (recaptchaToken = await getRecaptcha(recaptchaSiteKey)), props.handleAuthResponse(await medplum.startNewUser({ projectId: props.projectId, clientId: props.clientId, firstName: formData.firstName, lastName: formData.lastName, email: formData.email, password: formData.password, remember: formData.remember === "true", recaptchaSiteKey, recaptchaToken }));
    } catch (err) {
      setOutcome(Xe(err));
    }
  }, children: [(0, import_jsx_runtime133.jsx)(Center, { style: { flexDirection: "column" }, children: props.children }), (0, import_jsx_runtime133.jsx)(OperationOutcomeAlert, { issues }), googleClientId && (0, import_jsx_runtime133.jsxs)(import_jsx_runtime133.Fragment, { children: [(0, import_jsx_runtime133.jsx)(Group, { justify: "center", p: "xl", style: { height: 70 }, children: (0, import_jsx_runtime133.jsx)(GoogleButton, { googleClientId, handleGoogleCredential: async (response) => {
    try {
      props.handleAuthResponse(await medplum.startGoogleLogin({ googleClientId: response.clientId, googleCredential: response.credential, projectId: props.projectId, createUser: true }));
    } catch (err) {
      setOutcome(Xe(err));
    }
  } }) }), (0, import_jsx_runtime133.jsx)(Divider, { label: "or", labelPosition: "center", my: "lg" })] }), (0, import_jsx_runtime133.jsxs)(Stack, { gap: "xl", children: [(0, import_jsx_runtime133.jsx)(TextInput, { name: "firstName", type: "text", label: "First name", placeholder: "First name", required: true, autoFocus: true, error: getErrorsForInput(outcome, "firstName") }), (0, import_jsx_runtime133.jsx)(TextInput, { name: "lastName", type: "text", label: "Last name", placeholder: "Last name", required: true, error: getErrorsForInput(outcome, "lastName") }), (0, import_jsx_runtime133.jsx)(TextInput, { name: "email", type: "email", label: "Email", placeholder: "name@domain.com", required: true, error: getErrorsForInput(outcome, "email") }), (0, import_jsx_runtime133.jsx)(PasswordInput, { name: "password", label: "Password", autoComplete: "off", required: true, error: getErrorsForInput(outcome, "password") }), (0, import_jsx_runtime133.jsxs)(Text, { c: "dimmed", size: "xs", children: ["By clicking submit you agree to the Medplum", " ", (0, import_jsx_runtime133.jsx)(Anchor, { href: "https://www.medplum.com/privacy", children: "Privacy Policy" }), " and ", (0, import_jsx_runtime133.jsx)(Anchor, { href: "https://www.medplum.com/terms", children: "Terms of Service" }), "."] }), (0, import_jsx_runtime133.jsxs)(Text, { c: "dimmed", size: "xs", children: ["This site is protected by reCAPTCHA and the Google", " ", (0, import_jsx_runtime133.jsx)(Anchor, { href: "https://policies.google.com/privacy", children: "Privacy Policy" }), " and ", (0, import_jsx_runtime133.jsx)(Anchor, { href: "https://policies.google.com/terms", children: "Terms of Service" }), " apply."] })] }), (0, import_jsx_runtime133.jsxs)(Group, { justify: "space-between", mt: "xl", wrap: "nowrap", children: [(0, import_jsx_runtime133.jsx)(Checkbox, { name: "remember", label: "Remember me", size: "xs" }), (0, import_jsx_runtime133.jsx)(Button, { type: "submit", children: "Create account" })] })] });
}
function RegisterForm(props) {
  let { type, projectId, clientId, googleClientId, recaptchaSiteKey, onSuccess } = props, medplum = b(), [login, setLogin] = (0, import_react98.useState)(), [outcome, setOutcome] = (0, import_react98.useState)();
  (0, import_react98.useEffect)(() => {
    type === "patient" && login && medplum.startNewPatient({ login, projectId }).then((response) => medplum.processCode(response.code)).then(() => onSuccess()).catch((err) => setOutcome(Xe(err)));
  }, [medplum, type, projectId, login, onSuccess]);
  function handleAuthResponse(response) {
    response.code ? medplum.processCode(response.code).then(() => onSuccess()).catch(console.log) : response.login && setLogin(response.login);
  }
  return (0, import_jsx_runtime134.jsxs)(Document, { width: 450, children: [outcome && (0, import_jsx_runtime134.jsx)("pre", { children: JSON.stringify(outcome, null, 2) }), !login && (0, import_jsx_runtime134.jsx)(NewUserForm, { projectId, clientId, googleClientId, recaptchaSiteKey, handleAuthResponse, children: props.children }), login && type === "project" && (0, import_jsx_runtime134.jsx)(NewProjectForm, { login, handleAuthResponse })] });
}
function AuthenticationForm(props) {
  let [email, setEmail] = (0, import_react103.useState)();
  return email ? (0, import_jsx_runtime135.jsx)(PasswordForm, { email, ...props }) : (0, import_jsx_runtime135.jsx)(EmailForm, { setEmail, ...props });
}
function EmailForm(props) {
  let { setEmail, onRegister, handleAuthResponse, children: children2, disableEmailAuth, ...baseLoginRequest } = props, medplum = b(), googleClientId = !props.disableGoogleAuth && getGoogleClientId(props.googleClientId), [outcome, setOutcome] = (0, import_react103.useState)(), issues = getIssuesForExpression(outcome, void 0), isExternalAuth = (0, import_react103.useCallback)(async (authMethod) => {
    if (!authMethod.authorizeUrl) return false;
    let state = JSON.stringify({ ...await medplum.ensureCodeChallenge(baseLoginRequest), domain: authMethod.domain }), url = new URL(authMethod.authorizeUrl);
    return url.searchParams.set("state", state), window.location.assign(url.toString()), true;
  }, [medplum, baseLoginRequest]), handleSubmit = (0, import_react103.useCallback)(async (formData) => {
    let authMethod = await medplum.post("auth/method", { email: formData.email });
    await isExternalAuth(authMethod) || setEmail(formData.email);
  }, [medplum, isExternalAuth, setEmail]), handleGoogleCredential = (0, import_react103.useCallback)(async (response) => {
    try {
      let authResponse = await medplum.startGoogleLogin({ ...baseLoginRequest, googleCredential: response.credential });
      await isExternalAuth(authResponse) || handleAuthResponse(authResponse);
    } catch (err) {
      setOutcome(Xe(err));
    }
  }, [medplum, baseLoginRequest, isExternalAuth, handleAuthResponse]);
  return (0, import_jsx_runtime135.jsxs)(Form, { onSubmit: handleSubmit, children: [(0, import_jsx_runtime135.jsx)(Center, { style: { flexDirection: "column" }, children: children2 }), (0, import_jsx_runtime135.jsx)(OperationOutcomeAlert, { issues }), googleClientId && (0, import_jsx_runtime135.jsxs)(import_jsx_runtime135.Fragment, { children: [(0, import_jsx_runtime135.jsx)(Group, { justify: "center", p: "xl", style: { height: 70 }, children: (0, import_jsx_runtime135.jsx)(GoogleButton, { googleClientId, handleGoogleCredential }) }), !disableEmailAuth && (0, import_jsx_runtime135.jsx)(Divider, { label: "or", labelPosition: "center", my: "lg" })] }), !disableEmailAuth && (0, import_jsx_runtime135.jsx)(TextInput, { name: "email", type: "email", label: "Email", placeholder: "name@domain.com", required: true, autoFocus: true, error: getErrorsForInput(outcome, "email") }), (0, import_jsx_runtime135.jsxs)(Group, { justify: "space-between", mt: "xl", gap: 0, wrap: "nowrap", children: [(0, import_jsx_runtime135.jsx)("div", { children: onRegister && (0, import_jsx_runtime135.jsx)(Anchor, { component: "button", type: "button", color: "dimmed", onClick: onRegister, size: "xs", children: "Register" }) }), !disableEmailAuth && (0, import_jsx_runtime135.jsx)(Button, { type: "submit", children: "Next" })] })] });
}
function PasswordForm(props) {
  let { onForgotPassword, handleAuthResponse, children: children2, ...baseLoginRequest } = props, medplum = b(), [outcome, setOutcome] = (0, import_react103.useState)(), issues = getIssuesForExpression(outcome, void 0), handleSubmit = (0, import_react103.useCallback)((formData) => {
    medplum.startLogin({ ...baseLoginRequest, password: formData.password, remember: formData.remember === "on" }).then(handleAuthResponse).catch((err) => setOutcome(Xe(err)));
  }, [medplum, baseLoginRequest, handleAuthResponse]);
  return (0, import_jsx_runtime135.jsxs)(Form, { onSubmit: handleSubmit, children: [(0, import_jsx_runtime135.jsx)(Center, { style: { flexDirection: "column" }, children: children2 }), (0, import_jsx_runtime135.jsx)(OperationOutcomeAlert, { issues }), (0, import_jsx_runtime135.jsx)(Stack, { gap: "xl", children: (0, import_jsx_runtime135.jsx)(PasswordInput, { name: "password", label: "Password", autoComplete: "off", required: true, autoFocus: true, error: getErrorsForInput(outcome, "password") }) }), (0, import_jsx_runtime135.jsxs)(Group, { justify: "space-between", mt: "xl", gap: 0, wrap: "nowrap", children: [onForgotPassword && (0, import_jsx_runtime135.jsx)(Anchor, { component: "button", type: "button", c: "dimmed", onClick: onForgotPassword, size: "xs", children: "Forgot password" }), (0, import_jsx_runtime135.jsx)(Checkbox, { id: "remember", name: "remember", label: "Remember me", size: "xs", style: { lineHeight: 1 } }), (0, import_jsx_runtime135.jsx)(Button, { type: "submit", children: "Sign in" })] })] });
}
function ChooseProfileForm(props) {
  let medplum = b(), combobox = useCombobox(), [search, setSearch] = (0, import_react104.useState)(""), [outcome, setOutcome] = (0, import_react104.useState)();
  function filterDisplay(display) {
    var _a;
    return !!((_a = display == null ? void 0 : display.toLowerCase()) == null ? void 0 : _a.includes(search.toLowerCase()));
  }
  function filterMembership(membership) {
    var _a, _b;
    return filterDisplay((_a = membership.profile) == null ? void 0 : _a.display) || filterDisplay((_b = membership.project) == null ? void 0 : _b.display);
  }
  function handleValueSelect(membershipId) {
    medplum.post("auth/profile", { login: props.login, profile: membershipId }).then(props.handleAuthResponse).catch((err) => setOutcome(Xe(err)));
  }
  let options = props.memberships.filter(filterMembership).slice(0, 10).map((item) => (0, import_jsx_runtime136.jsx)(Combobox.Option, { value: item.id, children: (0, import_jsx_runtime136.jsx)(SelectOption, { ...item }) }, item.id));
  return (0, import_jsx_runtime136.jsxs)(Stack, { children: [(0, import_jsx_runtime136.jsxs)(Flex, { gap: "md", mb: "md", justify: "center", align: "center", direction: "column", wrap: "nowrap", children: [(0, import_jsx_runtime136.jsx)(Logo, { size: 32 }), (0, import_jsx_runtime136.jsx)(Title, { order: 3, children: "Choose profile" })] }), (0, import_jsx_runtime136.jsx)(OperationOutcomeAlert, { outcome }), (0, import_jsx_runtime136.jsxs)(Combobox, { store: combobox, onOptionSubmit: handleValueSelect, children: [(0, import_jsx_runtime136.jsx)(Combobox.EventsTarget, { children: (0, import_jsx_runtime136.jsx)(TextInput, { placeholder: "Search", value: search, onChange: (event) => {
    setSearch(event.currentTarget.value), combobox.updateSelectedOptionIndex();
  } }) }), (0, import_jsx_runtime136.jsx)("div", { children: (0, import_jsx_runtime136.jsx)(Combobox.Options, { children: options.length > 0 ? options : (0, import_jsx_runtime136.jsx)(Combobox.Empty, { children: "Nothing found..." }) }) })] })] });
}
function SelectOption(membership) {
  var _a, _b;
  return (0, import_jsx_runtime136.jsxs)(Group, { children: [(0, import_jsx_runtime136.jsx)(Avatar, { radius: "xl" }), (0, import_jsx_runtime136.jsxs)("div", { children: [(0, import_jsx_runtime136.jsx)(Text, { fz: "sm", fw: 500, children: (_a = membership.profile) == null ? void 0 : _a.display }), (0, import_jsx_runtime136.jsx)(Text, { fz: "xs", opacity: 0.6, children: (_b = membership.project) == null ? void 0 : _b.display })] })] });
}
function ChooseScopeForm(props) {
  let medplum = b();
  return (0, import_jsx_runtime137.jsx)(Form, { onSubmit: (formData) => {
    medplum.post("auth/scope", { login: props.login, scope: Object.keys(formData).join(" ") }).then(props.handleAuthResponse).catch(console.log);
  }, children: (0, import_jsx_runtime137.jsxs)(Stack, { children: [(0, import_jsx_runtime137.jsxs)(Center, { style: { flexDirection: "column" }, children: [(0, import_jsx_runtime137.jsx)(Logo, { size: 32 }), (0, import_jsx_runtime137.jsx)(Title, { children: "Choose scope" })] }), (0, import_jsx_runtime137.jsx)(Stack, { children: (props.scope ?? "openid").split(" ").map((scopeName) => (0, import_jsx_runtime137.jsx)(Checkbox, { id: scopeName, name: scopeName, label: scopeName, defaultChecked: true }, scopeName)) }), (0, import_jsx_runtime137.jsx)(Group, { justify: "flex-end", mt: "xl", children: (0, import_jsx_runtime137.jsx)(Button, { type: "submit", children: "Set scope" }) })] }) });
}
function MfaForm(props) {
  let medplum = b(), [errorMessage, setErrorMessage] = (0, import_react105.useState)();
  return (0, import_jsx_runtime138.jsx)(Form, { onSubmit: (formData) => {
    setErrorMessage(void 0), medplum.post("auth/mfa/verify", { login: props.login, token: formData.token }).then(props.handleAuthResponse).catch((err) => setErrorMessage(Ne(err)));
  }, children: (0, import_jsx_runtime138.jsxs)(Stack, { children: [(0, import_jsx_runtime138.jsxs)(Center, { style: { flexDirection: "column" }, children: [(0, import_jsx_runtime138.jsx)(Logo, { size: 32 }), (0, import_jsx_runtime138.jsx)(Title, { children: "Enter MFA code" })] }), errorMessage && (0, import_jsx_runtime138.jsx)(Alert, { icon: (0, import_jsx_runtime138.jsx)(IconAlertCircle, { size: 16 }), title: "Error", color: "red", children: errorMessage }), (0, import_jsx_runtime138.jsx)(Stack, { children: (0, import_jsx_runtime138.jsx)(TextInput, { name: "token", label: "MFA code", required: true, autoFocus: true }) }), (0, import_jsx_runtime138.jsx)(Group, { justify: "flex-end", mt: "xl", children: (0, import_jsx_runtime138.jsx)(Button, { type: "submit", children: "Submit code" }) })] }) });
}
function SignInForm(props) {
  let { login: loginCode, chooseScopes, onSuccess, onForgotPassword, onRegister, onCode, ...baseLoginRequest } = props, medplum = b(), [login, setLogin] = (0, import_react102.useState)(), loginRequested = (0, import_react102.useRef)(false), [mfaRequired, setAuthenticatorRequired] = (0, import_react102.useState)(false), [memberships, setMemberships] = (0, import_react102.useState)(), handleCode = (0, import_react102.useCallback)((code) => {
    onCode ? onCode(code) : medplum.processCode(code).then(() => {
      onSuccess && onSuccess();
    }).catch((err) => showNotification({ color: "red", message: Ne(err) }));
  }, [medplum, onCode, onSuccess]), handleAuthResponse = (0, import_react102.useCallback)((response) => {
    setAuthenticatorRequired(!!response.mfaRequired), response.login && setLogin(response.login), response.memberships && setMemberships(response.memberships), response.code && (chooseScopes ? setMemberships(void 0) : handleCode(response.code));
  }, [chooseScopes, handleCode]), handleScopeResponse = (0, import_react102.useCallback)((response) => {
    handleCode(response.code);
  }, [handleCode]);
  return (0, import_react102.useEffect)(() => {
    loginCode && !loginRequested.current && !login && (loginRequested.current = true, medplum.get("auth/login/" + loginCode).then(handleAuthResponse).catch((err) => showNotification({ color: "red", message: Ne(err) })));
  }, [medplum, loginCode, loginRequested, login, handleAuthResponse]), (0, import_jsx_runtime139.jsx)(Document, { width: 450, px: "sm", py: "md", children: login ? mfaRequired ? (0, import_jsx_runtime139.jsx)(MfaForm, { login, handleAuthResponse }) : memberships ? (0, import_jsx_runtime139.jsx)(ChooseProfileForm, { login, memberships, handleAuthResponse }) : props.projectId === "new" ? (0, import_jsx_runtime139.jsx)(NewProjectForm, { login, handleAuthResponse }) : props.chooseScopes ? (0, import_jsx_runtime139.jsx)(ChooseScopeForm, { login, scope: props.scope, handleAuthResponse: handleScopeResponse }) : (0, import_jsx_runtime139.jsx)("div", { children: "Success" }) : (0, import_jsx_runtime139.jsx)(AuthenticationForm, { onForgotPassword, onRegister, handleAuthResponse, disableGoogleAuth: props.disableGoogleAuth, disableEmailAuth: props.disableEmailAuth, ...baseLoginRequest, children: props.children }) });
}
var BaseChat_default = { chatPaper: "BaseChat_chatPaper", chatTitle: "BaseChat_chatTitle", chatBody: "BaseChat_chatBody", chatScrollArea: "BaseChat_chatScrollArea", chatInputContainer: "BaseChat_chatInputContainer", chatBubbleOuterWrap: "BaseChat_chatBubbleOuterWrap", chatBubbleRightAlignedInnerWrap: "BaseChat_chatBubbleRightAlignedInnerWrap", chatBubbleLeftAlignedInnerWrap: "BaseChat_chatBubbleLeftAlignedInnerWrap", chatBubble: "BaseChat_chatBubble", chatBubbleName: "BaseChat_chatBubbleName", chatBubbleNameRight: "BaseChat_chatBubbleNameRight" };
function showError(message) {
  showNotification({ color: "red", title: "Error", message, autoClose: false });
}
function parseSentTime(communication) {
  let sentTime = new Date(communication.sent ?? 0), sentTimeMins = sentTime.getMinutes().toString();
  return `${sentTime.getHours()}:${sentTimeMins.length === 1 ? "0" : ""}${sentTimeMins}`;
}
function upsertCommunications(communications, received, setCommunications) {
  let newCommunications = [...communications], foundNew = false;
  for (let comm of received) {
    let existingIdx = newCommunications.findIndex((c) => c.id === comm.id);
    existingIdx !== -1 ? newCommunications[existingIdx] = comm : (newCommunications.push(comm), foundNew = true);
  }
  foundNew && newCommunications.sort((a, b2) => a.sent.localeCompare(b2.sent)), setCommunications(newCommunications);
}
function BaseChat(props) {
  let { title, communications, setCommunications, query, sendMessage, onMessageReceived, onMessageUpdated, inputDisabled, onError, ...paperProps } = props, medplum = b(), inputRef = (0, import_react106.useRef)(null), scrollAreaRef = (0, import_react106.useRef)(null), firstScrollRef = (0, import_react106.useRef)(true), initialLoadRef = (0, import_react106.useRef)(true), [profile, setProfile] = (0, import_react106.useState)(medplum.getProfile()), [reconnecting, setReconnecting] = (0, import_react106.useState)(false), [loading, setLoading] = (0, import_react106.useState)(true);
  loading || (initialLoadRef.current = false);
  let profileRefStr = (0, import_react106.useMemo)(() => profile ? le(medplum.getProfile()) : "", [profile, medplum]), searchMessages = (0, import_react106.useCallback)(async () => {
    setLoading(true);
    let searchParams = new URLSearchParams(query);
    searchParams.append("_sort", "-sent");
    let searchResult = await medplum.searchResources("Communication", searchParams, { cache: "no-cache" });
    upsertCommunications(communicationsRef.current, searchResult, setCommunications), setLoading(false);
  }, [medplum, setCommunications, query]);
  (0, import_react106.useEffect)(() => {
    searchMessages().catch((err) => showNotification({ color: "red", message: Ne(err) }));
  }, [searchMessages]), Ze(`Communication?${query}`, (bundle) => {
    var _a, _b;
    let communication = (_b = (_a = bundle.entry) == null ? void 0 : _a[1]) == null ? void 0 : _b.resource;
    upsertCommunications(communicationsRef.current, [communication], setCommunications), le(communication.sender) !== profileRefStr && (communicationsRef.current.find((c) => c.id === communication.id) ? onMessageUpdated == null ? void 0 : onMessageUpdated(communication) : onMessageReceived == null ? void 0 : onMessageReceived(communication));
  }, { onWebSocketClose: (0, import_react106.useCallback)(() => {
    reconnecting || setReconnecting(true), showNotification({ color: "red", message: "Live chat disconnected. Attempting to reconnect..." });
  }, [reconnecting]), onWebSocketOpen: (0, import_react106.useCallback)(() => {
    reconnecting && showNotification({ color: "green", message: "Live chat reconnected." });
  }, [reconnecting]), onSubscriptionConnect: (0, import_react106.useCallback)(() => {
    reconnecting && (searchMessages().catch((err) => showNotification({ color: "red", message: Ne(err) })), setReconnecting(false));
  }, [reconnecting, searchMessages]), onError: (0, import_react106.useCallback)((err) => {
    onError ? onError(err) : showError(Ne(err));
  }, [onError]) });
  let sendMessageInternal = (0, import_react106.useCallback)((formData) => {
    inputDisabled || (inputRef.current && (inputRef.current.value = ""), sendMessage(formData.message), scrollToBottomRef.current = true);
  }, [inputDisabled, sendMessage]);
  (0, import_react106.useEffect)(() => {
    let latestProfile = medplum.getProfile();
    (profile == null ? void 0 : profile.id) !== (latestProfile == null ? void 0 : latestProfile.id) && (setProfile(latestProfile), setCommunications([]));
  });
  let [parentRef, parentRect] = useResizeObserver(), communicationsRef = (0, import_react106.useRef)(communications);
  communicationsRef.current = communications;
  let prevCommunicationsRef = (0, import_react106.useRef)(communications), scrollToBottomRef = (0, import_react106.useRef)(true);
  (0, import_react106.useEffect)(() => {
    communications !== prevCommunicationsRef.current && (scrollToBottomRef.current = true), prevCommunicationsRef.current = communications;
  }, [communications]), (0, import_react106.useEffect)(() => {
    var _a;
    scrollToBottomRef.current && ((_a = scrollAreaRef.current) == null ? void 0 : _a.scrollTo) && (scrollAreaRef.current.scrollTo({ top: scrollAreaRef.current.scrollHeight, ...firstScrollRef.current ? { duration: 0 } : { behavior: "smooth" } }), firstScrollRef.current = false, scrollToBottomRef.current = false);
  });
  let myLastDeliveredId = (0, import_react106.useMemo)(() => {
    var _a;
    let i = communications.length;
    for (; i--; ) {
      let comm = communications[i];
      if (((_a = comm.sender) == null ? void 0 : _a.reference) === profileRefStr && comm.received) return comm.id;
    }
    return "";
  }, [communications, profileRefStr]);
  return profile ? (0, import_jsx_runtime140.jsxs)(Paper, { className: BaseChat_default.chatPaper, p: 0, radius: "md", ...paperProps, children: [(0, import_jsx_runtime140.jsx)(Title, { order: 2, className: BaseChat_default.chatTitle, children: title }), (0, import_jsx_runtime140.jsx)("div", { className: BaseChat_default.chatBody, ref: parentRef, children: initialLoadRef.current ? (0, import_jsx_runtime140.jsxs)(Stack, { align: "stretch", mt: "lg", children: [(0, import_jsx_runtime140.jsxs)(Group, { justify: "flex-start", align: "flex-end", gap: "xs", mb: "sm", children: [(0, import_jsx_runtime140.jsx)(Skeleton, { height: 38, circle: true, ml: "md" }), (0, import_jsx_runtime140.jsx)(ChatBubbleSkeleton, { alignment: "left", parentWidth: parentRect.width })] }), (0, import_jsx_runtime140.jsxs)(Group, { justify: "flex-end", align: "flex-end", gap: "xs", mb: "sm", children: [(0, import_jsx_runtime140.jsx)(ChatBubbleSkeleton, { alignment: "right", parentWidth: parentRect.width }), (0, import_jsx_runtime140.jsx)(Skeleton, { height: 38, circle: true, mr: "md" })] }), (0, import_jsx_runtime140.jsxs)(Group, { justify: "flex-start", align: "flex-end", gap: "xs", mb: "sm", children: [(0, import_jsx_runtime140.jsx)(Skeleton, { height: 38, circle: true, ml: "md" }), (0, import_jsx_runtime140.jsx)(ChatBubbleSkeleton, { alignment: "left", parentWidth: parentRect.width })] })] }, "skeleton-chat-messages") : (0, import_jsx_runtime140.jsxs)(ScrollArea, { viewportRef: scrollAreaRef, className: BaseChat_default.chatScrollArea, h: parentRect.height, children: [(0, import_jsx_runtime140.jsx)(LoadingOverlay, { visible: loading || reconnecting, style: { width: parentRect.width, height: parentRect.height, position: "absolute", zIndex: 1 } }), communications.map((c, i) => {
    var _a, _b;
    let prevCommunication = i > 0 ? communications[i - 1] : void 0, prevCommTime = prevCommunication ? parseSentTime(prevCommunication) : void 0, currCommTime = parseSentTime(c);
    return (0, import_jsx_runtime140.jsxs)(Stack, { align: "stretch", children: [(!prevCommTime || currCommTime !== prevCommTime) && (0, import_jsx_runtime140.jsx)("div", { style: { textAlign: "center" }, children: currCommTime }), ((_a = c.sender) == null ? void 0 : _a.reference) === profileRefStr ? (0, import_jsx_runtime140.jsxs)(Group, { justify: "flex-end", align: "flex-end", gap: "xs", mb: "sm", children: [(0, import_jsx_runtime140.jsx)(ChatBubble, { alignment: "right", communication: c, showDelivered: !!c.received && c.id === myLastDeliveredId }), (0, import_jsx_runtime140.jsx)(ResourceAvatar, { radius: "xl", color: "orange", value: c.sender })] }) : (0, import_jsx_runtime140.jsxs)(Group, { justify: "flex-start", align: "flex-end", gap: "xs", mb: "sm", children: [(0, import_jsx_runtime140.jsx)(ResourceAvatar, { radius: "xl", value: c.sender }), (0, import_jsx_runtime140.jsx)(ChatBubble, { alignment: "left", communication: c })] })] }, `${c.id}--${((_b = c.meta) == null ? void 0 : _b.versionId) ?? "no-version"}`);
  })] }) }), (0, import_jsx_runtime140.jsx)("div", { className: BaseChat_default.chatInputContainer, children: (0, import_jsx_runtime140.jsx)(Form, { onSubmit: sendMessageInternal, children: (0, import_jsx_runtime140.jsx)(TextInput, { ref: inputRef, name: "message", placeholder: inputDisabled ? "Replies are disabled" : "Type a message...", radius: "xl", rightSectionWidth: 42, disabled: inputDisabled, rightSection: inputDisabled ? void 0 : (0, import_jsx_runtime140.jsx)(ActionIcon, { type: "submit", size: "1.5rem", radius: "xl", color: "blue", variant: "filled", "aria-label": "Send message", children: (0, import_jsx_runtime140.jsx)(IconArrowRight, { size: "1rem", stroke: 1.5 }) }) }) }) })] }) : null;
}
function ChatBubble(props) {
  var _a, _b;
  let { communication, alignment, showDelivered } = props, content = ((_b = (_a = communication.payload) == null ? void 0 : _a[0]) == null ? void 0 : _b.contentString) || "", seenTime = new Date(communication.received ?? -1), senderResource = Ue(communication.sender);
  return (0, import_jsx_runtime140.jsxs)("div", { className: BaseChat_default.chatBubbleOuterWrap, children: [(0, import_jsx_runtime140.jsx)("div", { className: clsx_default(BaseChat_default.chatBubbleName, alignment === "right" && BaseChat_default.chatBubbleNameRight), "aria-label": "Sender name", children: senderResource ? Eo(senderResource) : "[Unknown sender]" }), (0, import_jsx_runtime140.jsx)("div", { className: alignment === "left" ? BaseChat_default.chatBubbleLeftAlignedInnerWrap : BaseChat_default.chatBubbleRightAlignedInnerWrap, children: (0, import_jsx_runtime140.jsx)("div", { className: BaseChat_default.chatBubble, children: content }) }), showDelivered && (0, import_jsx_runtime140.jsxs)("div", { style: { textAlign: "right" }, children: ["Delivered ", seenTime.getHours(), ":", seenTime.getMinutes().toString().length === 1 ? "0" : "", seenTime.getMinutes()] })] });
}
function ChatBubbleSkeleton(props) {
  let { alignment, parentWidth } = props;
  return (0, import_jsx_runtime140.jsxs)("div", { className: BaseChat_default.chatBubbleOuterWrap, children: [(0, import_jsx_runtime140.jsx)("div", { className: BaseChat_default.chatBubbleName, "aria-label": "Placeholder sender name", children: (0, import_jsx_runtime140.jsx)("div", { style: { position: "relative" }, children: (0, import_jsx_runtime140.jsx)(Skeleton, { height: 14, width: "100px", radius: "l", ml: alignment === "left" ? "sm" : void 0, style: alignment === "right" ? { position: "absolute", right: 5, top: -15 } : void 0 }) }) }), (0, import_jsx_runtime140.jsx)("div", { className: alignment === "left" ? BaseChat_default.chatBubbleLeftAlignedInnerWrap : BaseChat_default.chatBubbleRightAlignedInnerWrap, children: (0, import_jsx_runtime140.jsx)("div", { className: BaseChat_default.chatBubble, children: (0, import_jsx_runtime140.jsx)(Skeleton, { height: 14, width: parentWidth * 0.5, radius: "l" }) }) })] });
}
var ChatModal_default = { iconContainer: "ChatModal_iconContainer", icon: "ChatModal_icon", chatModalContainer: "ChatModal_chatModalContainer" };
function ChatModal(props) {
  let { open, children: children2 } = props, profile = me(), [opened, setOpened] = (0, import_react107.useState)(open ?? false);
  return (0, import_react107.useEffect)(() => {
    setOpened((prevVal) => open ?? prevVal);
  }, [open]), profile ? (0, import_jsx_runtime141.jsxs)(import_jsx_runtime141.Fragment, { children: [opened && (0, import_jsx_runtime141.jsx)("div", { className: ChatModal_default.chatModalContainer, children: children2 }), opened ? (0, import_jsx_runtime141.jsx)("div", { className: ChatModal_default.iconContainer, children: (0, import_jsx_runtime141.jsx)(ActionIcon, { className: ChatModal_default.icon, color: "blue", size: "lg", radius: "xl", variant: "outline", onClick: () => setOpened(false), "aria-label": "Close chat", children: (0, import_jsx_runtime141.jsx)(IconChevronDown, { size: "1.625rem" }) }) }) : (0, import_jsx_runtime141.jsx)("div", { className: ChatModal_default.iconContainer, children: (0, import_jsx_runtime141.jsx)(ActionIcon, { className: ChatModal_default.icon, color: "blue", size: "lg", radius: "xl", variant: "outline", onClick: () => setOpened(true), "aria-label": "Open chat", children: (0, import_jsx_runtime141.jsx)(IconChevronUp, { size: "1.625rem" }) }) })] }) : null;
}
function ThreadChat(props) {
  var _a;
  let { thread, title, onMessageSent, inputDisabled, onError } = props, medplum = b(), profile = me(), prevThreadId = Me(thread == null ? void 0 : thread.id), [communications, setCommunications] = (0, import_react108.useState)([]), profileRef = (0, import_react108.useMemo)(() => profile ? te(profile) : void 0, [profile]), threadRef = (0, import_react108.useMemo)(() => te(thread), [thread]);
  (0, import_react108.useEffect)(() => {
    (thread == null ? void 0 : thread.id) !== prevThreadId && setCommunications([]);
  }, [thread == null ? void 0 : thread.id, prevThreadId]);
  let sendMessage = (0, import_react108.useCallback)((message) => {
    var _a2;
    let profileRefStr = profileRef ? le(profileRef) : void 0;
    profileRefStr && medplum.createResource({ resourceType: "Communication", status: "in-progress", sender: profileRef, recipient: ((_a2 = thread.recipient) == null ? void 0 : _a2.filter((ref) => le(ref) !== profileRefStr)) ?? [], sent: (/* @__PURE__ */ new Date()).toISOString(), payload: [{ contentString: message }], partOf: [threadRef] }).then((communication) => {
      setCommunications([...communications, communication]), onMessageSent == null ? void 0 : onMessageSent(communication);
    }).catch(console.error);
  }, [medplum, profileRef, thread, threadRef, communications, onMessageSent]), onMessageReceived = (0, import_react108.useMemo)(() => {
    var _a2;
    return ((_a2 = thread.recipient) == null ? void 0 : _a2.length) === 2 ? (message) => {
      message.received && message.status === "completed" || medplum.updateResource({ ...message, received: message.received ?? (/* @__PURE__ */ new Date()).toISOString(), status: "completed" }).catch(console.error);
    } : void 0;
  }, [medplum, (_a = thread.recipient) == null ? void 0 : _a.length]);
  return profile ? (0, import_jsx_runtime142.jsx)(BaseChat, { title: title ?? ((thread == null ? void 0 : thread.topic) ? at(thread.topic) : "[No thread title]"), communications, setCommunications, query: `part-of=Communication/${thread.id}`, sendMessage, onMessageReceived, inputDisabled, onError }) : null;
}
export {
  AddressDisplay,
  AddressInput,
  AnnotationInput,
  AppShell2 as AppShell,
  AsyncAutocomplete,
  AttachmentArrayDisplay,
  AttachmentArrayInput,
  AttachmentButton,
  AttachmentDisplay,
  AttachmentInput,
  BackboneElementDisplay,
  BackboneElementInput,
  BaseChat,
  CalendarInput,
  ChatModal,
  CheckboxFormSection,
  CodeInput,
  CodeableConceptDisplay,
  CodeableConceptInput,
  CodingDisplay,
  CodingInput,
  ContactDetailDisplay,
  ContactDetailInput,
  ContactPointDisplay,
  ContactPointInput,
  Container2 as Container,
  DateTimeInput,
  DefaultResourceTimeline,
  DescriptionList,
  DescriptionListEntry,
  DiagnosticReportDisplay,
  Document,
  ElementDefinitionInputSelector,
  ElementDefinitionTypeInput,
  EncounterTimeline,
  ErrorBoundary,
  FhirPathTable,
  Form,
  FormSection,
  Header,
  HumanNameDisplay,
  HumanNameInput,
  IdentifierDisplay,
  IdentifierInput,
  Loading,
  Logo,
  MeasureReportDisplay,
  MedplumLink,
  ge as MedplumProvider,
  MemoizedFhirPathTable,
  MemoizedSearchControl,
  MoneyDisplay,
  MoneyInput,
  Navbar,
  NoteDisplay,
  NotificationIcon,
  ObservationTable,
  OperationOutcomeAlert,
  Panel,
  PatientSummary,
  PatientTimeline,
  PlanDefinitionBuilder,
  QuantityDisplay,
  QuantityInput,
  QuestionnaireBuilder,
  QuestionnaireForm,
  QuestionnaireFormContext,
  QuestionnaireItemType,
  RangeDisplay,
  RangeInput,
  RatioInput,
  ReferenceDisplay,
  ReferenceInput,
  ReferenceRangeEditor,
  ReferenceRangeGroupEditor,
  RegisterForm,
  RequestGroupDisplay,
  ResourceArrayDisplay,
  ResourceArrayInput,
  ResourceAvatar,
  ResourceBadge,
  ResourceBlame,
  ResourceDiff,
  ResourceForm,
  ResourceHistoryTable,
  ResourceInput,
  ResourceName,
  ResourcePropertyDisplay,
  ResourcePropertyInput,
  ResourceTable,
  ResourceTimeline,
  Scheduler,
  SearchChangeEvent,
  SearchClickEvent,
  SearchControl,
  SearchFieldEditor,
  SearchFilterEditor,
  SearchLoadEvent,
  ServiceRequestTimeline,
  SignInForm,
  SmartAppLaunchLink,
  StatusBadge,
  ThreadChat,
  Timeline,
  TimelineItem,
  TimingInput,
  ValueSetAutocomplete,
  addDateFilterBetween,
  addField,
  addFilter,
  addLastMonthFilter,
  addMissingFilter,
  addNextMonthFilter,
  addThisMonthFilter,
  addTodayFilter,
  addTomorrowFilter,
  addYearToDateFilter,
  addYesterdayFilter,
  buildFieldNameString,
  buildInitialResponse,
  buildInitialResponseItem,
  clearFilters,
  clearFiltersOnField,
  convertIsoToLocal,
  convertLocalToIso,
  createScriptTag,
  deleteFilter,
  formatReferenceString,
  getErrorsForInput,
  getFieldDefinitions,
  getIssuesForExpression,
  getItemAnswerOptionValue,
  getItemEnableWhenValueAnswer,
  getItemInitialValue,
  getNewMultiSelectValues,
  getNumberOfPages,
  getOpString,
  getQuestionnaireItemReferenceFilter,
  getQuestionnaireItemReferenceTargetTypes,
  getRecaptcha,
  getResponseItemAnswerValue,
  getSearchOperators,
  getSortField,
  getValuePath,
  initRecaptcha,
  isChoiceQuestion,
  isQuestionEnabled,
  isSortDescending,
  isSupportedProfileStructureDefinition,
  parseForm,
  y as reactContext,
  renderValue,
  setFilters,
  setOffset,
  setPage,
  setPropertyValue,
  setQuestionnaireItemReferenceTargetTypes,
  setSort,
  sortByDateAndPriority,
  toggleSort,
  Oe as useCachedBinaryUrl,
  b as useMedplum,
  P2 as useMedplumContext,
  fe2 as useMedplumNavigate,
  me as useMedplumProfile,
  Me as usePrevious,
  Ue as useResource,
  ze as useSearch,
  Ae as useSearchOne,
  Qe as useSearchResources,
  Ze as useSubscription
};
/*! Bundled license information:

react-is/cjs/react-is.development.js:
  (** @license React v16.13.1
   * react-is.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

object-assign/index.js:
  (*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  *)

@medplum/react/dist/esm/index.mjs:
  (*! Bundled license information:
  
  @tabler/icons-react/dist/esm/defaultAttributes.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/createReactComponent.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconAdjustmentsHorizontal.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconAlertCircle.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconArrowDown.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconArrowRight.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconArrowUp.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconBleachOff.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconBleach.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconBoxMultiple.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconBracketsContain.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconBucketOff.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconBucket.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconCalendar.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconCheck.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconCheckbox.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconChevronDown.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconChevronUp.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconCircleMinus.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconCirclePlus.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconCloudUpload.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconColumns.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconCopy.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconCurrencyDollar.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconDots.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconEdit.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconEqualNot.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconEqual.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconFileAlert.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconFilePlus.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconFilter.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconGenderFemale.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconGenderMale.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconLogout.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconMathGreater.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconMathLower.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconMessage.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconPlus.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconRefresh.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconSearch.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconSettings.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconSortAscending.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconSortDescending.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconSquare.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconStethoscope.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconSwitchHorizontal.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconTableExport.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconTrash.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconUserSquare.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/icons/IconX.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  
  @tabler/icons-react/dist/esm/tabler-icons-react.mjs:
    (**
     * @license @tabler/icons-react v3.17.0 - MIT
     *
     * This source code is licensed under the MIT license.
     * See the LICENSE file in the root directory of this source tree.
     *)
  *)
*/
//# sourceMappingURL=@medplum_react.js.map
