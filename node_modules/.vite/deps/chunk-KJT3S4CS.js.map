{
  "version": 3,
  "sources": ["../../@medplum/core/src/fhirlexer/parse.ts", "../../@medplum/core/src/constants.ts", "../../@medplum/core/src/outcomes.ts", "../../@medplum/core/src/base-schema.ts", "../../@medplum/core/src/base-schema.json", "../../@medplum/core/src/typeschema/types.ts", "../../@medplum/core/src/typeschema/crawler.ts", "../../@medplum/core/src/typeschema/validation.ts", "../../@medplum/core/src/fhirpath/utils.ts", "../../@medplum/core/src/utils.ts", "../../@medplum/core/src/format.ts", "../../@medplum/core/src/types.ts", "../../@medplum/core/src/fhirpath/date.ts", "../../@medplum/core/src/fhirpath/functions.ts", "../../@medplum/core/src/fhirpath/atoms.ts", "../../@medplum/core/src/fhirlexer/tokenize.ts", "../../@medplum/core/src/fhirpath/tokenize.ts", "../../@medplum/core/src/fhirpath/parse.ts", "../../@medplum/core/src/search/details.ts", "../../@medplum/core/src/search/search.ts", "../../@medplum/core/src/search/match.ts", "../../@medplum/core/src/access.ts", "../../@medplum/core/src/base64.ts", "../../@medplum/core/src/crypto.ts", "../../@medplum/core/src/bundle.ts", "../../@medplum/core/src/cache.ts", "../../@medplum/core/src/contenttype.ts", "../../@medplum/core/src/eventtarget.ts", "../../@medplum/core/src/fhircast/index.ts", "../../@medplum/core/src/jwt.ts", "../../@medplum/core/src/keyvalue.ts", "../../@medplum/core/src/readablepromise.ts", "../../@medplum/core/src/storage.ts", "../../@medplum/core/src/websockets/reconnecting-websocket.ts", "../../@medplum/core/src/subscriptions/index.ts", "../../@medplum/core/src/client.ts", "../../@medplum/core/src/config.ts", "../../@medplum/core/src/elements-context.ts", "../../@medplum/core/src/typeschema/slices.ts", "../../@medplum/core/src/schema-crawler.ts", "../../@medplum/core/src/default-values.ts", "../../@medplum/core/src/fhirmapper/conceptmaptranslate.ts", "../../@medplum/core/src/fhirmapper/tokenize.ts", "../../@medplum/core/src/fhirmapper/parse.ts", "../../@medplum/core/src/fhirmapper/transform.ts", "../../@medplum/core/src/filter/tokenize.ts", "../../@medplum/core/src/filter/types.ts", "../../@medplum/core/src/filter/parse.ts", "../../@medplum/core/src/hl7.ts", "../../@medplum/core/src/logger.ts", "../../@medplum/core/src/schema.ts", "../../@medplum/core/src/sftp.ts", "../../@medplum/core/src/sql-on-fhir/eval.ts", "../../@medplum/core/src/version-utils.ts"],
  "sourcesContent": ["import { TypedValue } from '../types';\nimport { Token } from './tokenize';\n\nexport interface AtomContext {\n  parent?: AtomContext;\n  variables: Record<string, TypedValue>;\n}\nexport interface Atom {\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[];\n\n  toString(): string;\n}\n\nexport abstract class PrefixOperatorAtom implements Atom {\n  constructor(\n    public readonly operator: string,\n    public readonly child: Atom\n  ) {}\n\n  abstract eval(context: AtomContext, input: TypedValue[]): TypedValue[];\n\n  toString(): string {\n    return `${this.operator}(${this.child.toString()})`;\n  }\n}\n\nexport abstract class InfixOperatorAtom implements Atom {\n  constructor(\n    public readonly operator: string,\n    public readonly left: Atom,\n    public readonly right: Atom\n  ) {}\n\n  abstract eval(context: AtomContext, input: TypedValue[]): TypedValue[];\n\n  toString(): string {\n    return `${this.left.toString()} ${this.operator} ${this.right.toString()}`;\n  }\n}\n\nexport interface PrefixParselet {\n  parse(parser: Parser, token: Token): Atom;\n}\n\nexport interface InfixParselet {\n  precedence: number;\n  parse?(parser: Parser, left: Atom, token: Token): Atom;\n}\n\nexport class ParserBuilder {\n  private readonly prefixParselets: Record<string, PrefixParselet> = {};\n  private readonly infixParselets: Record<string, InfixParselet> = {};\n\n  public registerInfix(tokenType: string, parselet: InfixParselet): this {\n    this.infixParselets[tokenType] = parselet;\n    return this;\n  }\n\n  public registerPrefix(tokenType: string, parselet: PrefixParselet): this {\n    this.prefixParselets[tokenType] = parselet;\n    return this;\n  }\n\n  public prefix(tokenType: string, precedence: number, builder: (token: Token, right: Atom) => Atom): this {\n    return this.registerPrefix(tokenType, {\n      parse(parser, token) {\n        const right = parser.consumeAndParse(precedence);\n        return builder(token, right);\n      },\n    });\n  }\n\n  public infixLeft(\n    tokenType: string,\n    precedence: number,\n    builder: (left: Atom, token: Token, right: Atom) => Atom\n  ): this {\n    return this.registerInfix(tokenType, {\n      parse(parser, left, token) {\n        const right = parser.consumeAndParse(precedence);\n        return builder(left, token, right);\n      },\n      precedence,\n    });\n  }\n\n  public construct(input: Token[]): Parser {\n    return new Parser(input, this.prefixParselets, this.infixParselets);\n  }\n}\n\nexport class Parser {\n  private tokens: Token[];\n  private prefixParselets: Record<string, PrefixParselet>;\n  private infixParselets: Record<string, InfixParselet>;\n\n  constructor(\n    tokens: Token[],\n    prefixParselets: Record<string, PrefixParselet>,\n    infixParselets: Record<string, InfixParselet>\n  ) {\n    this.tokens = tokens;\n    this.prefixParselets = prefixParselets;\n    this.infixParselets = infixParselets;\n  }\n\n  hasMore(): boolean {\n    return this.tokens.length > 0;\n  }\n\n  match(expected: string): boolean {\n    const token = this.peek();\n    if (token?.id !== expected) {\n      return false;\n    }\n\n    this.consume();\n    return true;\n  }\n\n  consumeAndParse(precedence = Infinity): Atom {\n    const token = this.consume();\n    const prefix = this.prefixParselets[token.id];\n    if (!prefix) {\n      throw Error(\n        `Parse error at \"${token.value}\" (line ${token.line}, column ${token.column}). No matching prefix parselet.`\n      );\n    }\n\n    let left = prefix.parse(this, token);\n\n    while (precedence > this.getPrecedence()) {\n      const next = this.consume();\n      const infix = this.getInfixParselet(next) as InfixParselet;\n      left = (infix.parse as (parser: Parser, left: Atom, token: Token) => Atom)(this, left, next);\n    }\n\n    return left;\n  }\n\n  getPrecedence(): number {\n    const nextToken = this.peek();\n    if (!nextToken) {\n      return Infinity;\n    }\n    const parser = this.getInfixParselet(nextToken);\n    if (parser) {\n      return parser.precedence;\n    }\n    return Infinity;\n  }\n\n  consume(expectedId?: string, expectedValue?: string): Token {\n    if (!this.tokens.length) {\n      throw Error('Cant consume unknown more tokens.');\n    }\n    if (expectedId && this.peek()?.id !== expectedId) {\n      const actual = this.peek() as Token;\n      throw Error(\n        `Expected ${expectedId} but got \"${actual.id}\" (${actual.value}) at line ${actual.line} column ${actual.column}.`\n      );\n    }\n    if (expectedValue && this.peek()?.value !== expectedValue) {\n      const actual = this.peek() as Token;\n      throw Error(\n        `Expected \"${expectedValue}\" but got \"${actual.value}\" at line ${actual.line} column ${actual.column}.`\n      );\n    }\n    return this.tokens.shift() as Token;\n  }\n\n  peek(): Token | undefined {\n    return this.tokens.length > 0 ? this.tokens[0] : undefined;\n  }\n\n  removeComments(): void {\n    this.tokens = this.tokens.filter((t) => t.id !== 'Comment');\n  }\n\n  getInfixParselet(token: Token): InfixParselet | undefined {\n    return this.infixParselets[token.id === 'Symbol' ? token.value : token.id];\n  }\n}\n", "// Common terminology systems, taken from https://terminology.hl7.org/external_terminologies.html\nexport const UCUM = 'http://unitsofmeasure.org';\nexport const LOINC = 'http://loinc.org';\nexport const SNOMED = 'http://snomed.info/sct';\nexport const RXNORM = 'http://www.nlm.nih.gov/research/umls/rxnorm';\nexport const CPT = 'http://www.ama-assn.org/go/cpt';\nexport const ICD10 = 'http://hl7.org/fhir/sid/icd-10';\nexport const NDC = 'http://hl7.org/fhir/sid/ndc';\n\n// common http-based origins useful for avoiding false-positives about preferring https over http,\n// e.g. https://rules.sonarsource.com/javascript/type/Security%20Hotspot/RSPEC-5332/\nexport const HTTP_HL7_ORG = 'http://hl7.org';\nexport const HTTP_TERMINOLOGY_HL7_ORG = 'http://terminology.hl7.org';\n", "import { OperationOutcome, OperationOutcomeIssue } from '@medplum/fhirtypes';\nimport { Constraint } from './typeschema/types';\n\nconst OK_ID = 'ok';\nconst CREATED_ID = 'created';\nconst GONE_ID = 'gone';\nconst NOT_MODIFIED_ID = 'not-modified';\nconst NOT_FOUND_ID = 'not-found';\nconst CONFLICT_ID = 'conflict';\nconst UNAUTHORIZED_ID = 'unauthorized';\nconst FORBIDDEN_ID = 'forbidden';\nconst PRECONDITION_FAILED_ID = 'precondition-failed';\nconst MULTIPLE_MATCHES_ID = 'multiple-matches';\nconst TOO_MANY_REQUESTS_ID = 'too-many-requests';\nconst ACCEPTED_ID = 'accepted';\nconst SERVER_TIMEOUT_ID = 'server-timeout';\n\nexport const allOk: OperationOutcome = {\n  resourceType: 'OperationOutcome',\n  id: OK_ID,\n  issue: [\n    {\n      severity: 'information',\n      code: 'informational',\n      details: {\n        text: 'All OK',\n      },\n    },\n  ],\n};\n\nexport const created: OperationOutcome = {\n  resourceType: 'OperationOutcome',\n  id: CREATED_ID,\n  issue: [\n    {\n      severity: 'information',\n      code: 'informational',\n      details: {\n        text: 'Created',\n      },\n    },\n  ],\n};\n\nexport const notModified: OperationOutcome = {\n  resourceType: 'OperationOutcome',\n  id: NOT_MODIFIED_ID,\n  issue: [\n    {\n      severity: 'information',\n      code: 'informational',\n      details: {\n        text: 'Not Modified',\n      },\n    },\n  ],\n};\n\nexport const notFound: OperationOutcome = {\n  resourceType: 'OperationOutcome',\n  id: NOT_FOUND_ID,\n  issue: [\n    {\n      severity: 'error',\n      code: 'not-found',\n      details: {\n        text: 'Not found',\n      },\n    },\n  ],\n};\n\nexport const unauthorized: OperationOutcome = {\n  resourceType: 'OperationOutcome',\n  id: UNAUTHORIZED_ID,\n  issue: [\n    {\n      severity: 'error',\n      code: 'login',\n      details: {\n        text: 'Unauthorized',\n      },\n    },\n  ],\n};\n\nexport const unauthorizedTokenExpired: OperationOutcome = {\n  ...unauthorized,\n  issue: [\n    ...unauthorized.issue,\n    {\n      severity: 'error',\n      code: 'expired',\n      details: {\n        text: 'Token expired',\n      },\n    },\n  ],\n};\n\nexport const unauthorizedTokenAudience: OperationOutcome = {\n  ...unauthorized,\n  issue: [\n    ...unauthorized.issue,\n    {\n      severity: 'error',\n      code: 'invalid',\n      details: {\n        text: 'Token not issued for this audience',\n      },\n    },\n  ],\n};\n\nexport const forbidden: OperationOutcome = {\n  resourceType: 'OperationOutcome',\n  id: FORBIDDEN_ID,\n  issue: [\n    {\n      severity: 'error',\n      code: 'forbidden',\n      details: {\n        text: 'Forbidden',\n      },\n    },\n  ],\n};\n\nexport const gone: OperationOutcome = {\n  resourceType: 'OperationOutcome',\n  id: GONE_ID,\n  issue: [\n    {\n      severity: 'error',\n      code: 'deleted',\n      details: {\n        text: 'Gone',\n      },\n    },\n  ],\n};\n\nexport const preconditionFailed: OperationOutcome = {\n  resourceType: 'OperationOutcome',\n  id: PRECONDITION_FAILED_ID,\n  issue: [\n    {\n      severity: 'error',\n      code: 'processing',\n      details: {\n        text: 'Precondition Failed',\n      },\n    },\n  ],\n};\n\nexport const multipleMatches: OperationOutcome = {\n  resourceType: 'OperationOutcome',\n  id: MULTIPLE_MATCHES_ID,\n  issue: [\n    {\n      severity: 'error',\n      code: 'multiple-matches',\n      details: {\n        text: 'Multiple resources found matching condition',\n      },\n    },\n  ],\n};\n\nexport const tooManyRequests: OperationOutcome = {\n  resourceType: 'OperationOutcome',\n  id: TOO_MANY_REQUESTS_ID,\n  issue: [\n    {\n      severity: 'error',\n      code: 'throttled',\n      details: {\n        text: 'Too Many Requests',\n      },\n    },\n  ],\n};\n\nexport function accepted(location: string): OperationOutcome {\n  return {\n    resourceType: 'OperationOutcome',\n    id: ACCEPTED_ID,\n    issue: [\n      {\n        severity: 'information',\n        code: 'informational',\n        details: {\n          text: 'Accepted',\n        },\n        diagnostics: location,\n      },\n    ],\n  };\n}\n\nexport function badRequest(details: string, expression?: string): OperationOutcome {\n  return {\n    resourceType: 'OperationOutcome',\n    issue: [\n      {\n        severity: 'error',\n        code: 'invalid',\n        details: {\n          text: details,\n        },\n        ...(expression ? { expression: [expression] } : undefined),\n      },\n    ],\n  };\n}\n\nexport function conflict(details: string, code?: string): OperationOutcome {\n  return {\n    resourceType: 'OperationOutcome',\n    id: CONFLICT_ID,\n    issue: [\n      {\n        severity: 'error',\n        code: 'conflict',\n        details: {\n          coding: code ? [{ code }] : undefined,\n          text: details,\n        },\n      },\n    ],\n  };\n}\n\nexport function validationError(details: string): OperationOutcome {\n  return {\n    resourceType: 'OperationOutcome',\n    issue: [\n      {\n        severity: 'error',\n        code: 'structure',\n        details: {\n          text: details,\n        },\n      },\n    ],\n  };\n}\n\nexport function serverError(err: Error): OperationOutcome {\n  return {\n    resourceType: 'OperationOutcome',\n    issue: [\n      {\n        severity: 'error',\n        code: 'exception',\n        details: {\n          text: 'Internal server error',\n        },\n        diagnostics: err.toString(),\n      },\n    ],\n  };\n}\n\nexport function serverTimeout(msg?: string): OperationOutcome {\n  return {\n    resourceType: 'OperationOutcome',\n    id: SERVER_TIMEOUT_ID,\n    issue: [\n      {\n        severity: 'error',\n        code: 'timeout',\n        details: {\n          text: msg ?? 'Server timeout',\n        },\n      },\n    ],\n  };\n}\n\nexport function isOperationOutcome(value: unknown): value is OperationOutcome {\n  return typeof value === 'object' && value !== null && (value as any).resourceType === 'OperationOutcome';\n}\n\nexport function isOk(outcome: OperationOutcome): boolean {\n  return (\n    outcome.id === OK_ID || outcome.id === CREATED_ID || outcome.id === NOT_MODIFIED_ID || outcome.id === ACCEPTED_ID\n  );\n}\n\nexport function isCreated(outcome: OperationOutcome): boolean {\n  return outcome.id === CREATED_ID;\n}\n\nexport function isAccepted(outcome: OperationOutcome): boolean {\n  return outcome.id === ACCEPTED_ID;\n}\n\nexport function isNotFound(outcome: OperationOutcome): boolean {\n  return outcome.id === NOT_FOUND_ID;\n}\n\nexport function isConflict(outcome: OperationOutcome): boolean {\n  return outcome.id === CONFLICT_ID;\n}\n\nexport function isGone(outcome: OperationOutcome): boolean {\n  return outcome.id === GONE_ID;\n}\n\nexport function isUnauthenticated(outcome: OperationOutcome): boolean {\n  return outcome.id === UNAUTHORIZED_ID;\n}\n\nexport function getStatus(outcome: OperationOutcome): number {\n  switch (outcome.id) {\n    case OK_ID:\n      return 200;\n    case CREATED_ID:\n      return 201;\n    case ACCEPTED_ID:\n      return 202;\n    case NOT_MODIFIED_ID:\n      return 304;\n    case UNAUTHORIZED_ID:\n      return 401;\n    case FORBIDDEN_ID:\n      return 403;\n    case NOT_FOUND_ID:\n      return 404;\n    case CONFLICT_ID:\n      return 409;\n    case GONE_ID:\n      return 410;\n    case PRECONDITION_FAILED_ID:\n    case MULTIPLE_MATCHES_ID:\n      return 412;\n    case TOO_MANY_REQUESTS_ID:\n      return 429;\n    case SERVER_TIMEOUT_ID:\n      return 504;\n    default:\n      return outcome.issue?.[0]?.code === 'exception' ? 500 : 400;\n  }\n}\n\n/**\n * Asserts that the operation completed successfully and that the resource is defined.\n * @param outcome - The operation outcome.\n * @param resource - The resource that may or may not have been returned.\n */\nexport function assertOk<T>(outcome: OperationOutcome, resource: T | undefined): asserts resource is T {\n  if (!isOk(outcome) || resource === undefined) {\n    throw new OperationOutcomeError(outcome);\n  }\n}\n\nexport class OperationOutcomeError extends Error {\n  readonly outcome: OperationOutcome;\n\n  constructor(outcome: OperationOutcome, cause?: unknown) {\n    super(operationOutcomeToString(outcome));\n    this.outcome = outcome;\n    this.cause = cause;\n  }\n}\n\n/**\n * Normalizes an error object into an OperationOutcome.\n * @param error - The error value which could be a string, Error, OperationOutcome, or other unknown type.\n * @returns The normalized OperationOutcome.\n */\nexport function normalizeOperationOutcome(error: unknown): OperationOutcome {\n  if (error instanceof OperationOutcomeError) {\n    return error.outcome;\n  }\n  if (isOperationOutcome(error)) {\n    return error;\n  }\n  return badRequest(normalizeErrorString(error));\n}\n\n/**\n * Normalizes an error object into a displayable error string.\n * @param error - The error value which could be a string, Error, OperationOutcome, or other unknown type.\n * @returns A display string for the error.\n */\nexport function normalizeErrorString(error: unknown): string {\n  if (!error) {\n    return 'Unknown error';\n  }\n  if (typeof error === 'string') {\n    return error;\n  }\n  if (error instanceof Error) {\n    return error.message;\n  }\n  if (isOperationOutcome(error)) {\n    return operationOutcomeToString(error);\n  }\n  if (typeof error === 'object' && 'code' in error && typeof error.code === 'string') {\n    return error.code;\n  }\n  return JSON.stringify(error);\n}\n\n/**\n * Returns a string represenation of the operation outcome.\n * @param outcome - The operation outcome.\n * @returns The string representation of the operation outcome.\n */\nexport function operationOutcomeToString(outcome: OperationOutcome): string {\n  const strs = outcome.issue?.map(operationOutcomeIssueToString) ?? [];\n  return strs.length > 0 ? strs.join('; ') : 'Unknown error';\n}\n\n/**\n * Returns a string represenation of the operation outcome issue.\n * @param issue - The operation outcome issue.\n * @returns The string representation of the operation outcome issue.\n */\nexport function operationOutcomeIssueToString(issue: OperationOutcomeIssue): string {\n  let issueStr;\n  if (issue.details?.text) {\n    if (issue.diagnostics) {\n      issueStr = `${issue.details.text} (${issue.diagnostics})`;\n    } else {\n      issueStr = issue.details.text;\n    }\n  } else if (issue.diagnostics) {\n    issueStr = issue.diagnostics;\n  } else {\n    issueStr = 'Unknown error';\n  }\n  if (issue.expression?.length) {\n    issueStr += ` (${issue.expression.join(', ')})`;\n  }\n  return issueStr;\n}\n\nexport type IssueSeverity = 'error' | 'fatal' | 'warning' | 'information';\nexport type IssueType = 'structure' | 'invariant' | 'processing';\n\nexport function createOperationOutcomeIssue(\n  severity: IssueSeverity,\n  code: IssueType,\n  message: string,\n  path: string,\n  data?: Record<string, any>\n): OperationOutcomeIssue {\n  const issue: OperationOutcomeIssue = {\n    severity,\n    code,\n    details: {\n      text: message,\n    },\n    expression: [path],\n  };\n  if (data) {\n    issue.diagnostics = JSON.stringify(data);\n  }\n  return issue;\n}\n\nexport function createStructureIssue(expression: string, details: string): OperationOutcomeIssue {\n  return createOperationOutcomeIssue('error', 'structure', details, expression);\n}\n\nexport function createConstraintIssue(expression: string, constraint: Constraint): OperationOutcomeIssue {\n  return createOperationOutcomeIssue(\n    'error',\n    'invariant',\n    `Constraint ${constraint.key} not met: ${constraint.description}`,\n    expression,\n    {\n      fhirpath: constraint.expression,\n    }\n  );\n}\n\nexport function createProcessingIssue(\n  expression: string,\n  message: string,\n  err: Error,\n  data?: Record<string, any>\n): OperationOutcomeIssue {\n  return createOperationOutcomeIssue('error', 'processing', message, expression, { ...data, error: err });\n}\n", "import { InternalSchemaElement, InternalTypeSchema } from './typeschema/types';\n\nexport type BaseSchema = Record<string, { elements: Record<string, Partial<InternalSchemaElement>> }>;\n\nconst normalizedTypes: Record<string, string> = {\n  'http://hl7.org/fhirpath/System.String': 'string',\n};\n\nexport function compressElement(element: InternalSchemaElement): Partial<InternalSchemaElement> {\n  // For each property, only keep \"min\", \"max\", and \"type\"\n  // Only keep \"min\" if not 0\n  // Only keep \"max\" if not 1\n  const outputPropertySchema: Partial<InternalSchemaElement> = {};\n  if (element.min !== 0) {\n    outputPropertySchema.min = element.min;\n  }\n\n  if (element.max !== 1 && Number.isFinite(element.max)) {\n    outputPropertySchema.max = element.max;\n  } else if (element.max === Number.POSITIVE_INFINITY) {\n    outputPropertySchema.max = Number.MAX_SAFE_INTEGER;\n  }\n\n  outputPropertySchema.type = element.type?.map((t) => ({\n    ...t,\n    extension: undefined,\n    code: normalizedTypes[t.code] ?? t.code,\n  }));\n  return outputPropertySchema;\n}\n\nexport function inflateElement(path: string, partial: Partial<InternalSchemaElement>): InternalSchemaElement {\n  const max = partial.max && partial.max === Number.MAX_SAFE_INTEGER ? Number.POSITIVE_INFINITY : partial.max;\n  return {\n    path,\n    description: '',\n    type: partial.type ?? [],\n    min: partial.min ?? 0,\n    max: max ?? 1,\n    isArray: !!max && max > 1,\n    constraints: [],\n  };\n}\n\nexport type DataTypesMap = { [type: string]: InternalTypeSchema };\n\nexport function inflateBaseSchema(base: BaseSchema): DataTypesMap {\n  const output: DataTypesMap = Object.create(null);\n  for (const [key, schema] of Object.entries(base)) {\n    output[key] = {\n      name: key,\n      type: key,\n      path: key,\n      elements: Object.fromEntries(\n        Object.entries(schema.elements).map(([property, partial]) => [property, inflateElement(property, partial)])\n      ),\n      constraints: [],\n      innerTypes: [],\n    };\n  }\n  return output;\n}\n", "{\n  \"Element\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      }\n    }\n  },\n  \"BackboneElement\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"modifierExtension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      }\n    }\n  },\n  \"Address\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"use\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"type\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"text\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"line\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"city\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"district\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"state\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"postalCode\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"country\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"period\": {\n        \"type\": [\n          {\n            \"code\": \"Period\"\n          }\n        ]\n      }\n    }\n  },\n  \"Age\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"value\": {\n        \"type\": [\n          {\n            \"code\": \"decimal\"\n          }\n        ]\n      },\n      \"comparator\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"unit\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"system\": {\n        \"type\": [\n          {\n            \"code\": \"uri\"\n          }\n        ]\n      },\n      \"code\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      }\n    }\n  },\n  \"Annotation\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"author[x]\": {\n        \"type\": [\n          {\n            \"code\": \"Reference\",\n            \"targetProfile\": [\n              \"http://hl7.org/fhir/StructureDefinition/Practitioner\",\n              \"http://hl7.org/fhir/StructureDefinition/Patient\",\n              \"http://hl7.org/fhir/StructureDefinition/RelatedPerson\",\n              \"http://hl7.org/fhir/StructureDefinition/Organization\"\n            ]\n          },\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"time\": {\n        \"type\": [\n          {\n            \"code\": \"dateTime\"\n          }\n        ]\n      },\n      \"text\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"markdown\"\n          }\n        ]\n      }\n    }\n  },\n  \"Attachment\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"contentType\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"language\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"data\": {\n        \"type\": [\n          {\n            \"code\": \"base64Binary\"\n          }\n        ]\n      },\n      \"url\": {\n        \"type\": [\n          {\n            \"code\": \"url\"\n          }\n        ]\n      },\n      \"size\": {\n        \"type\": [\n          {\n            \"code\": \"unsignedInt\"\n          }\n        ]\n      },\n      \"hash\": {\n        \"type\": [\n          {\n            \"code\": \"base64Binary\"\n          }\n        ]\n      },\n      \"title\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"creation\": {\n        \"type\": [\n          {\n            \"code\": \"dateTime\"\n          }\n        ]\n      }\n    }\n  },\n  \"CodeableConcept\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"coding\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Coding\"\n          }\n        ]\n      },\n      \"text\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      }\n    }\n  },\n  \"Coding\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"system\": {\n        \"type\": [\n          {\n            \"code\": \"uri\"\n          }\n        ]\n      },\n      \"version\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"code\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"display\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"userSelected\": {\n        \"type\": [\n          {\n            \"code\": \"boolean\"\n          }\n        ]\n      }\n    }\n  },\n  \"ContactDetail\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"name\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"telecom\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"ContactPoint\"\n          }\n        ]\n      }\n    }\n  },\n  \"ContactPoint\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"system\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"value\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"use\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"rank\": {\n        \"type\": [\n          {\n            \"code\": \"positiveInt\"\n          }\n        ]\n      },\n      \"period\": {\n        \"type\": [\n          {\n            \"code\": \"Period\"\n          }\n        ]\n      }\n    }\n  },\n  \"Contributor\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"type\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"name\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"contact\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"ContactDetail\"\n          }\n        ]\n      }\n    }\n  },\n  \"Count\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"value\": {\n        \"type\": [\n          {\n            \"code\": \"decimal\"\n          }\n        ]\n      },\n      \"comparator\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"unit\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"system\": {\n        \"type\": [\n          {\n            \"code\": \"uri\"\n          }\n        ]\n      },\n      \"code\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      }\n    }\n  },\n  \"DataRequirement\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"type\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"profile\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"canonical\",\n            \"targetProfile\": [\"http://hl7.org/fhir/StructureDefinition/StructureDefinition\"]\n          }\n        ]\n      },\n      \"subject[x]\": {\n        \"type\": [\n          {\n            \"code\": \"CodeableConcept\"\n          },\n          {\n            \"code\": \"Reference\",\n            \"targetProfile\": [\"http://hl7.org/fhir/StructureDefinition/Group\"]\n          }\n        ]\n      },\n      \"mustSupport\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"codeFilter\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"DataRequirementCodeFilter\"\n          }\n        ]\n      },\n      \"dateFilter\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"DataRequirementDateFilter\"\n          }\n        ]\n      },\n      \"limit\": {\n        \"type\": [\n          {\n            \"code\": \"positiveInt\"\n          }\n        ]\n      },\n      \"sort\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"DataRequirementSort\"\n          }\n        ]\n      }\n    }\n  },\n  \"DataRequirementCodeFilter\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"path\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"searchParam\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"valueSet\": {\n        \"type\": [\n          {\n            \"code\": \"canonical\",\n            \"targetProfile\": [\"http://hl7.org/fhir/StructureDefinition/ValueSet\"]\n          }\n        ]\n      },\n      \"code\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Coding\"\n          }\n        ]\n      }\n    }\n  },\n  \"DataRequirementDateFilter\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"path\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"searchParam\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"value[x]\": {\n        \"type\": [\n          {\n            \"code\": \"dateTime\"\n          },\n          {\n            \"code\": \"Period\"\n          },\n          {\n            \"code\": \"Duration\"\n          }\n        ]\n      }\n    }\n  },\n  \"DataRequirementSort\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"path\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"direction\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      }\n    }\n  },\n  \"Distance\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"value\": {\n        \"type\": [\n          {\n            \"code\": \"decimal\"\n          }\n        ]\n      },\n      \"comparator\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"unit\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"system\": {\n        \"type\": [\n          {\n            \"code\": \"uri\"\n          }\n        ]\n      },\n      \"code\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      }\n    }\n  },\n  \"Dosage\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"modifierExtension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"sequence\": {\n        \"type\": [\n          {\n            \"code\": \"integer\"\n          }\n        ]\n      },\n      \"text\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"additionalInstruction\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"CodeableConcept\"\n          }\n        ]\n      },\n      \"patientInstruction\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"timing\": {\n        \"type\": [\n          {\n            \"code\": \"Timing\"\n          }\n        ]\n      },\n      \"asNeeded[x]\": {\n        \"type\": [\n          {\n            \"code\": \"boolean\"\n          },\n          {\n            \"code\": \"CodeableConcept\"\n          }\n        ]\n      },\n      \"site\": {\n        \"type\": [\n          {\n            \"code\": \"CodeableConcept\"\n          }\n        ]\n      },\n      \"route\": {\n        \"type\": [\n          {\n            \"code\": \"CodeableConcept\"\n          }\n        ]\n      },\n      \"method\": {\n        \"type\": [\n          {\n            \"code\": \"CodeableConcept\"\n          }\n        ]\n      },\n      \"doseAndRate\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"DosageDoseAndRate\"\n          }\n        ]\n      },\n      \"maxDosePerPeriod\": {\n        \"type\": [\n          {\n            \"code\": \"Ratio\"\n          }\n        ]\n      },\n      \"maxDosePerAdministration\": {\n        \"type\": [\n          {\n            \"code\": \"Quantity\",\n            \"profile\": [\"http://hl7.org/fhir/StructureDefinition/SimpleQuantity\"]\n          }\n        ]\n      },\n      \"maxDosePerLifetime\": {\n        \"type\": [\n          {\n            \"code\": \"Quantity\",\n            \"profile\": [\"http://hl7.org/fhir/StructureDefinition/SimpleQuantity\"]\n          }\n        ]\n      }\n    }\n  },\n  \"DosageDoseAndRate\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"type\": {\n        \"type\": [\n          {\n            \"code\": \"CodeableConcept\"\n          }\n        ]\n      },\n      \"dose[x]\": {\n        \"type\": [\n          {\n            \"code\": \"Range\"\n          },\n          {\n            \"code\": \"Quantity\",\n            \"profile\": [\"http://hl7.org/fhir/StructureDefinition/SimpleQuantity\"]\n          }\n        ]\n      },\n      \"rate[x]\": {\n        \"type\": [\n          {\n            \"code\": \"Ratio\"\n          },\n          {\n            \"code\": \"Range\"\n          },\n          {\n            \"code\": \"Quantity\",\n            \"profile\": [\"http://hl7.org/fhir/StructureDefinition/SimpleQuantity\"]\n          }\n        ]\n      }\n    }\n  },\n  \"Duration\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"value\": {\n        \"type\": [\n          {\n            \"code\": \"decimal\"\n          }\n        ]\n      },\n      \"comparator\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"unit\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"system\": {\n        \"type\": [\n          {\n            \"code\": \"uri\"\n          }\n        ]\n      },\n      \"code\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      }\n    }\n  },\n  \"ElementDefinition\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"modifierExtension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"path\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"representation\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"sliceName\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"sliceIsConstraining\": {\n        \"type\": [\n          {\n            \"code\": \"boolean\"\n          }\n        ]\n      },\n      \"label\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"code\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Coding\"\n          }\n        ]\n      },\n      \"slicing\": {\n        \"type\": [\n          {\n            \"code\": \"ElementDefinitionSlicing\"\n          }\n        ]\n      },\n      \"short\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"definition\": {\n        \"type\": [\n          {\n            \"code\": \"markdown\"\n          }\n        ]\n      },\n      \"comment\": {\n        \"type\": [\n          {\n            \"code\": \"markdown\"\n          }\n        ]\n      },\n      \"requirements\": {\n        \"type\": [\n          {\n            \"code\": \"markdown\"\n          }\n        ]\n      },\n      \"alias\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"min\": {\n        \"type\": [\n          {\n            \"code\": \"unsignedInt\"\n          }\n        ]\n      },\n      \"max\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"base\": {\n        \"type\": [\n          {\n            \"code\": \"ElementDefinitionBase\"\n          }\n        ]\n      },\n      \"contentReference\": {\n        \"type\": [\n          {\n            \"code\": \"uri\"\n          }\n        ]\n      },\n      \"type\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"ElementDefinitionType\"\n          }\n        ]\n      },\n      \"defaultValue[x]\": {\n        \"type\": [\n          {\n            \"code\": \"base64Binary\"\n          },\n          {\n            \"code\": \"boolean\"\n          },\n          {\n            \"code\": \"canonical\"\n          },\n          {\n            \"code\": \"code\"\n          },\n          {\n            \"code\": \"date\"\n          },\n          {\n            \"code\": \"dateTime\"\n          },\n          {\n            \"code\": \"decimal\"\n          },\n          {\n            \"code\": \"id\"\n          },\n          {\n            \"code\": \"instant\"\n          },\n          {\n            \"code\": \"integer\"\n          },\n          {\n            \"code\": \"markdown\"\n          },\n          {\n            \"code\": \"oid\"\n          },\n          {\n            \"code\": \"positiveInt\"\n          },\n          {\n            \"code\": \"string\"\n          },\n          {\n            \"code\": \"time\"\n          },\n          {\n            \"code\": \"unsignedInt\"\n          },\n          {\n            \"code\": \"uri\"\n          },\n          {\n            \"code\": \"url\"\n          },\n          {\n            \"code\": \"uuid\"\n          },\n          {\n            \"code\": \"Address\"\n          },\n          {\n            \"code\": \"Age\"\n          },\n          {\n            \"code\": \"Annotation\"\n          },\n          {\n            \"code\": \"Attachment\"\n          },\n          {\n            \"code\": \"CodeableConcept\"\n          },\n          {\n            \"code\": \"Coding\"\n          },\n          {\n            \"code\": \"ContactPoint\"\n          },\n          {\n            \"code\": \"Count\"\n          },\n          {\n            \"code\": \"Distance\"\n          },\n          {\n            \"code\": \"Duration\"\n          },\n          {\n            \"code\": \"HumanName\"\n          },\n          {\n            \"code\": \"Identifier\"\n          },\n          {\n            \"code\": \"Money\"\n          },\n          {\n            \"code\": \"Period\"\n          },\n          {\n            \"code\": \"Quantity\"\n          },\n          {\n            \"code\": \"Range\"\n          },\n          {\n            \"code\": \"Ratio\"\n          },\n          {\n            \"code\": \"Reference\"\n          },\n          {\n            \"code\": \"SampledData\"\n          },\n          {\n            \"code\": \"Signature\"\n          },\n          {\n            \"code\": \"Timing\"\n          },\n          {\n            \"code\": \"ContactDetail\"\n          },\n          {\n            \"code\": \"Contributor\"\n          },\n          {\n            \"code\": \"DataRequirement\"\n          },\n          {\n            \"code\": \"Expression\"\n          },\n          {\n            \"code\": \"ParameterDefinition\"\n          },\n          {\n            \"code\": \"RelatedArtifact\"\n          },\n          {\n            \"code\": \"TriggerDefinition\"\n          },\n          {\n            \"code\": \"UsageContext\"\n          },\n          {\n            \"code\": \"Dosage\"\n          },\n          {\n            \"code\": \"Meta\"\n          }\n        ]\n      },\n      \"meaningWhenMissing\": {\n        \"type\": [\n          {\n            \"code\": \"markdown\"\n          }\n        ]\n      },\n      \"orderMeaning\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"fixed[x]\": {\n        \"type\": [\n          {\n            \"code\": \"base64Binary\"\n          },\n          {\n            \"code\": \"boolean\"\n          },\n          {\n            \"code\": \"canonical\"\n          },\n          {\n            \"code\": \"code\"\n          },\n          {\n            \"code\": \"date\"\n          },\n          {\n            \"code\": \"dateTime\"\n          },\n          {\n            \"code\": \"decimal\"\n          },\n          {\n            \"code\": \"id\"\n          },\n          {\n            \"code\": \"instant\"\n          },\n          {\n            \"code\": \"integer\"\n          },\n          {\n            \"code\": \"markdown\"\n          },\n          {\n            \"code\": \"oid\"\n          },\n          {\n            \"code\": \"positiveInt\"\n          },\n          {\n            \"code\": \"string\"\n          },\n          {\n            \"code\": \"time\"\n          },\n          {\n            \"code\": \"unsignedInt\"\n          },\n          {\n            \"code\": \"uri\"\n          },\n          {\n            \"code\": \"url\"\n          },\n          {\n            \"code\": \"uuid\"\n          },\n          {\n            \"code\": \"Address\"\n          },\n          {\n            \"code\": \"Age\"\n          },\n          {\n            \"code\": \"Annotation\"\n          },\n          {\n            \"code\": \"Attachment\"\n          },\n          {\n            \"code\": \"CodeableConcept\"\n          },\n          {\n            \"code\": \"Coding\"\n          },\n          {\n            \"code\": \"ContactPoint\"\n          },\n          {\n            \"code\": \"Count\"\n          },\n          {\n            \"code\": \"Distance\"\n          },\n          {\n            \"code\": \"Duration\"\n          },\n          {\n            \"code\": \"HumanName\"\n          },\n          {\n            \"code\": \"Identifier\"\n          },\n          {\n            \"code\": \"Money\"\n          },\n          {\n            \"code\": \"Period\"\n          },\n          {\n            \"code\": \"Quantity\"\n          },\n          {\n            \"code\": \"Range\"\n          },\n          {\n            \"code\": \"Ratio\"\n          },\n          {\n            \"code\": \"Reference\"\n          },\n          {\n            \"code\": \"SampledData\"\n          },\n          {\n            \"code\": \"Signature\"\n          },\n          {\n            \"code\": \"Timing\"\n          },\n          {\n            \"code\": \"ContactDetail\"\n          },\n          {\n            \"code\": \"Contributor\"\n          },\n          {\n            \"code\": \"DataRequirement\"\n          },\n          {\n            \"code\": \"Expression\"\n          },\n          {\n            \"code\": \"ParameterDefinition\"\n          },\n          {\n            \"code\": \"RelatedArtifact\"\n          },\n          {\n            \"code\": \"TriggerDefinition\"\n          },\n          {\n            \"code\": \"UsageContext\"\n          },\n          {\n            \"code\": \"Dosage\"\n          },\n          {\n            \"code\": \"Meta\"\n          }\n        ]\n      },\n      \"pattern[x]\": {\n        \"type\": [\n          {\n            \"code\": \"base64Binary\"\n          },\n          {\n            \"code\": \"boolean\"\n          },\n          {\n            \"code\": \"canonical\"\n          },\n          {\n            \"code\": \"code\"\n          },\n          {\n            \"code\": \"date\"\n          },\n          {\n            \"code\": \"dateTime\"\n          },\n          {\n            \"code\": \"decimal\"\n          },\n          {\n            \"code\": \"id\"\n          },\n          {\n            \"code\": \"instant\"\n          },\n          {\n            \"code\": \"integer\"\n          },\n          {\n            \"code\": \"markdown\"\n          },\n          {\n            \"code\": \"oid\"\n          },\n          {\n            \"code\": \"positiveInt\"\n          },\n          {\n            \"code\": \"string\"\n          },\n          {\n            \"code\": \"time\"\n          },\n          {\n            \"code\": \"unsignedInt\"\n          },\n          {\n            \"code\": \"uri\"\n          },\n          {\n            \"code\": \"url\"\n          },\n          {\n            \"code\": \"uuid\"\n          },\n          {\n            \"code\": \"Address\"\n          },\n          {\n            \"code\": \"Age\"\n          },\n          {\n            \"code\": \"Annotation\"\n          },\n          {\n            \"code\": \"Attachment\"\n          },\n          {\n            \"code\": \"CodeableConcept\"\n          },\n          {\n            \"code\": \"Coding\"\n          },\n          {\n            \"code\": \"ContactPoint\"\n          },\n          {\n            \"code\": \"Count\"\n          },\n          {\n            \"code\": \"Distance\"\n          },\n          {\n            \"code\": \"Duration\"\n          },\n          {\n            \"code\": \"HumanName\"\n          },\n          {\n            \"code\": \"Identifier\"\n          },\n          {\n            \"code\": \"Money\"\n          },\n          {\n            \"code\": \"Period\"\n          },\n          {\n            \"code\": \"Quantity\"\n          },\n          {\n            \"code\": \"Range\"\n          },\n          {\n            \"code\": \"Ratio\"\n          },\n          {\n            \"code\": \"Reference\"\n          },\n          {\n            \"code\": \"SampledData\"\n          },\n          {\n            \"code\": \"Signature\"\n          },\n          {\n            \"code\": \"Timing\"\n          },\n          {\n            \"code\": \"ContactDetail\"\n          },\n          {\n            \"code\": \"Contributor\"\n          },\n          {\n            \"code\": \"DataRequirement\"\n          },\n          {\n            \"code\": \"Expression\"\n          },\n          {\n            \"code\": \"ParameterDefinition\"\n          },\n          {\n            \"code\": \"RelatedArtifact\"\n          },\n          {\n            \"code\": \"TriggerDefinition\"\n          },\n          {\n            \"code\": \"UsageContext\"\n          },\n          {\n            \"code\": \"Dosage\"\n          },\n          {\n            \"code\": \"Meta\"\n          }\n        ]\n      },\n      \"example\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"ElementDefinitionExample\"\n          }\n        ]\n      },\n      \"minValue[x]\": {\n        \"type\": [\n          {\n            \"code\": \"date\"\n          },\n          {\n            \"code\": \"dateTime\"\n          },\n          {\n            \"code\": \"instant\"\n          },\n          {\n            \"code\": \"time\"\n          },\n          {\n            \"code\": \"decimal\"\n          },\n          {\n            \"code\": \"integer\"\n          },\n          {\n            \"code\": \"positiveInt\"\n          },\n          {\n            \"code\": \"unsignedInt\"\n          },\n          {\n            \"code\": \"Quantity\"\n          }\n        ]\n      },\n      \"maxValue[x]\": {\n        \"type\": [\n          {\n            \"code\": \"date\"\n          },\n          {\n            \"code\": \"dateTime\"\n          },\n          {\n            \"code\": \"instant\"\n          },\n          {\n            \"code\": \"time\"\n          },\n          {\n            \"code\": \"decimal\"\n          },\n          {\n            \"code\": \"integer\"\n          },\n          {\n            \"code\": \"positiveInt\"\n          },\n          {\n            \"code\": \"unsignedInt\"\n          },\n          {\n            \"code\": \"Quantity\"\n          }\n        ]\n      },\n      \"maxLength\": {\n        \"type\": [\n          {\n            \"code\": \"integer\"\n          }\n        ]\n      },\n      \"condition\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"id\"\n          }\n        ]\n      },\n      \"constraint\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"ElementDefinitionConstraint\"\n          }\n        ]\n      },\n      \"mustSupport\": {\n        \"type\": [\n          {\n            \"code\": \"boolean\"\n          }\n        ]\n      },\n      \"isModifier\": {\n        \"type\": [\n          {\n            \"code\": \"boolean\"\n          }\n        ]\n      },\n      \"isModifierReason\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"isSummary\": {\n        \"type\": [\n          {\n            \"code\": \"boolean\"\n          }\n        ]\n      },\n      \"binding\": {\n        \"type\": [\n          {\n            \"code\": \"ElementDefinitionBinding\"\n          }\n        ]\n      },\n      \"mapping\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"ElementDefinitionMapping\"\n          }\n        ]\n      }\n    }\n  },\n  \"ElementDefinitionSlicingDiscriminator\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"type\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"path\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      }\n    }\n  },\n  \"ElementDefinitionSlicing\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"discriminator\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"ElementDefinitionSlicingDiscriminator\"\n          }\n        ]\n      },\n      \"description\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"ordered\": {\n        \"type\": [\n          {\n            \"code\": \"boolean\"\n          }\n        ]\n      },\n      \"rules\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      }\n    }\n  },\n  \"ElementDefinitionBase\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"path\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"min\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"unsignedInt\"\n          }\n        ]\n      },\n      \"max\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      }\n    }\n  },\n  \"ElementDefinitionType\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"code\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"uri\"\n          }\n        ]\n      },\n      \"profile\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"canonical\",\n            \"targetProfile\": [\n              \"http://hl7.org/fhir/StructureDefinition/StructureDefinition\",\n              \"http://hl7.org/fhir/StructureDefinition/ImplementationGuide\"\n            ]\n          }\n        ]\n      },\n      \"targetProfile\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"canonical\",\n            \"targetProfile\": [\n              \"http://hl7.org/fhir/StructureDefinition/StructureDefinition\",\n              \"http://hl7.org/fhir/StructureDefinition/ImplementationGuide\"\n            ]\n          }\n        ]\n      },\n      \"aggregation\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"versioning\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      }\n    }\n  },\n  \"ElementDefinitionExample\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"label\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"value[x]\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"base64Binary\"\n          },\n          {\n            \"code\": \"boolean\"\n          },\n          {\n            \"code\": \"canonical\"\n          },\n          {\n            \"code\": \"code\"\n          },\n          {\n            \"code\": \"date\"\n          },\n          {\n            \"code\": \"dateTime\"\n          },\n          {\n            \"code\": \"decimal\"\n          },\n          {\n            \"code\": \"id\"\n          },\n          {\n            \"code\": \"instant\"\n          },\n          {\n            \"code\": \"integer\"\n          },\n          {\n            \"code\": \"markdown\"\n          },\n          {\n            \"code\": \"oid\"\n          },\n          {\n            \"code\": \"positiveInt\"\n          },\n          {\n            \"code\": \"string\"\n          },\n          {\n            \"code\": \"time\"\n          },\n          {\n            \"code\": \"unsignedInt\"\n          },\n          {\n            \"code\": \"uri\"\n          },\n          {\n            \"code\": \"url\"\n          },\n          {\n            \"code\": \"uuid\"\n          },\n          {\n            \"code\": \"Address\"\n          },\n          {\n            \"code\": \"Age\"\n          },\n          {\n            \"code\": \"Annotation\"\n          },\n          {\n            \"code\": \"Attachment\"\n          },\n          {\n            \"code\": \"CodeableConcept\"\n          },\n          {\n            \"code\": \"Coding\"\n          },\n          {\n            \"code\": \"ContactPoint\"\n          },\n          {\n            \"code\": \"Count\"\n          },\n          {\n            \"code\": \"Distance\"\n          },\n          {\n            \"code\": \"Duration\"\n          },\n          {\n            \"code\": \"HumanName\"\n          },\n          {\n            \"code\": \"Identifier\"\n          },\n          {\n            \"code\": \"Money\"\n          },\n          {\n            \"code\": \"Period\"\n          },\n          {\n            \"code\": \"Quantity\"\n          },\n          {\n            \"code\": \"Range\"\n          },\n          {\n            \"code\": \"Ratio\"\n          },\n          {\n            \"code\": \"Reference\"\n          },\n          {\n            \"code\": \"SampledData\"\n          },\n          {\n            \"code\": \"Signature\"\n          },\n          {\n            \"code\": \"Timing\"\n          },\n          {\n            \"code\": \"ContactDetail\"\n          },\n          {\n            \"code\": \"Contributor\"\n          },\n          {\n            \"code\": \"DataRequirement\"\n          },\n          {\n            \"code\": \"Expression\"\n          },\n          {\n            \"code\": \"ParameterDefinition\"\n          },\n          {\n            \"code\": \"RelatedArtifact\"\n          },\n          {\n            \"code\": \"TriggerDefinition\"\n          },\n          {\n            \"code\": \"UsageContext\"\n          },\n          {\n            \"code\": \"Dosage\"\n          },\n          {\n            \"code\": \"Meta\"\n          }\n        ]\n      }\n    }\n  },\n  \"ElementDefinitionConstraint\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"key\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"id\"\n          }\n        ]\n      },\n      \"requirements\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"severity\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"human\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"expression\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"xpath\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"source\": {\n        \"type\": [\n          {\n            \"code\": \"canonical\",\n            \"targetProfile\": [\"http://hl7.org/fhir/StructureDefinition/StructureDefinition\"]\n          }\n        ]\n      }\n    }\n  },\n  \"ElementDefinitionBinding\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"strength\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"description\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"valueSet\": {\n        \"type\": [\n          {\n            \"code\": \"canonical\",\n            \"targetProfile\": [\"http://hl7.org/fhir/StructureDefinition/ValueSet\"]\n          }\n        ]\n      }\n    }\n  },\n  \"ElementDefinitionMapping\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"identity\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"id\"\n          }\n        ]\n      },\n      \"language\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"map\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"comment\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      }\n    }\n  },\n  \"Expression\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"description\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"name\": {\n        \"type\": [\n          {\n            \"code\": \"id\"\n          }\n        ]\n      },\n      \"language\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"expression\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"reference\": {\n        \"type\": [\n          {\n            \"code\": \"uri\"\n          }\n        ]\n      }\n    }\n  },\n  \"Extension\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"url\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"uri\"\n          }\n        ]\n      },\n      \"value[x]\": {\n        \"type\": [\n          {\n            \"code\": \"base64Binary\"\n          },\n          {\n            \"code\": \"boolean\"\n          },\n          {\n            \"code\": \"canonical\"\n          },\n          {\n            \"code\": \"code\"\n          },\n          {\n            \"code\": \"date\"\n          },\n          {\n            \"code\": \"dateTime\"\n          },\n          {\n            \"code\": \"decimal\"\n          },\n          {\n            \"code\": \"id\"\n          },\n          {\n            \"code\": \"instant\"\n          },\n          {\n            \"code\": \"integer\"\n          },\n          {\n            \"code\": \"markdown\"\n          },\n          {\n            \"code\": \"oid\"\n          },\n          {\n            \"code\": \"positiveInt\"\n          },\n          {\n            \"code\": \"string\"\n          },\n          {\n            \"code\": \"time\"\n          },\n          {\n            \"code\": \"unsignedInt\"\n          },\n          {\n            \"code\": \"uri\"\n          },\n          {\n            \"code\": \"url\"\n          },\n          {\n            \"code\": \"uuid\"\n          },\n          {\n            \"code\": \"Address\"\n          },\n          {\n            \"code\": \"Age\"\n          },\n          {\n            \"code\": \"Annotation\"\n          },\n          {\n            \"code\": \"Attachment\"\n          },\n          {\n            \"code\": \"CodeableConcept\"\n          },\n          {\n            \"code\": \"Coding\"\n          },\n          {\n            \"code\": \"ContactPoint\"\n          },\n          {\n            \"code\": \"Count\"\n          },\n          {\n            \"code\": \"Distance\"\n          },\n          {\n            \"code\": \"Duration\"\n          },\n          {\n            \"code\": \"HumanName\"\n          },\n          {\n            \"code\": \"Identifier\"\n          },\n          {\n            \"code\": \"Money\"\n          },\n          {\n            \"code\": \"Period\"\n          },\n          {\n            \"code\": \"Quantity\"\n          },\n          {\n            \"code\": \"Range\"\n          },\n          {\n            \"code\": \"Ratio\"\n          },\n          {\n            \"code\": \"Reference\"\n          },\n          {\n            \"code\": \"SampledData\"\n          },\n          {\n            \"code\": \"Signature\"\n          },\n          {\n            \"code\": \"Timing\"\n          },\n          {\n            \"code\": \"ContactDetail\"\n          },\n          {\n            \"code\": \"Contributor\"\n          },\n          {\n            \"code\": \"DataRequirement\"\n          },\n          {\n            \"code\": \"Expression\"\n          },\n          {\n            \"code\": \"ParameterDefinition\"\n          },\n          {\n            \"code\": \"RelatedArtifact\"\n          },\n          {\n            \"code\": \"TriggerDefinition\"\n          },\n          {\n            \"code\": \"UsageContext\"\n          },\n          {\n            \"code\": \"Dosage\"\n          },\n          {\n            \"code\": \"Meta\"\n          }\n        ]\n      }\n    }\n  },\n  \"HumanName\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"use\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"text\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"family\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"given\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"prefix\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"suffix\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"period\": {\n        \"type\": [\n          {\n            \"code\": \"Period\"\n          }\n        ]\n      }\n    }\n  },\n  \"Identifier\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"use\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"type\": {\n        \"type\": [\n          {\n            \"code\": \"CodeableConcept\"\n          }\n        ]\n      },\n      \"system\": {\n        \"type\": [\n          {\n            \"code\": \"uri\"\n          }\n        ]\n      },\n      \"value\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"period\": {\n        \"type\": [\n          {\n            \"code\": \"Period\"\n          }\n        ]\n      },\n      \"assigner\": {\n        \"type\": [\n          {\n            \"code\": \"Reference\",\n            \"targetProfile\": [\"http://hl7.org/fhir/StructureDefinition/Organization\"]\n          }\n        ]\n      }\n    }\n  },\n  \"MarketingStatus\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"modifierExtension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"country\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"CodeableConcept\"\n          }\n        ]\n      },\n      \"jurisdiction\": {\n        \"type\": [\n          {\n            \"code\": \"CodeableConcept\"\n          }\n        ]\n      },\n      \"status\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"CodeableConcept\"\n          }\n        ]\n      },\n      \"dateRange\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"Period\"\n          }\n        ]\n      },\n      \"restoreDate\": {\n        \"type\": [\n          {\n            \"code\": \"dateTime\"\n          }\n        ]\n      }\n    }\n  },\n  \"Meta\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"versionId\": {\n        \"type\": [\n          {\n            \"code\": \"id\"\n          }\n        ]\n      },\n      \"lastUpdated\": {\n        \"type\": [\n          {\n            \"code\": \"instant\"\n          }\n        ]\n      },\n      \"source\": {\n        \"type\": [\n          {\n            \"code\": \"uri\"\n          }\n        ]\n      },\n      \"profile\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"canonical\",\n            \"targetProfile\": [\"http://hl7.org/fhir/StructureDefinition/StructureDefinition\"]\n          }\n        ]\n      },\n      \"security\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Coding\"\n          }\n        ]\n      },\n      \"tag\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Coding\"\n          }\n        ]\n      },\n      \"project\": {\n        \"type\": [\n          {\n            \"code\": \"uri\"\n          }\n        ]\n      },\n      \"author\": {\n        \"type\": [\n          {\n            \"code\": \"Reference\"\n          }\n        ]\n      },\n      \"onBehalfOf\": {\n        \"type\": [\n          {\n            \"code\": \"Reference\"\n          }\n        ]\n      },\n      \"account\": {\n        \"type\": [\n          {\n            \"code\": \"Reference\"\n          }\n        ]\n      },\n      \"accounts\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Reference\"\n          }\n        ]\n      },\n      \"compartment\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Reference\"\n          }\n        ]\n      }\n    }\n  },\n  \"Money\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"value\": {\n        \"type\": [\n          {\n            \"code\": \"decimal\"\n          }\n        ]\n      },\n      \"currency\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      }\n    }\n  },\n  \"Narrative\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"status\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"div\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"xhtml\"\n          }\n        ]\n      }\n    }\n  },\n  \"ParameterDefinition\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"name\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"use\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"min\": {\n        \"type\": [\n          {\n            \"code\": \"integer\"\n          }\n        ]\n      },\n      \"max\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"documentation\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"type\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"profile\": {\n        \"type\": [\n          {\n            \"code\": \"canonical\",\n            \"targetProfile\": [\"http://hl7.org/fhir/StructureDefinition/StructureDefinition\"]\n          }\n        ]\n      }\n    }\n  },\n  \"Period\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"start\": {\n        \"type\": [\n          {\n            \"code\": \"dateTime\"\n          }\n        ]\n      },\n      \"end\": {\n        \"type\": [\n          {\n            \"code\": \"dateTime\"\n          }\n        ]\n      }\n    }\n  },\n  \"Population\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"modifierExtension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"age[x]\": {\n        \"type\": [\n          {\n            \"code\": \"Range\"\n          },\n          {\n            \"code\": \"CodeableConcept\"\n          }\n        ]\n      },\n      \"gender\": {\n        \"type\": [\n          {\n            \"code\": \"CodeableConcept\"\n          }\n        ]\n      },\n      \"race\": {\n        \"type\": [\n          {\n            \"code\": \"CodeableConcept\"\n          }\n        ]\n      },\n      \"physiologicalCondition\": {\n        \"type\": [\n          {\n            \"code\": \"CodeableConcept\"\n          }\n        ]\n      }\n    }\n  },\n  \"ProdCharacteristic\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"modifierExtension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"height\": {\n        \"type\": [\n          {\n            \"code\": \"Quantity\"\n          }\n        ]\n      },\n      \"width\": {\n        \"type\": [\n          {\n            \"code\": \"Quantity\"\n          }\n        ]\n      },\n      \"depth\": {\n        \"type\": [\n          {\n            \"code\": \"Quantity\"\n          }\n        ]\n      },\n      \"weight\": {\n        \"type\": [\n          {\n            \"code\": \"Quantity\"\n          }\n        ]\n      },\n      \"nominalVolume\": {\n        \"type\": [\n          {\n            \"code\": \"Quantity\"\n          }\n        ]\n      },\n      \"externalDiameter\": {\n        \"type\": [\n          {\n            \"code\": \"Quantity\"\n          }\n        ]\n      },\n      \"shape\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"color\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"imprint\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"image\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Attachment\"\n          }\n        ]\n      },\n      \"scoring\": {\n        \"type\": [\n          {\n            \"code\": \"CodeableConcept\"\n          }\n        ]\n      }\n    }\n  },\n  \"ProductShelfLife\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"modifierExtension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"identifier\": {\n        \"type\": [\n          {\n            \"code\": \"Identifier\"\n          }\n        ]\n      },\n      \"type\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"CodeableConcept\"\n          }\n        ]\n      },\n      \"period\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"Quantity\"\n          }\n        ]\n      },\n      \"specialPrecautionsForStorage\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"CodeableConcept\"\n          }\n        ]\n      }\n    }\n  },\n  \"Quantity\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"value\": {\n        \"type\": [\n          {\n            \"code\": \"decimal\"\n          }\n        ]\n      },\n      \"comparator\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"unit\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"system\": {\n        \"type\": [\n          {\n            \"code\": \"uri\"\n          }\n        ]\n      },\n      \"code\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      }\n    }\n  },\n  \"Range\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"low\": {\n        \"type\": [\n          {\n            \"code\": \"Quantity\",\n            \"profile\": [\"http://hl7.org/fhir/StructureDefinition/SimpleQuantity\"]\n          }\n        ]\n      },\n      \"high\": {\n        \"type\": [\n          {\n            \"code\": \"Quantity\",\n            \"profile\": [\"http://hl7.org/fhir/StructureDefinition/SimpleQuantity\"]\n          }\n        ]\n      }\n    }\n  },\n  \"Ratio\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"numerator\": {\n        \"type\": [\n          {\n            \"code\": \"Quantity\"\n          }\n        ]\n      },\n      \"denominator\": {\n        \"type\": [\n          {\n            \"code\": \"Quantity\"\n          }\n        ]\n      }\n    }\n  },\n  \"Reference\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"reference\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"type\": {\n        \"type\": [\n          {\n            \"code\": \"uri\"\n          }\n        ]\n      },\n      \"identifier\": {\n        \"type\": [\n          {\n            \"code\": \"Identifier\"\n          }\n        ]\n      },\n      \"display\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      }\n    }\n  },\n  \"RelatedArtifact\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"type\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"label\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"display\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"citation\": {\n        \"type\": [\n          {\n            \"code\": \"markdown\"\n          }\n        ]\n      },\n      \"url\": {\n        \"type\": [\n          {\n            \"code\": \"url\"\n          }\n        ]\n      },\n      \"document\": {\n        \"type\": [\n          {\n            \"code\": \"Attachment\"\n          }\n        ]\n      },\n      \"resource\": {\n        \"type\": [\n          {\n            \"code\": \"canonical\",\n            \"targetProfile\": [\"http://hl7.org/fhir/StructureDefinition/Resource\"]\n          }\n        ]\n      }\n    }\n  },\n  \"SampledData\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"origin\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"Quantity\",\n            \"profile\": [\"http://hl7.org/fhir/StructureDefinition/SimpleQuantity\"]\n          }\n        ]\n      },\n      \"period\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"decimal\"\n          }\n        ]\n      },\n      \"factor\": {\n        \"type\": [\n          {\n            \"code\": \"decimal\"\n          }\n        ]\n      },\n      \"lowerLimit\": {\n        \"type\": [\n          {\n            \"code\": \"decimal\"\n          }\n        ]\n      },\n      \"upperLimit\": {\n        \"type\": [\n          {\n            \"code\": \"decimal\"\n          }\n        ]\n      },\n      \"dimensions\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"positiveInt\"\n          }\n        ]\n      },\n      \"data\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      }\n    }\n  },\n  \"Signature\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"type\": {\n        \"min\": 1,\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Coding\"\n          }\n        ]\n      },\n      \"when\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"instant\"\n          }\n        ]\n      },\n      \"who\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"Reference\",\n            \"targetProfile\": [\n              \"http://hl7.org/fhir/StructureDefinition/Practitioner\",\n              \"http://hl7.org/fhir/StructureDefinition/PractitionerRole\",\n              \"http://hl7.org/fhir/StructureDefinition/RelatedPerson\",\n              \"http://hl7.org/fhir/StructureDefinition/Patient\",\n              \"http://hl7.org/fhir/StructureDefinition/Device\",\n              \"http://hl7.org/fhir/StructureDefinition/Organization\"\n            ]\n          }\n        ]\n      },\n      \"onBehalfOf\": {\n        \"type\": [\n          {\n            \"code\": \"Reference\",\n            \"targetProfile\": [\n              \"http://hl7.org/fhir/StructureDefinition/Practitioner\",\n              \"http://hl7.org/fhir/StructureDefinition/PractitionerRole\",\n              \"http://hl7.org/fhir/StructureDefinition/RelatedPerson\",\n              \"http://hl7.org/fhir/StructureDefinition/Patient\",\n              \"http://hl7.org/fhir/StructureDefinition/Device\",\n              \"http://hl7.org/fhir/StructureDefinition/Organization\"\n            ]\n          }\n        ]\n      },\n      \"targetFormat\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"sigFormat\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"data\": {\n        \"type\": [\n          {\n            \"code\": \"base64Binary\"\n          }\n        ]\n      }\n    }\n  },\n  \"SubstanceAmount\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"modifierExtension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"amount[x]\": {\n        \"type\": [\n          {\n            \"code\": \"Quantity\"\n          },\n          {\n            \"code\": \"Range\"\n          },\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"amountType\": {\n        \"type\": [\n          {\n            \"code\": \"CodeableConcept\"\n          }\n        ]\n      },\n      \"amountText\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"referenceRange\": {\n        \"type\": [\n          {\n            \"code\": \"SubstanceAmountReferenceRange\"\n          }\n        ]\n      }\n    }\n  },\n  \"SubstanceAmountReferenceRange\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"lowLimit\": {\n        \"type\": [\n          {\n            \"code\": \"Quantity\"\n          }\n        ]\n      },\n      \"highLimit\": {\n        \"type\": [\n          {\n            \"code\": \"Quantity\"\n          }\n        ]\n      }\n    }\n  },\n  \"Timing\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"modifierExtension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"event\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"dateTime\"\n          }\n        ]\n      },\n      \"repeat\": {\n        \"type\": [\n          {\n            \"code\": \"TimingRepeat\"\n          }\n        ]\n      },\n      \"code\": {\n        \"type\": [\n          {\n            \"code\": \"CodeableConcept\"\n          }\n        ]\n      }\n    }\n  },\n  \"TimingRepeat\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"bounds[x]\": {\n        \"type\": [\n          {\n            \"code\": \"Duration\"\n          },\n          {\n            \"code\": \"Range\"\n          },\n          {\n            \"code\": \"Period\"\n          }\n        ]\n      },\n      \"count\": {\n        \"type\": [\n          {\n            \"code\": \"positiveInt\"\n          }\n        ]\n      },\n      \"countMax\": {\n        \"type\": [\n          {\n            \"code\": \"positiveInt\"\n          }\n        ]\n      },\n      \"duration\": {\n        \"type\": [\n          {\n            \"code\": \"decimal\"\n          }\n        ]\n      },\n      \"durationMax\": {\n        \"type\": [\n          {\n            \"code\": \"decimal\"\n          }\n        ]\n      },\n      \"durationUnit\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"frequency\": {\n        \"type\": [\n          {\n            \"code\": \"positiveInt\"\n          }\n        ]\n      },\n      \"frequencyMax\": {\n        \"type\": [\n          {\n            \"code\": \"positiveInt\"\n          }\n        ]\n      },\n      \"period\": {\n        \"type\": [\n          {\n            \"code\": \"decimal\"\n          }\n        ]\n      },\n      \"periodMax\": {\n        \"type\": [\n          {\n            \"code\": \"decimal\"\n          }\n        ]\n      },\n      \"periodUnit\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"dayOfWeek\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"timeOfDay\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"time\"\n          }\n        ]\n      },\n      \"when\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"offset\": {\n        \"type\": [\n          {\n            \"code\": \"unsignedInt\"\n          }\n        ]\n      }\n    }\n  },\n  \"TriggerDefinition\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"type\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"name\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"timing[x]\": {\n        \"type\": [\n          {\n            \"code\": \"Timing\"\n          },\n          {\n            \"code\": \"Reference\",\n            \"targetProfile\": [\"http://hl7.org/fhir/StructureDefinition/Schedule\"]\n          },\n          {\n            \"code\": \"date\"\n          },\n          {\n            \"code\": \"dateTime\"\n          }\n        ]\n      },\n      \"data\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"DataRequirement\"\n          }\n        ]\n      },\n      \"condition\": {\n        \"type\": [\n          {\n            \"code\": \"Expression\"\n          }\n        ]\n      }\n    }\n  },\n  \"UsageContext\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"code\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"Coding\"\n          }\n        ]\n      },\n      \"value[x]\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"CodeableConcept\"\n          },\n          {\n            \"code\": \"Quantity\"\n          },\n          {\n            \"code\": \"Range\"\n          },\n          {\n            \"code\": \"Reference\",\n            \"targetProfile\": [\n              \"http://hl7.org/fhir/StructureDefinition/PlanDefinition\",\n              \"http://hl7.org/fhir/StructureDefinition/ResearchStudy\",\n              \"http://hl7.org/fhir/StructureDefinition/InsurancePlan\",\n              \"http://hl7.org/fhir/StructureDefinition/HealthcareService\",\n              \"http://hl7.org/fhir/StructureDefinition/Group\",\n              \"http://hl7.org/fhir/StructureDefinition/Location\",\n              \"http://hl7.org/fhir/StructureDefinition/Organization\"\n            ]\n          }\n        ]\n      }\n    }\n  },\n  \"MoneyQuantity\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"value\": {\n        \"type\": [\n          {\n            \"code\": \"decimal\"\n          }\n        ]\n      },\n      \"comparator\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"unit\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"system\": {\n        \"type\": [\n          {\n            \"code\": \"uri\"\n          }\n        ]\n      },\n      \"code\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      }\n    }\n  },\n  \"SimpleQuantity\": {\n    \"elements\": {\n      \"id\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"extension\": {\n        \"max\": 9007199254740991,\n        \"type\": [\n          {\n            \"code\": \"Extension\"\n          }\n        ]\n      },\n      \"value\": {\n        \"type\": [\n          {\n            \"code\": \"decimal\"\n          }\n        ]\n      },\n      \"comparator\": {\n        \"max\": 0,\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"unit\": {\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"system\": {\n        \"type\": [\n          {\n            \"code\": \"uri\"\n          }\n        ]\n      },\n      \"code\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      }\n    }\n  },\n  \"IdentityProvider\": {\n    \"elements\": {\n      \"authorizeUrl\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"tokenUrl\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"tokenAuthMethod\": {\n        \"type\": [\n          {\n            \"code\": \"code\"\n          }\n        ]\n      },\n      \"userInfoUrl\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"clientId\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"clientSecret\": {\n        \"min\": 1,\n        \"type\": [\n          {\n            \"code\": \"string\"\n          }\n        ]\n      },\n      \"usePkce\": {\n        \"type\": [\n          {\n            \"code\": \"boolean\"\n          }\n        ]\n      },\n      \"useSubject\": {\n        \"type\": [\n          {\n            \"code\": \"boolean\"\n          }\n        ]\n      }\n    }\n  }\n}\n", "import {\n  Bundle,\n  Coding,\n  ElementDefinition,\n  ElementDefinitionBinding,\n  Resource,\n  StructureDefinition,\n} from '@medplum/fhirtypes';\nimport { DataTypesMap, inflateBaseSchema } from '../base-schema';\nimport baseSchema from '../base-schema.json';\nimport { getTypedPropertyValue } from '../fhirpath/utils';\nimport { OperationOutcomeError, badRequest } from '../outcomes';\nimport { TypedValue, getElementDefinitionTypeName, isResourceTypeSchema } from '../types';\nimport { capitalize, getExtension, isEmpty } from '../utils';\n\n/**\n * Internal representation of a non-primitive FHIR type, suitable for use in resource validation\n */\nexport interface InternalTypeSchema {\n  name: string;\n  type: string;\n  path: string;\n  title?: string;\n  url?: string;\n  kind?: string;\n  description?: string;\n  elements: Record<string, InternalSchemaElement>;\n  constraints?: Constraint[];\n  parentType?: InternalTypeSchema;\n  innerTypes: InternalTypeSchema[];\n  summaryProperties?: Set<string>;\n  mandatoryProperties?: Set<string>;\n}\n\nexport interface InternalSchemaElement {\n  description: string;\n  path: string;\n  min: number;\n  max: number;\n  isArray?: boolean;\n  constraints?: Constraint[];\n  type: ElementType[];\n  slicing?: SlicingRules;\n  fixed?: TypedValue;\n  pattern?: TypedValue;\n  binding?: ElementDefinitionBinding;\n}\n\nexport interface ElementType {\n  code: string;\n  targetProfile?: string[];\n  profile?: string[];\n}\n\nexport interface Constraint {\n  key: string;\n  severity: 'error' | 'warning';\n  expression: string;\n  description: string;\n}\n\nexport interface SlicingRules {\n  discriminator: SliceDiscriminator[];\n  ordered: boolean;\n  rule?: 'open' | 'closed' | 'openAtEnd';\n  slices: SliceDefinition[];\n}\n\nexport interface SliceDefinition extends Omit<InternalSchemaElement, 'slicing'> {\n  name: string;\n  definition?: string;\n  elements: Record<string, InternalSchemaElement>;\n}\n\nexport interface SliceDiscriminator {\n  path: string;\n  type: string;\n}\n\n/**\n * Parses a StructureDefinition resource into an internal schema better suited for\n * programmatic validation and usage in internal systems\n * @param sd - The StructureDefinition resource to parse\n * @returns The parsed schema for the given resource type\n * @experimental\n */\nexport function parseStructureDefinition(sd: StructureDefinition): InternalTypeSchema {\n  return new StructureDefinitionParser(sd).parse();\n}\n\nconst DATA_TYPES: DataTypesMap = inflateBaseSchema(baseSchema);\n\n// profiles are referenced by URL instead of name\nconst PROFILE_SCHEMAS_BY_URL: { [profileUrl: string]: InternalTypeSchema } = Object.create(null);\n\n// Since profiles alter the schemas of their elements, a mapping of type names to schemas\n// is maintained per profile URL\nconst PROFILE_DATA_TYPES: { [profileUrl: string]: DataTypesMap } = Object.create(null);\n\n// Special case names for StructureDefinitions that are technically \"profiles\", but are used as base types.\n// This is for backwards compatibility with R4 StructureDefinitions that are used as base types.\n// MoneyQuantity and SimpleQuantity are technically \"profiles\" on Quantity, but we allow them to be used as base types.\n// ViewDefinition is a special case for SQL-on-FHIR.\n// We can add more types here in the future as necessary, when we want them to be used as base types.\n// For example, exporting new types in \"@medplum/fhirtypes\".\nconst TYPE_SPECIAL_CASES: { [url: string]: string } = {\n  'http://hl7.org/fhir/StructureDefinition/MoneyQuantity': 'MoneyQuantity',\n  'http://hl7.org/fhir/StructureDefinition/SimpleQuantity': 'SimpleQuantity',\n  'http://hl7.org/fhir/uv/sql-on-fhir/StructureDefinition/ViewDefinition': 'ViewDefinition',\n};\n\nfunction getDataTypesMap(profileUrl: string): DataTypesMap {\n  let dataTypes: DataTypesMap;\n  dataTypes = PROFILE_DATA_TYPES[profileUrl];\n  if (!dataTypes) {\n    dataTypes = PROFILE_DATA_TYPES[profileUrl] = Object.create(null);\n  }\n  return dataTypes;\n}\n\n/**\n * Parses and indexes structure definitions\n * @param bundle - Bundle or array of structure definitions to be parsed and indexed\n */\nexport function indexStructureDefinitionBundle(bundle: StructureDefinition[] | Bundle): void {\n  const sds = Array.isArray(bundle) ? bundle : (bundle.entry?.map((e) => e.resource as StructureDefinition) ?? []);\n  for (const sd of sds) {\n    loadDataType(sd);\n  }\n}\n\nexport function loadDataType(sd: StructureDefinition): void {\n  if (!sd?.name) {\n    throw new Error(`Failed loading StructureDefinition from bundle`);\n  }\n  if (sd.resourceType !== 'StructureDefinition') {\n    return;\n  }\n  const schema = parseStructureDefinition(sd);\n  const specialCase = TYPE_SPECIAL_CASES[sd.url];\n  let dataTypes: DataTypesMap;\n  let typeName: string;\n\n  if (specialCase) {\n    // Special cases by \"name\"\n    // These are StructureDefinitions that are technically \"profiles\", but are used as base types\n    dataTypes = DATA_TYPES;\n    typeName = specialCase;\n  } else if (\n    // By default, only index by \"type\" for \"official\" FHIR types\n    sd.url === `http://hl7.org/fhir/StructureDefinition/${sd.type}` ||\n    sd.url === `https://medplum.com/fhir/StructureDefinition/${sd.type}` ||\n    sd.type?.startsWith('http://') ||\n    sd.type?.startsWith('https://')\n  ) {\n    dataTypes = DATA_TYPES;\n    typeName = sd.type;\n  } else {\n    dataTypes = getDataTypesMap(sd.url);\n    typeName = sd.type;\n  }\n\n  dataTypes[typeName] = schema;\n\n  for (const inner of schema.innerTypes) {\n    inner.parentType = schema;\n    dataTypes[inner.name] = inner;\n  }\n\n  PROFILE_SCHEMAS_BY_URL[sd.url] = schema;\n}\n\nexport function getAllDataTypes(): DataTypesMap {\n  return DATA_TYPES;\n}\n\nexport function isDataTypeLoaded(type: string): boolean {\n  return !!DATA_TYPES[type];\n}\n\nexport function tryGetDataType(type: string, profileUrl?: string): InternalTypeSchema | undefined {\n  if (profileUrl) {\n    const profileType = getDataTypesMap(profileUrl)[type];\n    if (profileType) {\n      return profileType;\n    }\n  }\n  // Fallback to base schema if no result found in profileUrl namespace\n  return DATA_TYPES[type];\n}\n\nexport function getDataType(type: string, profileUrl?: string): InternalTypeSchema {\n  const schema = tryGetDataType(type, profileUrl);\n  if (!schema) {\n    throw new OperationOutcomeError(badRequest('Unknown data type: ' + type));\n  }\n  return schema;\n}\n\n/**\n * Returns true if the given string is a valid FHIR resource type.\n *\n * @example\n * ```ts\n * isResourceType('Patient'); // true\n * isResourceType('XYZ'); // false\n * ```\n *\n * @param resourceType - The candidate resource type string.\n * @returns True if the resource type is a valid FHIR resource type.\n */\nexport function isResourceType(resourceType: string): boolean {\n  const typeSchema = DATA_TYPES[resourceType];\n  return typeSchema && isResourceTypeSchema(typeSchema);\n}\n\nexport function isProfileLoaded(profileUrl: string): boolean {\n  return !!PROFILE_SCHEMAS_BY_URL[profileUrl];\n}\n\nexport function tryGetProfile(profileUrl: string): InternalTypeSchema | undefined {\n  return PROFILE_SCHEMAS_BY_URL[profileUrl];\n}\n\ninterface BackboneContext {\n  type: InternalTypeSchema;\n  path: string;\n  parent?: BackboneContext;\n}\n\n/**\n * @experimental\n */\nclass StructureDefinitionParser {\n  private readonly root: ElementDefinition;\n  private readonly elements: ElementDefinition[];\n  private readonly elementIndex: Record<string, ElementDefinition>;\n  private index: number;\n  private readonly resourceSchema: InternalTypeSchema;\n  private slicingContext: { field: SlicingRules; current?: SliceDefinition; path: string } | undefined;\n  private innerTypes: InternalTypeSchema[];\n  private backboneContext: BackboneContext | undefined;\n\n  /**\n   * @param sd - The StructureDefinition to parse\n   * @throws Throws when the StructureDefinition does not have a populated `snapshot` field\n   */\n  constructor(sd: StructureDefinition) {\n    if (!sd.snapshot?.element || sd.snapshot.element.length === 0) {\n      throw new Error(`No snapshot defined for StructureDefinition '${sd.name}'`);\n    }\n\n    this.root = sd.snapshot.element[0];\n    this.elements = sd.snapshot.element.slice(1);\n    this.elementIndex = Object.create(null);\n    this.index = 0;\n    this.resourceSchema = {\n      name: sd.name as string,\n      path: this.root.path,\n      title: sd.title,\n      type: sd.type,\n      url: sd.url as string,\n      kind: sd.kind,\n      description: getDescription(sd),\n      elements: {},\n      constraints: this.parseElementDefinition(this.root).constraints,\n      innerTypes: [],\n      summaryProperties: new Set(),\n      mandatoryProperties: new Set(),\n    };\n    this.innerTypes = [];\n  }\n\n  parse(): InternalTypeSchema {\n    let element = this.next();\n    while (element) {\n      if (element.sliceName) {\n        // Start of slice: this ElementDefinition defines the top-level element of a slice value\n        this.parseSliceStart(element);\n      } else if (element.id?.includes(':')) {\n        // Slice element, part of some slice definition\n        if (this.slicingContext?.current) {\n          const path = elementPath(element, this.slicingContext.path);\n          this.slicingContext.current.elements[path] = this.parseElementDefinition(element);\n        }\n      } else {\n        // Normal field definition\n        const field = this.parseElementDefinition(element);\n        this.checkFieldEnter(element, field);\n\n        // Record field in schema\n        let parentContext: BackboneContext | undefined = this.backboneContext;\n        while (parentContext) {\n          if (element.path?.startsWith(parentContext.path + '.')) {\n            parentContext.type.elements[elementPath(element, parentContext.path)] = field;\n            break;\n          }\n          parentContext = parentContext.parent;\n        }\n\n        if (!parentContext) {\n          // Within R4 StructureDefinitions, there are 2 cases where StructureDefinition.name !== ElementDefinition.path.\n          // For SimpleQuantity and MoneyQuantity, the names are the names, but the root ElementDefinition.path is Quantity.\n          // We need to use StructureDefinition.name for the type name, and ElementDefinition.path for the path.\n          const path = elementPath(element, this.root.path);\n          if (element.isSummary) {\n            this.resourceSchema.summaryProperties?.add(path.replace('[x]', ''));\n          }\n          if (field.min > 0) {\n            this.resourceSchema.mandatoryProperties?.add(path.replace('[x]', ''));\n          }\n          this.resourceSchema.elements[path] = field;\n        }\n\n        // Clean up contextual book-keeping\n        this.checkFieldExit(element);\n      }\n\n      element = this.next();\n    }\n\n    // Wrap up if the StructureDefinition ends on a slice or backbone element\n    this.checkFieldExit();\n    if (this.innerTypes.length > 0) {\n      this.resourceSchema.innerTypes = this.innerTypes;\n    }\n\n    return this.resourceSchema;\n  }\n\n  private checkFieldEnter(element: ElementDefinition, field: InternalSchemaElement): void {\n    if (this.isInnerType(element)) {\n      this.enterInnerType(element);\n    }\n    if (this.slicingContext && !pathsCompatible(this.slicingContext.path, element?.path as string)) {\n      // Path must be compatible with the sliced field path (i.e. have it as a prefix) to be a part of the\n      // same slice group; otherwise, that group is finished and this is the start of a new field\n      this.slicingContext = undefined;\n    }\n    if (element.slicing && !this.slicingContext) {\n      this.enterSlice(element, field);\n    }\n  }\n\n  private enterInnerType(element: ElementDefinition): void {\n    while (this.backboneContext && !pathsCompatible(this.backboneContext?.path, element.path)) {\n      // Starting new inner type, unwind type stack to this property's parent\n      this.innerTypes.push(this.backboneContext.type);\n      this.backboneContext = this.backboneContext.parent;\n    }\n    const typeName = getElementDefinitionTypeName(element);\n    this.backboneContext = {\n      type: {\n        name: typeName,\n        type: typeName,\n        path: element.path,\n        title: element.label,\n        description: element.definition,\n        elements: {},\n        constraints: this.parseElementDefinition(element).constraints,\n        innerTypes: [],\n      },\n      path: element.path,\n      parent: pathsCompatible(this.backboneContext?.path, element.path)\n        ? this.backboneContext\n        : this.backboneContext?.parent,\n    };\n  }\n\n  private enterSlice(element: ElementDefinition, field: InternalSchemaElement): void {\n    if (hasDefaultExtensionSlice(element) && !this.peek()?.sliceName) {\n      // Extensions are always sliced by URL; don't start slicing context if no slices follow\n      return;\n    }\n    field.slicing = {\n      discriminator: (element.slicing?.discriminator ?? []).map((d) => {\n        if (d.type !== 'value' && d.type !== 'pattern' && d.type !== 'type') {\n          throw new Error(`Unsupported slicing discriminator type: ${d.type}`);\n        }\n        return {\n          path: d.path as string,\n          type: d.type as string,\n        };\n      }),\n      slices: [],\n      ordered: element.slicing?.ordered ?? false,\n      rule: element.slicing?.rules,\n    };\n    this.slicingContext = { field: field.slicing, path: element.path ?? '' };\n  }\n\n  private checkFieldExit(element: ElementDefinition | undefined = undefined): void {\n    if (this.backboneContext && !pathsCompatible(this.backboneContext.path, element?.path)) {\n      // Leaving BackboneElement child fields\n      if (this.backboneContext.parent) {\n        do {\n          this.innerTypes.push(this.backboneContext.type);\n          this.backboneContext = this.backboneContext.parent;\n        } while (this.backboneContext && !pathsCompatible(this.backboneContext.path, element?.path));\n      } else {\n        this.innerTypes.push(this.backboneContext.type);\n        this.backboneContext = undefined;\n      }\n    }\n  }\n\n  private next(): ElementDefinition | undefined {\n    const element = this.peek();\n    if (element) {\n      this.index++;\n      return element;\n    }\n    return undefined;\n  }\n\n  private peek(): ElementDefinition | undefined {\n    const element = this.elements[this.index];\n    if (element) {\n      this.elementIndex[element.path ?? ''] = element;\n      if (element.contentReference) {\n        const contentRefPath = element.contentReference.slice(element.contentReference.indexOf('#') + 1);\n        const ref = this.elementIndex[contentRefPath];\n        if (!ref) {\n          return undefined;\n        }\n        return {\n          ...ref,\n          id: element.id,\n          path: element.path,\n          min: element.min ?? ref.min,\n          max: element.max ?? ref.max,\n          base: {\n            path: ref.base?.path ?? contentRefPath,\n            min: element.base?.min ?? ref.base?.min ?? (ref.min as number),\n            max: element.base?.max ?? ref.base?.max ?? (ref.max as string),\n          },\n          contentReference: element.contentReference,\n          definition: element.definition,\n        };\n      }\n      return element;\n    }\n    return undefined;\n  }\n\n  private isInnerType(current: ElementDefinition): boolean {\n    const next = this.peek();\n    return !!(\n      pathsCompatible(current?.path, next?.path) &&\n      current.type?.some((t) => ['BackboneElement', 'Element'].includes(t.code as string))\n    );\n  }\n\n  private parseSliceStart(element: ElementDefinition): void {\n    if (!this.slicingContext) {\n      throw new Error(`Invalid slice start before discriminator: ${element.sliceName} (${element.id})`);\n    }\n\n    this.slicingContext.current = {\n      ...this.parseElementDefinition(element),\n      name: element.sliceName ?? '',\n      definition: element.definition,\n      elements: {},\n    };\n    this.slicingContext.field.slices.push(this.slicingContext.current);\n  }\n\n  private parseElementDefinitionType(ed: ElementDefinition): ElementType[] {\n    return (ed.type ?? []).map((type) => {\n      let code: string | undefined;\n\n      if (type.code === 'BackboneElement' || type.code === 'Element') {\n        code = getElementDefinitionTypeName(ed);\n      }\n\n      if (!code) {\n        // This is a low-level extension that we optimize handling for\n        code = getExtension(type, 'http://hl7.org/fhir/StructureDefinition/structuredefinition-fhir-type')?.valueUrl;\n      }\n\n      if (!code) {\n        code = type.code ?? '';\n      }\n\n      return {\n        code,\n        targetProfile: type.targetProfile,\n        profile: type.profile,\n      };\n    });\n  }\n\n  private parseElementDefinition(ed: ElementDefinition): InternalSchemaElement {\n    const max = parseCardinality(ed.max as string);\n    const baseMax = ed.base?.max ? parseCardinality(ed.base.max) : max;\n    const typedElementDef = { type: 'ElementDefinition', value: ed };\n    return {\n      description: ed.definition || '',\n      path: ed.path || ed.base?.path || '',\n      min: ed.min ?? 0,\n      max: max,\n      isArray: baseMax > 1,\n      constraints: (ed.constraint ?? []).map((c) => ({\n        key: c.key ?? '',\n        severity: c.severity ?? 'error',\n        expression: c.expression ?? '',\n        description: c.human ?? '',\n      })),\n      type: this.parseElementDefinitionType(ed),\n      fixed: firstValue(getTypedPropertyValue(typedElementDef, 'fixed[x]')),\n      pattern: firstValue(getTypedPropertyValue(typedElementDef, 'pattern[x]')),\n      binding: ed.binding,\n    };\n  }\n}\n\n/**\n * Construct the subset of a resource containing a minimum set of fields.  The returned resource is not guaranteed\n * to contain only the provided properties, and may contain others (e.g. `resourceType` and `id`)\n *\n * @param resource - The resource to subset\n * @param properties - The minimum properties to include in the subset\n * @returns The modified resource, containing the listed properties and possibly other mandatory ones\n */\nexport function subsetResource<T extends Resource>(resource: T | undefined, properties: string[]): T | undefined {\n  if (!resource) {\n    return undefined;\n  }\n  const extraProperties = [];\n  for (const property of properties) {\n    extraProperties.push('_' + property);\n    const choiceTypeField = DATA_TYPES[resource.resourceType].elements[property + '[x]'];\n    if (choiceTypeField) {\n      extraProperties.push(...choiceTypeField.type.map((t) => property + capitalize(t.code)));\n    }\n  }\n  for (const property of Object.getOwnPropertyNames(resource)) {\n    if (\n      !properties.includes(property) &&\n      !extraProperties.includes(property) &&\n      !mandatorySubsetProperties.includes(property)\n    ) {\n      Object.defineProperty(resource, property, {\n        enumerable: false,\n        writable: false,\n        value: undefined,\n      });\n    }\n  }\n  resource.meta = { ...resource.meta, tag: resource.meta?.tag ? resource.meta.tag.concat(subsetTag) : [subsetTag] };\n  return resource;\n}\nconst subsetTag: Coding = {\n  system: 'http://hl7.org/fhir/v3/ObservationValue',\n  code: 'SUBSETTED',\n};\nconst mandatorySubsetProperties = ['resourceType', 'id', 'meta'];\n\nfunction parseCardinality(c: string): number {\n  return c === '*' ? Number.POSITIVE_INFINITY : Number.parseInt(c, 10);\n}\n\nfunction elementPath(element: ElementDefinition, prefix = ''): string {\n  return trimPrefix(element.path, prefix);\n}\n\nfunction trimPrefix(str: string | undefined, prefix: string): string {\n  if (!str) {\n    return '';\n  }\n  if (prefix && str.startsWith(prefix)) {\n    return str.substring(prefix.length + 1);\n  }\n  return str;\n}\n\n/**\n * Tests whether two element paths are compatible, i.e. whether the child path is nested under the parent.\n * @param parent - The expected parent path, which should be a prefix of the child path.\n * @param child - The child path to test for compatibility with the parent path.\n * @returns True if the given path is a child of the parent.\n */\nfunction pathsCompatible(parent: string | undefined, child: string | undefined): boolean {\n  if (!parent || !child) {\n    return false;\n  }\n  return child.startsWith(parent + '.') || child === parent;\n}\n\nfunction firstValue(obj: TypedValue | TypedValue[] | undefined): TypedValue | undefined {\n  if (Array.isArray(obj) && obj.length > 0) {\n    return obj[0];\n  } else if (!isEmpty(obj)) {\n    return obj as TypedValue;\n  } else {\n    return undefined;\n  }\n}\n\nfunction hasDefaultExtensionSlice(element: ElementDefinition): boolean {\n  const discriminators = element.slicing?.discriminator;\n  return Boolean(\n    element.type?.some((t) => t.code === 'Extension') &&\n      discriminators?.length === 1 &&\n      discriminators[0].type === 'value' &&\n      discriminators[0].path === 'url'\n  );\n}\n\nfunction getDescription(sd: StructureDefinition): string | undefined {\n  let result = sd.description;\n\n  // Many description strings start with an unwanted prefix \"Base StructureDefinition for X Type: \"\n  // For example:\n  // Base StructureDefinition for Age Type: A duration of time during which an organism (or a process) has existed.\n  // If the description starts with the name of the resource type, remove it.\n  if (result?.startsWith(`Base StructureDefinition for ${sd.name} Type: `)) {\n    result = result.substring(`Base StructureDefinition for ${sd.name} Type: `.length);\n  }\n\n  return result;\n}\n", "import { Resource } from '@medplum/fhirtypes';\nimport { getTypedPropertyValue, GetTypedPropertyValueOptions, toTypedValue } from '../fhirpath/utils';\nimport { isResource, TypedValue } from '../types';\nimport { arrayify } from '../utils';\nimport { getDataType, InternalTypeSchema } from './types';\nimport { isPrimitiveType } from './validation';\n\nexport interface CrawlerVisitor {\n  onEnterObject?: (path: string, value: TypedValueWithPath, schema: InternalTypeSchema) => void;\n  onExitObject?: (path: string, value: TypedValueWithPath, schema: InternalTypeSchema) => void;\n  onEnterResource?: (path: string, value: TypedValueWithPath, schema: InternalTypeSchema) => void;\n  onExitResource?: (path: string, value: TypedValueWithPath, schema: InternalTypeSchema) => void;\n  visitProperty: (\n    parent: TypedValueWithPath,\n    key: string,\n    path: string,\n    propertyValues: (TypedValueWithPath | TypedValueWithPath[])[],\n    schema: InternalTypeSchema\n  ) => void;\n}\n\n/** @deprecated - Use CrawlerVisitor instead */\nexport type ResourceVisitor = CrawlerVisitor;\n\nexport interface AsyncCrawlerVisitor {\n  onEnterObject?: (path: string, value: TypedValueWithPath, schema: InternalTypeSchema) => Promise<void>;\n  onExitObject?: (path: string, value: TypedValueWithPath, schema: InternalTypeSchema) => Promise<void>;\n  onEnterResource?: (path: string, value: TypedValueWithPath, schema: InternalTypeSchema) => Promise<void>;\n  onExitResource?: (path: string, value: TypedValueWithPath, schema: InternalTypeSchema) => Promise<void>;\n  visitPropertyAsync: (\n    parent: TypedValueWithPath,\n    key: string,\n    path: string,\n    value: TypedValueWithPath | TypedValueWithPath[],\n    schema: InternalTypeSchema\n  ) => Promise<void>;\n}\n\n/** @deprecated - Use AsyncCrawlerVisitor instead */\nexport type AsyncResourceVisitor = AsyncCrawlerVisitor;\n\nfunction isSchema(obj: InternalTypeSchema | CrawlerOptions): obj is InternalTypeSchema {\n  return 'elements' in obj;\n}\n\nfunction isAsync(visitor: CrawlerVisitor | AsyncCrawlerVisitor): visitor is AsyncCrawlerVisitor {\n  return Boolean((visitor as AsyncCrawlerVisitor).visitPropertyAsync);\n}\n\n/**\n * Crawls the resource synchronously.\n * @param resource - The resource to crawl.\n * @param visitor - The visitor functions to apply while crawling.\n * @param schema - The schema to use for the resource.\n * @param initialPath - The path within the resource form which to start crawling.\n * @deprecated - Use crawlTypedValue instead\n */\nexport function crawlResource(\n  resource: Resource,\n  visitor: CrawlerVisitor,\n  schema?: InternalTypeSchema,\n  initialPath?: string\n): void;\n/**\n * Crawls the resource asynchronously.\n * @param resource - The resource to crawl.\n * @param visitor - The visitor functions to apply while crawling.\n * @param options - Options for how to crawl the resource.\n * @returns void\n * @deprecated - Use crawlTypedValueAsync instead\n */\nexport function crawlResource(resource: Resource, visitor: AsyncCrawlerVisitor, options: CrawlerOptions): Promise<void>;\n/**\n * Crawls the resource synchronously.\n * @param resource - The resource to crawl.\n * @param visitor - The visitor functions to apply while crawling.\n * @param options - Options for how to crawl the resource.\n * @deprecated - Use crawlTypedValue instead\n */\nexport function crawlResource(resource: Resource, visitor: CrawlerVisitor, options?: CrawlerOptions): void;\n\n/**\n * Crawls the resource synchronously.\n * @param resource - The resource to crawl.\n * @param visitor - The visitor functions to apply while crawling.\n * @param schema - The schema to use for the resource.\n * @param initialPath - The path within the resource form which to start crawling.\n * @returns Promise\n * @deprecated - Use crawlTypedValue or crawlTypedValueAsync instead\n */\nexport function crawlResource(\n  resource: Resource,\n  visitor: CrawlerVisitor | AsyncCrawlerVisitor,\n  schema?: InternalTypeSchema | CrawlerOptions,\n  initialPath?: string\n): Promise<void> | void {\n  let options: CrawlerOptions | undefined;\n  if (schema && isSchema(schema)) {\n    options = { schema, initialPath };\n  } else {\n    options = schema;\n  }\n\n  if (isAsync(visitor)) {\n    return crawlTypedValueAsync(toTypedValue(resource), visitor, options);\n  } else {\n    return crawlTypedValue(toTypedValue(resource), visitor, options);\n  }\n}\n\n/**\n * Crawls the resource asynchronously.\n * @param resource - The resource to crawl.\n * @param visitor - The visitor functions to apply while crawling.\n * @param options - Options for how to crawl the resource.\n * @returns Promise\n * @deprecated - Use crawlTypedValueAsync instead\n */\nexport async function crawlResourceAsync(\n  resource: Resource,\n  visitor: AsyncCrawlerVisitor,\n  options: CrawlerOptions\n): Promise<void> {\n  return crawlTypedValueAsync(toTypedValue(resource), visitor, options);\n}\n\nexport interface CrawlerOptions {\n  skipMissingProperties?: boolean;\n  schema?: InternalTypeSchema;\n  initialPath?: string;\n}\n\n/** @deprecated - Use CrawlerOptions instead */\nexport type ResourceCrawlerOptions = CrawlerOptions;\n\n/**\n * Crawls the typed value synchronously.\n * @param typedValue - The typed value to crawl.\n * @param visitor - The visitor functions to apply while crawling.\n * @param options - Options for how to crawl the typed value.\n */\nexport function crawlTypedValue(typedValue: TypedValue, visitor: CrawlerVisitor, options?: CrawlerOptions): void {\n  new Crawler(typedValue, visitor, options).crawl();\n}\n\n/**\n * Crawls the typed value asynchronously.\n * @param typedValue - The typed value to crawl.\n * @param visitor - The visitor functions to apply while crawling.\n * @param options - Options for how to crawl the typed value.\n * @returns Promise to crawl the typed value.\n */\nexport function crawlTypedValueAsync(\n  typedValue: TypedValue,\n  visitor: AsyncCrawlerVisitor,\n  options?: CrawlerOptions\n): Promise<void> {\n  return new AsyncCrawler(typedValue, visitor, options).crawl();\n}\n\nclass Crawler {\n  private readonly root: TypedValue;\n  private readonly visitor: CrawlerVisitor;\n  private readonly schema: InternalTypeSchema;\n  private readonly initialPath: string;\n  private readonly excludeMissingProperties?: boolean;\n\n  constructor(root: TypedValue, visitor: CrawlerVisitor, options?: CrawlerOptions) {\n    this.root = root;\n    this.visitor = visitor;\n\n    this.schema = options?.schema ?? getDataType(root.type);\n    this.initialPath = options?.initialPath ?? this.schema.path;\n    this.excludeMissingProperties = options?.skipMissingProperties;\n  }\n\n  crawl(): void {\n    this.crawlObject({ ...this.root, path: this.initialPath }, this.schema, this.initialPath);\n  }\n\n  private crawlObject(obj: TypedValueWithPath, schema: InternalTypeSchema, path: string): void {\n    const objIsResource = isResource(obj.value);\n\n    if (objIsResource && this.visitor.onEnterResource) {\n      this.visitor.onEnterResource(path, obj, schema);\n    }\n\n    if (this.visitor.onEnterObject) {\n      this.visitor.onEnterObject(path, obj, schema);\n    }\n\n    if (this.excludeMissingProperties) {\n      for (const key of Object.keys(obj.value)) {\n        this.crawlProperty(obj, key, schema, `${path}.${key}`);\n      }\n    } else {\n      for (const key of Object.keys(schema.elements)) {\n        this.crawlProperty(obj, key, schema, `${path}.${key}`);\n      }\n    }\n\n    if (this.visitor.onExitObject) {\n      this.visitor.onExitObject(path, obj, schema);\n    }\n\n    if (objIsResource && this.visitor.onExitResource) {\n      this.visitor.onExitResource(path, obj, schema);\n    }\n  }\n\n  private crawlProperty(parent: TypedValueWithPath, key: string, schema: InternalTypeSchema, path: string): void {\n    const propertyValues = getNestedProperty(parent, key, { withPath: true });\n    if (this.visitor.visitProperty) {\n      this.visitor.visitProperty(parent, key, path, propertyValues, schema);\n    }\n\n    for (const propertyValue of propertyValues) {\n      if (propertyValue) {\n        for (const value of arrayify(propertyValue) as TypedValueWithPath[]) {\n          this.crawlPropertyValue(value, path);\n        }\n      }\n    }\n  }\n\n  private crawlPropertyValue(value: TypedValueWithPath, path: string): void {\n    if (!isPrimitiveType(value.type)) {\n      // Recursively crawl as the expected data type\n      const type = getDataType(value.type);\n      this.crawlObject(value, type, path);\n    }\n  }\n}\n\nclass AsyncCrawler {\n  private readonly root: TypedValue;\n  private readonly visitor: AsyncCrawlerVisitor;\n  private readonly schema: InternalTypeSchema;\n  private readonly initialPath: string;\n  private readonly excludeMissingProperties?: boolean;\n\n  constructor(root: TypedValue, visitor: AsyncCrawlerVisitor, options?: CrawlerOptions) {\n    this.root = root;\n    this.visitor = visitor;\n\n    this.schema = options?.schema ?? getDataType(root.type);\n    this.initialPath = options?.initialPath ?? this.schema.path;\n    this.excludeMissingProperties = options?.skipMissingProperties;\n  }\n\n  async crawl(): Promise<void> {\n    return this.crawlObject({ ...this.root, path: this.initialPath }, this.schema, this.initialPath);\n  }\n\n  private async crawlObject(obj: TypedValueWithPath, schema: InternalTypeSchema, path: string): Promise<void> {\n    const objIsResource = isResource(obj.value);\n\n    if (objIsResource && this.visitor.onEnterResource) {\n      await this.visitor.onEnterResource(path, obj, schema);\n    }\n\n    if (this.visitor.onEnterObject) {\n      await this.visitor.onEnterObject(path, obj, schema);\n    }\n\n    if (this.excludeMissingProperties && obj.value) {\n      for (const key of Object.keys(obj.value)) {\n        await this.crawlProperty(obj, key, schema, `${path}.${key}`);\n      }\n    } else {\n      for (const key of Object.keys(schema.elements)) {\n        await this.crawlProperty(obj, key, schema, `${path}.${key}`);\n      }\n    }\n\n    if (this.visitor.onExitObject) {\n      await this.visitor.onExitObject(path, obj, schema);\n    }\n\n    if (objIsResource && this.visitor.onExitResource) {\n      await this.visitor.onExitResource(path, obj, schema);\n    }\n  }\n\n  private async crawlProperty(\n    parent: TypedValueWithPath,\n    key: string,\n    schema: InternalTypeSchema,\n    path: string\n  ): Promise<void> {\n    const propertyValues = getNestedProperty(parent, key, { withPath: true });\n    if (this.visitor.visitPropertyAsync) {\n      for (const propertyValue of propertyValues) {\n        await this.visitor.visitPropertyAsync(parent, key, path, propertyValue, schema);\n      }\n    }\n\n    for (const propertyValue of propertyValues) {\n      if (propertyValue) {\n        for (const value of arrayify(propertyValue) as TypedValueWithPath[]) {\n          await this.crawlPropertyValue(value, path);\n        }\n      }\n    }\n  }\n\n  private async crawlPropertyValue(value: TypedValueWithPath, path: string): Promise<void> {\n    if (!isPrimitiveType(value.type)) {\n      // Recursively crawl as the expected data type\n      const type = getDataType(value.type);\n      await this.crawlObject(value, type, path);\n    }\n  }\n}\n\nexport function getNestedProperty(\n  value: TypedValueWithPath | undefined,\n  key: string,\n  options: { profileUrl?: string; withPath: true }\n): (TypedValueWithPath | TypedValueWithPath[])[];\nexport function getNestedProperty(\n  value: TypedValue | undefined,\n  key: string,\n  options?: { profileUrl?: string; withPath?: false }\n): (TypedValue | TypedValue[] | undefined)[];\nexport function getNestedProperty(\n  value: TypedValue | undefined,\n  key: string,\n  options?: { profileUrl?: string; withPath?: boolean }\n): (TypedValue | TypedValue[] | undefined)[] {\n  if (value === undefined) {\n    return [undefined];\n  }\n\n  if (key === '$this') {\n    return [value];\n  }\n\n  const propertyGetter = options?.withPath ? getTypedPropertyValueWithPath : getTypedPropertyValue;\n\n  const [firstProp, ...nestedProps] = key.split('.');\n  let propertyValues = [propertyGetter(value, firstProp, options)];\n  for (const prop of nestedProps) {\n    const next = [];\n    for (const current of propertyValues) {\n      if (Array.isArray(current)) {\n        for (const element of current) {\n          next.push(propertyGetter(element, prop, options));\n        }\n      } else if (options?.withPath && current && current.value !== undefined) {\n        next.push(propertyGetter(current, prop, options));\n      } else if (!options?.withPath && current !== undefined) {\n        next.push(propertyGetter(current, prop, options));\n      }\n    }\n    propertyValues = next;\n  }\n  return propertyValues;\n}\n\nexport function getTypedPropertyValueWithPath(\n  input: TypedValue | TypedValueWithPath,\n  path: string,\n  options?: GetTypedPropertyValueOptions\n): TypedValueWithPath[] | TypedValueWithPath {\n  const parentPath = (input as TypedValueWithPath).path;\n  return withPath(getTypedPropertyValue(input, path, options), parentPath, path);\n}\n\nexport type TypedValueWithPath = TypedValue & { path: string };\n\nfunction withPath(\n  tv: TypedValue | TypedValue[] | undefined,\n  parentPath: string | undefined,\n  key: string\n): TypedValueWithPath | TypedValueWithPath[] {\n  const parentPrefix = parentPath ? parentPath + '.' : '';\n\n  if (tv === undefined) {\n    return { type: 'undefined', value: undefined, path: `${parentPrefix}${key}` };\n  }\n\n  if (Array.isArray(tv)) {\n    return tv.map((v, idx) => ({\n      ...v,\n      path: `${parentPrefix}${key}[${idx}]`,\n    }));\n  }\n\n  return { ...tv, path: `${parentPrefix}${key}` };\n}\n", "import { OperationOutcomeIssue, Resource, StructureDefinition } from '@medplum/fhirtypes';\nimport { HTTP_HL7_ORG, UCUM } from '../constants';\nimport { evalFhirPathTyped } from '../fhirpath/parse';\nimport { getTypedPropertyValue, toTypedValue } from '../fhirpath/utils';\nimport {\n  OperationOutcomeError,\n  createConstraintIssue,\n  createOperationOutcomeIssue,\n  createProcessingIssue,\n  createStructureIssue,\n  validationError,\n} from '../outcomes';\nimport { PropertyType, TypedValue, isReference, isResource } from '../types';\nimport { arrayify, deepEquals, deepIncludes, isEmpty } from '../utils';\nimport { CrawlerVisitor, TypedValueWithPath, crawlTypedValue, getNestedProperty } from './crawler';\nimport {\n  Constraint,\n  InternalSchemaElement,\n  InternalTypeSchema,\n  SliceDefinition,\n  SliceDiscriminator,\n  SlicingRules,\n  getDataType,\n  parseStructureDefinition,\n} from './types';\n\n/*\n * This file provides schema validation utilities for FHIR JSON objects.\n *\n * See: [JSON Representation of Resources](https://hl7.org/fhir/json.html)\n * See: [FHIR Data Types](https://www.hl7.org/fhir/datatypes.html)\n */\nexport const fhirTypeToJsType = {\n  base64Binary: 'string',\n  boolean: 'boolean',\n  canonical: 'string',\n  code: 'string',\n  date: 'string',\n  dateTime: 'string',\n  decimal: 'number',\n  id: 'string',\n  instant: 'string',\n  integer: 'number',\n  integer64: 'string',\n  markdown: 'string',\n  oid: 'string',\n  positiveInt: 'number',\n  string: 'string',\n  time: 'string',\n  unsignedInt: 'number',\n  uri: 'string',\n  url: 'string',\n  uuid: 'string',\n  xhtml: 'string',\n  'http://hl7.org/fhirpath/System.String': 'string', // Not actually a FHIR type, but included in some StructureDefinition resources\n} as const satisfies Record<string, 'string' | 'boolean' | 'number'>;\n\n/**\n * Returns true if the type code is a primitive type.\n * @param code - The type code to check.\n * @returns True if the type code is a primitive type.\n */\nexport function isPrimitiveType(code: string): boolean {\n  return code === 'undefined' || code in fhirTypeToJsType;\n}\n\n/*\n * This file provides schema validation utilities for FHIR JSON objects.\n *\n * See: [JSON Representation of Resources](https://hl7.org/fhir/json.html)\n * See: [FHIR Data Types](https://www.hl7.org/fhir/datatypes.html)\n */\nexport const validationRegexes: Record<string, RegExp> = {\n  base64Binary: /^([A-Za-z\\d+/]{4})*([A-Za-z\\d+/]{2}==|[A-Za-z\\d+/]{3}=)?$/,\n  canonical: /^\\S*$/,\n  code: /^[^\\s]+( [^\\s]+)*$/,\n  date: /^(\\d(\\d(\\d[1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2]\\d|3[0-1]))?)?$/,\n  dateTime:\n    /^(\\d(\\d(\\d[1-9]|[1-9]0)|[1-9]00)|[1-9]000)(-(0[1-9]|1[0-2])(-(0[1-9]|[1-2]\\d|3[0-1])(T([01]\\d|2[0-3])(:[0-5]\\d:([0-5]\\d|60)(\\.\\d{1,9})?)?)?)?(Z|[+-]((0\\d|1[0-3]):[0-5]\\d|14:00)?)?)?$/,\n  id: /^[A-Za-z0-9\\-.]{1,64}$/,\n  instant:\n    /^(\\d(\\d(\\d[1-9]|[1-9]0)|[1-9]00)|[1-9]000)-(0[1-9]|1[0-2])-(0[1-9]|[1-2]\\d|3[0-1])T([01]\\d|2[0-3]):[0-5]\\d:([0-5]\\d|60)(\\.\\d{1,9})?(Z|[+-]((0\\d|1[0-3]):[0-5]\\d|14:00))$/,\n  markdown: /^[\\s\\S]+$/,\n  oid: /^urn:oid:[0-2](\\.(0|[1-9]\\d*))+$/,\n  string: /^[\\s\\S]+$/,\n  time: /^([01]\\d|2[0-3]):[0-5]\\d:([0-5]\\d|60)(\\.\\d{1,9})?$/,\n  uri: /^\\S*$/,\n  url: /^\\S*$/,\n  uuid: /^urn:uuid:[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/,\n  xhtml: /.*/,\n} as const;\n\n/**\n * List of constraint keys that aren't to be checked in an expression.\n */\nconst skippedConstraintKeys: Record<string, boolean> = {\n  'ele-1': true,\n  'dom-3': true, // If the resource is contained in another resource, it SHALL be referred to from elsewhere in the resource (requries \"descendants()\")\n  'org-1': true, // The organization SHALL at least have a name or an identifier, and possibly more than one (back compat)\n  'sdf-19': true, // FHIR Specification models only use FHIR defined types\n};\n\nexport interface ValidatorOptions {\n  profile?: StructureDefinition;\n}\n\nexport function validateResource(resource: Resource, options?: ValidatorOptions): OperationOutcomeIssue[] {\n  if (!resource.resourceType) {\n    throw new OperationOutcomeError(validationError('Missing resource type'));\n  }\n  return new ResourceValidator(toTypedValue(resource), options).validate();\n}\n\nexport function validateTypedValue(typedValue: TypedValue, options?: ValidatorOptions): OperationOutcomeIssue[] {\n  return new ResourceValidator(typedValue, options).validate();\n}\n\nclass ResourceValidator implements CrawlerVisitor {\n  private issues: OperationOutcomeIssue[];\n  private root: TypedValue;\n  private currentResource: Resource[];\n  private readonly schema: InternalTypeSchema;\n\n  constructor(typedValue: TypedValue, options?: ValidatorOptions) {\n    this.issues = [];\n    this.root = typedValue;\n    this.currentResource = [];\n    if (isResource(typedValue.value)) {\n      this.currentResource.push(typedValue.value);\n    }\n    if (!options?.profile) {\n      this.schema = getDataType(typedValue.type);\n    } else {\n      this.schema = parseStructureDefinition(options.profile);\n    }\n  }\n\n  validate(): OperationOutcomeIssue[] {\n    // Check root constraints\n    this.constraintsCheck({ ...this.root, path: this.schema.path }, this.schema);\n\n    checkObjectForNull(this.root.value as unknown as Record<string, unknown>, this.schema.path, this.issues);\n\n    crawlTypedValue(this.root, this, { schema: this.schema, initialPath: this.schema.path });\n\n    const issues = this.issues;\n\n    let foundError = false;\n    for (const issue of issues) {\n      if (issue.severity === 'error') {\n        foundError = true;\n      }\n    }\n\n    if (foundError) {\n      throw new OperationOutcomeError({\n        resourceType: 'OperationOutcome',\n        issue: issues,\n      });\n    }\n\n    return issues;\n  }\n\n  onExitObject(_path: string, obj: TypedValueWithPath, schema: InternalTypeSchema): void {\n    //@TODO(mattwiller 2023-06-05): Detect extraneous properties in a single pass by keeping track of all keys that\n    // were correctly matched to resource properties as elements are validated above\n    this.checkAdditionalProperties(obj, schema.elements, obj.path);\n  }\n\n  onEnterResource(_path: string, obj: TypedValueWithPath): void {\n    this.currentResource.push(obj.value);\n  }\n\n  onExitResource(): void {\n    this.currentResource.pop();\n  }\n\n  visitProperty(\n    _parent: TypedValueWithPath,\n    key: string,\n    path: string,\n    propertyValues: (TypedValueWithPath | TypedValueWithPath[])[],\n    schema: InternalTypeSchema\n  ): void {\n    const element = schema.elements[key];\n    if (!element) {\n      throw new Error(`Missing element validation schema for ${key}`);\n    }\n\n    for (const value of propertyValues) {\n      if (!this.checkPresence(value, element, path)) {\n        return;\n      }\n      // Check cardinality\n      let values: TypedValueWithPath[];\n      if (element.isArray) {\n        if (!Array.isArray(value)) {\n          this.issues.push(createStructureIssue(path, 'Expected array of values for property'));\n          return;\n        }\n        values = value;\n      } else {\n        if (Array.isArray(value)) {\n          this.issues.push(createStructureIssue(path, 'Expected single value for property'));\n          return;\n        }\n        values = [value];\n      }\n\n      if (values.length < element.min || values.length > element.max) {\n        this.issues.push(\n          createStructureIssue(\n            element.path,\n            `Invalid number of values: expected ${element.min}..${\n              Number.isFinite(element.max) ? element.max : '*'\n            }, but found ${values.length}`\n          )\n        );\n      }\n\n      if (!matchesSpecifiedValue(value, element)) {\n        this.issues.push(createStructureIssue(path, 'Value did not match expected pattern'));\n      }\n\n      const sliceCounts: Record<string, number> | undefined = element.slicing\n        ? Object.fromEntries(element.slicing.slices.map((s) => [s.name, 0]))\n        : undefined;\n      for (const value of values) {\n        this.constraintsCheck(value, element);\n        this.referenceTypeCheck(value, element);\n        this.checkPropertyValue(value);\n\n        const sliceName = checkSliceElement(value, element.slicing);\n        if (sliceName && sliceCounts) {\n          sliceCounts[sliceName] += 1;\n        }\n      }\n\n      this.validateSlices(element.slicing?.slices, sliceCounts, path);\n    }\n  }\n\n  private checkPresence(\n    value: TypedValueWithPath | TypedValueWithPath[],\n    field: InternalSchemaElement,\n    path: string\n  ): boolean {\n    if (!Array.isArray(value) && value.value === undefined) {\n      if (field.min > 0) {\n        this.issues.push(createStructureIssue(value.path, 'Missing required property'));\n      }\n      return false;\n    }\n\n    if (isEmpty(value)) {\n      this.issues.push(createStructureIssue(path, 'Invalid empty value'));\n      return false;\n    }\n\n    return true;\n  }\n\n  private checkPropertyValue(value: TypedValueWithPath): void {\n    if (isPrimitiveType(value.type)) {\n      this.validatePrimitiveType(value);\n    }\n  }\n\n  private validateSlices(\n    slices: SliceDefinition[] | undefined,\n    counts: Record<string, number> | undefined,\n    path: string\n  ): void {\n    if (!slices || !counts) {\n      return;\n    }\n    for (const slice of slices) {\n      const sliceCardinality = counts[slice.name];\n      if (sliceCardinality < slice.min || sliceCardinality > slice.max) {\n        this.issues.push(\n          createStructureIssue(\n            path,\n            `Incorrect number of values provided for slice '${slice.name}': expected ${slice.min}..${\n              Number.isFinite(slice.max) ? slice.max : '*'\n            }, but found ${sliceCardinality}`\n          )\n        );\n      }\n    }\n  }\n\n  private checkAdditionalProperties(\n    parent: TypedValueWithPath,\n    properties: Record<string, InternalSchemaElement>,\n    path: string\n  ): void {\n    const object = parent.value as Record<string, unknown> | undefined;\n    if (!object) {\n      return;\n    }\n    const choiceOfTypeElements: Record<string, string> = {};\n    for (const key of Object.keys(object)) {\n      if (key === 'resourceType') {\n        continue; // Skip special resource type discriminator property in JSON\n      }\n      const choiceOfTypeElementName = isChoiceOfType(parent, key, properties);\n      if (choiceOfTypeElementName) {\n        // check that the type of the primitive extension matches the type of the property\n        let relatedElementName: string;\n        let requiredRelatedElementName: string;\n        if (choiceOfTypeElementName.startsWith('_')) {\n          relatedElementName = choiceOfTypeElementName.slice(1);\n          requiredRelatedElementName = key.slice(1);\n        } else {\n          relatedElementName = '_' + choiceOfTypeElementName;\n          requiredRelatedElementName = '_' + key;\n        }\n\n        if (\n          relatedElementName in choiceOfTypeElements &&\n          choiceOfTypeElements[relatedElementName] !== requiredRelatedElementName\n        ) {\n          this.issues.push(\n            createOperationOutcomeIssue(\n              'warning',\n              'structure',\n              `Type of primitive extension does not match the type of property \"${choiceOfTypeElementName.startsWith('_') ? choiceOfTypeElementName.slice(1) : choiceOfTypeElementName}\"`,\n              choiceOfTypeElementName\n            )\n          );\n        }\n\n        if (choiceOfTypeElements[choiceOfTypeElementName]) {\n          // Found a duplicate choice of type property\n          // TODO: This should be an error, but it's currently a warning to avoid breaking existing code\n          // Warnings are logged, but do not cause validation to fail\n          this.issues.push(\n            createOperationOutcomeIssue(\n              'warning',\n              'structure',\n              `Conflicting choice of type properties: \"${key}\", \"${choiceOfTypeElements[choiceOfTypeElementName]}\"`,\n              key\n            )\n          );\n        }\n        choiceOfTypeElements[choiceOfTypeElementName] = key;\n        continue;\n      }\n      if (!(key in properties) && !(key.startsWith('_') && key.slice(1) in properties)) {\n        this.issues.push(createStructureIssue(`${path}.${key}`, `Invalid additional property \"${key}\"`));\n      }\n    }\n  }\n\n  private constraintsCheck(value: TypedValueWithPath, field: InternalTypeSchema | InternalSchemaElement): void {\n    const constraints = field.constraints;\n    if (!constraints) {\n      return;\n    }\n    for (const constraint of constraints) {\n      if (constraint.severity === 'error' && !(constraint.key in skippedConstraintKeys)) {\n        const expression = this.isExpressionTrue(constraint, value);\n        if (!expression) {\n          this.issues.push(createConstraintIssue(value.path, constraint));\n          return;\n        }\n      }\n    }\n  }\n\n  private referenceTypeCheck(value: TypedValueWithPath, field: InternalSchemaElement): void {\n    if (value.type !== 'Reference') {\n      return;\n    }\n\n    const reference = value.value;\n    if (!isReference(reference)) {\n      // Silently ignore unrecognized reference types\n      return;\n    }\n\n    const referenceResourceType = reference.reference.split('/')[0];\n    if (!referenceResourceType) {\n      // Silently ignore empty references - that will get picked up by constraint validation\n      return;\n    }\n\n    const targetProfiles = field.type.find((t) => t.code === 'Reference')?.targetProfile;\n    if (!targetProfiles) {\n      // No required target profiles\n      return;\n    }\n\n    const hl7BaseUrl = HTTP_HL7_ORG + '/fhir/StructureDefinition/';\n    const hl7AllResourcesUrl = hl7BaseUrl + 'Resource';\n    const hl7ResourceTypeUrl = hl7BaseUrl + referenceResourceType;\n\n    const medplumBaseUrl = 'https://medplum.com/fhir/StructureDefinition/';\n    const medplumResourceTypeUrl = medplumBaseUrl + referenceResourceType;\n\n    for (const targetProfile of targetProfiles) {\n      if (\n        targetProfile === hl7AllResourcesUrl ||\n        targetProfile === hl7ResourceTypeUrl ||\n        targetProfile === medplumResourceTypeUrl\n      ) {\n        // Found a matching profile\n        return;\n      }\n\n      if (!targetProfile.startsWith(hl7BaseUrl) && !targetProfile.startsWith(medplumBaseUrl)) {\n        // This is an unrecognized target profile string\n        // For example, it could be US-Core or a custom profile definition\n        // Example: http://hl7.org/fhir/us/core/StructureDefinition/us-core-patient\n        // And therefore we cannot validate\n        return;\n      }\n    }\n\n    // All of the target profiles were recognized formats\n    // and we did not find a match\n    // TODO: This should be an error, but it's currently a warning to avoid breaking existing code\n    // Warnings are logged, but do not cause validation to fail\n    this.issues.push(\n      createOperationOutcomeIssue(\n        'warning',\n        'structure',\n        `Invalid reference: got \"${referenceResourceType}\", expected \"${targetProfiles.join('\", \"')}\"`,\n        value.path\n      )\n    );\n  }\n\n  private isExpressionTrue(constraint: Constraint, value: TypedValueWithPath): boolean {\n    const variables: Record<string, TypedValue> = {\n      '%context': value,\n      '%ucum': toTypedValue(UCUM),\n    };\n\n    if (this.currentResource.length > 0) {\n      variables['%resource'] = toTypedValue(this.currentResource[this.currentResource.length - 1]);\n    }\n\n    if (isResource(this.root.value)) {\n      variables['%rootResource'] = this.root;\n    }\n\n    try {\n      const evalValues = evalFhirPathTyped(constraint.expression, [value], variables);\n\n      return evalValues.length === 1 && evalValues[0].value === true;\n    } catch (e: any) {\n      this.issues.push(\n        createProcessingIssue(value.path, 'Error evaluating invariant expression', e, {\n          fhirpath: constraint.expression,\n        })\n      );\n      return false;\n    }\n  }\n\n  private validatePrimitiveType(typedValue: TypedValueWithPath): void {\n    const [primitiveValue, extensionElement] = unpackPrimitiveElement(typedValue);\n    const path = typedValue.path;\n\n    if (primitiveValue) {\n      const { type, value } = primitiveValue;\n      // First, make sure the value is the correct JS type\n      if (!(type in fhirTypeToJsType)) {\n        this.issues.push(createStructureIssue(path, `Invalid JSON type: ${type} is not a valid FHIR type`));\n        return;\n      }\n      const expectedType = fhirTypeToJsType[type as keyof typeof fhirTypeToJsType];\n      // biome-ignore lint/suspicious/useValidTypeof: expected value ensured to be one of: 'string' | 'boolean' | 'number'\n      if (typeof value !== expectedType) {\n        if (value !== null) {\n          this.issues.push(\n            createStructureIssue(path, `Invalid JSON type: expected ${expectedType}, but got ${typeof value}`)\n          );\n        }\n        return;\n      }\n      // Then, perform additional checks for specialty types\n      if (expectedType === 'string') {\n        this.validateString(value as string, type, path);\n      } else if (expectedType === 'number') {\n        this.validateNumber(value as number, type, path);\n      }\n    }\n    if (extensionElement) {\n      crawlTypedValue(extensionElement, this, { schema: getDataType('Element'), initialPath: path });\n    }\n  }\n\n  private validateString(str: string, type: string, path: string): void {\n    if (!str.trim()) {\n      this.issues.push(createStructureIssue(path, 'String must contain non-whitespace content'));\n      return;\n    }\n\n    const regex = validationRegexes[type];\n    if (regex && !regex.exec(str)) {\n      this.issues.push(createStructureIssue(path, 'Invalid ' + type + ' format'));\n    }\n  }\n\n  private validateNumber(n: number, type: string, path: string): void {\n    if (Number.isNaN(n) || !Number.isFinite(n)) {\n      this.issues.push(createStructureIssue(path, 'Invalid numeric value'));\n    } else if (isIntegerType(type) && !Number.isInteger(n)) {\n      this.issues.push(createStructureIssue(path, 'Expected number to be an integer'));\n    } else if (type === PropertyType.positiveInt && n <= 0) {\n      this.issues.push(createStructureIssue(path, 'Expected number to be positive'));\n    } else if (type === PropertyType.unsignedInt && n < 0) {\n      this.issues.push(createStructureIssue(path, 'Expected number to be non-negative'));\n    }\n  }\n}\n\nfunction isIntegerType(propertyType: string): boolean {\n  return (\n    propertyType === PropertyType.integer ||\n    propertyType === PropertyType.positiveInt ||\n    propertyType === PropertyType.unsignedInt\n  );\n}\n\n/**\n * Returns the choice-of-type element name if the key is a choice of type property.\n * Returns undefined if the key is not a choice of type property.\n * @param typedValue - The value to check.\n * @param key - The object key to check. This is different than the element name, which could contain \"[x]\".\n * @param propertyDefinitions - The property definitions for the object..\n * @returns The element name if a choice of type property is present, otherwise undefined.\n */\nfunction isChoiceOfType(\n  typedValue: TypedValue,\n  key: string,\n  propertyDefinitions: Record<string, InternalSchemaElement>\n): string | undefined {\n  let prefix = '';\n  if (key.startsWith('_')) {\n    key = key.slice(1);\n    prefix = '_';\n  }\n  const parts = key.split(/(?=[A-Z])/g); // Split before capital letters\n  let testProperty = '';\n  for (const part of parts) {\n    testProperty += part;\n    const elementName = testProperty + '[x]';\n    if (propertyDefinitions[elementName]) {\n      const typedPropertyValue = getTypedPropertyValue(typedValue, testProperty);\n      return typedPropertyValue ? prefix + elementName : undefined;\n    }\n  }\n  return undefined;\n}\n\nfunction checkObjectForNull(obj: Record<string, unknown>, path: string, issues: OperationOutcomeIssue[]): void {\n  for (const [key, value] of Object.entries(obj)) {\n    const propertyPath = `${path}.${key}`;\n    const partnerKey = key.startsWith('_') ? key.slice(1) : `_${key}`;\n    if (value === null) {\n      issues.push(createStructureIssue(propertyPath, 'Invalid null value'));\n    } else if (Array.isArray(value)) {\n      for (let i = 0; i < value.length; i++) {\n        if (value[i] === undefined) {\n          issues.push(createStructureIssue(`${propertyPath}[${i}]`, 'Invalid undefined value'));\n        } else if (value[i] === null && !(obj[partnerKey] as any)?.[i]) {\n          // This tests for the one case where `null` is allowed in FHIR JSON, where an array of primitive values\n          // has extensions for some but not all values\n          issues.push(createStructureIssue(`${propertyPath}[${i}]`, 'Invalid null value'));\n        } else if (value[i]) {\n          checkObjectForNull(value[i], `${propertyPath}[${i}]`, issues);\n        }\n      }\n    } else if (typeof value === 'object') {\n      checkObjectForNull(value as Record<string, unknown>, propertyPath, issues);\n    }\n  }\n}\n\nfunction matchesSpecifiedValue(value: TypedValue | TypedValue[], element: InternalSchemaElement): boolean {\n  // It is possible that `value` has additional keys beyond `type` and `value` (e.g. `expression` if a\n  // `TypedValueWithExpression` is being used), so ensure that only `type` and `value` are considered for comparison.\n  const typeAndValue = Array.isArray(value)\n    ? value.map((v) => ({ type: v.type, value: v.value }))\n    : { type: value.type, value: value.value };\n\n  if (element.pattern && !deepIncludes(typeAndValue, element.pattern)) {\n    return false;\n  }\n  if (element.fixed && !deepEquals(typeAndValue, element.fixed)) {\n    return false;\n  }\n  return true;\n}\n\nexport function matchDiscriminant(\n  value: TypedValue | TypedValue[] | undefined,\n  discriminator: SliceDiscriminator,\n  slice: SliceDefinition,\n  elements?: Record<string, InternalSchemaElement>\n): boolean {\n  if (Array.isArray(value)) {\n    // Only single values can match\n    return false;\n  }\n\n  let sliceElement: InternalSchemaElement | undefined;\n  if (discriminator.path === '$this') {\n    sliceElement = slice;\n  } else {\n    sliceElement = (elements ?? slice.elements)[discriminator.path];\n  }\n\n  const sliceType = slice.type;\n  switch (discriminator.type) {\n    case 'value':\n    case 'pattern':\n      if (!value || !sliceElement) {\n        return false;\n      }\n      if (sliceElement.pattern) {\n        return deepIncludes(value, sliceElement.pattern);\n      }\n      if (sliceElement.fixed) {\n        return deepEquals(value, sliceElement.fixed);\n      }\n\n      if (sliceElement.binding?.strength === 'required' && sliceElement.binding.valueSet) {\n        // This cannot be implemented correctly without asynchronous validation, so make it permissive for now.\n        // Ideally this should check something like value.value.coding.some((code) => isValidCode(sliceElement.binding.valueSet, code))\n        // where isValidCode is a function that checks if the code is included in the expansion of the ValueSet\n        return true;\n      }\n      break;\n    case 'type':\n      if (!value || !sliceType?.length) {\n        return false;\n      }\n      return sliceType.some((t) => t.code === value.type);\n    // Other discriminator types are not yet supported, see http://hl7.org/fhir/R4/profiling.html#discriminator\n  }\n  // Default to no match\n  return false;\n}\n\nfunction checkSliceElement(value: TypedValue, slicingRules: SlicingRules | undefined): string | undefined {\n  if (!slicingRules) {\n    return undefined;\n  }\n  for (const slice of slicingRules.slices) {\n    if (\n      slicingRules.discriminator.every((discriminator) =>\n        arrayify(getNestedProperty(value, discriminator.path))?.some((v) => matchDiscriminant(v, discriminator, slice))\n      )\n    ) {\n      return slice.name;\n    }\n  }\n  return undefined;\n}\n\nfunction unpackPrimitiveElement(v: TypedValue): [TypedValue | undefined, TypedValue | undefined] {\n  if (typeof v.value !== 'object' || !v.value) {\n    return [v, undefined];\n  }\n  const primitiveValue = v.value.valueOf();\n  if (primitiveValue === v.value) {\n    return [undefined, { type: 'Element', value: v.value }];\n  }\n  const primitiveKeys = new Set(Object.keys(primitiveValue));\n  const extensionEntries = Object.entries(v.value).filter(([k, _]) => !primitiveKeys.has(k));\n  const extensionElement = extensionEntries.length > 0 ? Object.fromEntries(extensionEntries) : undefined;\n  return [\n    { type: v.type, value: primitiveValue },\n    { type: 'Element', value: extensionElement },\n  ];\n}\n", "import { Coding, Extension, Period, Quantity } from '@medplum/fhirtypes';\nimport { PropertyType, TypedValue, getElementDefinition, isResource } from '../types';\nimport { InternalSchemaElement } from '../typeschema/types';\nimport { validationRegexes } from '../typeschema/validation';\nimport { capitalize, isCodeableConcept, isCoding, isEmpty } from '../utils';\n\n/**\n * Returns a single element array with a typed boolean value.\n * @param value - The primitive boolean value.\n * @returns Single element array with a typed boolean value.\n */\nexport function booleanToTypedValue(value: boolean): [TypedValue] {\n  return [{ type: PropertyType.boolean, value }];\n}\n\n/**\n * Returns a \"best guess\" TypedValue for a given value.\n * @param value - The unknown value to check.\n * @returns A \"best guess\" TypedValue for the given value.\n */\nexport function toTypedValue(value: unknown): TypedValue {\n  if (value === null || value === undefined) {\n    return { type: 'undefined', value: undefined };\n  } else if (Number.isSafeInteger(value)) {\n    return { type: PropertyType.integer, value };\n  } else if (typeof value === 'number') {\n    return { type: PropertyType.decimal, value };\n  } else if (typeof value === 'boolean') {\n    return { type: PropertyType.boolean, value };\n  } else if (typeof value === 'string') {\n    return { type: PropertyType.string, value };\n  } else if (isQuantity(value)) {\n    return { type: PropertyType.Quantity, value };\n  } else if (isResource(value)) {\n    return { type: value.resourceType, value };\n  } else if (isCodeableConcept(value)) {\n    return { type: PropertyType.CodeableConcept, value };\n  } else if (isCoding(value)) {\n    return { type: PropertyType.Coding, value };\n  } else {\n    return { type: PropertyType.BackboneElement, value };\n  }\n}\n\n/**\n * Converts unknown object into a JavaScript boolean.\n * Note that this is different than the FHIRPath \"toBoolean\",\n * which has particular semantics around arrays, empty arrays, and type conversions.\n * @param obj - Any value or array of values.\n * @returns The converted boolean value according to FHIRPath rules.\n */\nexport function toJsBoolean(obj: TypedValue[]): boolean {\n  return obj.length === 0 ? false : !!obj[0].value;\n}\n\nexport function singleton(collection: TypedValue[], type?: string): TypedValue | undefined {\n  if (collection.length === 0) {\n    return undefined;\n  } else if (collection.length === 1 && (!type || collection[0].type === type)) {\n    return collection[0];\n  } else {\n    throw new Error(`Expected singleton of type ${type}, but found ${JSON.stringify(collection)}`);\n  }\n}\n\nexport interface GetTypedPropertyValueOptions {\n  /** (optional) URL of a resource profile for type resolution */\n  profileUrl?: string;\n}\n\n/**\n * Returns the value of the property and the property type.\n * Some property definitions support multiple types.\n * For example, \"Observation.value[x]\" can be \"valueString\", \"valueInteger\", \"valueQuantity\", etc.\n * According to the spec, there can only be one property for a given element definition.\n * This function returns the value and the type.\n * @param input - The base context (FHIR resource or backbone element).\n * @param path - The property path.\n * @param options - (optional) Additional options\n * @returns The value of the property and the property type.\n */\nexport function getTypedPropertyValue(\n  input: TypedValue,\n  path: string,\n  options?: GetTypedPropertyValueOptions\n): TypedValue[] | TypedValue | undefined {\n  if (!input.value) {\n    return undefined;\n  }\n\n  const elementDefinition = getElementDefinition(input.type, path, options?.profileUrl);\n  if (elementDefinition) {\n    return getTypedPropertyValueWithSchema(input, path, elementDefinition);\n  }\n\n  return getTypedPropertyValueWithoutSchema(input, path);\n}\n\n/**\n * Returns the value of the property and the property type using a type schema.\n * @param typedValue - The base context (FHIR resource or backbone element).\n * @param path - The property path.\n * @param element - The property element definition.\n * @returns The value of the property and the property type.\n */\nexport function getTypedPropertyValueWithSchema(\n  typedValue: TypedValue,\n  path: string,\n  element: InternalSchemaElement\n): TypedValue[] | TypedValue | undefined {\n  // Consider the following cases of the inputs:\n\n  // \"path\" input types:\n  // 1. Simple path, e.g., \"name\"\n  // 2. Choice-of-type without type, e.g., \"value[x]\"\n  // 3. Choice-of-type with type, e.g., \"valueBoolean\"\n\n  // \"element\" can be either:\n  // 1. Full ElementDefinition from a well-formed StructureDefinition\n  // 2. Partial ElementDefinition from base-schema.json\n\n  // \"types\" input types:\n  // 1. Simple single type, e.g., \"string\"\n  // 2. Choice-of-type with full array of types, e.g., [\"string\", \"integer\", \"Quantity\"]\n  // 3. Choice-of-type with single array of types, e.g., [\"Quantity\"]\n\n  // Note that FHIR Profiles can define a single type for a choice-of-type element.\n  // e.g. https://build.fhir.org/ig/HL7/US-Core/StructureDefinition-us-core-birthsex.html\n  // Therefore, cannot only check for endsWith('[x]') since FHIRPath uses this code path\n  // with a path of 'value' and expects Choice of Types treatment\n\n  const value = typedValue.value;\n  const types = element.type;\n  if (!types || types.length === 0) {\n    return undefined;\n  }\n\n  // The path parameter can be in both \"value[x]\" form and \"valueBoolean\" form.\n  // So we need to use the element path to find the type.\n  let resultValue: any = undefined;\n  let resultType = 'undefined';\n  let primitiveExtension: Extension[] | undefined = undefined;\n\n  const lastPathSegmentIndex = element.path.lastIndexOf('.');\n  const lastPathSegment = element.path.substring(lastPathSegmentIndex + 1);\n  for (const type of types) {\n    const candidatePath = lastPathSegment.replace('[x]', capitalize(type.code));\n    resultValue = value[candidatePath];\n    primitiveExtension = value['_' + candidatePath];\n    if (resultValue !== undefined || primitiveExtension !== undefined) {\n      resultType = type.code;\n      break;\n    }\n  }\n\n  // When checking for primitive extensions, we must use the \"resolved\" path.\n  // In the case of [x] choice-of-type, the type must be resolved to a single type.\n  if (primitiveExtension) {\n    if (Array.isArray(resultValue)) {\n      // Slice to avoid mutating the array in the input value\n      resultValue = resultValue.slice();\n      for (let i = 0; i < Math.max(resultValue.length, primitiveExtension.length); i++) {\n        resultValue[i] = assignPrimitiveExtension(resultValue[i], primitiveExtension[i]);\n      }\n    } else {\n      resultValue = assignPrimitiveExtension(resultValue, primitiveExtension);\n    }\n  }\n\n  if (isEmpty(resultValue)) {\n    return undefined;\n  }\n\n  if (resultType === 'Element' || resultType === 'BackboneElement') {\n    resultType = element.type[0].code;\n  }\n\n  if (Array.isArray(resultValue)) {\n    return resultValue.map((element) => toTypedValueWithType(element, resultType));\n  } else {\n    return toTypedValueWithType(resultValue, resultType);\n  }\n}\n\nfunction toTypedValueWithType(value: any, type: string): TypedValue {\n  if (type === 'Resource' && isResource(value)) {\n    type = value.resourceType;\n  }\n  return { type, value };\n}\n\n/**\n * Returns the value of the property and the property type using a type schema.\n * Note that because the type schema is not available, this function may be inaccurate.\n * In some cases, that is the desired behavior.\n * @param typedValue - The base context (FHIR resource or backbone element).\n * @param path - The property path.\n * @returns The value of the property and the property type.\n */\nexport function getTypedPropertyValueWithoutSchema(\n  typedValue: TypedValue,\n  path: string\n): TypedValue[] | TypedValue | undefined {\n  const input = typedValue.value;\n  if (!input || typeof input !== 'object') {\n    return undefined;\n  }\n\n  let result: TypedValue[] | TypedValue | undefined = undefined;\n\n  if (path in input) {\n    const propertyValue = (input as { [key: string]: unknown })[path];\n    if (Array.isArray(propertyValue)) {\n      result = propertyValue.map(toTypedValue);\n    } else {\n      result = toTypedValue(propertyValue);\n    }\n  } else {\n    // Only support property names that would be valid types\n    // Examples:\n    // value + valueString = ok, because \"string\" is valid\n    // value + valueDecimal = ok, because \"decimal\" is valid\n    // id + identifier = not ok, because \"entifier\" is not a valid type\n    // resource + resourceType = not ok, because \"type\" is not a valid type\n    //eslint-disable-next-line guard-for-in\n    const trimmedPath = path.endsWith('[x]') ? path.substring(0, path.length - 3) : path;\n    for (const propertyType of Object.values(PropertyType)) {\n      const propertyName = trimmedPath + capitalize(propertyType);\n      if (propertyName in input) {\n        const propertyValue = (input as { [key: string]: unknown })[propertyName];\n        if (Array.isArray(propertyValue)) {\n          result = propertyValue.map((v) => ({ type: propertyType, value: v }));\n        } else {\n          result = { type: propertyType, value: propertyValue };\n        }\n        break;\n      }\n    }\n  }\n\n  if (Array.isArray(result)) {\n    if (result.length === 0 || isEmpty(result[0])) {\n      return undefined;\n    }\n  } else if (isEmpty(result)) {\n    return undefined;\n  }\n\n  return result;\n}\n\n/**\n * Removes duplicates in array using FHIRPath equality rules.\n * @param arr - The input array.\n * @returns The result array with duplicates removed.\n */\nexport function removeDuplicates(arr: TypedValue[]): TypedValue[] {\n  const result: TypedValue[] = [];\n  for (const i of arr) {\n    let found = false;\n    for (const j of result) {\n      if (toJsBoolean(fhirPathEquals(i, j))) {\n        found = true;\n        break;\n      }\n    }\n    if (!found) {\n      result.push(i);\n    }\n  }\n  return result;\n}\n\n/**\n * Returns a negated FHIRPath boolean expression.\n * @param input - The input array.\n * @returns The negated type value array.\n */\nexport function fhirPathNot(input: TypedValue[]): TypedValue[] {\n  return booleanToTypedValue(!toJsBoolean(input));\n}\n\n/**\n * Determines if two arrays are equal according to FHIRPath equality rules.\n * @param x - The first array.\n * @param y - The second array.\n * @returns FHIRPath true if the arrays are equal.\n */\nexport function fhirPathArrayEquals(x: TypedValue[], y: TypedValue[]): TypedValue[] {\n  if (x.length === 0 || y.length === 0) {\n    return [];\n  }\n  if (x.length !== y.length) {\n    return booleanToTypedValue(false);\n  }\n  return booleanToTypedValue(x.every((val, index) => toJsBoolean(fhirPathEquals(val, y[index]))));\n}\n\n/**\n * Determines if two arrays are not equal according to FHIRPath equality rules.\n * @param x - The first array.\n * @param y - The second array.\n * @returns FHIRPath true if the arrays are not equal.\n */\nexport function fhirPathArrayNotEquals(x: TypedValue[], y: TypedValue[]): TypedValue[] {\n  if (x.length === 0 || y.length === 0) {\n    return [];\n  }\n  if (x.length !== y.length) {\n    return booleanToTypedValue(true);\n  }\n  return booleanToTypedValue(x.some((val, index) => !toJsBoolean(fhirPathEquals(val, y[index]))));\n}\n\n/**\n * Determines if two values are equal according to FHIRPath equality rules.\n * @param x - The first value.\n * @param y - The second value.\n * @returns True if equal.\n */\nexport function fhirPathEquals(x: TypedValue, y: TypedValue): TypedValue[] {\n  const xValue = x.value?.valueOf();\n  const yValue = y.value?.valueOf();\n  if (typeof xValue === 'number' && typeof yValue === 'number') {\n    return booleanToTypedValue(Math.abs(xValue - yValue) < 1e-8);\n  }\n  if (isQuantity(xValue) && isQuantity(yValue)) {\n    return booleanToTypedValue(isQuantityEquivalent(xValue, yValue));\n  }\n  if (typeof xValue === 'object' && typeof yValue === 'object') {\n    return booleanToTypedValue(deepEquals(x, y));\n  }\n  return booleanToTypedValue(xValue === yValue);\n}\n\n/**\n * Determines if two arrays are equivalent according to FHIRPath equality rules.\n * @param x - The first array.\n * @param y - The second array.\n * @returns FHIRPath true if the arrays are equivalent.\n */\nexport function fhirPathArrayEquivalent(x: TypedValue[], y: TypedValue[]): TypedValue[] {\n  if (x.length === 0 && y.length === 0) {\n    return booleanToTypedValue(true);\n  }\n  if (x.length !== y.length) {\n    return booleanToTypedValue(false);\n  }\n  x.sort(fhirPathEquivalentCompare);\n  y.sort(fhirPathEquivalentCompare);\n  return booleanToTypedValue(x.every((val, index) => toJsBoolean(fhirPathEquivalent(val, y[index]))));\n}\n\n/**\n * Determines if two values are equivalent according to FHIRPath equality rules.\n * @param x - The first value.\n * @param y - The second value.\n * @returns True if equivalent.\n */\nexport function fhirPathEquivalent(x: TypedValue, y: TypedValue): TypedValue[] {\n  const { type: xType, value: xValueRaw } = x;\n  const { type: yType, value: yValueRaw } = y;\n  const xValue = xValueRaw?.valueOf();\n  const yValue = yValueRaw?.valueOf();\n\n  if (typeof xValue === 'number' && typeof yValue === 'number') {\n    // Use more generous threshold than equality\n    // Decimal: values must be equal, comparison is done on values rounded to the precision of the least precise operand.\n    // Trailing zeroes after the decimal are ignored in determining precision.\n    return booleanToTypedValue(Math.abs(xValue - yValue) < 0.01);\n  }\n  if (isQuantity(xValue) && isQuantity(yValue)) {\n    return booleanToTypedValue(isQuantityEquivalent(xValue, yValue));\n  }\n\n  if (xType === 'Coding' && yType === 'Coding') {\n    if (typeof xValue !== 'object' || typeof yValue !== 'object') {\n      return booleanToTypedValue(false);\n    }\n    // \"In addition, for Coding values, equivalence is defined based on the code and system elements only.\n    // The version, display, and userSelected elements are ignored for the purposes of determining Coding equivalence.\"\n    // Source: https://hl7.org/fhir/fhirpath.html#changes\n\n    // We need to check if both `code` and `system` are equivalent.\n    // If both have undefined `system` fields, If so, then the two's `system` values must be compared.\n    // Essentially they must both be `undefined` or both the same.\n    return booleanToTypedValue(\n      (xValue as Coding).code === (yValue as Coding).code && (xValue as Coding).system === (yValue as Coding).system\n    );\n  }\n\n  if (typeof xValue === 'object' && typeof yValue === 'object') {\n    return booleanToTypedValue(deepEquals({ ...xValue, id: undefined }, { ...yValue, id: undefined }));\n  }\n  if (typeof xValue === 'string' && typeof yValue === 'string') {\n    // String: the strings must be the same, ignoring case and locale, and normalizing whitespace\n    // (see String Equivalence for more details).\n    return booleanToTypedValue(xValue.toLowerCase() === yValue.toLowerCase());\n  }\n  return booleanToTypedValue(xValue === yValue);\n}\n\n/**\n * Returns the sort order of two values for FHIRPath array equivalence.\n * @param x - The first value.\n * @param y - The second value.\n * @returns The sort order of the values.\n */\nfunction fhirPathEquivalentCompare(x: TypedValue, y: TypedValue): number {\n  const xValue = x.value?.valueOf();\n  const yValue = y.value?.valueOf();\n  if (typeof xValue === 'number' && typeof yValue === 'number') {\n    return xValue - yValue;\n  }\n  if (typeof xValue === 'string' && typeof yValue === 'string') {\n    return xValue.localeCompare(yValue);\n  }\n  return 0;\n}\n\n/**\n * Determines if the typed value is the desired type.\n * @param typedValue - The typed value to check.\n * @param desiredType - The desired type name.\n * @returns True if the typed value is of the desired type.\n */\nexport function fhirPathIs(typedValue: TypedValue, desiredType: string): boolean {\n  const { value } = typedValue;\n  if (value === undefined || value === null) {\n    return false;\n  }\n\n  switch (desiredType) {\n    case 'Boolean':\n      return typeof value === 'boolean';\n    case 'Decimal':\n    case 'Integer':\n      return typeof value === 'number';\n    case 'Date':\n      return isDateString(value);\n    case 'DateTime':\n      return isDateTimeString(value);\n    case 'Time':\n      return typeof value === 'string' && !!/^T\\d/.exec(value);\n    case 'Period':\n      return isPeriod(value);\n    case 'Quantity':\n      return isQuantity(value);\n    default:\n      return typeof value === 'object' && value?.resourceType === desiredType;\n  }\n}\n\n/**\n * Returns true if the input value is a YYYY-MM-DD date string.\n * @param input - Unknown input value.\n * @returns True if the input is a date string.\n */\nexport function isDateString(input: unknown): input is string {\n  return typeof input === 'string' && !!validationRegexes.date.exec(input);\n}\n\n/**\n * Returns true if the input value is a YYYY-MM-DDThh:mm:ss.sssZ date/time string.\n * @param input - Unknown input value.\n * @returns True if the input is a date/time string.\n */\nexport function isDateTimeString(input: unknown): input is string {\n  return typeof input === 'string' && !!validationRegexes.dateTime.exec(input);\n}\n\n/**\n * Determines if the input is a Period object.\n * This is heuristic based, as we do not have strong typing at runtime.\n * @param input - The input value.\n * @returns True if the input is a period.\n */\nexport function isPeriod(input: unknown): input is Period {\n  return !!(\n    input &&\n    typeof input === 'object' &&\n    (('start' in input && isDateTimeString(input.start)) || ('end' in input && isDateTimeString(input.end)))\n  );\n}\n\n/**\n * Tries to convert an unknown input value to a Period object.\n * @param input - Unknown input value.\n * @returns A Period object or undefined.\n */\nexport function toPeriod(input: unknown): Period | undefined {\n  if (!input) {\n    return undefined;\n  }\n\n  if (isDateString(input)) {\n    return {\n      start: dateStringToInstantString(input, '0000-00-00T00:00:00.000Z'),\n      end: dateStringToInstantString(input, 'xxxx-12-31T23:59:59.999Z'),\n    };\n  }\n\n  if (isDateTimeString(input)) {\n    return { start: input, end: input };\n  }\n\n  if (isPeriod(input)) {\n    return input;\n  }\n\n  return undefined;\n}\n\nfunction dateStringToInstantString(input: string, fill: string): string {\n  // Input can be any subset of YYYY-MM-DDThh:mm:ss.sssZ\n  return input + fill.substring(input.length);\n}\n\n/**\n * Determines if the input is a Quantity object.\n * This is heuristic based, as we do not have strong typing at runtime.\n * @param input - The input value.\n * @returns True if the input is a quantity.\n */\nexport function isQuantity(input: unknown): input is Quantity {\n  return !!(input && typeof input === 'object' && 'value' in input && typeof (input as Quantity).value === 'number');\n}\n\nexport function isQuantityEquivalent(x: Quantity, y: Quantity): boolean {\n  return (\n    Math.abs((x.value as number) - (y.value as number)) < 0.01 &&\n    (x.unit === y.unit || x.code === y.code || x.unit === y.code || x.code === y.unit)\n  );\n}\n\n/**\n * Resource equality.\n * See: https://dmitripavlutin.com/how-to-compare-objects-in-javascript/#4-deep-equality\n * @param object1 - The first object.\n * @param object2 - The second object.\n * @returns True if the objects are equal.\n */\nfunction deepEquals<T1 extends object, T2 extends object>(object1: T1, object2: T2): boolean {\n  const keys1 = Object.keys(object1) as (keyof T1)[];\n  const keys2 = Object.keys(object2) as (keyof T2)[];\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n  for (const key of keys1) {\n    const val1 = object1[key] as unknown;\n    const val2 = object2[key as unknown as keyof T2] as unknown;\n    if (isObject(val1) && isObject(val2)) {\n      if (!deepEquals(val1, val2)) {\n        return false;\n      }\n    } else if (val1 !== val2) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction isObject(obj: unknown): obj is object {\n  return obj !== null && typeof obj === 'object';\n}\n\nfunction assignPrimitiveExtension(target: any, primitiveExtension: any): any {\n  if (primitiveExtension) {\n    if (typeof primitiveExtension !== 'object') {\n      throw new Error('Primitive extension must be an object');\n    }\n    return safeAssign(target ?? {}, primitiveExtension);\n  }\n  return target;\n}\n\n/**\n * For primitive string, number, boolean, the return value will be the corresponding\n * `String`, `Number`, or `Boolean` version of the type.\n * @param target - The value to have `source` properties assigned to.\n * @param source - An object to be assigned to `target`.\n * @returns The `target` value with the properties of `source` assigned to it.\n */\nfunction safeAssign(target: any, source: any): any {\n  delete source.__proto__; //eslint-disable-line no-proto\n  delete source.constructor;\n  return Object.assign(target, source);\n}\n", "import {\n  Attachment,\n  Bundle,\n  CodeableConcept,\n  Coding,\n  Device,\n  Extension,\n  ExtensionValue,\n  Identifier,\n  ObservationDefinition,\n  ObservationDefinitionQualifiedInterval,\n  Patient,\n  Practitioner,\n  QuestionnaireResponse,\n  QuestionnaireResponseItem,\n  QuestionnaireResponseItemAnswer,\n  Range,\n  Reference,\n  RelatedPerson,\n  Resource,\n} from '@medplum/fhirtypes';\nimport { getTypedPropertyValue } from './fhirpath/utils';\nimport { formatCodeableConcept, formatHumanName } from './format';\nimport { OperationOutcomeError, validationError } from './outcomes';\nimport { isReference } from './types';\n\n/**\n * QueryTypes defines the different ways to specify FHIR search parameters.\n *\n * Can be any valid input to the URLSearchParams() constructor.\n *\n * TypeScript definitions for URLSearchParams do not match runtime behavior.\n * The official spec only accepts string values.\n * Web browsers and Node.js automatically coerce values to strings.\n * See: https://github.com/microsoft/TypeScript/issues/32951\n */\nexport type QueryTypes =\n  | URLSearchParams\n  | string[][]\n  | Record<string, string | number | boolean | undefined>\n  | string\n  | undefined;\n\nexport type ProfileResource = Patient | Practitioner | RelatedPerson;\n\n/**\n * Allowed values for `code_challenge_method` in a PKCE exchange.\n */\nexport type CodeChallengeMethod = 'plain' | 'S256';\n\nexport interface Code {\n  code?: CodeableConcept;\n}\n\nexport type ResourceWithCode = Resource & Code;\n\n/**\n * Creates a reference resource.\n * @param resource - The FHIR resource.\n * @returns A reference resource.\n */\nexport function createReference<T extends Resource>(resource: T): Reference<T> & { reference: string } {\n  const reference = getReferenceString(resource);\n  const display = getDisplayString(resource);\n  return display === reference ? { reference } : { reference, display };\n}\n\n/**\n * Returns a reference string for a resource.\n * @param input - The FHIR resource or reference.\n * @returns A reference string of the form resourceType/id.\n */\nexport function getReferenceString(input: Reference | Resource): string {\n  if (isReference(input)) {\n    return input.reference;\n  }\n  return `${(input as Resource).resourceType}/${input.id}`;\n}\n\n/**\n * Returns the ID portion of a reference.\n * @param input - A FHIR reference or resource.\n * @returns The ID portion of a reference.\n */\nexport function resolveId(input: Reference | Resource | undefined): string | undefined {\n  if (!input) {\n    return undefined;\n  }\n  if (isReference(input)) {\n    return input.reference.split('/')[1];\n  }\n  return input.id;\n}\n\n/**\n * Parses a reference and returns a tuple of [ResourceType, ID].\n * @param reference - A reference to a FHIR resource.\n * @returns A tuple containing the `ResourceType` and the ID of the resource or `undefined` when `undefined` or an invalid reference is passed.\n */\nexport function parseReference<T extends Resource>(reference: Reference<T> | undefined): [T['resourceType'], string] {\n  if (reference?.reference === undefined) {\n    throw new OperationOutcomeError(validationError('Reference missing reference property.'));\n  }\n  const [type, id] = reference.reference.split('/') as [T['resourceType'] | '', string];\n  if (type === '' || id === '' || id === undefined) {\n    throw new OperationOutcomeError(validationError('Unable to parse reference string.'));\n  }\n  return [type, id];\n}\n\n/**\n * Returns true if the resource is a \"ProfileResource\".\n * @param resource - The FHIR resource.\n * @returns True if the resource is a \"ProfileResource\".\n */\nexport function isProfileResource(resource: Resource): resource is ProfileResource {\n  return (\n    resource.resourceType === 'Patient' ||\n    resource.resourceType === 'Practitioner' ||\n    resource.resourceType === 'RelatedPerson'\n  );\n}\n\n/**\n * Returns a display string for the resource.\n * @param resource - The input resource.\n * @returns Human friendly display string.\n */\nexport function getDisplayString(resource: Resource): string {\n  if (isProfileResource(resource)) {\n    const profileName = getProfileResourceDisplayString(resource);\n    if (profileName) {\n      return profileName;\n    }\n  }\n  if (resource.resourceType === 'Device') {\n    const deviceName = getDeviceDisplayString(resource);\n    if (deviceName) {\n      return deviceName;\n    }\n  }\n  if (resource.resourceType === 'MedicationRequest' && resource.medicationCodeableConcept) {\n    return formatCodeableConcept(resource.medicationCodeableConcept);\n  }\n  if (resource.resourceType === 'Subscription' && resource.criteria) {\n    return resource.criteria;\n  }\n  if (resource.resourceType === 'User' && resource.email) {\n    return resource.email;\n  }\n  if ('name' in resource && resource.name && typeof resource.name === 'string') {\n    return resource.name;\n  }\n  if ('code' in resource && resource.code) {\n    let code = resource.code;\n    if (Array.isArray(code)) {\n      code = code[0];\n    }\n    if (isCodeableConcept(code)) {\n      return formatCodeableConcept(code);\n    }\n    if (isTextObject(code)) {\n      return code.text;\n    }\n  }\n  return getReferenceString(resource);\n}\n\n/**\n * Returns a display string for a profile resource if one is found.\n * @param resource - The profile resource.\n * @returns The display name if one is found.\n */\nfunction getProfileResourceDisplayString(resource: ProfileResource): string | undefined {\n  const names = resource.name;\n  if (names && names.length > 0) {\n    return formatHumanName(names[0]);\n  }\n  return undefined;\n}\n\n/**\n * Returns a display string for a device resource if one is found.\n * @param device - The device resource.\n * @returns The display name if one is found.\n */\nfunction getDeviceDisplayString(device: Device): string | undefined {\n  const names = device.deviceName;\n  if (names && names.length > 0) {\n    return names[0].name;\n  }\n  return undefined;\n}\n\n/**\n * Returns an image URL for the resource, if one is available.\n * @param resource - The input resource.\n * @returns The image URL for the resource or undefined.\n */\nexport function getImageSrc(resource: Resource): string | undefined {\n  if (!('photo' in resource)) {\n    return undefined;\n  }\n\n  const photo = resource.photo;\n  if (!photo) {\n    return undefined;\n  }\n\n  if (Array.isArray(photo)) {\n    for (const p of photo) {\n      const url = getPhotoImageSrc(p);\n      if (url) {\n        return url;\n      }\n    }\n  } else {\n    return getPhotoImageSrc(photo);\n  }\n\n  return undefined;\n}\n\nfunction getPhotoImageSrc(photo: Attachment): string | undefined {\n  if (photo.url && photo.contentType?.startsWith('image/')) {\n    return photo.url;\n  }\n  return undefined;\n}\n\n/**\n * Returns a Date property as a Date.\n * When working with JSON objects, Dates are often serialized as ISO-8601 strings.\n * When that happens, we need to safely convert to a proper Date object.\n * @param date - The date property value, which could be a string or a Date object.\n * @returns A Date object.\n */\nexport function getDateProperty(date: string | undefined): Date | undefined {\n  return date ? new Date(date) : undefined;\n}\n\n/**\n * Calculates the age in years from the birth date.\n * @param birthDateStr - The birth date or start date in ISO-8601 format YYYY-MM-DD.\n * @param endDateStr - Optional end date in ISO-8601 format YYYY-MM-DD. Default value is today.\n * @returns The age in years, months, and days.\n */\nexport function calculateAge(\n  birthDateStr: string,\n  endDateStr?: string\n): { years: number; months: number; days: number } {\n  const startDate = new Date(birthDateStr);\n  startDate.setUTCHours(0, 0, 0, 0);\n\n  const endDate = endDateStr ? new Date(endDateStr) : new Date();\n  endDate.setUTCHours(0, 0, 0, 0);\n\n  const startYear = startDate.getUTCFullYear();\n  const startMonth = startDate.getUTCMonth();\n  const startDay = startDate.getUTCDate();\n\n  const endYear = endDate.getUTCFullYear();\n  const endMonth = endDate.getUTCMonth();\n  const endDay = endDate.getUTCDate();\n\n  let years = endYear - startYear;\n  if (endMonth < startMonth || (endMonth === startMonth && endDay < startDay)) {\n    years--;\n  }\n\n  let months = endYear * 12 + endMonth - (startYear * 12 + startMonth);\n  if (endDay < startDay) {\n    months--;\n  }\n\n  const days = Math.floor((endDate.getTime() - startDate.getTime()) / (1000 * 60 * 60 * 24));\n\n  return { years, months, days };\n}\n\n/**\n * Calculates the age string for display using the age appropriate units.\n * If the age is greater than or equal to 2 years, then the age is displayed in years.\n * If the age is greater than or equal to 1 month, then the age is displayed in months.\n * Otherwise, the age is displayed in days.\n * @param birthDateStr - The birth date or start date in ISO-8601 format YYYY-MM-DD.\n * @param endDateStr - Optional end date in ISO-8601 format YYYY-MM-DD. Default value is today.\n * @returns The age string.\n */\nexport function calculateAgeString(birthDateStr: string, endDateStr?: string): string | undefined {\n  const { years, months, days } = calculateAge(birthDateStr, endDateStr);\n  if (years >= 2) {\n    return years.toString().padStart(3, '0') + 'Y';\n  } else if (months >= 1) {\n    return months.toString().padStart(3, '0') + 'M';\n  } else {\n    return days.toString().padStart(3, '0') + 'D';\n  }\n}\n\n/**\n * Returns all questionnaire answers as a map by link ID.\n * @param response - The questionnaire response resource.\n * @returns Questionnaire answers mapped by link ID.\n */\nexport function getQuestionnaireAnswers(\n  response: QuestionnaireResponse\n): Record<string, QuestionnaireResponseItemAnswer> {\n  const result: Record<string, QuestionnaireResponseItemAnswer> = {};\n  buildQuestionnaireAnswerItems(response.item, result);\n  return result;\n}\n\nfunction buildQuestionnaireAnswerItems(\n  items: QuestionnaireResponseItem[] | undefined,\n  result: Record<string, QuestionnaireResponseItemAnswer>\n): void {\n  if (items) {\n    for (const item of items) {\n      if (item.linkId && item.answer && item.answer.length > 0) {\n        result[item.linkId] = item.answer[0];\n      }\n      buildQuestionnaireAnswerItems(item.item, result);\n    }\n  }\n}\n\n/**\n * Returns an array of  questionnaire answers as a map by link ID.\n * @param response - The questionnaire response resource.\n * @returns Questionnaire answer arrays mapped by link ID.\n */\nexport function getAllQuestionnaireAnswers(\n  response: QuestionnaireResponse\n): Record<string, QuestionnaireResponseItemAnswer[]> {\n  const result: Record<string, QuestionnaireResponseItemAnswer[]> = {};\n  buildAllQuestionnaireAnswerItems(response.item, result);\n  return result;\n}\n\n/**\n * Recursively builds the questionnaire answer items map.\n * @param items - The current questionnaire response items.\n * @param result - The cumulative result map of answers.\n */\nfunction buildAllQuestionnaireAnswerItems(\n  items: QuestionnaireResponseItem[] | undefined,\n  result: Record<string, QuestionnaireResponseItemAnswer[]>\n): void {\n  if (items) {\n    for (const item of items) {\n      if (item.linkId && item.answer && item.answer.length > 0) {\n        if (result[item.linkId]) {\n          result[item.linkId] = [...result[item.linkId], ...item.answer];\n        } else {\n          result[item.linkId] = item.answer;\n        }\n      }\n      buildAllQuestionnaireAnswerItems(item.item, result);\n    }\n  }\n}\n\n/**\n * Returns the resource identifier for the given system.\n *\n * If multiple identifiers exist with the same system, the first one is returned.\n *\n * If the system is not found, then returns undefined.\n * @param resource - The resource to check.\n * @param system - The identifier system.\n * @returns The identifier value if found; otherwise undefined.\n */\nexport function getIdentifier(resource: Resource, system: string): string | undefined {\n  const identifiers = (resource as any).identifier;\n  if (!identifiers) {\n    return undefined;\n  }\n  const array = Array.isArray(identifiers) ? identifiers : [identifiers];\n  for (const identifier of array) {\n    if (identifier.system === system) {\n      return identifier.value;\n    }\n  }\n  return undefined;\n}\n\n/**\n * Sets a resource identifier for the given system.\n *\n * Note that this method is only available on resources that have an \"identifier\" property,\n * and that property must be an array of Identifier objects,\n * which is not true for all FHIR resources.\n *\n * If the identifier already exists, then the value is updated.\n *\n * Otherwise a new identifier is added.\n *\n * @param resource - The resource to add the identifier to.\n * @param system - The identifier system.\n * @param value - The identifier value.\n */\nexport function setIdentifier(resource: Resource & { identifier?: Identifier[] }, system: string, value: string): void {\n  const identifiers = resource.identifier;\n  if (!identifiers) {\n    resource.identifier = [{ system, value }];\n    return;\n  }\n  for (const identifier of identifiers) {\n    if (identifier.system === system) {\n      identifier.value = value;\n      return;\n    }\n  }\n  identifiers.push({ system, value });\n}\n\n/**\n * Returns an extension value by extension URLs.\n * @param resource - The base resource.\n * @param urls - Array of extension URLs.  Each entry represents a nested extension.\n * @returns The extension value if found; undefined otherwise.\n */\nexport function getExtensionValue(resource: any, ...urls: string[]): ExtensionValue | undefined {\n  const extension = getExtension(resource, ...urls);\n  if (!extension) {\n    return undefined;\n  }\n\n  const typedValue = getTypedPropertyValue({ type: 'Extension', value: extension }, 'value[x]');\n  if (!typedValue) {\n    return undefined;\n  }\n\n  return Array.isArray(typedValue) ? typedValue[0].value : typedValue.value;\n}\n\n/**\n * Returns an extension by extension URLs.\n * @param resource - The base resource.\n * @param urls - Array of extension URLs. Each entry represents a nested extension.\n * @returns The extension object if found; undefined otherwise.\n */\nexport function getExtension(resource: any, ...urls: string[]): Extension | undefined {\n  // Let curr be the current resource or extension. Extensions can be nested.\n  let curr: any = resource;\n\n  // For each of the urls, try to find a matching nested extension.\n  for (let i = 0; i < urls.length && curr; i++) {\n    curr = (curr?.extension as Extension[] | undefined)?.find((e) => e.url === urls[i]);\n  }\n\n  return curr;\n}\n\n/**\n * FHIR JSON stringify.\n * Removes properties with empty string values.\n * Removes objects with zero properties.\n * See: https://www.hl7.org/fhir/json.html\n * @param value - The input value.\n * @param pretty - Optional flag to pretty-print the JSON.\n * @returns The resulting JSON string.\n */\nexport function stringify(value: any, pretty?: boolean): string {\n  return JSON.stringify(value, stringifyReplacer, pretty ? 2 : undefined);\n}\n\n/**\n * Evaluates JSON key/value pairs for FHIR JSON stringify.\n * Removes properties with empty string values.\n * Removes objects with zero properties.\n * @param k - Property key.\n * @param v - Property value.\n * @returns The replaced value.\n */\nfunction stringifyReplacer(k: string, v: any): any {\n  return !isArrayKey(k) && isEmpty(v) ? undefined : v;\n}\n\n/**\n * Returns true if the key is an array key.\n * @param k - The property key.\n * @returns True if the key is an array key.\n */\nfunction isArrayKey(k: string): boolean {\n  return !!/\\d+$/.exec(k);\n}\n\n/**\n * Returns true if the value is empty (null, undefined, empty string, or empty object).\n * @param v - Any value.\n * @returns True if the value is an empty string or an empty object.\n */\nexport function isEmpty(v: unknown): boolean {\n  if (v === null || v === undefined) {\n    return true;\n  }\n\n  const t = typeof v;\n  if (t === 'string' || t === 'object') {\n    return !isPopulated(v);\n  }\n\n  return false;\n}\n\nexport type CanBePopulated = { length: number } | object;\n/**\n * Returns true if the value is a non-empty string, an object with a length property greater than zero, or a non-empty object\n * @param arg - Any value\n * @returns True if the value is a non-empty string, an object with a length property greater than zero, or a non-empty object\n */\nexport function isPopulated<T extends { length: number } | object>(arg: CanBePopulated | undefined | null): arg is T {\n  if (arg === null || arg === undefined) {\n    return false;\n  }\n  const t = typeof arg;\n\n  return (\n    (t === 'string' && arg !== '') ||\n    (t === 'object' && (('length' in arg && arg.length > 0) || Object.keys(arg).length > 0))\n  );\n}\n\n/**\n * Resource equality.\n * Ignores meta.versionId and meta.lastUpdated.\n * @param object1 - The first object.\n * @param object2 - The second object.\n * @param path - Optional path string.\n * @returns True if the objects are equal.\n */\nexport function deepEquals(object1: unknown, object2: unknown, path?: string): boolean {\n  if (object1 === object2) {\n    return true;\n  }\n  if (isEmpty(object1) && isEmpty(object2)) {\n    return true;\n  }\n  if (isEmpty(object1) || isEmpty(object2)) {\n    return false;\n  }\n  if (Array.isArray(object1) && Array.isArray(object2)) {\n    return deepEqualsArray(object1, object2);\n  }\n  if (Array.isArray(object1) || Array.isArray(object2)) {\n    return false;\n  }\n  if (isObject(object1) && isObject(object2)) {\n    return deepEqualsObject(object1, object2, path);\n  }\n  if (isObject(object1) || isObject(object2)) {\n    return false;\n  }\n  return false;\n}\n\nfunction deepEqualsArray(array1: unknown[], array2: unknown[]): boolean {\n  if (array1.length !== array2.length) {\n    return false;\n  }\n  for (let i = 0; i < array1.length; i++) {\n    if (!deepEquals(array1[i], array2[i])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction deepEqualsObject(\n  object1: Record<string, unknown>,\n  object2: Record<string, unknown>,\n  path: string | undefined\n): boolean {\n  const keySet = new Set<string>();\n  Object.keys(object1).forEach((k) => keySet.add(k));\n  Object.keys(object2).forEach((k) => keySet.add(k));\n  if (path === 'meta') {\n    keySet.delete('versionId');\n    keySet.delete('lastUpdated');\n    keySet.delete('author');\n  }\n  for (const key of keySet) {\n    const val1 = object1[key];\n    const val2 = object2[key];\n    if (!deepEquals(val1, val2, key)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * Checks if value includes all fields and values of pattern.\n * It doesn't matter if value has extra fields, values, etc.\n * @param value - The object being tested against pattern.\n * @param pattern - The object pattern/shape checked to exist within value.\n * @returns True if value includes all fields and values of pattern.\n */\nexport function deepIncludes(value: any, pattern: any): boolean {\n  if (isEmpty(value)) {\n    return true;\n  }\n  if (isEmpty(pattern)) {\n    return false;\n  }\n  if (Array.isArray(value) && Array.isArray(pattern)) {\n    return deepIncludesArray(value, pattern);\n  }\n  if (Array.isArray(value) || Array.isArray(pattern)) {\n    return false;\n  }\n  if (isObject(value) && isObject(pattern)) {\n    return deepIncludesObject(value, pattern);\n  } else if (isObject(value) || isObject(pattern)) {\n    return false;\n  }\n  return value === pattern;\n}\n\nfunction deepIncludesArray(value: any[], pattern: any[]): boolean {\n  return pattern.every((patternVal) => value.some((valueVal) => deepIncludes(valueVal, patternVal)));\n}\n\nfunction deepIncludesObject(value: { [key: string]: unknown }, pattern: { [key: string]: unknown }): boolean {\n  return Object.entries(pattern).every(\n    ([patternKey, patternVal]) => patternKey in value && deepIncludes(value[patternKey], patternVal)\n  );\n}\n\n/**\n * Creates a deep clone of the input value.\n *\n * Limitations:\n *  - Only supports JSON primitives and arrays.\n *  - Does not support Functions, lambdas, etc.\n *  - Does not support circular references.\n *\n * See: https://web.dev/structured-clone/\n * See: https://stackoverflow.com/questions/40488190/how-is-structured-clone-algorithm-different-from-deep-copy\n * @param input - The input to clone.\n * @returns A deep clone of the input.\n */\nexport function deepClone<T>(input: T): T {\n  return input === undefined ? input : (JSON.parse(JSON.stringify(input)) as T);\n}\n\n/**\n * Returns true if the input string is a UUID.\n * @param input - The input string.\n * @returns True if the input string matches the UUID format.\n */\nexport function isUUID(input: string): input is string {\n  return !!/^\\w{8}-\\w{4}-\\w{4}-\\w{4}-\\w{12}$/i.exec(input);\n}\n\n/**\n * Returns true if the input is an object.\n * @param obj - The candidate object.\n * @returns True if the input is a non-null non-undefined object.\n */\nexport function isObject(obj: unknown): obj is Record<string, unknown> {\n  return obj !== null && typeof obj === 'object';\n}\n\n/**\n * Returns true if the input array is an array of strings.\n * @param arr - Input array.\n * @returns True if the input array is an array of strings.\n */\nexport function isStringArray(arr: any[]): arr is string[] {\n  return arr.every(isString);\n}\n\n/**\n * Returns true if the input value is a string.\n * @param value - The candidate value.\n * @returns True if the input value is a string.\n */\nexport function isString(value: unknown): value is string {\n  return typeof value === 'string';\n}\n\n/**\n * Returns true if the input value is a Coding object.\n * This is a heuristic check based on the presence of the \"code\" property.\n * @param value - The candidate value.\n * @returns True if the input value is a Coding.\n */\nexport function isCoding(value: unknown): value is Coding & { code: string } {\n  return isObject(value) && 'code' in value && typeof value.code === 'string';\n}\n\n/**\n * Returns true if the input value is a CodeableConcept object.\n * This is a heuristic check based on the presence of the \"coding\" property.\n * @param value - The candidate value.\n * @returns True if the input value is a CodeableConcept.\n */\nexport function isCodeableConcept(value: unknown): value is CodeableConcept & { coding: Coding[] } {\n  return isObject(value) && 'coding' in value && Array.isArray(value.coding) && value.coding.every(isCoding);\n}\n\n/**\n * Returns true if the input value is an object with a string text property.\n * This is a heuristic check based on the presence of the \"text\" property.\n * @param value - The candidate value.\n * @returns True if the input value is a text object.\n */\nexport function isTextObject(value: unknown): value is { text: string } {\n  return isObject(value) && 'text' in value && typeof value.text === 'string';\n}\n\n// Precompute hex octets\n// See: https://stackoverflow.com/a/55200387\nconst byteToHex: string[] = [];\nfor (let n = 0; n < 256; n++) {\n  byteToHex.push(n.toString(16).padStart(2, '0'));\n}\n\n/**\n * Converts an ArrayBuffer to hex string.\n * See: https://stackoverflow.com/a/55200387\n * @param arrayBuffer - The input array buffer.\n * @returns The resulting hex string.\n */\nexport function arrayBufferToHex(arrayBuffer: ArrayBufferLike | ArrayBufferView): string {\n  const buffer = normalizeArrayBufferView(arrayBuffer);\n  const bytes = new Uint8Array(buffer);\n  const result: string[] = new Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    result[i] = byteToHex[bytes[i]];\n  }\n  return result.join('');\n}\n\n/**\n * Converts an ArrayBuffer to a base-64 encoded string.\n * @param arrayBuffer - The input array buffer.\n * @returns The base-64 encoded string.\n */\nexport function arrayBufferToBase64(arrayBuffer: ArrayBufferLike | ArrayBufferView): string {\n  const buffer = normalizeArrayBufferView(arrayBuffer);\n  const bytes = new Uint8Array(buffer);\n  const result: string[] = new Array(bytes.length);\n  for (let i = 0; i < bytes.length; i++) {\n    result[i] = String.fromCharCode(bytes[i]);\n  }\n  return window.btoa(result.join(''));\n}\n\n/**\n * Normalizes an `ArrayBufferLike` (eg. an `ArrayBuffer`) to a raw `ArrayBufferLike` (without a view). If the passed buffer is a view, it gives the raw `ArrayBufferLike`.\n *\n * This is useful in cases where you need to operate on the raw bytes of an `ArrayBuffer` where a `TypedArray` (eg. `Uint32Array`) might be passed in.\n * This ensures that you will always operate on the raw bytes rather than accidentally truncating the input by operating on the elements of the view.\n *\n * @param typedArrayOrBuffer - The `ArrayBufferLike` (either `TypedArray` or raw `ArrayBuffer`) to normalize to raw `ArrayBuffer`.\n * @returns The raw `ArrayBuffer` without a view.\n */\nexport function normalizeArrayBufferView(typedArrayOrBuffer: ArrayBufferLike | ArrayBufferView): ArrayBufferLike {\n  return ArrayBuffer.isView(typedArrayOrBuffer) ? typedArrayOrBuffer.buffer : typedArrayOrBuffer;\n}\n\nexport function capitalize(word: string): string {\n  if (!word) {\n    return '';\n  }\n  return word.charAt(0).toUpperCase() + word.substring(1);\n}\n\nexport function isLowerCase(c: string): boolean {\n  return c === c.toLowerCase() && c !== c.toUpperCase();\n}\n\nexport function isComplexTypeCode(code: string): boolean {\n  return code.length > 0 && code.startsWith(code[0].toUpperCase());\n}\n\n/**\n * Returns the difference between two paths which is often suitable to use as a key in a `Record<string, InternalSchemaElement>`\n * @param parentPath - The parent path that will be removed from `path`.\n * @param path - The element path that should be a child of `parentPath`.\n * @returns - The difference between `path` and `parentPath` or `undefined` if `path` is not a child of `parentPath`.\n */\nexport function getPathDifference(parentPath: string, path: string): string | undefined {\n  const parentPathPrefix = parentPath + '.';\n  if (path.startsWith(parentPathPrefix)) {\n    return path.slice(parentPathPrefix.length);\n  }\n  return undefined;\n}\n\n/**\n * Tries to find a code string for a given system within a given codeable concept.\n * @param concept - The codeable concept.\n * @param system - The system string.\n * @returns The code if found; otherwise undefined.\n */\nexport function getCodeBySystem(concept: CodeableConcept, system: string): string | undefined {\n  return concept.coding?.find((coding) => coding.system === system)?.code;\n}\n\n/**\n * Sets a code for a given system within a given codeable concept.\n * @param concept - The codeable concept.\n * @param system - The system string.\n * @param code - The code value.\n */\nexport function setCodeBySystem(concept: CodeableConcept, system: string, code: string): void {\n  if (!concept.coding) {\n    concept.coding = [];\n  }\n  const coding = concept.coding.find((c) => c.system === system);\n  if (coding) {\n    coding.code = code;\n  } else {\n    concept.coding.push({ system, code });\n  }\n}\n\n/**\n * Tries to find an observation interval for the given patient and value.\n * @param definition - The observation definition.\n * @param patient - The patient.\n * @param value - The observation value.\n * @param category - Optional interval category restriction.\n * @returns The observation interval if found; otherwise undefined.\n */\nexport function findObservationInterval(\n  definition: ObservationDefinition,\n  patient: Patient,\n  value: number,\n  category?: 'reference' | 'critical' | 'absolute'\n): ObservationDefinitionQualifiedInterval | undefined {\n  return definition.qualifiedInterval?.find(\n    (interval) =>\n      observationIntervalMatchesPatient(interval, patient) &&\n      observationIntervalMatchesValue(interval, value, definition.quantitativeDetails?.decimalPrecision) &&\n      (category === undefined || interval.category === category)\n  );\n}\n\n/**\n * Tries to find an observation reference range for the given patient and condition names.\n * @param definition - The observation definition.\n * @param patient - The patient.\n * @param names - The condition names.\n * @returns The observation interval if found; otherwise undefined.\n */\nexport function findObservationReferenceRange(\n  definition: ObservationDefinition,\n  patient: Patient,\n  names: string[]\n): ObservationDefinitionQualifiedInterval | undefined {\n  return definition.qualifiedInterval?.find(\n    (interval) => observationIntervalMatchesPatient(interval, patient) && names.includes(interval.condition as string)\n  );\n}\n\n/**\n * Returns true if the patient matches the observation interval.\n * @param interval - The observation interval.\n * @param patient - The patient.\n * @returns True if the patient matches the observation interval.\n */\nfunction observationIntervalMatchesPatient(\n  interval: ObservationDefinitionQualifiedInterval,\n  patient: Patient\n): boolean {\n  return observationIntervalMatchesGender(interval, patient) && observationIntervalMatchesAge(interval, patient);\n}\n\n/**\n * Returns true if the patient gender matches the observation interval.\n * @param interval - The observation interval.\n * @param patient - The patient.\n * @returns True if the patient gender matches the observation interval.\n */\nfunction observationIntervalMatchesGender(interval: ObservationDefinitionQualifiedInterval, patient: Patient): boolean {\n  return !interval.gender || interval.gender === patient.gender;\n}\n\n/**\n * Returns true if the patient age matches the observation interval.\n * @param interval - The observation interval.\n * @param patient - The patient.\n * @returns True if the patient age matches the observation interval.\n */\nfunction observationIntervalMatchesAge(interval: ObservationDefinitionQualifiedInterval, patient: Patient): boolean {\n  return !interval.age || matchesRange(calculateAge(patient.birthDate as string).years, interval.age);\n}\n\n/**\n * Returns true if the value matches the observation interval.\n * @param interval - The observation interval.\n * @param value - The observation value.\n * @param precision - Optional precision in number of digits.\n * @returns True if the value matches the observation interval.\n */\nfunction observationIntervalMatchesValue(\n  interval: ObservationDefinitionQualifiedInterval,\n  value: number,\n  precision?: number\n): boolean {\n  return !!interval.range && matchesRange(value, interval.range, precision);\n}\n\n/**\n * Returns true if the value is in the range accounting for precision.\n * @param value - The numeric value.\n * @param range - The numeric range.\n * @param precision - Optional precision in number of digits.\n * @returns True if the value is within the range.\n */\nexport function matchesRange(value: number, range: Range, precision?: number): boolean {\n  return (\n    (range.low?.value === undefined || preciseGreaterThanOrEquals(value, range.low.value, precision)) &&\n    (range.high?.value === undefined || preciseLessThanOrEquals(value, range.high.value, precision))\n  );\n}\n\n/**\n * Returns the input number rounded to the specified number of digits.\n * @param a - The input number.\n * @param precision - The precision in number of digits.\n * @returns The number rounded to the specified number of digits.\n */\nexport function preciseRound(a: number, precision: number): number {\n  return parseFloat(a.toFixed(precision));\n}\n\n/**\n * Returns true if the two numbers are equal to the given precision.\n * @param a - The first number.\n * @param b - The second number.\n * @param precision - Optional precision in number of digits.\n * @returns True if the two numbers are equal to the given precision.\n */\nexport function preciseEquals(a: number, b: number, precision?: number): boolean {\n  return toPreciseInteger(a, precision) === toPreciseInteger(b, precision);\n}\n\n/**\n * Returns true if the first number is less than the second number to the given precision.\n * @param a - The first number.\n * @param b - The second number.\n * @param precision - Optional precision in number of digits.\n * @returns True if the first number is less than the second number to the given precision.\n */\nexport function preciseLessThan(a: number, b: number, precision?: number): boolean {\n  return toPreciseInteger(a, precision) < toPreciseInteger(b, precision);\n}\n\n/**\n * Returns true if the first number is greater than the second number to the given precision.\n * @param a - The first number.\n * @param b - The second number.\n * @param precision - Optional precision in number of digits.\n * @returns True if the first number is greater than the second number to the given precision.\n */\nexport function preciseGreaterThan(a: number, b: number, precision?: number): boolean {\n  return toPreciseInteger(a, precision) > toPreciseInteger(b, precision);\n}\n\n/**\n * Returns true if the first number is less than or equal to the second number to the given precision.\n * @param a - The first number.\n * @param b - The second number.\n * @param precision - Optional precision in number of digits.\n * @returns True if the first number is less than or equal to the second number to the given precision.\n */\nexport function preciseLessThanOrEquals(a: number, b: number, precision?: number): boolean {\n  return toPreciseInteger(a, precision) <= toPreciseInteger(b, precision);\n}\n\n/**\n * Returns true if the first number is greater than or equal to the second number to the given precision.\n * @param a - The first number.\n * @param b - The second number.\n * @param precision - Optional precision in number of digits.\n * @returns True if the first number is greater than or equal to the second number to the given precision.\n */\nexport function preciseGreaterThanOrEquals(a: number, b: number, precision?: number): boolean {\n  return toPreciseInteger(a, precision) >= toPreciseInteger(b, precision);\n}\n\n/**\n * Returns an integer representation of the number with the given precision.\n * For example, if precision is 2, then 1.2345 will be returned as 123.\n * @param a - The number.\n * @param precision - Optional precision in number of digits.\n * @returns The integer with the given precision.\n */\nfunction toPreciseInteger(a: number, precision?: number): number {\n  if (precision === undefined) {\n    return a;\n  }\n  return Math.round(a * Math.pow(10, precision));\n}\n\n/**\n * Finds the first resource in the input array that matches the specified code and system.\n * @param resources - The array of resources to search.\n * @param code - The code to search for.\n * @param system - The system to search for.\n * @returns The first resource in the input array that matches the specified code and system, or undefined if no such resource is found.\n */\nexport function findResourceByCode(\n  resources: ResourceWithCode[],\n  code: CodeableConcept | string,\n  system: string\n): ResourceWithCode | undefined {\n  return resources.find((r) =>\n    typeof code === 'string'\n      ? getCodeBySystem(r.code || {}, system) === code\n      : getCodeBySystem(r.code || {}, system) === getCodeBySystem(code, system)\n  );\n}\n\nexport function arrayify<T>(value: T | T[] | undefined): T[] | undefined {\n  if (value === undefined) {\n    return undefined;\n  } else if (Array.isArray(value)) {\n    return value;\n  } else {\n    return [value];\n  }\n}\n\nexport function singularize<T>(value: T | T[] | undefined): T | undefined {\n  if (Array.isArray(value)) {\n    return value[0];\n  } else {\n    return value;\n  }\n}\n\n/**\n * Sleeps for the specified number of milliseconds.\n * @param ms - Time delay in milliseconds\n * @returns A promise that resolves after the specified number of milliseconds.\n */\nexport const sleep = (ms: number): Promise<void> =>\n  new Promise((resolve) => {\n    setTimeout(resolve, ms);\n  });\n\n/**\n * Splits a string into an array of strings using the specified delimiter.\n * Unlike the built-in split function, this function will split the string into a maximum of exactly n parts.\n * Trailing empty strings are included in the result.\n * @param str - The string to split.\n * @param delim - The delimiter.\n * @param n - The maximum number of parts to split the string into.\n * @returns The resulting array of strings.\n */\nexport function splitN(str: string, delim: string, n: number): string[] {\n  const result: string[] = [];\n  for (let i = 0; i < n - 1; i++) {\n    const delimIndex = str.indexOf(delim);\n    if (delimIndex < 0) {\n      break;\n    } else {\n      result.push(str.slice(0, delimIndex));\n      str = str.slice(delimIndex + delim.length);\n    }\n  }\n  result.push(str);\n  return result;\n}\n\n/**\n * Memoizes the result of a parameterless function\n * @param fn - The function to be wrapped\n * @returns The result of the first invocation of the wrapped function\n */\nexport function lazy<T>(fn: () => T): () => T {\n  let result: T;\n  let executed = false;\n\n  return function (): T {\n    if (!executed) {\n      result = fn();\n      executed = true;\n    }\n    return result;\n  };\n}\n\nexport function append<T>(array: T[] | undefined, value: T): T[] {\n  if (!array) {\n    return [value];\n  }\n  array.push(value);\n  return array;\n}\n\n/**\n * Sorts an array of strings in place using the localeCompare method.\n *\n * This method will mutate the input array.\n *\n * @param array - The array of strings to sort.\n * @returns The sorted array of strings.\n */\nexport function sortStringArray(array: string[]): string[] {\n  return array.sort((a, b) => a.localeCompare(b));\n}\n\n/**\n * Ensures the given URL has a trailing slash.\n * @param url - The URL to ensure has a trailing slash.\n * @returns The URL with a trailing slash.\n */\nexport function ensureTrailingSlash(url: string): string {\n  return url.endsWith('/') ? url : url + '/';\n}\n\n/**\n * Ensures the given URL has no leading slash.\n * @param url - The URL to ensure has no leading slash.\n * @returns The URL string with no slash.\n */\nexport function ensureNoLeadingSlash(url: string): string {\n  return url.startsWith('/') ? url.slice(1) : url;\n}\n\n/**\n * Concatenates the given base URL and URL.\n *\n * If the URL is absolute, it is returned as-is.\n *\n * @param baseUrl - The base URL.\n * @param path - The URL to concat. Can be relative or absolute.\n * @returns The concatenated URL.\n */\nexport function concatUrls(baseUrl: string | URL, path: string): string {\n  return new URL(ensureNoLeadingSlash(path), ensureTrailingSlash(baseUrl.toString())).toString();\n}\n\n/**\n * Concatenates a given base URL and path, ensuring the URL has the appropriate `ws://` or `wss://` protocol instead of `http://` or `https://`.\n *\n * @param baseUrl - The base URL.\n * @param path - The URL to concat. Can be relative or absolute.\n * @returns The concatenated WebSocket URL.\n */\nexport function getWebSocketUrl(baseUrl: URL | string, path: string): string {\n  return concatUrls(baseUrl, path).toString().replace('http://', 'ws://').replace('https://', 'wss://');\n}\n\n/**\n * Converts the given `query` to a string.\n *\n * @param query - The query to convert. The type can be any member of `QueryTypes`.\n * @returns The query as a string.\n */\nexport function getQueryString(query: QueryTypes): string {\n  if (typeof query === 'object' && !Array.isArray(query) && !(query instanceof URLSearchParams)) {\n    query = Object.fromEntries(Object.entries(query).filter((entry) => entry[1] !== undefined));\n  }\n  // @ts-expect-error Technically `Record<string, string, number, boolean>` is not valid to pass into `URLSearchParams` constructor since `boolean` and `number`\n  // are not considered to be valid values based on the WebIDL definition from WhatWG. The current runtime behavior relies on implementation-specific coercion to string under the hood.\n  // Source: https://url.spec.whatwg.org/#dom-urlsearchparams-urlsearchparams:~:text=6.2.%20URLSearchParams,)%20init%20%3D%20%22%22)%3B\n  return new URLSearchParams(query).toString();\n}\n\nexport const VALID_HOSTNAME_REGEX =\n  /^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\\-_]*[a-zA-Z0-9])\\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\\-_]*[A-Za-z0-9])$/;\n\n/**\n * Tests whether a given input is a valid hostname.\n *\n * __NOTE: Does not validate that the input is a valid domain name, only a valid hostname.__\n *\n * @param input - The input to test.\n * @returns True if `input` is a valid hostname, otherwise returns false.\n *\n * ### Valid matches:\n * - foo\n * - foo.com\n * - foo.bar.com\n * - foo.org\n * - foo.bar.co.uk\n * - localhost\n * - LOCALHOST\n * - foo-bar-baz\n * - foo_bar\n * - foobar123\n *\n * ### Invalid matches:\n * - foo.com/bar\n * - https://foo.com\n * - foo_-bar_-\n * - foo | rm -rf /\n */\nexport function isValidHostname(input: string): boolean {\n  return VALID_HOSTNAME_REGEX.test(input);\n}\n\n/**\n * Adds the supplied profileUrl to the resource.meta.profile if it is not already\n * specified\n * @param resource - A FHIR resource\n * @param profileUrl - The profile URL to add\n * @returns The resource\n */\nexport function addProfileToResource<T extends Resource = Resource>(resource: T, profileUrl: string): T {\n  if (!resource?.meta?.profile?.includes(profileUrl)) {\n    resource.meta = resource.meta ?? {};\n    resource.meta.profile = resource.meta.profile ?? [];\n    resource.meta.profile.push(profileUrl);\n  }\n  return resource;\n}\n\n/**\n * Returns a Map of resources from a bundle, using the specified identifier system as the key.\n * @param resourceBundle - The bundle of resources.\n * @param identifierSystem - The identifier system to use for keys.\n * @returns Map of resources keyed by identifier value for the specified system.\n */\nexport function mapByIdentifier<T extends Resource = Resource>(\n  resourceBundle: Bundle<T>,\n  identifierSystem: string\n): Map<string, T> {\n  const resourceMap = new Map<string, T>(\n    resourceBundle.entry\n      ?.filter((e) => !!e.resource)\n      .map((e) => [getIdentifier(e.resource as Resource, identifierSystem) as string, e.resource as T])\n      .filter(([i]) => i !== undefined) as [string, T][]\n  );\n  return resourceMap;\n}\n\n/**\n * Removes the supplied profileUrl from the resource.meta.profile if it is present\n * @param resource - A FHIR resource\n * @param profileUrl - The profile URL to remove\n * @returns The resource\n */\nexport function removeProfileFromResource<T extends Resource = Resource>(resource: T, profileUrl: string): T {\n  if (resource?.meta?.profile?.includes(profileUrl)) {\n    const index = resource.meta.profile.indexOf(profileUrl);\n    resource.meta.profile.splice(index, 1);\n  }\n  return resource;\n}\n\nexport function flatMapFilter<T, U>(arr: T[] | undefined, fn: (value: T, idx: number) => U | undefined): U[] {\n  const result: U[] = [];\n  if (!arr) {\n    return result;\n  }\n\n  for (let i = 0; i < arr.length; i++) {\n    const resultValue = fn(arr[i], i);\n    if (Array.isArray(resultValue)) {\n      result.push(...resultValue.flat());\n    } else if (resultValue !== undefined) {\n      result.push(resultValue);\n    }\n  }\n  return result;\n}\n", "import {\n  Address,\n  CodeableConcept,\n  Coding,\n  HumanName,\n  Money,\n  Observation,\n  ObservationComponent,\n  Period,\n  Quantity,\n  Range,\n  Timing,\n  TimingRepeat,\n} from '@medplum/fhirtypes';\nimport { capitalize } from './utils';\n\nexport interface AddressFormatOptions {\n  all?: boolean;\n  use?: boolean;\n  lineSeparator?: string;\n}\n\nexport interface HumanNameFormatOptions {\n  all?: boolean;\n  prefix?: boolean;\n  suffix?: boolean;\n  use?: boolean;\n}\n\n/**\n * Formats a FHIR Address as a string.\n * @param address - The address to format.\n * @param options - Optional address format options.\n * @returns The formatted address string.\n */\nexport function formatAddress(address: Address, options?: AddressFormatOptions): string {\n  const builder = [];\n\n  if (address.line) {\n    builder.push(...address.line);\n  }\n\n  if (address.city || address.state || address.postalCode) {\n    const cityStateZip = [];\n    if (address.city) {\n      cityStateZip.push(address.city);\n    }\n    if (address.state) {\n      cityStateZip.push(address.state);\n    }\n    if (address.postalCode) {\n      cityStateZip.push(address.postalCode);\n    }\n    builder.push(cityStateZip.join(', '));\n  }\n\n  if (address.use && (options?.all || options?.use)) {\n    builder.push('[' + address.use + ']');\n  }\n\n  return builder.join(options?.lineSeparator ?? ', ').trim();\n}\n\n/**\n * Formats a FHIR HumanName as a string.\n * @param name - The name to format.\n * @param options - Optional name format options.\n * @returns The formatted name string.\n */\nexport function formatHumanName(name: HumanName, options?: HumanNameFormatOptions): string {\n  const builder = [];\n\n  if (name.prefix && options?.prefix !== false) {\n    builder.push(...name.prefix);\n  }\n\n  if (name.given) {\n    builder.push(...name.given);\n  }\n\n  if (name.family) {\n    builder.push(name.family);\n  }\n\n  if (name.suffix && options?.suffix !== false) {\n    builder.push(...name.suffix);\n  }\n\n  if (name.use && (options?.all || options?.use)) {\n    builder.push('[' + name.use + ']');\n  }\n\n  if (builder.length === 0) {\n    const textStr = ensureString(name.text);\n    if (textStr) {\n      return textStr;\n    }\n  }\n\n  return builder.join(' ').trim();\n}\n\n/**\n * Formats the given name portion of a FHIR HumanName element.\n * @param name - The name to format.\n * @returns The formatted given name string.\n */\nexport function formatGivenName(name: HumanName): string {\n  const builder: string[] = [];\n  if (name.given) {\n    builder.push(...name.given);\n  }\n  return builder.join(' ').trim();\n}\n\n/**\n * Formats the family name portion of a FHIR HumanName element.\n * @param name - The name to format.\n * @returns The formatted family name string.\n */\nexport function formatFamilyName(name: HumanName): string {\n  return ensureString(name.family) ?? '';\n}\n\n/**\n * Returns true if the given date object is a valid date.\n * Dates can be invalid if created by parsing an invalid string.\n * @param date - A date object.\n * @returns Returns true if the date is a valid date.\n */\nexport function isValidDate(date: Date): boolean {\n  return date instanceof Date && !isNaN(date.getTime());\n}\n\n/**\n * Formats a FHIR date string as a human readable string.\n * Handles missing values and invalid dates.\n * @param date - The date to format.\n * @param locales - Optional locales.\n * @param options - Optional date format options.\n * @returns The formatted date string.\n */\nexport function formatDate(\n  date: string | undefined,\n  locales?: Intl.LocalesArgument,\n  options?: Intl.DateTimeFormatOptions\n): string {\n  if (!date) {\n    return '';\n  }\n  const d = new Date(date);\n  if (!isValidDate(d)) {\n    return '';\n  }\n  d.setUTCHours(0, 0, 0, 0);\n  return d.toLocaleDateString(locales, { timeZone: 'UTC', ...options });\n}\n\n/**\n * Formats a FHIR time string as a human readable string.\n * Handles missing values and invalid dates.\n * @param time - The date to format.\n * @param locales - Optional locales.\n * @param options - Optional time format options.\n * @returns The formatted time string.\n */\nexport function formatTime(\n  time: string | undefined,\n  locales?: Intl.LocalesArgument,\n  options?: Intl.DateTimeFormatOptions\n): string {\n  if (!time) {\n    return '';\n  }\n  const d = new Date('2000-01-01T' + time + 'Z');\n  if (!isValidDate(d)) {\n    return '';\n  }\n  return d.toLocaleTimeString(locales, options);\n}\n\n/**\n * Formats a FHIR dateTime string as a human readable string.\n * Handles missing values and invalid dates.\n * @param dateTime - The dateTime to format.\n * @param locales - Optional locales.\n * @param options - Optional dateTime format options.\n * @returns The formatted dateTime string.\n */\nexport function formatDateTime(\n  dateTime: string | undefined,\n  locales?: Intl.LocalesArgument,\n  options?: Intl.DateTimeFormatOptions\n): string {\n  if (!dateTime) {\n    return '';\n  }\n  const d = new Date(dateTime);\n  if (!isValidDate(d)) {\n    return '';\n  }\n  return d.toLocaleString(locales, options);\n}\n\n/**\n * Formats a FHIR Period as a human readable string.\n * @param period - The period to format.\n * @param locales - Optional locales.\n * @param options - Optional period format options.\n * @returns The formatted period string.\n */\nexport function formatPeriod(\n  period: Period | undefined,\n  locales?: Intl.LocalesArgument,\n  options?: Intl.DateTimeFormatOptions\n): string {\n  if (!period || (!period.start && !period.end)) {\n    return '';\n  }\n  return formatDateTime(period.start, locales, options) + ' - ' + formatDateTime(period.end, locales, options);\n}\n\nconst unitAdverbForm: Record<string, string> = {\n  s: 'every second',\n  min: 'every minute',\n  h: 'hourly',\n  d: 'daily',\n  wk: 'weekly',\n  mo: 'monthly',\n  a: 'annually',\n};\n\nconst singularUnits: Record<string, string> = {\n  s: 'second',\n  min: 'minute',\n  h: 'hour',\n  d: 'day',\n  wk: 'week',\n  mo: 'month',\n  a: 'year',\n};\n\nconst pluralUnits: Record<string, string> = {\n  s: 'seconds',\n  min: 'minutes',\n  h: 'hours',\n  d: 'days',\n  wk: 'weeks',\n  mo: 'months',\n  a: 'years',\n};\n\n/**\n * Formats a FHIR Timing as a human readable string.\n * @param timing - The timing to format.\n * @returns The formatted timing string.\n */\nexport function formatTiming(timing: Timing | undefined): string {\n  if (!timing) {\n    return '';\n  }\n\n  const builder: string[] = [];\n  formatTimingRepeat(builder, timing.repeat);\n\n  if (timing.event) {\n    builder.push(timing.event.map((d) => formatDateTime(d)).join(', '));\n  }\n\n  return capitalize(builder.join(' ').trim());\n}\n\n/**\n * Formats a FHIR Timing repeat element as a human readable string.\n * @param builder - The output string builder.\n * @param repeat - The timing repeat element.\n */\nfunction formatTimingRepeat(builder: string[], repeat: TimingRepeat | undefined): void {\n  if (!repeat?.periodUnit) {\n    // Period unit is the only required field\n    return;\n  }\n\n  const frequency = repeat.frequency ?? 1;\n  const period = repeat.period ?? 1;\n  const periodUnit = repeat.periodUnit;\n\n  if (frequency === 1 && period === 1) {\n    builder.push(unitAdverbForm[periodUnit]);\n  } else {\n    if (frequency === 1) {\n      builder.push('once');\n    } else {\n      builder.push(frequency + ' times');\n    }\n\n    if (period === 1) {\n      builder.push('per ' + singularUnits[periodUnit]);\n    } else {\n      builder.push('per ' + period + ' ' + pluralUnits[periodUnit]);\n    }\n  }\n\n  if (repeat.dayOfWeek) {\n    builder.push('on ' + repeat.dayOfWeek.map(capitalize).join(', '));\n  }\n\n  if (repeat.timeOfDay) {\n    builder.push('at ' + repeat.timeOfDay.map((t) => formatTime(t)).join(', '));\n  }\n}\n\n/**\n * Returns a human-readable string for a FHIR Range datatype, taking into account one-sided ranges\n * @param range - A FHIR Range element\n * @param precision - Number of decimal places to display in the rendered quantity values\n * @param exclusive - If true, one-sided ranges will be rendered with the `>` or `<` bounds rather than `>=` or `<=`\n * @returns A human-readable string representation of the Range\n */\nexport function formatRange(range: Range | undefined, precision?: number, exclusive = false): string {\n  if (exclusive && precision === undefined) {\n    throw new Error('Precision must be specified for exclusive ranges');\n  }\n\n  // Extract high and low range endpoints, explicitly ignoring any comparator\n  // since Range uses SimpleQuantity variants (see http://www.hl7.org/fhir/datatypes.html#Range)\n  const low = range?.low && { ...range.low, comparator: undefined };\n  const high = range?.high && { ...range.high, comparator: undefined };\n  if (low?.value === undefined && high?.value === undefined) {\n    return '';\n  }\n\n  if (low?.value !== undefined && high?.value === undefined) {\n    // Lower bound only\n    if (exclusive && precision !== undefined) {\n      low.value = preciseDecrement(low.value, precision);\n      return `> ${formatQuantity(low, precision)}`;\n    }\n    return `>= ${formatQuantity(low, precision)}`;\n  } else if (low?.value === undefined && high?.value !== undefined) {\n    // Upper bound only\n    if (exclusive && precision !== undefined) {\n      high.value = preciseIncrement(high.value, precision);\n      return `< ${formatQuantity(high, precision)}`;\n    }\n    return `<= ${formatQuantity(high, precision)}`;\n  } else {\n    // Double-sided range\n    if (low?.unit === high?.unit) {\n      delete low?.unit; // Format like \"X - Y units\" instead of \"X units - Y units\"\n    }\n    return `${formatQuantity(low, precision)} - ${formatQuantity(high, precision)}`;\n  }\n}\n\n/**\n * Returns a human-readable string for a FHIR Quantity datatype, taking into account units and comparators\n * @param quantity - A FHIR Quantity element\n * @param precision - Number of decimal places to display in the rendered quantity values\n * @returns A human-readable string representation of the Quantity\n */\nexport function formatQuantity(quantity: Quantity | undefined, precision?: number): string {\n  if (!quantity) {\n    return '';\n  }\n\n  const result = [];\n\n  if (quantity.comparator) {\n    result.push(quantity.comparator);\n    result.push(' ');\n  }\n\n  if (quantity.value !== undefined) {\n    if (precision !== undefined) {\n      result.push(quantity.value.toFixed(precision));\n    } else {\n      result.push(quantity.value);\n    }\n  }\n\n  if (quantity.unit) {\n    if (quantity.unit !== '%' && result[result.length - 1] !== ' ') {\n      result.push(' ');\n    }\n    result.push(quantity.unit);\n  }\n\n  return result.join('').trim();\n}\n\nexport function formatMoney(money: Money | undefined): string {\n  if (money?.value === undefined) {\n    return '';\n  }\n\n  return money.value.toLocaleString(undefined, {\n    style: 'currency',\n    currency: money.currency ?? 'USD',\n    currencyDisplay: 'narrowSymbol',\n  });\n}\n\n/**\n * Formats a CodeableConcept element as a string.\n * @param codeableConcept - A FHIR CodeableConcept element\n * @returns The codeable concept as a string.\n */\nexport function formatCodeableConcept(codeableConcept: CodeableConcept | undefined): string {\n  if (!codeableConcept) {\n    return '';\n  }\n  const textStr = ensureString(codeableConcept.text);\n  if (textStr) {\n    return textStr;\n  }\n  if (codeableConcept.coding) {\n    return codeableConcept.coding.map((c) => formatCoding(c)).join(', ');\n  }\n  return '';\n}\n\n/**\n * Formats a Coding element as a string.\n * @param coding - A FHIR Coding element\n * @param includeCode - If true, includes both the code and display if available\n * @returns The coding as a string.\n */\nexport function formatCoding(coding: Coding | undefined, includeCode?: boolean): string {\n  const display = ensureString(coding?.display);\n  if (display) {\n    const code = includeCode ? ensureString(coding?.code) : undefined;\n    return `${display}${code ? ' (' + code + ')' : ''}`;\n  }\n\n  return ensureString(coding?.code) ?? '';\n}\n\n/**\n * Formats a FHIR Observation resource value as a string.\n * @param obs - A FHIR Observation resource.\n * @returns A human-readable string representation of the Observation.\n */\nexport function formatObservationValue(obs: Observation | ObservationComponent | undefined): string {\n  if (!obs) {\n    return '';\n  }\n\n  const result = [];\n\n  if (obs.valueQuantity) {\n    result.push(formatQuantity(obs.valueQuantity));\n  } else if (obs.valueCodeableConcept) {\n    result.push(formatCodeableConcept(obs.valueCodeableConcept));\n  } else {\n    const valueString = ensureString(obs.valueString);\n    if (valueString) {\n      result.push(valueString);\n    }\n  }\n\n  if ('component' in obs) {\n    result.push((obs.component as ObservationComponent[]).map((c) => formatObservationValue(c)).join(' / '));\n  }\n\n  return result.join(' / ').trim();\n}\n\n/**\n * Ensures the input is a string.\n * While the TypeScript type definitions for FHIR resources are strict, the actual input data can be malformed.\n * We use this method to protect against runtime errors.\n * @param input - The input to ensure is a string.\n * @returns The input as a string, or undefined if not a string.\n */\nfunction ensureString(input: unknown): string | undefined {\n  return typeof input === 'string' ? input : undefined;\n}\n\n/**\n * Returns the input number increased by the `n` units of the specified precision\n * @param a - The input number.\n * @param precision - The precision in number of digits.\n * @param n - (default 1) The number of units to add.\n * @returns The result of the increment.\n */\nfunction preciseIncrement(a: number, precision: number, n = 1): number {\n  return (toPreciseInteger(a, precision) + n) * Math.pow(10, -precision);\n}\n\n/**\n * Returns the input number decreased by the `n` units of the specified precision\n * @param a - The input number.\n * @param precision - The precision in number of digits.\n * @param n - (default 1) The number of units to subtract.\n * @returns The result of the decrement.\n */\nfunction preciseDecrement(a: number, precision: number, n = 1): number {\n  return (toPreciseInteger(a, precision) - n) * Math.pow(10, -precision);\n}\n\n/**\n * Returns an integer representation of the number with the given precision.\n * For example, if precision is 2, then 1.2345 will be returned as 123.\n * @param a - The number.\n * @param precision - Optional precision in number of digits.\n * @returns The integer with the given precision.\n */\nfunction toPreciseInteger(a: number, precision?: number): number {\n  if (precision === undefined) {\n    return a;\n  }\n  return Math.round(a * Math.pow(10, precision));\n}\n", "import {\n  Bundle,\n  CodeableConcept,\n  Coding,\n  ElementDefinition,\n  Reference,\n  Resource,\n  ResourceType,\n  SearchParameter,\n} from '@medplum/fhirtypes';\nimport { formatHumanName } from './format';\nimport { SearchParameterDetails } from './search/details';\nimport { InternalSchemaElement, InternalTypeSchema, getAllDataTypes, tryGetDataType } from './typeschema/types';\nimport { capitalize, createReference, flatMapFilter } from './utils';\n\nexport type TypeName<T> = T extends string\n  ? 'string'\n  : T extends number\n    ? 'number'\n    : T extends boolean\n      ? 'boolean'\n      : T extends undefined\n        ? 'undefined'\n        : 'object';\n\nexport interface TypedValue {\n  readonly type: string;\n  readonly value: any;\n}\n\n/**\n * List of property types.\n * http://www.hl7.org/fhir/valueset-defined-types.html\n * The list here includes additions found from StructureDefinition resources.\n */\nexport const PropertyType = {\n  Address: 'Address',\n  Age: 'Age',\n  Annotation: 'Annotation',\n  Attachment: 'Attachment',\n  BackboneElement: 'BackboneElement',\n  CodeableConcept: 'CodeableConcept',\n  Coding: 'Coding',\n  ContactDetail: 'ContactDetail',\n  ContactPoint: 'ContactPoint',\n  Contributor: 'Contributor',\n  Count: 'Count',\n  DataRequirement: 'DataRequirement',\n  Distance: 'Distance',\n  Dosage: 'Dosage',\n  Duration: 'Duration',\n  Expression: 'Expression',\n  Extension: 'Extension',\n  HumanName: 'HumanName',\n  Identifier: 'Identifier',\n  MarketingStatus: 'MarketingStatus',\n  Meta: 'Meta',\n  Money: 'Money',\n  Narrative: 'Narrative',\n  ParameterDefinition: 'ParameterDefinition',\n  Period: 'Period',\n  Population: 'Population',\n  ProdCharacteristic: 'ProdCharacteristic',\n  ProductShelfLife: 'ProductShelfLife',\n  Quantity: 'Quantity',\n  Range: 'Range',\n  Ratio: 'Ratio',\n  Reference: 'Reference',\n  RelatedArtifact: 'RelatedArtifact',\n  SampledData: 'SampledData',\n  Signature: 'Signature',\n  SubstanceAmount: 'SubstanceAmount',\n  SystemString: 'http://hl7.org/fhirpath/System.String',\n  Timing: 'Timing',\n  TriggerDefinition: 'TriggerDefinition',\n  UsageContext: 'UsageContext',\n  base64Binary: 'base64Binary',\n  boolean: 'boolean',\n  canonical: 'canonical',\n  code: 'code',\n  date: 'date',\n  dateTime: 'dateTime',\n  decimal: 'decimal',\n  id: 'id',\n  instant: 'instant',\n  integer: 'integer',\n  markdown: 'markdown',\n  oid: 'oid',\n  positiveInt: 'positiveInt',\n  string: 'string',\n  time: 'time',\n  unsignedInt: 'unsignedInt',\n  uri: 'uri',\n  url: 'url',\n  uuid: 'uuid',\n} as const;\n\n/**\n * An IndexedStructureDefinition is a lookup-optimized version of a StructureDefinition.\n *\n * StructureDefinition resources contain schema information for other resource types.\n * These schemas can be used to automatically generate user interface elements for\n * resources.\n *\n * However, a StructureDefinition resource is not optimized for realtime lookups.  All\n * resource types, sub types, and property definitions are stored in a flat array of\n * ElementDefinition objects.  Therefore, to lookup the schema for a property (i.e., \"Patient.name\")\n * requires a linear scan of all ElementDefinition objects\n *\n * A StructureDefinition resource contains information about one or more types.\n * For example, the \"Patient\" StructureDefinition includes \"Patient\", \"Patient_Contact\",\n * \"Patient_Communication\", and \"Patient_Link\".  This is inefficient.\n *\n * Instead, we create an indexed version of the StructureDefinition, called IndexedStructureDefinition.\n * In an IndexedStructureDefinition, retrieving a property definition is a hashtable lookup.\n *\n * The hierarchy is:\n *   IndexedStructureDefinition - top level for one resource type\n *   TypeSchema - one per resource type and all contained BackboneElements\n *   PropertySchema - one per property/field\n */\nexport interface IndexedStructureDefinition {\n  types: Record<string, TypeInfo>;\n}\n\n/**\n * An indexed TypeSchema.\n *\n * Example:  The IndexedStructureDefinition for \"Patient\" would include the following TypeSchemas:\n *   1) Patient\n *   2) Patient_Contact\n *   3) Patient_Communication\n *   4) Patient_Link\n */\nexport interface TypeInfo {\n  searchParams?: Record<string, SearchParameter>;\n  searchParamsDetails?: Record<string, SearchParameterDetails>;\n}\n\n/**\n * Indexes a bundle of SearchParameter resources for faster lookup.\n * @param bundle - A FHIR bundle SearchParameter resources.\n * @see {@link IndexedStructureDefinition} for more details on indexed StructureDefinitions.\n */\nexport function indexSearchParameterBundle(bundle: Bundle<SearchParameter>): void {\n  for (const entry of bundle.entry ?? []) {\n    const resource = entry.resource as SearchParameter;\n    if (resource.resourceType === 'SearchParameter') {\n      indexSearchParameter(resource);\n    }\n  }\n}\n\nexport function indexDefaultSearchParameters(bundle: Bundle): void {\n  const sds =\n    flatMapFilter(bundle.entry, (e) => (e.resource?.resourceType === 'StructureDefinition' ? e.resource : undefined)) ??\n    [];\n  for (const sd of sds) {\n    getOrInitTypeSchema(sd.type);\n  }\n}\n\nfunction getOrInitTypeSchema(resourceType: string): TypeInfo {\n  let typeSchema = globalSchema.types[resourceType];\n  if (!typeSchema) {\n    typeSchema = {\n      searchParamsDetails: {},\n    } as TypeInfo;\n    globalSchema.types[resourceType] = typeSchema;\n  }\n\n  if (!typeSchema.searchParams) {\n    typeSchema.searchParams = {\n      _id: {\n        base: [resourceType],\n        code: '_id',\n        type: 'token',\n        expression: resourceType + '.id',\n      } as SearchParameter,\n      _lastUpdated: {\n        base: [resourceType],\n        code: '_lastUpdated',\n        type: 'date',\n        expression: resourceType + '.meta.lastUpdated',\n      } as SearchParameter,\n      _compartment: {\n        base: [resourceType],\n        code: '_compartment',\n        type: 'reference',\n        expression: resourceType + '.meta.compartment',\n      } as SearchParameter,\n      _profile: {\n        base: [resourceType],\n        code: '_profile',\n        type: 'uri',\n        expression: resourceType + '.meta.profile',\n      } as SearchParameter,\n      _security: {\n        base: [resourceType],\n        code: '_security',\n        type: 'token',\n        expression: resourceType + '.meta.security',\n      } as SearchParameter,\n      _source: {\n        base: [resourceType],\n        code: '_source',\n        type: 'uri',\n        expression: resourceType + '.meta.source',\n      } as SearchParameter,\n      _tag: {\n        base: [resourceType],\n        code: '_tag',\n        type: 'token',\n        expression: resourceType + '.meta.tag',\n      } as SearchParameter,\n    };\n  }\n\n  return typeSchema;\n}\n\n/**\n * Indexes a SearchParameter resource for fast lookup.\n * Indexes by SearchParameter.code, which is the query string parameter name.\n * @param searchParam - The SearchParameter resource.\n * @see {@link IndexedStructureDefinition} for more details on indexed StructureDefinitions.\n */\nexport function indexSearchParameter(searchParam: SearchParameter): void {\n  for (const resourceType of searchParam.base ?? []) {\n    const typeSchema = getOrInitTypeSchema(resourceType);\n\n    if (!typeSchema.searchParams) {\n      typeSchema.searchParams = {};\n    }\n\n    typeSchema.searchParams[searchParam.code as string] = searchParam;\n  }\n}\n\n/**\n * Returns the type name for an ElementDefinition.\n * @param elementDefinition - The element definition.\n * @returns The Medplum type name.\n */\nexport function getElementDefinitionTypeName(elementDefinition: ElementDefinition): string {\n  const code = elementDefinition.type?.[0]?.code as string;\n  return code === 'BackboneElement' || code === 'Element'\n    ? buildTypeName((elementDefinition.base?.path ?? elementDefinition.path)?.split('.') as string[])\n    : code;\n}\n\nexport function buildTypeName(components: string[]): string {\n  if (components.length === 1) {\n    return components[0];\n  }\n  return components.map(capitalize).join('');\n}\n\n/**\n * Returns true if the type schema is a non-abstract FHIR resource.\n * @param typeSchema - The type schema to check.\n * @returns True if the type schema is a non-abstract FHIR resource.\n */\nexport function isResourceTypeSchema(typeSchema: InternalTypeSchema): boolean {\n  return typeSchema.kind === 'resource' && typeSchema.name !== 'Resource' && typeSchema.name !== 'DomainResource';\n}\n\n/**\n * Returns an array of all resource types.\n * Note that this is based on globalSchema, and will only return resource types that are currently in memory.\n * @returns An array of all resource types.\n */\nexport function getResourceTypes(): ResourceType[] {\n  return Object.values(getAllDataTypes())\n    .filter(isResourceTypeSchema)\n    .map((schema) => schema.name as ResourceType);\n}\n\n/**\n * Returns the search parameters for the resource type indexed by search code.\n * @param resourceType - The resource type.\n * @returns The search parameters for the resource type indexed by search code.\n */\nexport function getSearchParameters(resourceType: string): Record<string, SearchParameter> | undefined {\n  return globalSchema.types[resourceType]?.searchParams;\n}\n\n/**\n * Returns a search parameter for a resource type by search code.\n * @param resourceType - The FHIR resource type.\n * @param code - The search parameter code.\n * @returns The search parameter if found, otherwise undefined.\n */\nexport function getSearchParameter(resourceType: string, code: string): SearchParameter | undefined {\n  return globalSchema.types[resourceType]?.searchParams?.[code];\n}\n\n/**\n * Returns a human friendly display name for a FHIR element definition path.\n * @param path - The FHIR element definition path.\n * @returns The best guess of the display name.\n */\nexport function getPathDisplayName(path: string): string {\n  // Get the property name, which is the remainder after the last period\n  // For example, for path \"Patient.birthDate\"\n  // the property name is \"birthDate\"\n  const propertyName = path.replaceAll('[x]', '').split('.').pop() as string;\n\n  return getPropertyDisplayName(propertyName);\n}\n\n/**\n * Returns a human friendly display name for a FHIR element property or slice name\n * @param propertyName - The FHIR element property or slice name\n * @returns The best guess of the display name.\n */\nexport function getPropertyDisplayName(propertyName: string): string {\n  let words: string[];\n  // CodeQL flags the regex below for potential ReDoS (Regex Denial of Service), so limit input size\n  // https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n  if (propertyName.length < 100) {\n    /*\n    Split into words looking for acronyms and camelCase\n\n    [A-Z]+(?![a-z])\n    This part of the regular expression matches a sequence of one or more uppercase letters ([A-Z]+)\n    but only if they are not followed by a lowercase letter. The (?![a-z]) is a negative lookahead assertion,\n    meaning it checks for the absence of a lowercase letter ([a-z]) following the uppercase letters but does\n    not include it in the match. This effectively captures acronyms or any series of consecutive uppercase letters.\n\n    [A-Z]?[a-z]+\n    This part matches a single, optional, uppercase letter followed by one or more lowercase letters ([a-z]+).\n    This pattern is suitable for matching words in camelCase format, where a word begins with a lowercase letter\n    but can optionally start with an uppercase letter (like in the middle of camelCase).\n\n    \\d+\n    Matches a sequence of one or more digits into their own word\n    */\n    words = propertyName.match(/[A-Z]+(?![a-z])|[A-Z]?[a-z]+|\\d+/g) ?? [];\n  } else {\n    // fallback to splitting on capital letters\n    words = propertyName.split(/(?=[A-Z])/);\n  }\n\n  // Capitalize the first letter of each word\n  // Join together with spaces in between\n  // Then normalize whitespace to single space character\n  // For example, for property name \"birthDate\",\n  // the display name is \"Birth Date\".\n  return words.map(capitalizeDisplayWord).join(' ').replace('_', ' ').replace(/\\s+/g, ' ');\n}\n\nconst capitalizedWords = new Set(['ID', 'IP', 'PKCE', 'JWKS', 'URI', 'URL', 'OMB', 'UDI']);\n\nfunction capitalizeDisplayWord(word: string): string {\n  const upper = word.toUpperCase();\n  if (word === upper) {\n    return word;\n  }\n  if (capitalizedWords.has(upper)) {\n    return upper;\n  }\n  return upper.charAt(0) + word.slice(1);\n}\n\n/**\n * Returns an element definition by type and property name.\n * @param typeName - The type name.\n * @param propertyName - The property name.\n * @param profileUrl - (optional) The URL of the current resource profile\n * @returns The element definition if found.\n */\nexport function getElementDefinition(\n  typeName: string,\n  propertyName: string,\n  profileUrl?: string\n): InternalSchemaElement | undefined {\n  const typeSchema = tryGetDataType(typeName, profileUrl);\n  if (!typeSchema) {\n    return undefined;\n  }\n  return getElementDefinitionFromElements(typeSchema.elements, propertyName);\n}\n\n/**\n * Returns an element definition from mapping of elements by property name.\n * @param elements  - A mapping of property names to element definitions\n * @param propertyName - The property name of interest\n * @returns The element definition if found.\n */\nexport function getElementDefinitionFromElements(\n  elements: InternalTypeSchema['elements'],\n  propertyName: string\n): InternalSchemaElement | undefined {\n  // Always try to match the exact property name first\n  const simpleMatch = elements[propertyName] ?? elements[propertyName + '[x]'];\n  if (simpleMatch) {\n    return simpleMatch;\n  }\n\n  // The propertyName can be a \"choice of type\" property, such as \"value[x]\", but in resolved form \"valueString\".\n  // So we need to iterate through all the elements and find the one that matches.\n  // Try to split on each capital letter, and see if that matches an element.\n  for (let i = 0; i < propertyName.length; i++) {\n    const c = propertyName[i];\n    if (c >= 'A' && c <= 'Z') {\n      const testProperty = propertyName.slice(0, i) + '[x]';\n      const element = elements[testProperty];\n      if (element) {\n        return element;\n      }\n    }\n  }\n\n  // Otherwise, no matches.\n  return undefined;\n}\n\n/**\n * Typeguard to validate that an object is a FHIR resource\n * @param value - The object to check\n * @returns True if the input is of type 'object' and contains property 'resourceType'\n */\nexport function isResource(value: unknown): value is Resource {\n  return !!(value && typeof value === 'object' && 'resourceType' in value);\n}\n\n/**\n * Typeguard to validate that an object is a FHIR resource\n * @param value - The object to check\n * @returns True if the input is of type 'object' and contains property 'reference'\n */\nexport function isReference(value: unknown): value is Reference & { reference: string } {\n  return !!(value && typeof value === 'object' && 'reference' in value && typeof value.reference === 'string');\n}\n\n/**\n * Global schema singleton.\n */\nexport const globalSchema: IndexedStructureDefinition = { types: {} };\n\n/**\n * Output the string representation of a value, suitable for use as part of a search query.\n * @param v - The value to format as a string\n * @returns The stringified value\n */\nexport function stringifyTypedValue(v: TypedValue): string {\n  switch (v.type) {\n    case PropertyType.uuid:\n    case PropertyType.uri:\n    case PropertyType.url:\n    case PropertyType.string:\n    case PropertyType.oid:\n    case PropertyType.markdown:\n    case PropertyType.id:\n    case PropertyType.code:\n    case PropertyType.canonical:\n    case PropertyType.base64Binary:\n    case PropertyType.SystemString:\n    case PropertyType.date:\n    case PropertyType.dateTime:\n    case PropertyType.instant:\n      // many types are represented as string primitives\n      return v.value as string;\n    case PropertyType.Identifier:\n      return `${v.value.system ?? ''}|${v.value.value}`;\n    case PropertyType.Coding:\n      return stringifyCoding(v.value);\n    case PropertyType.CodeableConcept:\n      return (v.value as CodeableConcept).coding?.map(stringifyCoding).join(',') ?? v.value.text;\n    case PropertyType.HumanName:\n      if (v.value.text) {\n        return v.value.text;\n      }\n      return formatHumanName(v.value);\n    case PropertyType.unsignedInt:\n    case PropertyType.positiveInt:\n    case PropertyType.integer:\n    case PropertyType.decimal:\n      return (v.value as number).toString();\n    case PropertyType.boolean:\n      return v.value ? 'true' : 'false';\n    case PropertyType.Extension:\n      return v.value.url;\n    case PropertyType.ContactPoint:\n      return v.value.value;\n    case PropertyType.Quantity:\n    case PropertyType.Age:\n    case PropertyType.Count:\n    case PropertyType.Duration:\n      return `${v.value.value}|${v.value.system ?? ''}|${v.value.code ?? v.value.unit ?? ''}`;\n    case PropertyType.Reference:\n      return v.value.reference;\n    default:\n      if (isResource(v.value)) {\n        return createReference(v.value).reference;\n      }\n      return JSON.stringify(v);\n  }\n}\n\nfunction stringifyCoding(coding: Coding | undefined): string {\n  if (!coding) {\n    return '';\n  }\n  return `${coding.system ?? ''}|${coding.code}`;\n}\n", "export function parseDateString(str: string): string {\n  if (str.startsWith('T')) {\n    // If a time string,\n    // then normalize to full length.\n    return str + 'T00:00:00.000Z'.substring(str.length);\n  }\n\n  if (str.length <= 10) {\n    // If a local date (i.e., \"2021-01-01\"),\n    // then return as-is.\n    return str;\n  }\n\n  try {\n    // Try to normalize to UTC\n    return new Date(str).toISOString();\n  } catch (_err) {\n    // Fallback to original input\n    // This happens on unsupported time formats such as \"2021-01-01T12\"\n    return str;\n  }\n}\n", "import { Reference, Resource } from '@medplum/fhirtypes';\nimport { Atom, AtomContext } from '../fhirlexer/parse';\nimport { PropertyType, TypedValue, isResource } from '../types';\nimport { calculateAge, getExtension, isEmpty, resolveId } from '../utils';\nimport { DotAtom, SymbolAtom } from './atoms';\nimport { parseDateString } from './date';\nimport { booleanToTypedValue, fhirPathIs, isQuantity, removeDuplicates, toJsBoolean, toTypedValue } from './utils';\n\n/*\n * Collection of FHIRPath\n * See: https://hl7.org/fhirpath/#functions\n */\n\nexport type FhirPathFunction = (context: AtomContext, input: TypedValue[], ...args: Atom[]) => TypedValue[];\n\n/**\n * Temporary placholder for unimplemented methods.\n * @returns Empty array.\n */\nconst stub: FhirPathFunction = (): [] => [];\n\nexport const functions: Record<string, FhirPathFunction> = {\n  /*\n   * 5.1 Existence\n   * See: https://hl7.org/fhirpath/#existence\n   */\n\n  /**\n   * Returns true if the input collection is empty ({ }) and false otherwise.\n   *\n   * See: https://hl7.org/fhirpath/#empty-boolean\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @returns True if the input collection is empty ({ }) and false otherwise.\n   */\n  empty: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return booleanToTypedValue(input.length === 0 || input.every((e) => isEmpty(e.value)));\n  },\n\n  /**\n   * Returns true if the input collection is not empty ({ }) and false otherwise.\n   *\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @returns True if the input collection is not empty ({ }) and false otherwise.\n   */\n  hasValue: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return booleanToTypedValue(input.length !== 0);\n  },\n\n  /**\n   * Returns true if the collection has unknown elements, and false otherwise.\n   * This is the opposite of empty(), and as such is a shorthand for empty().not().\n   * If the input collection is empty ({ }), the result is false.\n   *\n   * The function can also take an optional criteria to be applied to the collection\n   * prior to the determination of the exists. In this case, the function is shorthand\n   * for where(criteria).exists().\n   *\n   * See: https://hl7.org/fhirpath/#existscriteria-expression-boolean\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param criteria - The evaluation criteria.\n   * @returns True if the collection has unknown elements, and false otherwise.\n   */\n  exists: (context: AtomContext, input: TypedValue[], criteria?: Atom): TypedValue[] => {\n    if (criteria) {\n      return booleanToTypedValue(input.filter((e) => toJsBoolean(criteria.eval(context, [e]))).length > 0);\n    } else {\n      return booleanToTypedValue(input.length > 0 && input.every((e) => !isEmpty(e.value)));\n    }\n  },\n\n  /**\n   * Returns true if for every element in the input collection, criteria evaluates to true.\n   * Otherwise, the result is false.\n   *\n   * If the input collection is empty ({ }), the result is true.\n   *\n   * See: https://hl7.org/fhirpath/#allcriteria-expression-boolean\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param criteria - The evaluation criteria.\n   * @returns True if for every element in the input collection, criteria evaluates to true.\n   */\n  all: (context: AtomContext, input: TypedValue[], criteria: Atom): TypedValue[] => {\n    return booleanToTypedValue(input.every((e) => toJsBoolean(criteria.eval(context, [e]))));\n  },\n\n  /**\n   * Takes a collection of Boolean values and returns true if all the items are true.\n   * If unknown items are false, the result is false.\n   * If the input is empty ({ }), the result is true.\n   *\n   * See: https://hl7.org/fhirpath/#alltrue-boolean\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @returns True if all the items are true.\n   */\n  allTrue: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    for (const value of input) {\n      if (!value.value) {\n        return booleanToTypedValue(false);\n      }\n    }\n    return booleanToTypedValue(true);\n  },\n\n  /**\n   * Takes a collection of Boolean values and returns true if unknown of the items are true.\n   * If all the items are false, or if the input is empty ({ }), the result is false.\n   *\n   * See: https://hl7.org/fhirpath/#anytrue-boolean\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @returns True if unknown of the items are true.\n   */\n  anyTrue: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    for (const value of input) {\n      if (value.value) {\n        return booleanToTypedValue(true);\n      }\n    }\n    return booleanToTypedValue(false);\n  },\n\n  /**\n   * Takes a collection of Boolean values and returns true if all the items are false.\n   * If unknown items are true, the result is false.\n   * If the input is empty ({ }), the result is true.\n   *\n   * See: https://hl7.org/fhirpath/#allfalse-boolean\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @returns True if all the items are false.\n   */\n  allFalse: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    for (const value of input) {\n      if (value.value) {\n        return booleanToTypedValue(false);\n      }\n    }\n    return booleanToTypedValue(true);\n  },\n\n  /**\n   * Takes a collection of Boolean values and returns true if unknown of the items are false.\n   * If all the items are true, or if the input is empty ({ }), the result is false.\n   *\n   * See: https://hl7.org/fhirpath/#anyfalse-boolean\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @returns True if for every element in the input collection, criteria evaluates to true.\n   */\n  anyFalse: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    for (const value of input) {\n      if (!value.value) {\n        return booleanToTypedValue(true);\n      }\n    }\n    return booleanToTypedValue(false);\n  },\n\n  /**\n   * Returns true if all items in the input collection are members of the collection passed\n   * as the other argument. Membership is determined using the = (Equals) (=) operation.\n   *\n   * Conceptually, this function is evaluated by testing each element in the input collection\n   * for membership in the other collection, with a default of true. This means that if the\n   * input collection is empty ({ }), the result is true, otherwise if the other collection\n   * is empty ({ }), the result is false.\n   *\n   * See: http://hl7.org/fhirpath/#subsetofother-collection-boolean\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param other - The atom representing the collection of elements.\n   * @returns True if all items in the input collection are members of the other collection.\n   */\n  subsetOf: (context: AtomContext, input: TypedValue[], other: Atom): TypedValue[] => {\n    if (input.length === 0) {\n      return booleanToTypedValue(true);\n    }\n\n    const otherArray = other.eval(context, getRootInput(context));\n    if (otherArray.length === 0) {\n      return booleanToTypedValue(false);\n    }\n\n    return booleanToTypedValue(input.every((e) => otherArray.some((o) => o.value === e.value)));\n  },\n\n  /**\n   * Returns true if all items in the collection passed as the other argument are members of\n   * the input collection. Membership is determined using the = (Equals) (=) operation.\n   *\n   * Conceptually, this function is evaluated by testing each element in the other collection\n   * for membership in the input collection, with a default of true. This means that if the\n   * other collection is empty ({ }), the result is true, otherwise if the input collection\n   * is empty ({ }), the result is false.\n   *\n   * See: http://hl7.org/fhirpath/#supersetofother-collection-boolean\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param other - The atom representing the collection of elements.\n   * @returns True if all items in the other collection are members of the input collection.\n   */\n  supersetOf: (context: AtomContext, input: TypedValue[], other: Atom): TypedValue[] => {\n    const otherArray = other.eval(context, getRootInput(context));\n    if (otherArray.length === 0) {\n      return booleanToTypedValue(true);\n    }\n\n    if (input.length === 0) {\n      return booleanToTypedValue(false);\n    }\n\n    return booleanToTypedValue(otherArray.every((e) => input.some((o) => o.value === e.value)));\n  },\n\n  /**\n   * Returns the integer count of the number of items in the input collection.\n   * Returns 0 when the input collection is empty.\n   *\n   * See: https://hl7.org/fhirpath/#count-integer\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @returns The integer count of the number of items in the input collection.\n   */\n  count: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return [{ type: PropertyType.integer, value: input.length }];\n  },\n\n  /**\n   * Returns a collection containing only the unique items in the input collection.\n   * To determine whether two items are the same, the = (Equals) (=) operator is used,\n   * as defined below.\n   *\n   * If the input collection is empty ({ }), the result is empty.\n   *\n   * Note that the order of elements in the input collection is not guaranteed to be\n   * preserved in the result.\n   *\n   * See: https://hl7.org/fhirpath/#distinct-collection\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @returns The integer count of the number of items in the input collection.\n   */\n  distinct: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    const result: TypedValue[] = [];\n    for (const value of input) {\n      if (!result.some((e) => e.value === value.value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  },\n\n  /**\n   * Returns true if all the items in the input collection are distinct.\n   * To determine whether two items are distinct, the = (Equals) (=) operator is used,\n   * as defined below.\n   *\n   * See: https://hl7.org/fhirpath/#isdistinct-boolean\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns The integer count of the number of items in the input collection.\n   */\n  isDistinct: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return booleanToTypedValue(input.length === functions.distinct(context, input).length);\n  },\n\n  /*\n   * 5.2 Filtering and projection\n   */\n\n  /**\n   * Returns a collection containing only those elements in the input collection\n   * for which the stated criteria expression evaluates to true.\n   * Elements for which the expression evaluates to false or empty ({ }) are not\n   * included in the result.\n   *\n   * If the input collection is empty ({ }), the result is empty.\n   *\n   * If the result of evaluating the condition is other than a single boolean value,\n   * the evaluation will end and signal an error to the calling environment,\n   * consistent with singleton evaluation of collections behavior.\n   *\n   * See: https://hl7.org/fhirpath/#wherecriteria-expression-collection\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param criteria - The condition atom.\n   * @returns A collection containing only those elements in the input collection for which the stated criteria expression evaluates to true.\n   */\n  where: (context: AtomContext, input: TypedValue[], criteria: Atom): TypedValue[] => {\n    return input.filter((e) => toJsBoolean(criteria.eval(context, [e])));\n  },\n\n  /**\n   * Evaluates the projection expression for each item in the input collection.\n   * The result of each evaluation is added to the output collection. If the\n   * evaluation results in a collection with multiple items, all items are added\n   * to the output collection (collections resulting from evaluation of projection\n   * are flattened). This means that if the evaluation for an element results in\n   * the empty collection ({ }), no element is added to the result, and that if\n   * the input collection is empty ({ }), the result is empty as well.\n   *\n   * See: http://hl7.org/fhirpath/#selectprojection-expression-collection\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param criteria - The condition atom.\n   * @returns A collection containing only those elements in the input collection for which the stated criteria expression evaluates to true.\n   */\n  select: (context: AtomContext, input: TypedValue[], criteria: Atom): TypedValue[] => {\n    return input.map((e) => criteria.eval({ parent: context, variables: { $this: e } }, [e])).flat();\n  },\n\n  /**\n   * A version of select that will repeat the projection and add it to the output\n   * collection, as long as the projection yields new items (as determined by\n   * the = (Equals) (=) operator).\n   *\n   * See: http://hl7.org/fhirpath/#repeatprojection-expression-collection\n   */\n  repeat: stub,\n\n  /**\n   * Returns a collection that contains all items in the input collection that\n   * are of the given type or a subclass thereof. If the input collection is\n   * empty ({ }), the result is empty. The type argument is an identifier that\n   * must resolve to the name of a type in a model\n   *\n   * See: http://hl7.org/fhirpath/#oftypetype-type-specifier-collection\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @param criteria - The condition atom.\n   * @returns A collection containing only those elements in the input collection that are of the given type or a subclass thereof.\n   */\n  ofType: (_context: AtomContext, input: TypedValue[], criteria: Atom): TypedValue[] => {\n    return input.filter((e) => e.type === (criteria as SymbolAtom).name);\n  },\n\n  /*\n   * 5.3 Subsetting\n   */\n\n  /**\n   * Will return the single item in the input if there is just one item.\n   * If the input collection is empty ({ }), the result is empty.\n   * If there are multiple items, an error is signaled to the evaluation environment.\n   * This function is useful for ensuring that an error is returned if an assumption\n   * about cardinality is violated at run-time.\n   *\n   * See: https://hl7.org/fhirpath/#single-collection\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @returns The single item in the input if there is just one item.\n   */\n  single: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    if (input.length > 1) {\n      throw new Error('Expected input length one for single()');\n    }\n    return input.length === 0 ? [] : input.slice(0, 1);\n  },\n\n  /**\n   * Returns a collection containing only the first item in the input collection.\n   * This function is equivalent to item[0], so it will return an empty collection if the input collection has no items.\n   *\n   * See: https://hl7.org/fhirpath/#first-collection\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns A collection containing only the first item in the input collection.\n   */\n  first: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return input.length === 0 ? [] : input.slice(0, 1);\n  },\n\n  /**\n   * Returns a collection containing only the last item in the input collection.\n   * Will return an empty collection if the input collection has no items.\n   *\n   * See: https://hl7.org/fhirpath/#last-collection\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns A collection containing only the last item in the input collection.\n   */\n  last: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return input.length === 0 ? [] : input.slice(input.length - 1, input.length);\n  },\n\n  /**\n   * Returns a collection containing all but the first item in the input collection.\n   * Will return an empty collection if the input collection has no items, or only one item.\n   *\n   * See: https://hl7.org/fhirpath/#tail-collection\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns A collection containing all but the first item in the input collection.\n   */\n  tail: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return input.length === 0 ? [] : input.slice(1, input.length);\n  },\n\n  /**\n   * Returns a collection containing all but the first num items in the input collection.\n   * Will return an empty collection if there are no items remaining after the\n   * indicated number of items have been skipped, or if the input collection is empty.\n   * If num is less than or equal to zero, the input collection is simply returned.\n   *\n   * See: https://hl7.org/fhirpath/#skipnum-integer-collection\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param num - The atom representing the number of elements to skip.\n   * @returns A collection containing all but the first item in the input collection.\n   */\n  skip: (context: AtomContext, input: TypedValue[], num: Atom): TypedValue[] => {\n    const numValue = num.eval(context, input)[0]?.value;\n    if (typeof numValue !== 'number') {\n      throw new Error('Expected a number for skip(num)');\n    }\n    if (numValue >= input.length) {\n      return [];\n    }\n    if (numValue <= 0) {\n      return input;\n    }\n    return input.slice(numValue, input.length);\n  },\n\n  /**\n   * Returns a collection containing the first num items in the input collection,\n   * or less if there are less than num items.\n   * If num is less than or equal to 0, or if the input collection is empty ({ }),\n   * take returns an empty collection.\n   *\n   * See: https://hl7.org/fhirpath/#takenum-integer-collection\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param num - The atom representing the number of elements to take.\n   * @returns A collection containing the first num items in the input collection.\n   */\n  take: (context: AtomContext, input: TypedValue[], num: Atom): TypedValue[] => {\n    const numValue = num.eval(context, input)[0]?.value;\n    if (typeof numValue !== 'number') {\n      throw new Error('Expected a number for take(num)');\n    }\n    if (numValue >= input.length) {\n      return input;\n    }\n    if (numValue <= 0) {\n      return [];\n    }\n    return input.slice(0, numValue);\n  },\n\n  /**\n   * Returns the set of elements that are in both collections.\n   * Duplicate items will be eliminated by this function.\n   * Order of items is not guaranteed to be preserved in the result of this function.\n   *\n   * See: http://hl7.org/fhirpath/#intersectother-collection-collection\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param other - The atom representing the collection of elements to intersect.\n   * @returns A collection containing the elements that are in both collections.\n   */\n  intersect: (context: AtomContext, input: TypedValue[], other: Atom): TypedValue[] => {\n    if (!other) {\n      return input;\n    }\n    const otherArray = other.eval(context, getRootInput(context));\n    const result: TypedValue[] = [];\n    for (const value of input) {\n      if (!result.some((e) => e.value === value.value) && otherArray.some((e) => e.value === value.value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  },\n\n  /**\n   * Returns the set of elements that are not in the other collection.\n   * Duplicate items will not be eliminated by this function, and order will be preserved.\n   *\n   * e.g. (1 | 2 | 3).exclude(2) returns (1 | 3).\n   *\n   * See: http://hl7.org/fhirpath/#excludeother-collection-collection\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param other - The atom representing the collection of elements to exclude.\n   * @returns A collection containing the elements that are in the input collection but not the other collection.\n   */\n  exclude: (context: AtomContext, input: TypedValue[], other: Atom): TypedValue[] => {\n    if (!other) {\n      return input;\n    }\n    const otherArray = other.eval(context, getRootInput(context));\n    const result: TypedValue[] = [];\n    for (const value of input) {\n      if (!otherArray.some((e) => e.value === value.value)) {\n        result.push(value);\n      }\n    }\n    return result;\n  },\n\n  /*\n   * 5.4. Combining\n   *\n   * See: https://hl7.org/fhirpath/#combining\n   */\n\n  /**\n   * Merge the two collections into a single collection,\n   * eliminating unknown duplicate values (using = (Equals) (=) to determine equality).\n   * There is no expectation of order in the resulting collection.\n   *\n   * In other words, this function returns the distinct list of elements from both inputs.\n   *\n   * See: http://hl7.org/fhirpath/#unionother-collection\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param other - The atom representing the collection of elements to merge.\n   * @returns A collection containing the elements that represent the union of both collections.\n   */\n  union: (context: AtomContext, input: TypedValue[], other: Atom): TypedValue[] => {\n    if (!other) {\n      return input;\n    }\n    const otherArray = other.eval(context, getRootInput(context));\n    return removeDuplicates([...input, ...otherArray]);\n  },\n\n  /**\n   * Merge the input and other collections into a single collection\n   * without eliminating duplicate values. Combining an empty collection\n   * with a non-empty collection will return the non-empty collection.\n   *\n   * There is no expectation of order in the resulting collection.\n   *\n   * See: http://hl7.org/fhirpath/#combineother-collection-collection\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param other - The atom representing the collection of elements to merge.\n   * @returns A collection containing the elements that represent the combination of both collections including duplicates.\n   */\n  combine: (context: AtomContext, input: TypedValue[], other: Atom): TypedValue[] => {\n    if (!other) {\n      return input;\n    }\n    const otherArray = other.eval(context, getRootInput(context));\n    return [...input, ...otherArray];\n  },\n\n  /**\n   * Returns true if the input is a value HTML element.\n   *\n   * See: https://hl7.org/fhir/fhirpath.html#variables\n   * @param _context - The evaluation context.\n   * @param _input - The input collection.\n   * @param _other - The atom representing the collection of elements to validate the html.\n   * @returns A collection of boolean values\n   */\n  htmlChecks: (_context: AtomContext, _input: TypedValue[], _other: Atom): TypedValue[] => {\n    return [toTypedValue(true)];\n  },\n\n  /*\n   * 5.5. Conversion\n   *\n   * See: https://hl7.org/fhirpath/#conversion\n   */\n\n  /**\n   * The iif function in FHIRPath is an immediate if,\n   * also known as a conditional operator (such as C\u2019s ? : operator).\n   *\n   * The criterion expression is expected to evaluate to a Boolean.\n   *\n   * If criterion is true, the function returns the value of the true-result argument.\n   *\n   * If criterion is false or an empty collection, the function returns otherwise-result,\n   * unless the optional otherwise-result is not given, in which case the function returns an empty collection.\n   *\n   * Note that short-circuit behavior is expected in this function. In other words,\n   * true-result should only be evaluated if the criterion evaluates to true,\n   * and otherwise-result should only be evaluated otherwise. For implementations,\n   * this means delaying evaluation of the arguments.\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param criterion - The atom representing the conditional.\n   * @param trueResult - The atom to be used if the conditional evaluates to true.\n   * @param otherwiseResult - Optional atom to be used if the conditional evaluates to false.\n   * @returns The result of the iif function.\n   */\n  iif: (\n    context: AtomContext,\n    input: TypedValue[],\n    criterion: Atom,\n    trueResult: Atom,\n    otherwiseResult?: Atom\n  ): TypedValue[] => {\n    const evalResult = criterion.eval(context, input);\n    if (evalResult.length > 1 || (evalResult.length === 1 && typeof evalResult[0].value !== 'boolean')) {\n      throw new Error('Expected criterion to evaluate to a Boolean');\n    }\n\n    if (toJsBoolean(evalResult)) {\n      return trueResult.eval(context, input);\n    }\n\n    if (otherwiseResult) {\n      return otherwiseResult.eval(context, input);\n    }\n\n    return [];\n  },\n\n  /**\n   * Converts an input collection to a boolean.\n   *\n   * If the input collection contains a single item, this function will return a single boolean if:\n   *   1) the item is a Boolean\n   *   2) the item is an Integer and is equal to one of the possible integer representations of Boolean values\n   *   3) the item is a Decimal that is equal to one of the possible decimal representations of Boolean values\n   *   4) the item is a String that is equal to one of the possible string representations of Boolean values\n   *\n   * If the item is not one the above types, or the item is a String, Integer, or Decimal, but is not equal to one of the possible values convertible to a Boolean, the result is empty.\n   *\n   * See: https://hl7.org/fhirpath/#toboolean-boolean\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @returns The input converted to boolean value.\n   */\n  toBoolean: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    if (input.length === 0) {\n      return [];\n    }\n    const [{ value }] = validateInput(input, 1);\n    if (typeof value === 'boolean') {\n      return [{ type: PropertyType.boolean, value }];\n    }\n    if (typeof value === 'number') {\n      if (value === 0 || value === 1) {\n        return booleanToTypedValue(!!value);\n      }\n    }\n    if (typeof value === 'string') {\n      const lowerStr = value.toLowerCase();\n      if (['true', 't', 'yes', 'y', '1', '1.0'].includes(lowerStr)) {\n        return booleanToTypedValue(true);\n      }\n      if (['false', 'f', 'no', 'n', '0', '0.0'].includes(lowerStr)) {\n        return booleanToTypedValue(false);\n      }\n    }\n    return [];\n  },\n\n  /**\n   * If the input collection contains a single item, this function will return true if:\n   *   1) the item is a Boolean\n   *   2) the item is an Integer that is equal to one of the possible integer representations of Boolean values\n   *   3) the item is a Decimal that is equal to one of the possible decimal representations of Boolean values\n   *   4) the item is a String that is equal to one of the possible string representations of Boolean values\n   *\n   * If the item is not one of the above types, or the item is a String, Integer, or Decimal, but is not equal to one of the possible values convertible to a Boolean, the result is false.\n   *\n   * Possible values for Integer, Decimal, and String are described in the toBoolean() function.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * See: http://hl7.org/fhirpath/#convertstoboolean-boolean\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns True if the input can be converted to boolean.\n   */\n  convertsToBoolean: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    if (input.length === 0) {\n      return [];\n    }\n    return booleanToTypedValue(functions.toBoolean(context, input).length === 1);\n  },\n\n  /**\n   * Returns the integer representation of the input.\n   *\n   * If the input collection contains a single item, this function will return a single integer if:\n   *   1) the item is an Integer\n   *   2) the item is a String and is convertible to an integer\n   *   3) the item is a Boolean, where true results in a 1 and false results in a 0.\n   *\n   * If the item is not one the above types, the result is empty.\n   *\n   * If the item is a String, but the string is not convertible to an integer (using the regex format (\\\\+|-)?\\d+), the result is empty.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * See: https://hl7.org/fhirpath/#tointeger-integer\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @returns The string representation of the input.\n   */\n  toInteger: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    if (input.length === 0) {\n      return [];\n    }\n    const [{ value }] = validateInput(input, 1);\n    if (typeof value === 'number') {\n      return [{ type: PropertyType.integer, value }];\n    }\n    if (typeof value === 'string' && /^[+-]?\\d+$/.exec(value)) {\n      return [{ type: PropertyType.integer, value: parseInt(value, 10) }];\n    }\n    if (typeof value === 'boolean') {\n      return [{ type: PropertyType.integer, value: value ? 1 : 0 }];\n    }\n    return [];\n  },\n\n  /**\n   * Returns true if the input can be converted to string.\n   *\n   * If the input collection contains a single item, this function will return true if:\n   *   1) the item is an Integer\n   *   2) the item is a String and is convertible to an Integer\n   *   3) the item is a Boolean\n   *   4) If the item is not one of the above types, or the item is a String, but is not convertible to an Integer (using the regex format (\\\\+|-)?\\d+), the result is false.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * See: https://hl7.org/fhirpath/#convertstointeger-boolean\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns True if the input can be converted to an integer.\n   */\n  convertsToInteger: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    if (input.length === 0) {\n      return [];\n    }\n    return booleanToTypedValue(functions.toInteger(context, input).length === 1);\n  },\n\n  /**\n   * If the input collection contains a single item, this function will return a single date if:\n   *   1) the item is a Date\n   *   2) the item is a DateTime\n   *   3) the item is a String and is convertible to a Date\n   *\n   * If the item is not one of the above types, the result is empty.\n   *\n   * If the item is a String, but the string is not convertible to a Date (using the format YYYY-MM-DD), the result is empty.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * See: https://hl7.org/fhirpath/#todate-date\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @returns The value converted to a date if possible; otherwise empty array.\n   */\n  toDate: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    if (input.length === 0) {\n      return [];\n    }\n    const [{ value }] = validateInput(input, 1);\n    if (typeof value === 'string' && /^\\d{4}(-\\d{2}(-\\d{2})?)?/.exec(value)) {\n      return [{ type: PropertyType.date, value: parseDateString(value) }];\n    }\n    return [];\n  },\n\n  /**\n   * If the input collection contains a single item, this function will return true if:\n   *   1) the item is a Date\n   *   2) the item is a DateTime\n   *   3) the item is a String and is convertible to a Date\n   *\n   * If the item is not one of the above types, or is not convertible to a Date (using the format YYYY-MM-DD), the result is false.\n   *\n   * If the item contains a partial date (e.g. '2012-01'), the result is a partial date.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * See: https://hl7.org/fhirpath/#convertstodate-boolean\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns True if the item can be converted to a date.\n   */\n  convertsToDate: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    if (input.length === 0) {\n      return [];\n    }\n    return booleanToTypedValue(functions.toDate(context, input).length === 1);\n  },\n\n  /**\n   * If the input collection contains a single item, this function will return a single datetime if:\n   *   1) the item is a DateTime\n   *   2) the item is a Date, in which case the result is a DateTime with the year, month, and day of the Date, and the time components empty (not set to zero)\n   *   3) the item is a String and is convertible to a DateTime\n   *\n   * If the item is not one of the above types, the result is empty.\n   *\n   * If the item is a String, but the string is not convertible to a DateTime (using the format YYYY-MM-DDThh:mm:ss.fff(+|-)hh:mm), the result is empty.\n   *\n   * If the item contains a partial datetime (e.g. '2012-01-01T10:00'), the result is a partial datetime.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * See: https://hl7.org/fhirpath/#todatetime-datetime\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @returns The value converted to a datetime if possible; otherwise empty array.\n   */\n  toDateTime: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    if (input.length === 0) {\n      return [];\n    }\n    const [{ value }] = validateInput(input, 1);\n    if (typeof value === 'string' && /^\\d{4}(-\\d{2}(-\\d{2})?)?/.exec(value)) {\n      return [{ type: PropertyType.dateTime, value: parseDateString(value) }];\n    }\n    return [];\n  },\n\n  /**\n   * If the input collection contains a single item, this function will return true if:\n   *   1) the item is a DateTime\n   *   2) the item is a Date\n   *   3) the item is a String and is convertible to a DateTime\n   *\n   * If the item is not one of the above types, or is not convertible to a DateTime (using the format YYYY-MM-DDThh:mm:ss.fff(+|-)hh:mm), the result is false.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * See: https://hl7.org/fhirpath/#convertstodatetime-boolean\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns True if the item can be converted to a dateTime.\n   */\n  convertsToDateTime: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    if (input.length === 0) {\n      return [];\n    }\n    return booleanToTypedValue(functions.toDateTime(context, input).length === 1);\n  },\n\n  /**\n   * If the input collection contains a single item, this function will return a single decimal if:\n   *   1) the item is an Integer or Decimal\n   *   2) the item is a String and is convertible to a Decimal\n   *   3) the item is a Boolean, where true results in a 1.0 and false results in a 0.0.\n   *   4) If the item is not one of the above types, the result is empty.\n   *\n   * If the item is a String, but the string is not convertible to a Decimal (using the regex format (\\\\+|-)?\\d+(\\.\\d+)?), the result is empty.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * See: https://hl7.org/fhirpath/#decimal-conversion-functions\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @returns The value converted to a decimal if possible; otherwise empty array.\n   */\n  toDecimal: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    if (input.length === 0) {\n      return [];\n    }\n    const [{ value }] = validateInput(input, 1);\n    if (typeof value === 'number') {\n      return [{ type: PropertyType.decimal, value }];\n    }\n    if (typeof value === 'string' && /^-?\\d{1,9}(\\.\\d{1,9})?$/.exec(value)) {\n      return [{ type: PropertyType.decimal, value: parseFloat(value) }];\n    }\n    if (typeof value === 'boolean') {\n      return [{ type: PropertyType.decimal, value: value ? 1 : 0 }];\n    }\n    return [];\n  },\n\n  /**\n   * If the input collection contains a single item, this function will true if:\n   *   1) the item is an Integer or Decimal\n   *   2) the item is a String and is convertible to a Decimal\n   *   3) the item is a Boolean\n   *\n   * If the item is not one of the above types, or is not convertible to a Decimal (using the regex format (\\\\+|-)?\\d+(\\.\\d+)?), the result is false.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * See: https://hl7.org/fhirpath/#convertstodecimal-boolean\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns The value converted to a decimal if possible; otherwise empty array.\n   */\n  convertsToDecimal: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    if (input.length === 0) {\n      return [];\n    }\n    return booleanToTypedValue(functions.toDecimal(context, input).length === 1);\n  },\n\n  /**\n   * If the input collection contains a single item, this function will return a single quantity if:\n   *   1) the item is an Integer, or Decimal, where the resulting quantity will have the default unit ('1')\n   *   2) the item is a Quantity\n   *   3) the item is a String and is convertible to a Quantity\n   *   4) the item is a Boolean, where true results in the quantity 1.0 '1', and false results in the quantity 0.0 '1'\n   *\n   * If the item is not one of the above types, the result is empty.\n   *\n   * See: https://hl7.org/fhirpath/#quantity-conversion-functions\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @returns The value converted to a quantity if possible; otherwise empty array.\n   */\n  toQuantity: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    if (input.length === 0) {\n      return [];\n    }\n    const [{ value }] = validateInput(input, 1);\n    if (isQuantity(value)) {\n      return [{ type: PropertyType.Quantity, value }];\n    }\n    if (typeof value === 'number') {\n      return [{ type: PropertyType.Quantity, value: { value, unit: '1' } }];\n    }\n    if (typeof value === 'string' && /^-?\\d{1,9}(\\.\\d{1,9})?/.exec(value)) {\n      return [{ type: PropertyType.Quantity, value: { value: parseFloat(value), unit: '1' } }];\n    }\n    if (typeof value === 'boolean') {\n      return [{ type: PropertyType.Quantity, value: { value: value ? 1 : 0, unit: '1' } }];\n    }\n    return [];\n  },\n\n  /**\n   * If the input collection contains a single item, this function will return true if:\n   *   1) the item is an Integer, Decimal, or Quantity\n   *   2) the item is a String that is convertible to a Quantity\n   *   3) the item is a Boolean\n   *\n   * If the item is not one of the above types, or is not convertible to a Quantity using the following regex format:\n   *\n   *     (?'value'(\\+|-)?\\d+(\\.\\d+)?)\\s*('(?'unit'[^']+)'|(?'time'[a-zA-Z]+))?\n   *\n   * then the result is false.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * If the unit argument is provided, it must be the string representation of a UCUM code (or a FHIRPath calendar duration keyword), and is used to determine whether the input quantity can be converted to the given unit, according to the unit conversion rules specified by UCUM. If the input quantity can be converted, the result is true, otherwise, the result is false.\n   *\n   * See: https://hl7.org/fhirpath/#convertstoquantityunit-string-boolean\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns True if the item can be converted to a quantity.\n   */\n  convertsToQuantity: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    if (input.length === 0) {\n      return [];\n    }\n    return booleanToTypedValue(functions.toQuantity(context, input).length === 1);\n  },\n\n  /**\n   * Returns the string representation of the input.\n   *\n   * If the input collection contains a single item, this function will return a single String if:\n   *\n   *  1) the item in the input collection is a String\n   *  2) the item in the input collection is an Integer, Decimal, Date, Time, DateTime, or Quantity the output will contain its String representation\n   *  3) the item is a Boolean, where true results in 'true' and false in 'false'.\n   *\n   * If the item is not one of the above types, the result is false.\n   *\n   * See: https://hl7.org/fhirpath/#tostring-string\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @returns The string representation of the input.\n   */\n  toString: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    if (input.length === 0) {\n      return [];\n    }\n    const [{ value }] = validateInput(input, 1);\n    if (value === null || value === undefined) {\n      return [];\n    }\n    if (isQuantity(value)) {\n      return [{ type: PropertyType.string, value: `${value.value} '${value.unit}'` }];\n    }\n    return [{ type: PropertyType.string, value: (value as boolean | number | string).toString() }];\n  },\n\n  /**\n   * Returns true if the input can be converted to string.\n   *\n   * If the input collection contains a single item, this function will return true if:\n   *   1) the item is a String\n   *   2) the item is an Integer, Decimal, Date, Time, or DateTime\n   *   3) the item is a Boolean\n   *   4) the item is a Quantity\n   *\n   * If the item is not one of the above types, the result is false.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * See: https://hl7.org/fhirpath/#tostring-string\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns True if the item can be converted to a string\n   */\n  convertsToString: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    if (input.length === 0) {\n      return [];\n    }\n    return booleanToTypedValue((functions.toString as unknown as FhirPathFunction)(context, input).length === 1);\n  },\n\n  /**\n   * If the input collection contains a single item, this function will return a single time if:\n   *   1) the item is a Time\n   *   2) the item is a String and is convertible to a Time\n   *\n   * If the item is not one of the above types, the result is empty.\n   *\n   * If the item is a String, but the string is not convertible to a Time (using the format hh:mm:ss.fff(+|-)hh:mm), the result is empty.\n   *\n   * If the item contains a partial time (e.g. '10:00'), the result is a partial time.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * See: https://hl7.org/fhirpath/#totime-time\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @returns The value converted to a time if possible; otherwise empty array.\n   */\n  toTime: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    if (input.length === 0) {\n      return [];\n    }\n    const [{ value }] = validateInput(input, 1);\n    if (typeof value === 'string') {\n      const match = /^T?(\\d{2}(:\\d{2}(:\\d{2})?)?)/.exec(value);\n      if (match) {\n        return [{ type: PropertyType.time, value: parseDateString('T' + match[1]) }];\n      }\n    }\n    return [];\n  },\n\n  /**\n   * If the input collection contains a single item, this function will return true if:\n   *   1) the item is a Time\n   *   2) the item is a String and is convertible to a Time\n   *\n   * If the item is not one of the above types, or is not convertible to a Time (using the format hh:mm:ss.fff(+|-)hh:mm), the result is false.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * See: https://hl7.org/fhirpath/#convertstotime-boolean\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns True if the item can be converted to a time.\n   */\n  convertsToTime: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    if (input.length === 0) {\n      return [];\n    }\n    return booleanToTypedValue(functions.toTime(context, input).length === 1);\n  },\n\n  /*\n   * 5.6. String Manipulation.\n   *\n   * See: https://hl7.org/fhirpath/#string-manipulation\n   */\n\n  /**\n   * Returns the 0-based index of the first position substring is found in the input string, or -1 if it is not found.\n   *\n   * If substring is an empty string (''), the function returns 0.\n   *\n   * If the input or substring is empty ({ }), the result is empty ({ }).\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * See: https://hl7.org/fhirpath/#indexofsubstring-string-integer\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param substringAtom - The substring to search for.\n   * @returns The index of the substring.\n   */\n  indexOf: (context: AtomContext, input: TypedValue[], substringAtom: Atom): TypedValue[] => {\n    return applyStringFunc((str, substring) => str.indexOf(substring as string), context, input, substringAtom);\n  },\n\n  /**\n   * Returns the part of the string starting at position start (zero-based). If length is given, will return at most length number of characters from the input string.\n   *\n   * If start lies outside the length of the string, the function returns empty ({ }). If there are less remaining characters in the string than indicated by length, the function returns just the remaining characters.\n   *\n   * If the input or start is empty, the result is empty.\n   *\n   * If an empty length is provided, the behavior is the same as if length had not been provided.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param startAtom - The start index atom.\n   * @param lengthAtom - Optional length atom.\n   * @returns The substring.\n   */\n  substring: (context: AtomContext, input: TypedValue[], startAtom: Atom, lengthAtom?: Atom): TypedValue[] => {\n    return applyStringFunc(\n      (str, start, length) => {\n        const startIndex = start as number;\n        const endIndex = length ? startIndex + (length as number) : str.length;\n        return startIndex < 0 || startIndex >= str.length ? undefined : str.substring(startIndex, endIndex);\n      },\n      context,\n      input,\n      startAtom,\n      lengthAtom\n    );\n  },\n\n  /**\n   * Returns true when the input string starts with the given prefix.\n   *\n   * If prefix is the empty string (''), the result is true.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * See: https://hl7.org/fhirpath/#startswithprefix-string-boolean\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param prefixAtom - The prefix substring to test.\n   * @returns True if the input string starts with the given prefix string.\n   */\n  startsWith: (context: AtomContext, input: TypedValue[], prefixAtom: Atom): TypedValue[] => {\n    return applyStringFunc((str, prefix) => str.startsWith(prefix as string), context, input, prefixAtom);\n  },\n\n  /**\n   * Returns true when the input string ends with the given suffix.\n   *\n   * If suffix is the empty string (''), the result is true.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * See: https://hl7.org/fhirpath/#endswithsuffix-string-boolean\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param suffixAtom - The suffix substring to test.\n   * @returns True if the input string ends with the given suffix string.\n   */\n  endsWith: (context: AtomContext, input: TypedValue[], suffixAtom: Atom): TypedValue[] => {\n    return applyStringFunc((str, suffix) => str.endsWith(suffix as string), context, input, suffixAtom);\n  },\n\n  /**\n   * Returns true when the given substring is a substring of the input string.\n   *\n   * If substring is the empty string (''), the result is true.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * See: https://hl7.org/fhirpath/#containssubstring-string-boolean\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param substringAtom - The substring to test.\n   * @returns True if the input string contains the given substring.\n   */\n  contains: (context: AtomContext, input: TypedValue[], substringAtom: Atom): TypedValue[] => {\n    return applyStringFunc((str, substring) => str.includes(substring as string), context, input, substringAtom);\n  },\n\n  /**\n   * Returns the input string with all characters converted to upper case.\n   * If the input collection is empty, the result is empty.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * See: https://hl7.org/fhirpath/#upper-string\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns The string converted to upper case.\n   */\n  upper: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return applyStringFunc((str) => str.toUpperCase(), context, input);\n  },\n\n  /**\n   * Returns the input string with all characters converted to lower case.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * See: https://hl7.org/fhirpath/#lower-string\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns The string converted to lower case.\n   */\n  lower: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return applyStringFunc((str) => str.toLowerCase(), context, input);\n  },\n\n  /**\n   * Returns the input string with all instances of pattern replaced with substitution. If the substitution is the empty string (''),\n   * instances of pattern are removed from the result. If pattern is the empty string (''), every character in the input string is\n   * surrounded by the substitution, e.g. 'abc'.replace('','x') becomes 'xaxbxcx'.\n   *\n   * If the input collection, pattern, or substitution are empty, the result is empty ({ }).\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * See: https://hl7.org/fhirpath/#replacepattern-string-substitution-string-string\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param patternAtom - The pattern to search for.\n   * @param substitionAtom - The substition to replace with.\n   * @returns The string with all instances of the search pattern replaced with the substitution string.\n   */\n  replace: (context: AtomContext, input: TypedValue[], patternAtom: Atom, substitionAtom: Atom): TypedValue[] => {\n    return applyStringFunc(\n      (str, pattern, substition) => str.replaceAll(pattern as string, substition as string),\n      context,\n      input,\n      patternAtom,\n      substitionAtom\n    );\n  },\n\n  /**\n   * Returns true when the value matches the given regular expression. Regular expressions should function consistently, regardless of any culture- and locale-specific settings in the environment, should be case-sensitive, use 'single line' mode and allow Unicode characters.\n   *\n   * If the input collection or regex are empty, the result is empty ({ }).\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * See: https://hl7.org/fhirpath/#matchesregex-string-boolean\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param regexAtom - The regular expression atom.\n   * @returns True if the input string matches the given regular expression.\n   */\n  matches: (context: AtomContext, input: TypedValue[], regexAtom: Atom): TypedValue[] => {\n    return applyStringFunc((str, regex) => !!new RegExp(regex as string).exec(str), context, input, regexAtom);\n  },\n\n  /**\n   * Matches the input using the regular expression in regex and replaces each match with the substitution string. The substitution may refer to identified match groups in the regular expression.\n   *\n   * If the input collection, regex, or substitution are empty, the result is empty ({ }).\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * See: https://hl7.org/fhirpath/#replacematchesregex-string-substitution-string-string\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param regexAtom - The regular expression atom.\n   * @param substitionAtom - The substition to replace with.\n   * @returns The string with all instances of the search pattern replaced with the substitution string.\n   */\n  replaceMatches: (context: AtomContext, input: TypedValue[], regexAtom: Atom, substitionAtom: Atom): TypedValue[] => {\n    return applyStringFunc(\n      (str, pattern, substition) => str.replaceAll(pattern as string, substition as string),\n      context,\n      input,\n      regexAtom,\n      substitionAtom\n    );\n  },\n\n  /**\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns The index of the substring.\n   */\n  length: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return applyStringFunc((str) => str.length, context, input);\n  },\n\n  /**\n   * Returns the list of characters in the input string. If the input collection is empty ({ }), the result is empty.\n   *\n   * See: https://hl7.org/fhirpath/#tochars-collection\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns Array of characters.\n   */\n  toChars: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return applyStringFunc((str) => (str ? str.split('') : undefined), context, input);\n  },\n\n  /*\n   * Additional string functions\n   * See: https://build.fhir.org/ig/HL7/FHIRPath/#additional-string-functions\n   * STU Note: the contents of this section are Standard for Trial Use (STU)\n   */\n\n  encode: stub,\n  decode: stub,\n  escape: stub,\n  unescape: stub,\n  trim: stub,\n  split: stub,\n\n  /**\n   * The join function takes a collection of strings and joins them into a single string, optionally using the given separator.\n   *\n   * If the input is empty, the result is empty.\n   *\n   * If no separator is specified, the strings are directly concatenated.\n   *\n   * See: https://build.fhir.org/ig/HL7/FHIRPath/#joinseparator-string--string\n   *\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param separatorAtom - Optional separator atom.\n   * @returns The joined string.\n   */\n  join: (context: AtomContext, input: TypedValue[], separatorAtom: Atom): TypedValue[] => {\n    const separator = separatorAtom?.eval(context, getRootInput(context))[0]?.value ?? '';\n    if (typeof separator !== 'string') {\n      throw new Error('Separator must be a string.');\n    }\n    return [{ type: PropertyType.string, value: input.map((i) => i.value?.toString() ?? '').join(separator) }];\n  },\n\n  /*\n   * 5.7. Math\n   */\n\n  /**\n   * Returns the absolute value of the input. When taking the absolute value of a quantity, the unit is unchanged.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * See: https://hl7.org/fhirpath/#abs-integer-decimal-quantity\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns A collection containing the result.\n   */\n  abs: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return applyMathFunc(Math.abs, context, input);\n  },\n\n  /**\n   * Returns the first integer greater than or equal to the input.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * See: https://hl7.org/fhirpath/#ceiling-integer\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns A collection containing the result.\n   */\n  ceiling: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return applyMathFunc(Math.ceil, context, input);\n  },\n\n  /**\n   * Returns e raised to the power of the input.\n   *\n   * If the input collection contains an Integer, it will be implicitly converted to a Decimal and the result will be a Decimal.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * See: https://hl7.org/fhirpath/#exp-decimal\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns A collection containing the result.\n   */\n  exp: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return applyMathFunc(Math.exp, context, input);\n  },\n\n  /**\n   * Returns the first integer less than or equal to the input.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * See: https://hl7.org/fhirpath/#floor-integer\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns A collection containing the result.\n   */\n  floor: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return applyMathFunc(Math.floor, context, input);\n  },\n\n  /**\n   * Returns the natural logarithm of the input (i.e. the logarithm base e).\n   *\n   * When used with an Integer, it will be implicitly converted to a Decimal.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * See: https://hl7.org/fhirpath/#ln-decimal\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns A collection containing the result.\n   */\n  ln: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return applyMathFunc(Math.log, context, input);\n  },\n\n  /**\n   * Returns the logarithm base base of the input number.\n   *\n   * When used with Integers, the arguments will be implicitly converted to Decimal.\n   *\n   * If base is empty, the result is empty.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * See: https://hl7.org/fhirpath/#logbase-decimal-decimal\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param baseAtom - The logarithm base.\n   * @returns A collection containing the result.\n   */\n  log: (context: AtomContext, input: TypedValue[], baseAtom: Atom): TypedValue[] => {\n    return applyMathFunc((value, base) => Math.log(value) / Math.log(base as number), context, input, baseAtom);\n  },\n\n  /**\n   * Raises a number to the exponent power. If this function is used with Integers, the result is an Integer. If the function is used with Decimals, the result is a Decimal. If the function is used with a mixture of Integer and Decimal, the Integer is implicitly converted to a Decimal and the result is a Decimal.\n   *\n   * If the power cannot be represented (such as the -1 raised to the 0.5), the result is empty.\n   *\n   * If the input is empty, or exponent is empty, the result is empty.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * See: https://hl7.org/fhirpath/#powerexponent-integer-decimal-integer-decimal\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param expAtom - The exponent power.\n   * @returns A collection containing the result.\n   */\n  power: (context: AtomContext, input: TypedValue[], expAtom: Atom): TypedValue[] => {\n    return applyMathFunc(Math.pow as (x: number, ...args: unknown[]) => number, context, input, expAtom);\n  },\n\n  /**\n   * Rounds the decimal to the nearest whole number using a traditional round (i.e. 0.5 or higher will round to 1). If specified, the precision argument determines the decimal place at which the rounding will occur. If not specified, the rounding will default to 0 decimal places.\n   *\n   * If specified, the number of digits of precision must be >= 0 or the evaluation will end and signal an error to the calling environment.\n   *\n   * If the input collection contains a single item of type Integer, it will be implicitly converted to a Decimal.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * See: https://hl7.org/fhirpath/#roundprecision-integer-decimal\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns A collection containing the result.\n   */\n  round: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return applyMathFunc(Math.round, context, input);\n  },\n\n  /**\n   * Returns the square root of the input number as a Decimal.\n   *\n   * If the square root cannot be represented (such as the square root of -1), the result is empty.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * Note that this function is equivalent to raising a number of the power of 0.5 using the power() function.\n   *\n   * See: https://hl7.org/fhirpath/#sqrt-decimal\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns A collection containing the result.\n   */\n  sqrt: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return applyMathFunc(Math.sqrt, context, input);\n  },\n\n  /**\n   * Returns the integer portion of the input.\n   *\n   * If the input collection is empty, the result is empty.\n   *\n   * If the input collection contains multiple items, the evaluation of the expression will end and signal an error to the calling environment.\n   *\n   * See: https://hl7.org/fhirpath/#truncate-integer\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns A collection containing the result.\n   */\n  truncate: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return applyMathFunc((x) => x | 0, context, input);\n  },\n\n  /*\n   * 5.8. Tree navigation\n   */\n\n  children: stub,\n\n  descendants: stub,\n\n  /*\n   * 5.9. Utility functions\n   */\n\n  /**\n   * Adds a String representation of the input collection to the diagnostic log,\n   * using the name argument as the name in the log. This log should be made available\n   * to the user in some appropriate fashion. Does not change the input, so returns\n   * the input collection as output.\n   *\n   * If the projection argument is used, the trace would log the result of evaluating\n   * the project expression on the input, but still return the input to the trace\n   * function unchanged.\n   *\n   * See: https://hl7.org/fhirpath/#tracename-string-projection-expression-collection\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @param _nameAtom - The log name.\n   * @returns The input collection.\n   */\n  trace: (_context: AtomContext, input: TypedValue[], _nameAtom: Atom): TypedValue[] => {\n    return input;\n  },\n\n  /**\n   * Returns the current date and time, including timezone offset.\n   *\n   * See: https://hl7.org/fhirpath/#now-datetime\n   * @returns The current dateTime.\n   */\n  now: (): TypedValue[] => {\n    return [{ type: PropertyType.dateTime, value: new Date().toISOString() }];\n  },\n\n  /**\n   * Returns the current time.\n   *\n   * See: https://hl7.org/fhirpath/#timeofday-time\n   * @returns The current time string.\n   */\n  timeOfDay: (): TypedValue[] => {\n    return [{ type: PropertyType.time, value: new Date().toISOString().substring(11) }];\n  },\n\n  /**\n   * Returns the current date.\n   *\n   * See: https://hl7.org/fhirpath/#today-date\n   * @returns The current date string.\n   */\n  today: (): TypedValue[] => {\n    return [{ type: PropertyType.date, value: new Date().toISOString().substring(0, 10) }];\n  },\n\n  /**\n   * Calculates the difference between two dates or date/times.\n   *\n   * This is not part of the official FHIRPath spec.\n   *\n   * IBM FHIR issue: https://github.com/IBM/FHIR/issues/1014\n   * IBM FHIR PR: https://github.com/IBM/FHIR/pull/1023\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param startAtom - The start date/time.\n   * @param endAtom - The end date/time.\n   * @param unitsAtom - Which units to return (\"years\", \"months\", or \"days\").\n   * @returns The Quantity of time between the two dates.\n   */\n  between: (\n    context: AtomContext,\n    input: TypedValue[],\n    startAtom: Atom,\n    endAtom: Atom,\n    unitsAtom: Atom\n  ): TypedValue[] => {\n    const startDate = functions.toDateTime(context, startAtom.eval(context, input));\n    if (startDate.length === 0) {\n      throw new Error('Invalid start date');\n    }\n    const endDate = functions.toDateTime(context, endAtom.eval(context, input));\n    if (endDate.length === 0) {\n      throw new Error('Invalid end date');\n    }\n    const unit = unitsAtom.eval(context, input)[0]?.value as string;\n    if (unit !== 'years' && unit !== 'months' && unit !== 'days') {\n      throw new Error('Invalid units');\n    }\n    const age = calculateAge(startDate[0].value, endDate[0].value);\n    return [{ type: PropertyType.Quantity, value: { value: age[unit], unit } }];\n  },\n\n  /*\n   * 6.3 Types\n   */\n\n  /**\n   * The is() function is supported for backwards compatibility with previous\n   * implementations of FHIRPath. Just as with the is keyword, the type argument\n   * is an identifier that must resolve to the name of a type in a model.\n   *\n   * For implementations with compile-time typing, this requires special-case\n   * handling when processing the argument to treat it as a type specifier rather\n   * than an identifier expression:\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @param typeAtom - The desired type.\n   * @returns True if the input element is of the desired type.\n   */\n  is: (_context: AtomContext, input: TypedValue[], typeAtom: Atom): TypedValue[] => {\n    let typeName = '';\n    if (typeAtom instanceof SymbolAtom) {\n      typeName = typeAtom.name;\n    } else if (typeAtom instanceof DotAtom) {\n      typeName = (typeAtom.left as SymbolAtom).name + '.' + (typeAtom.right as SymbolAtom).name;\n    }\n    if (!typeName) {\n      return [];\n    }\n    return input.map((value) => ({ type: PropertyType.boolean, value: fhirPathIs(value, typeName) }));\n  },\n\n  /*\n   * 6.5 Boolean logic\n   */\n\n  /**\n   * 6.5.3. not() : Boolean\n   *\n   * Returns true if the input collection evaluates to false, and false if it evaluates to true. Otherwise, the result is empty ({ }):\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @returns True if the input evaluates to false.\n   */\n  not: (context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return functions.toBoolean(context, input).map((value) => ({ type: PropertyType.boolean, value: !value.value }));\n  },\n\n  /*\n   * Additional functions\n   * See: https://hl7.org/fhir/fhirpath.html#functions\n   */\n\n  /**\n   * For each item in the collection, if it is a string that is a uri (or canonical or url), locate the target of the reference, and add it to the resulting collection. If the item does not resolve to a resource, the item is ignored and nothing is added to the output collection.\n   * The items in the collection may also represent a Reference, in which case the Reference.reference is resolved.\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @returns The resolved resource.\n   */\n  resolve: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return input\n      .map((e) => {\n        const value = e.value;\n        let refStr: string | undefined;\n        if (typeof value === 'string') {\n          refStr = value;\n        } else if (typeof value === 'object') {\n          const ref = value as Reference;\n          if (ref.resource) {\n            return toTypedValue(ref.resource);\n          }\n          if (ref.reference) {\n            refStr = ref.reference;\n          } else if (ref.type && ref.identifier) {\n            refStr = `${ref.type}?identifier=${ref.identifier.system}|${ref.identifier.value}`;\n          }\n        }\n        if (refStr?.includes('?')) {\n          const [resourceType] = refStr.split('?');\n          return { type: resourceType, value: { resourceType } };\n        }\n        if (refStr?.includes('/')) {\n          const [resourceType, id] = refStr.split('/');\n          return { type: resourceType, value: { resourceType, id } };\n        }\n        return { type: PropertyType.BackboneElement, value: undefined };\n      })\n      .filter((e) => !!e.value);\n  },\n\n  /**\n   * The as operator can be used to treat a value as a specific type.\n   * @param _context - The evaluation context.\n   * @param input - The input value.\n   * @returns The value as the specific type.\n   */\n  as: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return input;\n  },\n\n  /*\n   * 12. Formal Specifications\n   */\n\n  /**\n   * Returns the type of the input.\n   *\n   * 12.2. Model Information\n   *\n   * The model information returned by the reflection function type() is specified as an\n   * XML Schema document (xsd) and included in this specification at the following link:\n   * https://hl7.org/fhirpath/modelinfo.xsd\n   *\n   * See: https://hl7.org/fhirpath/#model-information\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @returns The type of the input value.\n   */\n  type: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    return input.map(({ value }) => {\n      if (typeof value === 'boolean') {\n        return { type: PropertyType.BackboneElement, value: { namespace: 'System', name: 'Boolean' } };\n      }\n      if (typeof value === 'number') {\n        return { type: PropertyType.BackboneElement, value: { namespace: 'System', name: 'Integer' } };\n      }\n      if (isResource(value)) {\n        return {\n          type: PropertyType.BackboneElement,\n          value: { namespace: 'FHIR', name: value.resourceType },\n        };\n      }\n      return { type: PropertyType.BackboneElement, value: null };\n    });\n  },\n\n  conformsTo: (context: AtomContext, input: TypedValue[], systemAtom: Atom): TypedValue[] => {\n    const system = systemAtom.eval(context, input)[0].value as string;\n    if (!system.startsWith('http://hl7.org/fhir/StructureDefinition/')) {\n      throw new Error('Expected a StructureDefinition URL');\n    }\n    const expectedResourceType = system.replace('http://hl7.org/fhir/StructureDefinition/', '');\n    return input.map((value) => ({\n      type: PropertyType.boolean,\n      value: value.value?.resourceType === expectedResourceType,\n    }));\n  },\n\n  /*\n   * SQL-on-FHIR utilities\n   */\n\n  /**\n   * Returns an opaque value to be used as the primary key for the row associated with the resource.\n   *\n   * In many cases the value may just be the resource id, but exceptions are described below.\n   * This function is used in tandem with getReferenceKey(), which returns an equal value from references that point to this resource.\n   *\n   * The returned KeyType is implementation dependent, but must be a FHIR primitive type that can be used for efficient joins in the\n   * system\u2019s underlying data storage. Integers, strings, UUIDs, and other primitive types are appropriate.\n   *\n   * See: https://build.fhir.org/ig/FHIR/sql-on-fhir-v2/StructureDefinition-ViewDefinition.html#getresourcekey--keytype\n   *\n   * @param _context - The evaluation context.\n   * @param input - The input collection.\n   * @returns The resource key.\n   */\n  getResourceKey: (_context: AtomContext, input: TypedValue[]): TypedValue[] => {\n    const resource = input[0].value as Resource;\n    if (!resource?.id) {\n      return [];\n    }\n    return [{ type: PropertyType.id, value: resource.id }];\n  },\n\n  /**\n   * Returns an opaque value that represents the database key of the row being referenced.\n   *\n   * The value returned must be equal to the getResourceKey() value returned on the resource itself.\n   *\n   * Users may pass an optional resource type (e.g., Patient or Observation) to indicate the expected type that the reference should point to.\n   * The getReferenceKey() will return an empty collection (effectively null since FHIRPath always returns collections) if the reference is not of the expected type.\n   * For example, Observation.subject.getReferenceKey(Patient) would return a row key if the subject is a Patient, or the empty collection (i.e., {}) if it is not.\n   *\n   * The returned KeyType is implementation dependent, but must be a FHIR primitive type that can be used for efficient joins in the systems underlying data storage.\n   * Integers, strings, UUIDs, and other primitive types are appropriate.\n   *\n   * See: https://build.fhir.org/ig/FHIR/sql-on-fhir-v2/StructureDefinition-ViewDefinition.html#getreferencekeyresource-type-specifier--keytype\n   *\n   * @param context - The evaluation context.\n   * @param input - The input collection.\n   * @param typeAtom - Optional expected resource type.\n   * @returns The reference key.\n   */\n  getReferenceKey: (context: AtomContext, input: TypedValue[], typeAtom: Atom): TypedValue[] => {\n    const reference = input[0].value as Reference;\n    if (!reference?.reference) {\n      return [];\n    }\n\n    let typeName = '';\n    if (typeAtom instanceof SymbolAtom) {\n      typeName = typeAtom.name;\n    }\n    if (typeName && !reference.reference.startsWith(typeName + '/')) {\n      return [];\n    }\n\n    return [{ type: PropertyType.id, value: resolveId(reference) }];\n  },\n\n  extension: (context: AtomContext, input: TypedValue[], urlAtom: Atom): TypedValue[] => {\n    const url = urlAtom.eval(context, input)[0].value as string;\n    const resource = input?.[0]?.value;\n    if (resource) {\n      const extension = getExtension(resource, url);\n      if (extension) {\n        return [{ type: PropertyType.Extension, value: extension }];\n      }\n    }\n    return [];\n  },\n};\n\n/*\n * Helper utilities\n */\n\nfunction applyStringFunc<T>(\n  func: (str: string, ...args: unknown[]) => T | undefined,\n  context: AtomContext,\n  input: TypedValue[],\n  ...argsAtoms: (Atom | undefined)[]\n): TypedValue[] {\n  if (input.length === 0) {\n    return [];\n  }\n  const [{ value }] = validateInput(input, 1);\n  if (typeof value !== 'string') {\n    throw new Error('String function cannot be called with non-string');\n  }\n  const result = func(value, ...argsAtoms.map((atom) => atom?.eval(context, input)[0]?.value));\n  if (result === undefined) {\n    return [];\n  }\n  if (Array.isArray(result)) {\n    return result.map(toTypedValue);\n  }\n  return [toTypedValue(result)];\n}\n\nfunction applyMathFunc(\n  func: (x: number, ...args: unknown[]) => number,\n  context: AtomContext,\n  input: TypedValue[],\n  ...argsAtoms: Atom[]\n): TypedValue[] {\n  if (input.length === 0) {\n    return [];\n  }\n  const [{ value }] = validateInput(input, 1);\n  const quantity = isQuantity(value);\n  const numberInput = quantity ? value.value : value;\n  if (typeof numberInput !== 'number') {\n    throw new Error('Math function cannot be called with non-number');\n  }\n  const result = func(numberInput, ...argsAtoms.map((atom) => atom.eval(context, input)[0]?.value));\n  const type = quantity ? PropertyType.Quantity : input[0].type;\n  const returnValue = quantity ? { ...value, value: result } : result;\n  return [{ type, value: returnValue }];\n}\n\nfunction validateInput(input: TypedValue[], count: number): TypedValue[] {\n  if (input.length !== count) {\n    throw new Error(`Expected ${count} arguments`);\n  }\n  for (const element of input) {\n    if (element === null || element === undefined) {\n      throw new Error('Expected non-null argument');\n    }\n  }\n  return input;\n}\n\nfunction getRootInput(context: AtomContext): [TypedValue] {\n  let last = context;\n  while (last.parent?.variables.$this) {\n    last = last.parent;\n  }\n  return [last.variables.$this];\n}\n", "import { Atom, AtomContext, InfixOperatorAtom, PrefixOperatorAtom } from '../fhirlexer/parse';\nimport { PropertyType, TypedValue, isResource } from '../types';\nimport { functions } from './functions';\nimport {\n  booleanToTypedValue,\n  fhirPathArrayEquals,\n  fhirPathArrayEquivalent,\n  fhirPathArrayNotEquals,\n  fhirPathIs,\n  fhirPathNot,\n  getTypedPropertyValue,\n  isQuantity,\n  removeDuplicates,\n  singleton,\n  toTypedValue,\n} from './utils';\n\nexport class FhirPathAtom implements Atom {\n  constructor(\n    public readonly original: string,\n    public readonly child: Atom\n  ) {}\n\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    try {\n      if (input.length > 0) {\n        const result = [];\n        for (const e of input) {\n          result.push(this.child.eval({ parent: context, variables: { $this: e } }, [e]));\n        }\n        return result.flat();\n      } else {\n        return this.child.eval(context, []);\n      }\n    } catch (error) {\n      throw new Error(`FhirPathError on \"${this.original}\": ${error}`, { cause: error });\n    }\n  }\n\n  toString(): string {\n    return this.child.toString();\n  }\n}\n\nexport class LiteralAtom implements Atom {\n  constructor(public readonly value: TypedValue) {}\n  eval(): TypedValue[] {\n    return [this.value];\n  }\n\n  toString(): string {\n    const value = this.value.value;\n    if (typeof value === 'string') {\n      return `'${value}'`;\n    }\n    return value.toString();\n  }\n}\n\nexport class SymbolAtom implements Atom {\n  constructor(public readonly name: string) {}\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    if (this.name === '$this') {\n      return input;\n    }\n    const variableValue = this.getVariable(context);\n    if (variableValue) {\n      return [variableValue];\n    }\n    if (this.name.startsWith('%')) {\n      throw new Error(`Undefined variable ${this.name}`);\n    }\n    return input.flatMap((e) => this.evalValue(e)).filter((e) => e?.value !== undefined) as TypedValue[];\n  }\n\n  private getVariable(context: AtomContext): TypedValue | undefined {\n    const value = context.variables[this.name];\n    if (value !== undefined) {\n      return value;\n    }\n\n    if (context.parent) {\n      return this.getVariable(context.parent);\n    }\n\n    return undefined;\n  }\n\n  private evalValue(typedValue: TypedValue): TypedValue[] | TypedValue | undefined {\n    const input = typedValue.value;\n    if (!input || typeof input !== 'object') {\n      return undefined;\n    }\n\n    if (isResource(input) && input.resourceType === this.name) {\n      return typedValue;\n    }\n\n    return getTypedPropertyValue(typedValue, this.name);\n  }\n\n  toString(): string {\n    return this.name;\n  }\n}\n\nexport class EmptySetAtom implements Atom {\n  eval(): [] {\n    return [];\n  }\n\n  toString(): string {\n    return '{}';\n  }\n}\n\nexport class UnaryOperatorAtom extends PrefixOperatorAtom {\n  constructor(\n    operator: string,\n    child: Atom,\n    public readonly impl: (x: TypedValue[]) => TypedValue[]\n  ) {\n    super(operator, child);\n  }\n\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    return this.impl(this.child.eval(context, input));\n  }\n\n  toString(): string {\n    return this.operator + this.child.toString();\n  }\n}\n\nexport class AsAtom extends InfixOperatorAtom {\n  constructor(left: Atom, right: Atom) {\n    super('as', left, right);\n  }\n\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    return functions.ofType(context, this.left.eval(context, input), this.right);\n  }\n}\n\nexport abstract class BooleanInfixOperatorAtom extends InfixOperatorAtom {\n  abstract eval(context: AtomContext, input: TypedValue[]): TypedValue[];\n}\n\nexport class ArithemticOperatorAtom extends BooleanInfixOperatorAtom {\n  constructor(\n    operator: string,\n    left: Atom,\n    right: Atom,\n    public readonly impl: (x: number, y: number) => number | boolean\n  ) {\n    super(operator, left, right);\n  }\n\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    const leftEvalResult = this.left.eval(context, input);\n    if (leftEvalResult.length !== 1) {\n      return [];\n    }\n    const rightEvalResult = this.right.eval(context, input);\n    if (rightEvalResult.length !== 1) {\n      return [];\n    }\n    const leftValue = leftEvalResult[0].value;\n    const rightValue = rightEvalResult[0].value;\n    const leftNumber = isQuantity(leftValue) ? leftValue.value : leftValue;\n    const rightNumber = isQuantity(rightValue) ? rightValue.value : rightValue;\n    const result = this.impl(leftNumber, rightNumber);\n    if (typeof result === 'boolean') {\n      return booleanToTypedValue(result);\n    } else if (isQuantity(leftValue)) {\n      return [{ type: PropertyType.Quantity, value: { ...leftValue, value: result } }];\n    } else {\n      return [toTypedValue(result)];\n    }\n  }\n}\n\nexport class ConcatAtom extends InfixOperatorAtom {\n  constructor(left: Atom, right: Atom) {\n    super('&', left, right);\n  }\n\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    const leftValue = this.left.eval(context, input);\n    const rightValue = this.right.eval(context, input);\n    const result = [...leftValue, ...rightValue];\n    if (result.length > 0 && result.every((e) => typeof e.value === 'string')) {\n      return [{ type: PropertyType.string, value: result.map((e) => e.value as string).join('') }];\n    }\n    return result;\n  }\n}\n\nexport class ContainsAtom extends BooleanInfixOperatorAtom {\n  constructor(left: Atom, right: Atom) {\n    super('contains', left, right);\n  }\n\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    const leftValue = this.left.eval(context, input);\n    const rightValue = this.right.eval(context, input);\n    return booleanToTypedValue(leftValue.some((e) => e.value === rightValue[0].value));\n  }\n}\n\nexport class InAtom extends BooleanInfixOperatorAtom {\n  constructor(left: Atom, right: Atom) {\n    super('in', left, right);\n  }\n\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    const left = singleton(this.left.eval(context, input));\n    const right = this.right.eval(context, input);\n    if (!left) {\n      return [];\n    }\n    return booleanToTypedValue(right.some((e) => e.value === left.value));\n  }\n}\n\nexport class DotAtom extends InfixOperatorAtom {\n  constructor(left: Atom, right: Atom) {\n    super('.', left, right);\n  }\n\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    return this.right.eval(context, this.left.eval(context, input));\n  }\n\n  toString(): string {\n    return `${this.left.toString()}.${this.right.toString()}`;\n  }\n}\n\nexport class UnionAtom extends InfixOperatorAtom {\n  constructor(left: Atom, right: Atom) {\n    super('|', left, right);\n  }\n\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    const leftResult = this.left.eval(context, input);\n    const rightResult = this.right.eval(context, input);\n    return removeDuplicates([...leftResult, ...rightResult]);\n  }\n}\n\nexport class EqualsAtom extends BooleanInfixOperatorAtom {\n  constructor(left: Atom, right: Atom) {\n    super('=', left, right);\n  }\n\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    const leftValue = this.left.eval(context, input);\n    const rightValue = this.right.eval(context, input);\n    return fhirPathArrayEquals(leftValue, rightValue);\n  }\n}\n\nexport class NotEqualsAtom extends BooleanInfixOperatorAtom {\n  constructor(left: Atom, right: Atom) {\n    super('!=', left, right);\n  }\n\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    const leftValue = this.left.eval(context, input);\n    const rightValue = this.right.eval(context, input);\n    return fhirPathArrayNotEquals(leftValue, rightValue);\n  }\n}\n\nexport class EquivalentAtom extends BooleanInfixOperatorAtom {\n  constructor(left: Atom, right: Atom) {\n    super('~', left, right);\n  }\n\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    const leftValue = this.left.eval(context, input);\n    const rightValue = this.right.eval(context, input);\n    return fhirPathArrayEquivalent(leftValue, rightValue);\n  }\n}\n\nexport class NotEquivalentAtom extends BooleanInfixOperatorAtom {\n  constructor(left: Atom, right: Atom) {\n    super('!~', left, right);\n  }\n\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    const leftValue = this.left.eval(context, input);\n    const rightValue = this.right.eval(context, input);\n    return fhirPathNot(fhirPathArrayEquivalent(leftValue, rightValue));\n  }\n}\n\nexport class IsAtom extends BooleanInfixOperatorAtom {\n  constructor(left: Atom, right: Atom) {\n    super('is', left, right);\n  }\n\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    const leftValue = this.left.eval(context, input);\n    if (leftValue.length !== 1) {\n      return [];\n    }\n    const typeName = (this.right as SymbolAtom).name;\n    return booleanToTypedValue(fhirPathIs(leftValue[0], typeName));\n  }\n}\n\n/**\n * 6.5.1. and\n * Returns true if both operands evaluate to true,\n * false if either operand evaluates to false,\n * and the empty collection otherwise.\n */\nexport class AndAtom extends BooleanInfixOperatorAtom {\n  constructor(left: Atom, right: Atom) {\n    super('and', left, right);\n  }\n\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    const left = singleton(this.left.eval(context, input), 'boolean');\n    const right = singleton(this.right.eval(context, input), 'boolean');\n    if (left?.value === true && right?.value === true) {\n      return booleanToTypedValue(true);\n    }\n    if (left?.value === false || right?.value === false) {\n      return booleanToTypedValue(false);\n    }\n    return [];\n  }\n}\n\n/**\n * 6.5.2. or\n * Returns false if both operands evaluate to false,\n * true if either operand evaluates to true,\n * and empty (`{ }`) otherwise:\n */\nexport class OrAtom extends BooleanInfixOperatorAtom {\n  constructor(left: Atom, right: Atom) {\n    super('or', left, right);\n  }\n\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    const left = singleton(this.left.eval(context, input), 'boolean');\n    const right = singleton(this.right.eval(context, input), 'boolean');\n    if (left?.value === false && right?.value === false) {\n      return booleanToTypedValue(false);\n    } else if (left?.value || right?.value) {\n      return booleanToTypedValue(true);\n    } else {\n      return [];\n    }\n  }\n}\n\n/**\n * 6.5.4. xor\n * Returns true if exactly one of the operands evaluates to true,\n * false if either both operands evaluate to true or both operands evaluate to false,\n * and the empty collection otherwise.\n */\nexport class XorAtom extends BooleanInfixOperatorAtom {\n  constructor(left: Atom, right: Atom) {\n    super('xor', left, right);\n  }\n\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    const left = singleton(this.left.eval(context, input), 'boolean');\n    const right = singleton(this.right.eval(context, input), 'boolean');\n    if (!left || !right) {\n      return [];\n    }\n    return booleanToTypedValue(left.value !== right.value);\n  }\n}\n\n/**\n * 6.5.5. implies\n * Returns true if left is true and right is true,\n * true left is false and right true, false or empty\n * true left is empty\n */\nexport class ImpliesAtom extends BooleanInfixOperatorAtom {\n  constructor(left: Atom, right: Atom) {\n    super('implies', left, right);\n  }\n\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    const left = singleton(this.left.eval(context, input), 'boolean');\n    const right = singleton(this.right.eval(context, input), 'boolean');\n    if (right?.value === true || left?.value === false) {\n      return booleanToTypedValue(true);\n    } else if (!left || !right) {\n      return [];\n    }\n    return booleanToTypedValue(false);\n  }\n}\n\nexport class FunctionAtom implements Atom {\n  constructor(\n    public readonly name: string,\n    public readonly args: Atom[]\n  ) {}\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    const impl = functions[this.name];\n    if (!impl) {\n      throw new Error('Unrecognized function: ' + this.name);\n    }\n    return impl(context, input, ...this.args);\n  }\n\n  toString(): string {\n    return `${this.name}(${this.args.map((arg) => arg.toString()).join(', ')})`;\n  }\n}\n\nexport class IndexerAtom implements Atom {\n  constructor(\n    public readonly left: Atom,\n    public readonly expr: Atom\n  ) {}\n  eval(context: AtomContext, input: TypedValue[]): TypedValue[] {\n    const evalResult = this.expr.eval(context, input);\n    if (evalResult.length !== 1) {\n      return [];\n    }\n    const index = evalResult[0].value;\n    if (typeof index !== 'number') {\n      throw new Error(`Invalid indexer expression: should return integer}`);\n    }\n    const leftResult = this.left.eval(context, input);\n    if (!(index in leftResult)) {\n      return [];\n    }\n    return [leftResult[index]];\n  }\n\n  toString(): string {\n    return `${this.left.toString()}[${this.expr.toString()}]`;\n  }\n}\n", "export interface Marker {\n  index: number;\n  line: number;\n  column: number;\n}\n\nexport interface Token extends Marker {\n  id: string;\n  value: string;\n}\n\nconst STANDARD_UNITS = [\n  'year',\n  'years',\n  'month',\n  'months',\n  'week',\n  'weeks',\n  'day',\n  'days',\n  'hour',\n  'hours',\n  'minute',\n  'minutes',\n  'second',\n  'seconds',\n  'millisecond',\n  'milliseconds',\n];\n\nexport interface TokenizerOptions {\n  dateTimeLiterals?: boolean;\n  symbolRegex?: RegExp;\n}\n\nexport class Tokenizer {\n  private readonly str: string;\n  private readonly keywords: string[];\n  private readonly operators: string[];\n  private readonly dateTimeLiterals: boolean;\n  private readonly symbolRegex: RegExp;\n  private readonly result: Token[] = [];\n  private readonly pos: Marker = { index: 0, line: 1, column: 0 };\n  private readonly markStack: Marker[] = [];\n\n  constructor(str: string, keywords: string[], operators: string[], options?: TokenizerOptions) {\n    this.str = str;\n    this.keywords = keywords;\n    this.operators = operators;\n    this.dateTimeLiterals = !!options?.dateTimeLiterals;\n    this.symbolRegex = options?.symbolRegex ?? /[$\\w%]/;\n  }\n\n  tokenize(): Token[] {\n    while (this.pos.index < this.str.length) {\n      const token = this.consumeToken();\n      if (token) {\n        this.result.push(token);\n      }\n    }\n\n    return this.result;\n  }\n\n  private prevToken(): Token | undefined {\n    return this.result.slice(-1)[0];\n  }\n\n  private peekToken(): Token | undefined {\n    this.mark();\n    const token = this.consumeToken();\n    this.reset();\n    return token;\n  }\n\n  private consumeToken(): Token | undefined {\n    this.consumeWhitespace();\n\n    const c = this.curr();\n    if (!c) {\n      return undefined;\n    }\n\n    this.mark();\n\n    const next = this.peek();\n\n    if (c === '/' && next === '*') {\n      return this.consumeMultiLineComment();\n    }\n\n    if (c === '/' && next === '/') {\n      return this.consumeSingleLineComment();\n    }\n\n    if (c === \"'\" || c === '\"') {\n      return this.consumeString(c);\n    }\n\n    if (c === '`') {\n      return this.consumeBacktickSymbol();\n    }\n\n    if (c === '@') {\n      return this.consumeDateTime();\n    }\n\n    if (/\\d/.exec(c)) {\n      return this.consumeNumber();\n    }\n\n    if (/\\w/.exec(c)) {\n      return this.consumeSymbol();\n    }\n\n    if ((c === '$' || c === '%') && /\\w/.exec(next)) {\n      return this.consumeSymbol();\n    }\n\n    return this.consumeOperator();\n  }\n\n  private consumeWhitespace(): void {\n    this.consumeWhile(() => /\\s/.exec(this.curr()));\n  }\n\n  private consumeMultiLineComment(): Token {\n    const start = this.pos.index;\n    this.consumeWhile(() => this.curr() !== '*' || this.peek() !== '/');\n    this.advance();\n    this.advance();\n    return this.buildToken('Comment', this.str.substring(start, this.pos.index));\n  }\n\n  private consumeSingleLineComment(): Token {\n    return this.buildToken(\n      'Comment',\n      this.consumeWhile(() => this.curr() !== '\\n')\n    );\n  }\n\n  private consumeString(endChar: string): Token {\n    this.advance();\n    const result = this.buildToken(\n      'String',\n      this.consumeWhile(() => this.prev() === '\\\\' || this.curr() !== endChar)\n    );\n    this.advance();\n    return result;\n  }\n\n  private consumeBacktickSymbol(): Token {\n    this.advance();\n    const result = this.buildToken(\n      'Symbol',\n      this.consumeWhile(() => this.curr() !== '`')\n    );\n    this.advance();\n    return result;\n  }\n\n  private consumeDateTime(): Token {\n    this.advance(); // Consume \"@\"\n\n    const start = this.pos.index;\n    this.consumeWhile(() => /[\\d-]/.exec(this.curr()));\n\n    let foundTime = false;\n    let foundTimeZone = false;\n\n    if (this.curr() === 'T') {\n      foundTime = true;\n      this.advance();\n      this.consumeWhile(() => /[\\d:]/.exec(this.curr()));\n\n      if (this.curr() === '.' && /\\d/.exec(this.peek())) {\n        this.advance();\n        this.consumeWhile(() => /\\d/.exec(this.curr()));\n      }\n\n      if (this.curr() === 'Z') {\n        foundTimeZone = true;\n        this.advance();\n      } else if (this.curr() === '+' || this.curr() === '-') {\n        foundTimeZone = true;\n        this.advance();\n        this.consumeWhile(() => /[\\d:]/.exec(this.curr()));\n      }\n    }\n\n    if (this.pos.index === start) {\n      throw new Error('Invalid DateTime literal');\n    }\n\n    let value = this.str.substring(start, this.pos.index);\n    if (value.endsWith('T')) {\n      // The date/time string ended with a \"T\", which is valid FHIRPath, but not valid ISO8601.\n      // Strip the \"T\" and treat as a date.\n      value = value.substring(0, value.length - 1);\n    } else if (!value.startsWith('T') && foundTime && !foundTimeZone) {\n      // FHIRPath spec says timezone is optional: https://build.fhir.org/ig/HL7/FHIRPath/#datetime\n      // The FHIRPath test suite expects the timezone to be \"Z\" if not specified.\n      // See: https://github.com/HL7/FHIRPath/blob/master/tests/r4/tests-fhir-r4.xml\n      value += 'Z';\n    }\n    return this.buildToken('DateTime', value);\n  }\n\n  private consumeNumber(): Token {\n    const start = this.pos.index;\n    let id = 'Number';\n    this.consumeWhile(() => /\\d/.exec(this.curr()));\n\n    if (this.curr() === '.' && /\\d/.exec(this.peek())) {\n      this.advance();\n      this.consumeWhile(() => /\\d/.exec(this.curr()));\n    }\n\n    if (this.curr() === '-' && this.dateTimeLiterals) {\n      // Rewind to one character before the start, and then treat as dateTime literal.\n      this.pos.index = start - 1;\n      return this.consumeDateTime();\n    }\n\n    if (this.curr() === ' ') {\n      if (isUnitToken(this.peekToken())) {\n        id = 'Quantity';\n        this.consumeToken();\n      }\n    }\n\n    return this.buildToken(id, this.str.substring(start, this.pos.index));\n  }\n\n  private consumeSymbol(): Token {\n    const value = this.consumeWhile(() => this.symbolRegex.exec(this.curr()));\n    if (this.prevToken()?.value !== '.' && this.keywords.includes(value)) {\n      return this.buildToken(value, value);\n    }\n    return this.buildToken('Symbol', value);\n  }\n\n  private consumeOperator(): Token {\n    const c = this.curr();\n    const next = this.peek();\n    const twoCharOp = c + next;\n\n    if (this.operators.includes(twoCharOp)) {\n      this.advance();\n      this.advance();\n      return this.buildToken(twoCharOp, twoCharOp);\n    }\n\n    this.advance();\n    return this.buildToken(c, c);\n  }\n\n  private consumeWhile(condition: () => unknown): string {\n    const start = this.pos.index;\n\n    while (this.pos.index < this.str.length && condition()) {\n      this.advance();\n    }\n\n    return this.str.substring(start, this.pos.index);\n  }\n\n  private curr(): string {\n    return this.str[this.pos.index];\n  }\n\n  private prev(): string {\n    return this.str[this.pos.index - 1] ?? '';\n  }\n\n  private peek(): string {\n    return this.str[this.pos.index + 1] ?? '';\n  }\n\n  private mark(): void {\n    this.markStack.push({ ...this.pos });\n  }\n\n  private reset(): void {\n    const mark = this.markStack.pop();\n    if (!mark) {\n      throw new Error('No mark to reset to');\n    }\n    this.pos.index = mark.index;\n    this.pos.line = mark.line;\n    this.pos.column = mark.column;\n  }\n\n  private advance(): void {\n    this.pos.index++;\n    if (this.curr() === '\\n') {\n      this.pos.line++;\n      this.pos.column = 0;\n    } else {\n      this.pos.column++;\n    }\n  }\n\n  private buildToken(id: string, value: string): Token {\n    const mark = this.markStack.pop();\n    if (!mark) {\n      throw new Error('No mark for token');\n    }\n    return {\n      id,\n      value,\n      ...mark,\n    };\n  }\n}\n\nfunction isUnitToken(token: Token | undefined): boolean {\n  if (token) {\n    if (token.id === 'String') {\n      return true;\n    }\n\n    if (token.id === 'Symbol' && STANDARD_UNITS.includes(token.value)) {\n      return true;\n    }\n  }\n\n  return false;\n}\n", "import { Token, Tokenizer } from '../fhirlexer/tokenize';\n\nexport const FHIRPATH_KEYWORDS = ['true', 'false'];\nexport const FHIRPATH_OPERATORS = ['!=', '!~', '<=', '>=', '{}', '->'];\n\nexport function tokenize(str: string): Token[] {\n  return new Tokenizer(str, FHIRPATH_KEYWORDS, FHIRPATH_OPERATORS).tokenize();\n}\n", "import { Quantity } from '@medplum/fhirtypes';\nimport { Atom, InfixParselet, Parser, ParserBuilder, PrefixParselet } from '../fhirlexer/parse';\nimport { PropertyType, TypedValue } from '../types';\nimport {\n  AndAtom,\n  ArithemticOperatorAtom,\n  AsAtom,\n  ConcatAtom,\n  ContainsAtom,\n  DotAtom,\n  EmptySetAtom,\n  EqualsAtom,\n  EquivalentAtom,\n  FhirPathAtom,\n  FunctionAtom,\n  ImpliesAtom,\n  InAtom,\n  IndexerAtom,\n  IsAtom,\n  LiteralAtom,\n  NotEqualsAtom,\n  NotEquivalentAtom,\n  OrAtom,\n  SymbolAtom,\n  UnaryOperatorAtom,\n  UnionAtom,\n  XorAtom,\n} from './atoms';\nimport { parseDateString } from './date';\nimport { tokenize } from './tokenize';\nimport { toTypedValue } from './utils';\n\n/**\n * Operator precedence\n * See: https://hl7.org/fhirpath/#operator-precedence\n */\nexport const OperatorPrecedence = {\n  FunctionCall: 0,\n  Dot: 1,\n  Indexer: 2,\n  UnaryAdd: 3,\n  UnarySubtract: 3,\n  Multiply: 4,\n  Divide: 4,\n  IntegerDivide: 4,\n  Modulo: 4,\n  Add: 5,\n  Subtract: 5,\n  Ampersand: 5,\n  Is: 6,\n  As: 6,\n  Union: 7,\n  GreaterThan: 8,\n  GreaterThanOrEquals: 8,\n  LessThan: 8,\n  LessThanOrEquals: 8,\n  Equals: 9,\n  Equivalent: 9,\n  NotEquals: 9,\n  NotEquivalent: 9,\n  In: 10,\n  Contains: 10,\n  And: 11,\n  Xor: 12,\n  Or: 12,\n  Implies: 13,\n  Arrow: 100,\n  Semicolon: 200,\n};\n\nconst PARENTHESES_PARSELET: PrefixParselet = {\n  parse(parser: Parser) {\n    const expr = parser.consumeAndParse();\n    if (!parser.match(')')) {\n      throw new Error('Parse error: expected `)` got `' + parser.peek()?.value + '`');\n    }\n    return expr;\n  },\n};\n\nconst INDEXER_PARSELET: InfixParselet = {\n  parse(parser: Parser, left: Atom) {\n    const expr = parser.consumeAndParse();\n    if (!parser.match(']')) {\n      throw new Error('Parse error: expected `]`');\n    }\n    return new IndexerAtom(left, expr);\n  },\n\n  precedence: OperatorPrecedence.Indexer,\n};\n\nconst FUNCTION_CALL_PARSELET: InfixParselet = {\n  parse(parser: Parser, left: Atom) {\n    if (!(left instanceof SymbolAtom)) {\n      throw new Error('Unexpected parentheses');\n    }\n\n    const args = [];\n    while (!parser.match(')')) {\n      args.push(parser.consumeAndParse());\n      parser.match(',');\n    }\n\n    return new FunctionAtom(left.name, args); //, functions[left.name]);\n  },\n  precedence: OperatorPrecedence.FunctionCall,\n};\n\nfunction parseQuantity(str: string): Quantity {\n  const parts = str.split(' ');\n  const value = parseFloat(parts[0]);\n  let unit = parts[1];\n  if (unit?.startsWith(\"'\") && unit.endsWith(\"'\")) {\n    unit = unit.substring(1, unit.length - 1);\n  } else {\n    unit = '{' + unit + '}';\n  }\n  return { value, unit };\n}\n\nexport function initFhirPathParserBuilder(): ParserBuilder {\n  return new ParserBuilder()\n    .registerPrefix('String', {\n      parse: (_, token) => new LiteralAtom({ type: PropertyType.string, value: token.value }),\n    })\n    .registerPrefix('DateTime', {\n      parse: (_, token) => new LiteralAtom({ type: PropertyType.dateTime, value: parseDateString(token.value) }),\n    })\n    .registerPrefix('Quantity', {\n      parse: (_, token) => new LiteralAtom({ type: PropertyType.Quantity, value: parseQuantity(token.value) }),\n    })\n    .registerPrefix('Number', {\n      parse: (_, token) =>\n        new LiteralAtom({\n          type: token.value.includes('.') ? PropertyType.decimal : PropertyType.integer,\n          value: parseFloat(token.value),\n        }),\n    })\n    .registerPrefix('true', { parse: () => new LiteralAtom({ type: PropertyType.boolean, value: true }) })\n    .registerPrefix('false', { parse: () => new LiteralAtom({ type: PropertyType.boolean, value: false }) })\n    .registerPrefix('Symbol', { parse: (_, token) => new SymbolAtom(token.value) })\n    .registerPrefix('{}', { parse: () => new EmptySetAtom() })\n    .registerPrefix('(', PARENTHESES_PARSELET)\n    .registerInfix('[', INDEXER_PARSELET)\n    .registerInfix('(', FUNCTION_CALL_PARSELET)\n    .prefix('+', OperatorPrecedence.UnaryAdd, (_, right) => new UnaryOperatorAtom('+', right, (x) => x))\n    .prefix(\n      '-',\n      OperatorPrecedence.UnarySubtract,\n      (_, right) => new ArithemticOperatorAtom('-', right, right, (_, y) => -y)\n    )\n    .infixLeft('.', OperatorPrecedence.Dot, (left, _, right) => new DotAtom(left, right))\n    .infixLeft(\n      '/',\n      OperatorPrecedence.Divide,\n      (left, _, right) => new ArithemticOperatorAtom('/', left, right, (x, y) => x / y)\n    )\n    .infixLeft(\n      '*',\n      OperatorPrecedence.Multiply,\n      (left, _, right) => new ArithemticOperatorAtom('*', left, right, (x, y) => x * y)\n    )\n    .infixLeft(\n      '+',\n      OperatorPrecedence.Add,\n      (left, _, right) => new ArithemticOperatorAtom('+', left, right, (x, y) => x + y)\n    )\n    .infixLeft(\n      '-',\n      OperatorPrecedence.Subtract,\n      (left, _, right) => new ArithemticOperatorAtom('-', left, right, (x, y) => x - y)\n    )\n    .infixLeft('|', OperatorPrecedence.Union, (left, _, right) => new UnionAtom(left, right))\n    .infixLeft('=', OperatorPrecedence.Equals, (left, _, right) => new EqualsAtom(left, right))\n    .infixLeft('!=', OperatorPrecedence.NotEquals, (left, _, right) => new NotEqualsAtom(left, right))\n    .infixLeft('~', OperatorPrecedence.Equivalent, (left, _, right) => new EquivalentAtom(left, right))\n    .infixLeft('!~', OperatorPrecedence.NotEquivalent, (left, _, right) => new NotEquivalentAtom(left, right))\n    .infixLeft(\n      '<',\n      OperatorPrecedence.LessThan,\n      (left, _, right) => new ArithemticOperatorAtom('<', left, right, (x, y) => x < y)\n    )\n    .infixLeft(\n      '<=',\n      OperatorPrecedence.LessThanOrEquals,\n      (left, _, right) => new ArithemticOperatorAtom('<=', left, right, (x, y) => x <= y)\n    )\n    .infixLeft(\n      '>',\n      OperatorPrecedence.GreaterThan,\n      (left, _, right) => new ArithemticOperatorAtom('>', left, right, (x, y) => x > y)\n    )\n    .infixLeft(\n      '>=',\n      OperatorPrecedence.GreaterThanOrEquals,\n      (left, _, right) => new ArithemticOperatorAtom('>=', left, right, (x, y) => x >= y)\n    )\n    .infixLeft('&', OperatorPrecedence.Ampersand, (left, _, right) => new ConcatAtom(left, right))\n    .infixLeft('and', OperatorPrecedence.And, (left, _, right) => new AndAtom(left, right))\n    .infixLeft('as', OperatorPrecedence.As, (left, _, right) => new AsAtom(left, right))\n    .infixLeft('contains', OperatorPrecedence.Contains, (left, _, right) => new ContainsAtom(left, right))\n    .infixLeft(\n      'div',\n      OperatorPrecedence.Divide,\n      (left, _, right) => new ArithemticOperatorAtom('div', left, right, (x, y) => (x / y) | 0)\n    )\n    .infixLeft('in', OperatorPrecedence.In, (left, _, right) => new InAtom(left, right))\n    .infixLeft('is', OperatorPrecedence.Is, (left, _, right) => new IsAtom(left, right))\n    .infixLeft(\n      'mod',\n      OperatorPrecedence.Modulo,\n      (left, _, right) => new ArithemticOperatorAtom('mod', left, right, (x, y) => x % y)\n    )\n    .infixLeft('or', OperatorPrecedence.Or, (left, _, right) => new OrAtom(left, right))\n    .infixLeft('xor', OperatorPrecedence.Xor, (left, _, right) => new XorAtom(left, right))\n    .infixLeft('implies', OperatorPrecedence.Implies, (left, _, right) => new ImpliesAtom(left, right));\n}\n\nconst fhirPathParserBuilder = initFhirPathParserBuilder();\n\n/**\n * Parses a FHIRPath expression into an AST.\n * The result can be used to evaluate the expression against a resource or other object.\n * This method is useful if you know that you will evaluate the same expression many times\n * against different resources.\n * @param input - The FHIRPath expression to parse.\n * @returns The AST representing the expression.\n */\nexport function parseFhirPath(input: string): FhirPathAtom {\n  return new FhirPathAtom(input, fhirPathParserBuilder.construct(tokenize(input)).consumeAndParse());\n}\n\n/**\n * Evaluates a FHIRPath expression against a resource or other object.\n * @param expression - The FHIRPath expression to parse.\n * @param input - The resource or object to evaluate the expression against.\n * @returns The result of the FHIRPath expression against the resource or object.\n */\nexport function evalFhirPath(expression: string, input: unknown): unknown[] {\n  // eval requires a TypedValue array\n  // As a convenience, we can accept array or non-array, and TypedValue or unknown value\n  const array = Array.isArray(input) ? input : [input];\n  for (let i = 0; i < array.length; i++) {\n    const el = array[i];\n    if (!(typeof el === 'object' && 'type' in el && 'value' in el)) {\n      array[i] = toTypedValue(array[i]);\n    }\n  }\n  return evalFhirPathTyped(expression, array).map((e) => e.value);\n}\n\n/**\n * Evaluates a FHIRPath expression against a resource or other object.\n * @param expression - The FHIRPath expression to parse.\n * @param input - The resource or object to evaluate the expression against.\n * @param variables - A map of variables for eval input.\n * @returns The result of the FHIRPath expression against the resource or object.\n */\nexport function evalFhirPathTyped(\n  expression: string,\n  input: TypedValue[],\n  variables: Record<string, TypedValue> = {}\n): TypedValue[] {\n  const ast = parseFhirPath(expression);\n  return ast.eval({ variables }, input).map((v) => ({\n    type: v.type,\n    value: v.value?.valueOf(),\n  }));\n}\n", "import { ElementDefinitionType, SearchParameter } from '@medplum/fhirtypes';\nimport { Atom } from '../fhirlexer/parse';\nimport {\n  AsAtom,\n  BooleanInfixOperatorAtom,\n  DotAtom,\n  FunctionAtom,\n  IndexerAtom,\n  IsAtom,\n  UnionAtom,\n} from '../fhirpath/atoms';\nimport { parseFhirPath } from '../fhirpath/parse';\nimport { PropertyType, getElementDefinition, globalSchema } from '../types';\nimport { InternalSchemaElement } from '../typeschema/types';\nimport { capitalize, lazy } from '../utils';\n\nexport enum SearchParameterType {\n  BOOLEAN = 'BOOLEAN',\n  NUMBER = 'NUMBER',\n  QUANTITY = 'QUANTITY',\n  TEXT = 'TEXT',\n  REFERENCE = 'REFERENCE',\n  CANONICAL = 'CANONICAL',\n  DATE = 'DATE',\n  DATETIME = 'DATETIME',\n  PERIOD = 'PERIOD',\n  UUID = 'UUID',\n}\n\nexport interface SearchParameterDetails {\n  readonly columnName: string;\n  readonly type: SearchParameterType;\n  readonly elementDefinitions?: InternalSchemaElement[];\n  readonly array?: boolean;\n}\n\ninterface SearchParameterDetailsBuilder {\n  elementDefinitions: InternalSchemaElement[];\n  propertyTypes: Set<string>;\n  array: boolean;\n}\n\n/**\n * Returns the type details of a SearchParameter.\n *\n * The SearchParameter resource has a \"type\" parameter, but that is missing some critical information.\n *\n * For example:\n *   1) The \"date\" type includes \"date\", \"datetime\", and \"period\".\n *   2) The \"token\" type includes enums and booleans.\n *   3) Arrays/multiple values are not reflected at all.\n * @param resourceType - The root resource type.\n * @param searchParam - The search parameter.\n * @returns The search parameter type details.\n */\nexport function getSearchParameterDetails(resourceType: string, searchParam: SearchParameter): SearchParameterDetails {\n  let result: SearchParameterDetails | undefined =\n    globalSchema.types[resourceType]?.searchParamsDetails?.[searchParam.code as string];\n  if (!result) {\n    result = buildSearchParameterDetails(resourceType, searchParam);\n  }\n  return result;\n}\n\nfunction setSearchParameterDetails(resourceType: string, code: string, details: SearchParameterDetails): void {\n  let typeSchema = globalSchema.types[resourceType];\n  if (!typeSchema) {\n    typeSchema = {};\n    globalSchema.types[resourceType] = typeSchema;\n  }\n  if (!typeSchema.searchParamsDetails) {\n    typeSchema.searchParamsDetails = {};\n  }\n  typeSchema.searchParamsDetails[code] = details;\n}\n\nfunction buildSearchParameterDetails(resourceType: string, searchParam: SearchParameter): SearchParameterDetails {\n  const code = searchParam.code as string;\n  const columnName = convertCodeToColumnName(code);\n  const expressions = getExpressionsForResourceType(resourceType, searchParam.expression as string);\n\n  const builder: SearchParameterDetailsBuilder = {\n    elementDefinitions: [],\n    propertyTypes: new Set(),\n    array: false,\n  };\n\n  for (const expression of expressions) {\n    const atomArray = flattenAtom(expression);\n    const flattenedExpression = lazy(() => atomArray.join('.'));\n\n    if (atomArray.length === 1 && atomArray[0] instanceof BooleanInfixOperatorAtom) {\n      builder.propertyTypes.add('boolean');\n    } else if (\n      // To support US Core Patient search parameters without needing profile-aware logic,\n      // assume expressions for `Extension.value[x].code` and `Extension.value[x].coding.code`\n      // are of type `code`. Otherwise, crawling the Extension.value[x] element definition without\n      // access to the type narrowing specified in the profiles would be inconclusive.\n      flattenedExpression().endsWith('extension.value.code') ||\n      flattenedExpression().endsWith('extension.value.coding.code')\n    ) {\n      builder.array = true;\n      builder.propertyTypes.add('code');\n    } else {\n      crawlSearchParameterDetails(builder, flattenAtom(expression), resourceType, 1);\n    }\n\n    // To support US Core \"us-core-condition-asserted-date\" search parameter without\n    // needing profile-aware logic, ensure extensions with a dateTime value are not\n    // treated as arrays since Mepdlum search functionality does not yet support datetime arrays.\n    // This would be the result if the http://hl7.org/fhir/StructureDefinition/condition-assertedDate\n    // extension were parsed since it specifies a cardinality of 0..1.\n    if (flattenedExpression().endsWith('extension.valueDateTime')) {\n      builder.array = false;\n    }\n  }\n\n  const result: SearchParameterDetails = {\n    columnName,\n    type: getSearchParameterType(searchParam, builder.propertyTypes),\n    elementDefinitions: builder.elementDefinitions,\n    array: builder.array,\n  };\n  setSearchParameterDetails(resourceType, code, result);\n  return result;\n}\n\nfunction crawlSearchParameterDetails(\n  details: SearchParameterDetailsBuilder,\n  atoms: Atom[],\n  baseType: string,\n  index: number\n): void {\n  const currAtom = atoms[index];\n\n  if (currAtom instanceof AsAtom) {\n    details.propertyTypes.add(currAtom.right.toString());\n    return;\n  }\n\n  if (currAtom instanceof FunctionAtom) {\n    handleFunctionAtom(details, currAtom);\n    return;\n  }\n\n  const propertyName = currAtom.toString();\n  const elementDefinition = getElementDefinition(baseType, propertyName);\n  if (!elementDefinition) {\n    throw new Error(`Element definition not found for ${baseType} ${propertyName}`);\n  }\n\n  let hasArrayIndex = false;\n  let nextIndex = index + 1;\n  if (nextIndex < atoms.length && atoms[nextIndex] instanceof IndexerAtom) {\n    hasArrayIndex = true;\n    nextIndex++;\n  }\n\n  if (elementDefinition.isArray && !hasArrayIndex) {\n    details.array = true;\n  }\n\n  if (nextIndex >= atoms.length) {\n    // This is the final atom in the expression\n    // So we can collect the ElementDefinition and property types\n    details.elementDefinitions.push(elementDefinition);\n    for (const elementDefinitionType of elementDefinition.type as ElementDefinitionType[]) {\n      details.propertyTypes.add(elementDefinitionType.code as string);\n    }\n    return;\n  }\n\n  // This is in the middle of the expression, so we need to keep crawling.\n  // \"code\" is only missing when using \"contentReference\"\n  // \"contentReference\" is handled whe parsing StructureDefinition into InternalTypeSchema\n  for (const elementDefinitionType of elementDefinition.type as ElementDefinitionType[]) {\n    let propertyType = elementDefinitionType.code as string;\n    if (isBackboneElement(propertyType)) {\n      propertyType = elementDefinition.type[0].code;\n    }\n    crawlSearchParameterDetails(details, atoms, propertyType, nextIndex);\n  }\n}\n\nfunction handleFunctionAtom(builder: SearchParameterDetailsBuilder, functionAtom: FunctionAtom): void {\n  if (functionAtom.name === 'as') {\n    builder.propertyTypes.add(functionAtom.args[0].toString());\n    return;\n  }\n\n  if (functionAtom.name === 'ofType') {\n    builder.propertyTypes.add(functionAtom.args[0].toString());\n    return;\n  }\n\n  if (functionAtom.name === 'resolve') {\n    // Handle .resolve().resourceType\n    builder.propertyTypes.add('string');\n    return;\n  }\n\n  if (functionAtom.name === 'where' && functionAtom.args[0] instanceof IsAtom) {\n    // Common pattern: \"where(resolve() is Patient)\"\n    // Use the type information\n    builder.propertyTypes.add(functionAtom.args[0].right.toString());\n    return;\n  }\n\n  throw new Error(`Unhandled FHIRPath function: ${functionAtom.name}`);\n}\n\nfunction isBackboneElement(propertyType: string): boolean {\n  return propertyType === 'Element' || propertyType === 'BackboneElement';\n}\n\n/**\n * Converts a hyphen-delimited code to camelCase string.\n * @param code - The search parameter code.\n * @returns The SQL column name.\n */\nfunction convertCodeToColumnName(code: string): string {\n  return code.split('-').reduce((result, word, index) => result + (index ? capitalize(word) : word), '');\n}\n\nfunction getSearchParameterType(searchParam: SearchParameter, propertyTypes: Set<string>): SearchParameterType {\n  switch (searchParam.type) {\n    case 'date':\n      if (propertyTypes.size === 1 && propertyTypes.has(PropertyType.date)) {\n        return SearchParameterType.DATE;\n      } else {\n        return SearchParameterType.DATETIME;\n      }\n    case 'number':\n      return SearchParameterType.NUMBER;\n    case 'quantity':\n      return SearchParameterType.QUANTITY;\n    case 'reference':\n      if (propertyTypes.has(PropertyType.canonical)) {\n        return SearchParameterType.CANONICAL;\n      } else {\n        return SearchParameterType.REFERENCE;\n      }\n    case 'token':\n      if (propertyTypes.size === 1 && propertyTypes.has(PropertyType.boolean)) {\n        return SearchParameterType.BOOLEAN;\n      } else {\n        return SearchParameterType.TEXT;\n      }\n    default:\n      return SearchParameterType.TEXT;\n  }\n}\n\nexport function getExpressionsForResourceType(resourceType: string, expression: string): Atom[] {\n  const result: Atom[] = [];\n  const fhirPathExpression = parseFhirPath(expression);\n  buildExpressionsForResourceType(resourceType, fhirPathExpression.child, result);\n  return result;\n}\n\nexport function getExpressionForResourceType(resourceType: string, expression: string): string | undefined {\n  const atoms = getExpressionsForResourceType(resourceType, expression);\n  if (atoms.length === 0) {\n    return undefined;\n  }\n  return atoms.map((atom) => atom.toString()).join(' | ');\n}\n\nfunction buildExpressionsForResourceType(resourceType: string, atom: Atom, result: Atom[]): void {\n  if (atom instanceof UnionAtom) {\n    buildExpressionsForResourceType(resourceType, atom.left, result);\n    buildExpressionsForResourceType(resourceType, atom.right, result);\n  } else {\n    const str = atom.toString();\n    if (str.startsWith(resourceType + '.')) {\n      result.push(atom);\n    }\n  }\n}\n\nfunction flattenAtom(atom: Atom): Atom[] {\n  if (atom instanceof AsAtom || atom instanceof IndexerAtom) {\n    return [flattenAtom(atom.left), atom].flat();\n  }\n  if (atom instanceof BooleanInfixOperatorAtom) {\n    return [atom];\n  }\n  if (atom instanceof DotAtom) {\n    return [flattenAtom(atom.left), flattenAtom(atom.right)].flat();\n  }\n  if (atom instanceof FunctionAtom) {\n    if (atom.name === 'where' && !(atom.args[0] instanceof IsAtom)) {\n      // Remove all \"where\" functions other than \"where(x as type)\"\n      return [];\n    }\n    if (atom.name === 'last') {\n      // Remove all \"last\" functions\n      return [];\n    }\n  }\n  return [atom];\n}\n", "import { Resource, ResourceType, SearchParameter } from '@medplum/fhirtypes';\nimport { evalFhirPathTyped } from '../fhirpath/parse';\nimport { OperationOutcomeError, badRequest } from '../outcomes';\nimport { TypedValue, globalSchema, stringifyTypedValue } from '../types';\nimport { append, sortStringArray } from '../utils';\nimport { isDateTimeString } from '../fhirpath/utils';\n\nexport const DEFAULT_SEARCH_COUNT = 20;\nexport const DEFAULT_MAX_SEARCH_COUNT = 1000;\n\nexport interface SearchRequest<T extends Resource = Resource> {\n  readonly resourceType: T['resourceType'];\n  filters?: Filter[];\n  sortRules?: SortRule[];\n  cursor?: string;\n  offset?: number;\n  count?: number;\n  fields?: string[];\n  name?: string;\n  total?: 'none' | 'estimate' | 'accurate';\n  include?: IncludeTarget[];\n  revInclude?: IncludeTarget[];\n  summary?: 'true' | 'text' | 'data';\n  format?: string;\n  pretty?: boolean;\n  types?: T['resourceType'][];\n}\n\nexport interface Filter {\n  code: string;\n  operator: Operator;\n  value: string;\n}\n\nexport interface SortRule {\n  code: string;\n  descending?: boolean;\n}\n\nexport interface IncludeTarget {\n  resourceType: string;\n  searchParam: string;\n  targetType?: string;\n  modifier?: 'iterate';\n}\n\n/**\n * Search operators.\n * These operators represent \"modifiers\" and \"prefixes\" in FHIR search.\n * See: https://www.hl7.org/fhir/search.html\n */\nexport enum Operator {\n  EQUALS = 'eq',\n  NOT_EQUALS = 'ne',\n\n  // Numbers\n  GREATER_THAN = 'gt',\n  LESS_THAN = 'lt',\n  GREATER_THAN_OR_EQUALS = 'ge',\n  LESS_THAN_OR_EQUALS = 'le',\n\n  // Dates\n  STARTS_AFTER = 'sa',\n  ENDS_BEFORE = 'eb',\n  APPROXIMATELY = 'ap',\n\n  // String\n  CONTAINS = 'contains',\n  STARTS_WITH = 'sw',\n  EXACT = 'exact',\n\n  // Token\n  TEXT = 'text',\n  NOT = 'not',\n  ABOVE = 'above',\n  BELOW = 'below',\n  IN = 'in',\n  NOT_IN = 'not-in',\n  OF_TYPE = 'of-type',\n\n  // All\n  MISSING = 'missing',\n  PRESENT = 'present',\n\n  // Reference\n  IDENTIFIER = 'identifier',\n\n  // _include and _revinclude\n  ITERATE = 'iterate',\n}\n\n/**\n * Parameter names may specify a modifier as a suffix.\n * The modifiers are separated from the parameter name by a colon.\n * See: https://www.hl7.org/fhir/search.html#modifiers\n */\nconst MODIFIER_OPERATORS: Record<string, Operator> = {\n  contains: Operator.CONTAINS,\n  exact: Operator.EXACT,\n  above: Operator.ABOVE,\n  below: Operator.BELOW,\n  text: Operator.TEXT,\n  not: Operator.NOT,\n  in: Operator.IN,\n  'not-in': Operator.NOT_IN,\n  'of-type': Operator.OF_TYPE,\n  missing: Operator.MISSING,\n  identifier: Operator.IDENTIFIER,\n  iterate: Operator.ITERATE,\n};\n\n/**\n * For the ordered parameter types of number, date, and quantity,\n * a prefix to the parameter value may be used to control the nature\n * of the matching.\n * See: https://www.hl7.org/fhir/search.html#prefix\n */\nconst PREFIX_OPERATORS: Record<string, Operator> = {\n  eq: Operator.EQUALS,\n  ne: Operator.NOT_EQUALS,\n  lt: Operator.LESS_THAN,\n  le: Operator.LESS_THAN_OR_EQUALS,\n  gt: Operator.GREATER_THAN,\n  ge: Operator.GREATER_THAN_OR_EQUALS,\n  sa: Operator.STARTS_AFTER,\n  eb: Operator.ENDS_BEFORE,\n  ap: Operator.APPROXIMATELY,\n  sw: Operator.STARTS_WITH,\n};\n\n/**\n * Parses a search URL into a search request.\n * @param url - The original search URL or the FHIR resource type.\n * @param query - Optional collection of additional query string parameters.\n * @returns A parsed SearchRequest.\n */\nexport function parseSearchRequest<T extends Resource = Resource>(\n  url: T['resourceType'] | URL | string,\n  query?: Record<string, string[] | string | undefined>\n): SearchRequest<T> {\n  if (!url) {\n    throw new Error('Invalid search URL');\n  }\n\n  // Parse the input into path and search parameters\n  let pathname = '';\n  let searchParams: URLSearchParams | undefined = undefined;\n  if (typeof url === 'string') {\n    if (url.includes('?')) {\n      const [path, search] = url.split('?');\n      pathname = path;\n      searchParams = new URLSearchParams(search);\n    } else {\n      pathname = url;\n    }\n  } else if (typeof url === 'object') {\n    pathname = url.pathname;\n    searchParams = url.searchParams;\n  }\n\n  // Next, parse out the resource type from the URL\n  // By convention, the resource type is the last non-empty part of the path\n  let resourceType: ResourceType;\n  if (pathname.includes('/')) {\n    resourceType = pathname.split('/').filter(Boolean).pop() as ResourceType;\n  } else {\n    resourceType = pathname as ResourceType;\n  }\n\n  // Next, parse out the search parameters\n  // First, we convert the URLSearchParams to an array of key-value pairs\n  const queryArray: [string, string][] = [];\n  if (searchParams) {\n    queryArray.push(...searchParams.entries());\n  }\n\n  // Next, we merge in the query object\n  // This is an optional set of additional query parameters\n  // which should be added to the URL\n  if (query) {\n    for (const [key, value] of Object.entries(query)) {\n      if (Array.isArray(value)) {\n        for (const v of value) {\n          queryArray.push([key, v]);\n        }\n      } else {\n        queryArray.push([key, value ?? '']);\n      }\n    }\n  }\n\n  // Finally we can move on to the actual parsing\n  return parseSearchImpl(resourceType, queryArray);\n}\n\n/**\n * Parses a search URL into a search request.\n * @param url - The search URL.\n * @returns A parsed SearchRequest.\n * @deprecated Use parseSearchRequest instead.\n */\nexport function parseSearchUrl<T extends Resource = Resource>(url: URL): SearchRequest<T> {\n  return parseSearchRequest<T>(url);\n}\n\n/**\n * Parses a URL string into a SearchRequest.\n * @param url - The URL to parse.\n * @returns Parsed search definition.\n * @deprecated Use parseSearchRequest instead.\n */\nexport function parseSearchDefinition<T extends Resource = Resource>(url: string): SearchRequest<T> {\n  return parseSearchRequest<T>(url);\n}\n\n/**\n * Parses a FHIR criteria string into a SearchRequest.\n * FHIR criteria strings are found on resources such as Subscription.\n * @param criteria - The FHIR criteria string.\n * @returns Parsed search definition.\n * @deprecated Use parseSearchRequest instead.\n */\nexport function parseCriteriaAsSearchRequest<T extends Resource = Resource>(criteria: string): SearchRequest<T> {\n  return parseSearchRequest<T>(criteria);\n}\n\nfunction parseSearchImpl<T extends Resource = Resource>(\n  resourceType: T['resourceType'],\n  query: Iterable<[string, string]>\n): SearchRequest<T> {\n  const searchRequest: SearchRequest<T> = {\n    resourceType,\n  };\n\n  for (const [key, value] of query) {\n    parseKeyValue(searchRequest, key, value);\n  }\n\n  return searchRequest;\n}\n\nfunction parseKeyValue(searchRequest: SearchRequest, key: string, value: string): void {\n  let code: string;\n  let modifier: string;\n\n  const colonIndex = key.indexOf(':');\n  if (colonIndex >= 0) {\n    code = key.substring(0, colonIndex);\n    modifier = key.substring(colonIndex + 1);\n  } else {\n    code = key;\n    modifier = '';\n  }\n\n  // Ignore the '_' parameter\n  // This is added by React Native when `no-cache` strategy is used to bust the cache presumably\n  if (code === '_') {\n    return;\n  }\n\n  if (code === '_has' || key.includes('.')) {\n    searchRequest.filters = append(searchRequest.filters, { code: key, operator: Operator.EQUALS, value });\n    return;\n  }\n\n  switch (code) {\n    case '_sort':\n      parseSortRule(searchRequest, value);\n      break;\n\n    case '_cursor':\n      searchRequest.cursor = value;\n      break;\n\n    case '_count':\n      searchRequest.count = parseInt(value, 10);\n      break;\n\n    case '_offset':\n      searchRequest.offset = parseInt(value, 10);\n      break;\n\n    case '_total':\n      searchRequest.total = value as 'none' | 'estimate' | 'accurate';\n      break;\n\n    case '_summary':\n      if (value === 'count') {\n        searchRequest.total = 'accurate';\n        searchRequest.count = 0;\n      } else if (value === 'true' || value === 'data' || value === 'text') {\n        searchRequest.summary = value;\n      }\n      break;\n\n    case '_include': {\n      const target = parseIncludeTarget(value);\n      if (modifier === 'iterate') {\n        target.modifier = Operator.ITERATE;\n      }\n      searchRequest.include = append(searchRequest.include, target);\n      break;\n    }\n\n    case '_revinclude': {\n      const target = parseIncludeTarget(value);\n      if (modifier === 'iterate') {\n        target.modifier = Operator.ITERATE;\n      }\n      searchRequest.revInclude = append(searchRequest.revInclude, target);\n      break;\n    }\n\n    case '_fields':\n    case '_elements':\n      searchRequest.fields = value.split(',');\n      break;\n\n    case '_type':\n      searchRequest.types = value.split(',') as Resource['resourceType'][];\n      break;\n\n    case '_format':\n      searchRequest.format = value;\n      break;\n\n    case '_pretty':\n      searchRequest.pretty = value === 'true';\n      break;\n\n    default: {\n      const param = globalSchema.types[searchRequest.resourceType]?.searchParams?.[code];\n      if (param) {\n        searchRequest.filters = append(searchRequest.filters, parseParameter(param, modifier, value));\n      } else {\n        searchRequest.filters = append(searchRequest.filters, parseUnknownParameter(code, modifier, value));\n      }\n    }\n  }\n}\n\nfunction parseSortRule(searchRequest: SearchRequest, value: string): void {\n  for (const field of value.split(',')) {\n    let code: string;\n    let descending = false;\n    if (field.startsWith('-')) {\n      code = field.substring(1);\n      descending = true;\n    } else {\n      code = field;\n    }\n    if (!searchRequest.sortRules) {\n      searchRequest.sortRules = [];\n    }\n    searchRequest.sortRules.push({ code, descending });\n  }\n}\n\nexport function parseParameter(searchParam: SearchParameter, modifier: string, value: string): Filter {\n  if (modifier === 'missing') {\n    return {\n      code: searchParam.code,\n      operator: Operator.MISSING,\n      value,\n    };\n  }\n\n  switch (searchParam.type) {\n    // Ordered types that can have a prefix modifier on the value\n    case 'number':\n    case 'date':\n    case 'quantity': {\n      const { operator, value: searchValue } = parsePrefix(value);\n      if (!isValidSearchValue(searchParam, searchValue)) {\n        throw new OperationOutcomeError(\n          badRequest(`Invalid format for ${searchParam.type} search parameter: ${searchValue}`)\n        );\n      }\n      return { code: searchParam.code, operator, value: searchValue };\n    }\n\n    // Lookup types that support a variety of modifiers on the search parameter\n    case 'reference':\n    case 'string':\n    case 'token':\n    case 'uri':\n      if (!isValidSearchValue(searchParam, value)) {\n        throw new OperationOutcomeError(\n          badRequest(`Invalid format for ${searchParam.type} search parameter: ${value}`)\n        );\n      }\n      return { code: searchParam.code, operator: parseModifier(modifier), value };\n\n    default:\n      throw new Error('Unrecognized search parameter type: ' + searchParam.type);\n  }\n}\n\nfunction parseUnknownParameter(code: string, modifier: string, value: string): Filter {\n  let operator = Operator.EQUALS;\n  if (modifier) {\n    operator = modifier as Operator;\n  } else if (value.length >= 2) {\n    const prefix = value.substring(0, 2);\n    if (prefix in PREFIX_OPERATORS) {\n      if (value.length === 2 || value.at(2)?.match(/\\d/)) {\n        operator = prefix as Operator;\n        value = value.substring(prefix.length);\n      }\n    }\n  }\n  return { code, operator, value };\n}\n\nfunction parsePrefix(input: string): { operator: Operator; value: string } {\n  const prefix = input.substring(0, 2);\n  const prefixOperator = PREFIX_OPERATORS[prefix];\n  if (prefixOperator) {\n    return { operator: prefixOperator, value: input.substring(2) };\n  }\n  return { operator: Operator.EQUALS, value: input };\n}\n\nfunction parseModifier(modifier: string): Operator {\n  return MODIFIER_OPERATORS[modifier] ?? Operator.EQUALS;\n}\n\nfunction parseIncludeTarget(input: string): IncludeTarget {\n  const parts = input.split(':');\n\n  if (parts.includes('*')) {\n    throw new OperationOutcomeError(badRequest(`'*' is not supported as a value for search inclusion parameters`));\n  }\n\n  if (parts.length === 1) {\n    // Full wildcard, not currently supported\n    throw new OperationOutcomeError(\n      badRequest(`Invalid include value '${input}': must be of the form ResourceType:search-parameter`)\n    );\n  } else if (parts.length === 2) {\n    return {\n      resourceType: parts[0],\n      searchParam: parts[1],\n    };\n  } else if (parts.length === 3) {\n    return {\n      resourceType: parts[0],\n      searchParam: parts[1],\n      targetType: parts[2],\n    };\n  } else {\n    throw new OperationOutcomeError(badRequest(`Invalid include value '${input}'`));\n  }\n}\n\nfunction isValidSearchValue(searchParam: SearchParameter, searchValue: string): boolean {\n  switch (searchParam.type) {\n    case 'date':\n      return isDateTimeString(searchValue);\n    default:\n      return true;\n  }\n}\n\nconst subexpressionPattern = /{{([^{}]+)}}/g;\n\n/**\n * Parses an extended FHIR search criteria string (i.e. application/x-fhir-query).\n *\n * @example Evaluating a FHIRPath subexpression\n *\n * ```typescript\n * const query = 'Patient?name={{ %patient.name }}';\n * const variables = { patient: { name: 'John Doe' } };\n * const request = parseXFhirQuery(query, variables);\n * console.log(request.filters[0].value); // \"John Doe\"\n * ```\n *\n * @see https://hl7.org/fhir/fhir-xquery.html\n * @param query - The X-Fhir-Query string to parse\n * @param variables - Values to pass into embedded FHIRPath expressions\n * @returns The parsed search request\n */\nexport function parseXFhirQuery(query: string, variables: Record<string, TypedValue>): SearchRequest {\n  query = query.replaceAll(subexpressionPattern, (_, expr) => {\n    const replacement = evalFhirPathTyped(expr, [], variables);\n    if (replacement.length !== 1) {\n      return '';\n    }\n    return stringifyTypedValue(replacement[0]);\n  });\n  return parseSearchRequest(query);\n}\n\n/**\n * Formats a search definition object into a query string.\n * Note: The return value does not include the resource type.\n * @param definition - The search definition.\n * @returns Formatted URL.\n */\nexport function formatSearchQuery(definition: SearchRequest): string {\n  const params: string[] = [];\n\n  if (definition.fields) {\n    params.push('_fields=' + definition.fields.join(','));\n  }\n\n  if (definition.filters) {\n    definition.filters.forEach((filter) => params.push(formatFilter(filter)));\n  }\n\n  if (definition.sortRules && definition.sortRules.length > 0) {\n    params.push(formatSortRules(definition.sortRules));\n  }\n\n  if (definition.cursor !== undefined) {\n    params.push('_cursor=' + encodeURIComponent(definition.cursor));\n  }\n\n  if (definition.offset !== undefined && definition.offset !== 0) {\n    params.push('_offset=' + definition.offset);\n  }\n\n  if (definition.count !== undefined) {\n    params.push('_count=' + definition.count);\n  }\n\n  if (definition.total !== undefined) {\n    params.push('_total=' + definition.total);\n  }\n\n  if (definition.include) {\n    definition.include.forEach((target) => params.push(formatIncludeTarget('_include', target)));\n  }\n\n  if (definition.revInclude) {\n    definition.revInclude.forEach((target) => params.push(formatIncludeTarget('_revinclude', target)));\n  }\n\n  if (params.length === 0) {\n    return '';\n  }\n\n  sortStringArray(params);\n  return '?' + params.join('&');\n}\n\nfunction formatFilter(filter: Filter): string {\n  const modifier = filter.operator in MODIFIER_OPERATORS ? ':' + filter.operator : '';\n  const prefix = filter.operator !== Operator.EQUALS && filter.operator in PREFIX_OPERATORS ? filter.operator : '';\n  return `${filter.code}${modifier}=${prefix}${encodeURIComponent(filter.value)}`;\n}\n\nfunction formatSortRules(sortRules: SortRule[]): string {\n  return '_sort=' + sortRules.map((sr) => (sr.descending ? '-' + sr.code : sr.code)).join(',');\n}\n\nfunction formatIncludeTarget(kind: '_include' | '_revinclude', target: IncludeTarget): string {\n  return (\n    kind +\n    (target.modifier ? ':' + target.modifier : '') +\n    '=' +\n    target.resourceType +\n    ':' +\n    target.searchParam +\n    (target.targetType ? ':' + target.targetType : '')\n  );\n}\n\n/**\n * Splits a FHIR search value on commas.\n * Respects backslash escape.\n *\n * See: https://hl7.org/fhir/r4/search.html#escaping\n *\n * @param input - The FHIR search value to split.\n * @returns The individual search values.\n */\nexport function splitSearchOnComma(input: string): string[] {\n  const result: string[] = [];\n  let current = '';\n  let escaped = false;\n\n  for (const c of input) {\n    if (escaped) {\n      current += c;\n      escaped = false;\n    } else if (c === '\\\\') {\n      escaped = true;\n    } else if (c === ',') {\n      result.push(current);\n      current = '';\n    } else {\n      current += c;\n    }\n  }\n\n  // Push the last segment\n  result.push(current);\n  return result;\n}\n", "import { CodeableConcept, Coding, Identifier, Reference, Resource, SearchParameter } from '@medplum/fhirtypes';\nimport { evalFhirPath } from '../fhirpath/parse';\nimport { PropertyType, globalSchema } from '../types';\nimport { SearchParameterType, getSearchParameterDetails } from './details';\nimport { Filter, Operator, SearchRequest, splitSearchOnComma } from './search';\n\n/**\n * Determines if the resource matches the search request.\n * @param resource - The resource that was created or updated.\n * @param searchRequest - The subscription criteria as a search request.\n * @returns True if the resource satisfies the search request.\n */\nexport function matchesSearchRequest(resource: Resource, searchRequest: SearchRequest): boolean {\n  if (searchRequest.resourceType !== resource.resourceType) {\n    return false;\n  }\n  if (searchRequest.filters) {\n    for (const filter of searchRequest.filters) {\n      if (!matchesSearchFilter(resource, searchRequest, filter)) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\n/**\n * Determines if the resource matches the search filter.\n * @param resource - The resource that was created or updated.\n * @param searchRequest - The search request.\n * @param filter - One of the filters of a subscription criteria.\n * @returns True if the resource satisfies the search filter.\n */\nfunction matchesSearchFilter(resource: Resource, searchRequest: SearchRequest, filter: Filter): boolean {\n  const searchParam = globalSchema.types[searchRequest.resourceType]?.searchParams?.[filter.code];\n  if (!searchParam) {\n    return false;\n  }\n  if (filter.operator === Operator.MISSING || filter.operator === Operator.PRESENT) {\n    return matchesMissingOrPresent(resource, filter, searchParam);\n  }\n  switch (searchParam.type) {\n    case 'reference':\n      return matchesReferenceFilter(resource, filter, searchParam);\n    case 'string':\n    case 'uri':\n      return matchesStringFilter(resource, filter, searchParam);\n    case 'token':\n      return matchesTokenFilter(resource, filter, searchParam);\n    case 'date':\n      return matchesDateFilter(resource, filter, searchParam);\n    default:\n      // Unknown search parameter or search parameter type\n      // Default fail the check\n      return false;\n  }\n}\n\nfunction matchesMissingOrPresent(resource: Resource, filter: Filter, searchParam: SearchParameter): boolean {\n  const values = evalFhirPath(searchParam.expression as string, resource);\n  const exists = values.length > 0;\n  const desired =\n    (filter.operator === Operator.MISSING && filter.value === 'false') ||\n    (filter.operator === Operator.PRESENT && filter.value === 'true');\n  return desired === exists;\n}\n\nfunction matchesReferenceFilter(resource: Resource, filter: Filter, searchParam: SearchParameter): boolean {\n  const values = evalFhirPath(searchParam.expression as string, resource) as (Reference | string)[];\n  const negated = isNegated(filter.operator);\n\n  if (filter.value === '' && values.length === 0) {\n    // If the filter operator is \"equals\", then the filter matches.\n    // If the filter operator is \"not equals\", then the filter does not match.\n    return filter.operator === Operator.EQUALS;\n  }\n\n  // Normalize the values array into reference strings\n  const references = values.map((value) => (typeof value === 'string' ? value : value.reference));\n\n  for (const filterValue of splitSearchOnComma(filter.value)) {\n    let match = references.includes(filterValue);\n    if (!match && filter.code === '_compartment') {\n      // Backwards compability for compartment search parameter\n      // In previous versions, the resource type was not required in compartment values\n      // So, \"123\" would match \"Patient/123\"\n      // We need to maintain this behavior for backwards compatibility\n      match = references.some((reference) => reference?.endsWith('/' + filterValue));\n    }\n    if (match) {\n      return !negated;\n    }\n  }\n  // If \"not equals\" and no matches, then return true\n  // If \"equals\" and no matches, then return false\n  return negated;\n}\n\nfunction matchesTokenFilter(resource: Resource, filter: Filter, searchParam: SearchParameter): boolean {\n  const details = getSearchParameterDetails(resource.resourceType, searchParam);\n  if (details.type === SearchParameterType.BOOLEAN) {\n    return matchesBooleanFilter(resource, filter, searchParam);\n  } else {\n    return matchesStringFilter(resource, filter, searchParam, true);\n  }\n}\n\nfunction matchesBooleanFilter(resource: Resource, filter: Filter, searchParam: SearchParameter): boolean {\n  const values = evalFhirPath(searchParam.expression as string, resource);\n  const expected = filter.value === 'true';\n  const result = values.includes(expected);\n  return isNegated(filter.operator) ? !result : result;\n}\n\nfunction matchesStringFilter(\n  resource: Resource,\n  filter: Filter,\n  searchParam: SearchParameter,\n  asToken?: boolean\n): boolean {\n  const details = getSearchParameterDetails(resource.resourceType, searchParam);\n  const searchParamElementType = details.elementDefinitions?.[0]?.type?.[0]?.code;\n  const resourceValues = evalFhirPath(searchParam.expression as string, resource);\n  const filterValues = splitSearchOnComma(filter.value);\n  const negated = isNegated(filter.operator);\n  for (const resourceValue of resourceValues) {\n    for (const filterValue of filterValues) {\n      let match;\n      if (searchParamElementType === PropertyType.Identifier) {\n        match = matchesTokenIdentifierValue(resourceValue as Identifier, filter.operator, filterValue);\n      } else if (searchParamElementType === PropertyType.CodeableConcept) {\n        match = matchesTokenCodeableConceptValue(resourceValue as Coding, filter.operator, filterValue);\n      } else {\n        match = matchesStringValue(resourceValue, filter.operator, filterValue, asToken);\n      }\n      if (match) {\n        return !negated;\n      }\n    }\n  }\n  // If \"not equals\" and no matches, then return true\n  // If \"equals\" and no matches, then return false\n  return negated;\n}\n\nfunction matchesStringValue(\n  resourceValue: unknown,\n  operator: Operator,\n  filterValue: string,\n  asToken?: boolean\n): boolean {\n  if (asToken && filterValue.includes('|')) {\n    const [system, code] = filterValue.split('|');\n    return (\n      matchesStringValue(resourceValue, operator, system, false) &&\n      (!code || matchesStringValue(resourceValue, operator, code, false))\n    );\n  }\n  let str = '';\n  if (resourceValue) {\n    if (typeof resourceValue === 'string') {\n      str = resourceValue;\n    } else if (typeof resourceValue === 'object') {\n      str = JSON.stringify(resourceValue);\n    }\n  }\n  return str.toLowerCase().includes(filterValue.toLowerCase());\n}\n\nfunction matchesTokenIdentifierValue(resourceValue: Identifier, operator: Operator, filterValue: string): boolean {\n  if (filterValue.includes('|')) {\n    const [system, value] = filterValue.split('|').map((s) => s.toLowerCase());\n    if (!system && !value) {\n      return false;\n    } else if (!system) {\n      // [parameter]=|[code]: the value of [code] matches a Coding.code or Identifier.value, and the Coding/Identifier has no system property\n      return !resourceValue.system && resourceValue.value?.toLowerCase() === value;\n    }\n\n    // [parameter]=[system]|: any element where the value of [system] matches the system property of the Identifier or Coding\n    // [parameter]=[system]|[code]: the value of [code] matches a Coding.code or Identifier.value, and the value of [system] matches the system property of the Identifier or Coding\n    return resourceValue.system?.toLowerCase() === system && (!value || resourceValue.value?.toLowerCase() === value);\n  }\n\n  // [parameter]=[code]: the value of [code] matches a Coding.code or Identifier.value irrespective of the value of the system property\n  return resourceValue.value?.toLowerCase() === filterValue.toLowerCase();\n}\n\nfunction matchesTokenCodeableConceptValue(\n  resourceValue: CodeableConcept,\n  _operator: Operator,\n  filterValue: string\n): boolean {\n  if (filterValue.includes('|')) {\n    const [system, code] = filterValue.split('|').map((s) => s.toLowerCase());\n    if (!system && !code) {\n      return false;\n    } else if (!system) {\n      // [parameter]=|[code]: the value of [code] matches a Coding.code or Identifier.value, and the Coding/Identifier has no system property\n      return resourceValue.coding?.some((coding) => !coding.system && coding.code?.toLowerCase() === code) ?? false;\n    }\n\n    // [parameter]=[system]|: any element where the value of [system] matches the system property of the Identifier or Coding\n    // [parameter]=[system]|[code]: the value of [code] matches a Coding.code or Identifier.value, and the value of [system] matches the system property of the Identifier or Coding\n    return (\n      resourceValue.coding?.some(\n        (coding) => coding.system?.toLowerCase() === system && (!code || coding.code?.toLowerCase() === code)\n      ) ?? false\n    );\n  }\n\n  // [parameter]=[code]: the value of [code] matches a Coding.code or Identifier.value irrespective of the value of the system property\n  return (\n    resourceValue.text?.toLowerCase() === filterValue.toLowerCase() ||\n    (resourceValue.coding?.some((coding) => coding.code?.toLowerCase() === filterValue.toLowerCase()) ?? false)\n  );\n}\n\nfunction matchesDateFilter(resource: Resource, filter: Filter, searchParam: SearchParameter): boolean {\n  const resourceValues = evalFhirPath(searchParam.expression as string, resource);\n  const filterValues = splitSearchOnComma(filter.value);\n  const negated = isNegated(filter.operator);\n  for (const resourceValue of resourceValues) {\n    for (const filterValue of filterValues) {\n      const match = matchesDateValue(resourceValue as string, filter.operator, filterValue);\n      if (match) {\n        return !negated;\n      }\n    }\n  }\n  // If \"not equals\" and no matches, then return true\n  // If \"equals\" and no matches, then return false\n  return negated;\n}\n\nfunction matchesDateValue(resourceValue: string, operator: Operator, filterValue: string): boolean {\n  switch (operator) {\n    case Operator.STARTS_AFTER:\n    case Operator.GREATER_THAN:\n      return resourceValue > filterValue;\n    case Operator.GREATER_THAN_OR_EQUALS:\n      return resourceValue >= filterValue;\n    case Operator.ENDS_BEFORE:\n    case Operator.LESS_THAN:\n      return resourceValue < filterValue;\n    case Operator.LESS_THAN_OR_EQUALS:\n      return resourceValue <= filterValue;\n    case Operator.EQUALS:\n    case Operator.NOT_EQUALS:\n      return resourceValue === filterValue;\n    default:\n      return false;\n  }\n}\n\nfunction isNegated(operator: Operator): boolean {\n  return operator === Operator.NOT_EQUALS || operator === Operator.NOT;\n}\n", "import { AccessPolicy, AccessPolicyResource, Resource, ResourceType } from '@medplum/fhirtypes';\nimport { matchesSearchRequest } from './search/match';\nimport { parseSearchRequest } from './search/search';\n\nconst universalAccessPolicy: AccessPolicyResource = {\n  resourceType: '*',\n};\n\n/**\n * Protected resource types are in the \"medplum\" project.\n * Reading and writing is limited to the system account.\n */\nexport const protectedResourceTypes = ['DomainConfiguration', 'JsonWebKey', 'Login'];\n\n/**\n * Project admin resource types are special resources that are only\n * accessible to project administrators.\n */\nexport const projectAdminResourceTypes = [\n  'PasswordChangeRequest',\n  'UserSecurityRequest',\n  'Project',\n  'ProjectMembership',\n  'User',\n];\n\n/**\n * Interactions with a resource that can be controlled via an access policy.\n *\n * Codes taken from http://hl7.org/fhir/codesystem-restful-interaction.html\n */\nexport enum AccessPolicyInteraction {\n  READ = 'read',\n  VREAD = 'vread',\n  UPDATE = 'update',\n  PATCH = 'patch',\n  DELETE = 'delete',\n  HISTORY = 'history',\n  HISTORY_INSTANCE = 'history-instance',\n  HISTORY_TYPE = 'history-type',\n  HISTORY_SYSTEM = 'history-system',\n  CREATE = 'create',\n  SEARCH = 'search',\n  SEARCH_TYPE = 'search-type',\n  SEARCH_SYSTEM = 'search-system',\n  SEARCH_COMPARTMENT = 'search-compartment',\n  CAPABILITIES = 'capabilities',\n  TRANSACTION = 'transaction',\n  BATCH = 'batch',\n  OPERATION = 'operation',\n}\nconst resourceReadInteractions = [\n  AccessPolicyInteraction.READ,\n  AccessPolicyInteraction.VREAD,\n  AccessPolicyInteraction.HISTORY,\n  AccessPolicyInteraction.HISTORY_INSTANCE,\n];\n\n/**\n * Determines if the current user can read the specified resource type.\n * @param accessPolicy - The access policy.\n * @param resourceType - The resource type.\n * @returns True if the current user can read the specified resource type.\n */\nexport function canReadResourceType(accessPolicy: AccessPolicy, resourceType: ResourceType): boolean {\n  if (accessPolicy.resource) {\n    for (const resourcePolicy of accessPolicy.resource) {\n      if (matchesAccessPolicyResourceType(resourcePolicy.resourceType, resourceType)) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n/**\n * Determines if the current user can write the specified resource type.\n * This is a preliminary check before evaluating a write operation in depth.\n * If a user cannot write a resource type at all, then don't bother looking up previous versions.\n * @param accessPolicy - The access policy.\n * @param resourceType - The resource type.\n * @returns True if the current user can write the specified resource type.\n */\nexport function canWriteResourceType(accessPolicy: AccessPolicy, resourceType: ResourceType): boolean {\n  if (protectedResourceTypes.includes(resourceType)) {\n    return false;\n  }\n  if (accessPolicy.resource) {\n    for (const resourcePolicy of accessPolicy.resource) {\n      if (matchesAccessPolicyResourceType(resourcePolicy.resourceType, resourceType) && !resourcePolicy.readonly) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n/**\n * Determines if the current user can write the specified resource.\n * This is a more in-depth check after building the candidate result of a write operation.\n * @param accessPolicy - The access policy.\n * @param resource - The resource.\n * @returns True if the current user can write the specified resource type.\n */\nexport function canWriteResource(accessPolicy: AccessPolicy, resource: Resource): boolean {\n  const resourceType = resource.resourceType;\n  if (!canWriteResourceType(accessPolicy, resourceType)) {\n    return false;\n  }\n  return matchesAccessPolicy(accessPolicy, resource, false);\n}\n\n/**\n * Returns true if the resource satisfies the current access policy.\n * @param accessPolicy - The access policy.\n * @param resource - The resource.\n * @param readonlyMode - True if the resource is being read.\n * @returns True if the resource matches the access policy.\n * @deprecated Use satisfiedAccessPolicy() instead.\n */\nexport function matchesAccessPolicy(accessPolicy: AccessPolicy, resource: Resource, readonlyMode: boolean): boolean {\n  if (accessPolicy.resource) {\n    for (const resourcePolicy of accessPolicy.resource) {\n      if (\n        matchesAccessPolicyResourcePolicy(\n          resource,\n          readonlyMode ? AccessPolicyInteraction.READ : AccessPolicyInteraction.UPDATE,\n          resourcePolicy\n        )\n      ) {\n        return true;\n      }\n    }\n  }\n  return false;\n}\n\n/**\n * Checks that there is an access policy permitting the given resource interaction, returning the matching policy object.\n * @param resource - The resource being acted upon.\n * @param interaction - The interaction being performed on the resource.\n * @param accessPolicy - The relevant access policy for the current user.\n * @returns The satisfied access policy, or undefined if the access policy does not permit the given interaction.\n */\nexport function satisfiedAccessPolicy(\n  resource: Resource,\n  interaction: AccessPolicyInteraction,\n  accessPolicy: AccessPolicy | undefined\n): AccessPolicyResource | undefined {\n  if (!accessPolicy) {\n    return universalAccessPolicy;\n  }\n  if (accessPolicy.resource) {\n    for (const resourcePolicy of accessPolicy.resource) {\n      if (matchesAccessPolicyResourcePolicy(resource, interaction, resourcePolicy)) {\n        return resourcePolicy;\n      }\n    }\n  }\n  return undefined;\n}\n\n/**\n * Returns true if the resource satisfies the specified access policy resource policy.\n * @param resource - The resource.\n * @param interaction - The interaction being performed on the resource.\n * @param resourcePolicy - One per-resource policy section from the access policy.\n * @returns True if the resource matches the access policy.\n */\nfunction matchesAccessPolicyResourcePolicy(\n  resource: Resource,\n  interaction: AccessPolicyInteraction,\n  resourcePolicy: AccessPolicyResource\n): boolean {\n  const resourceType = resource.resourceType;\n  if (!matchesAccessPolicyResourceType(resourcePolicy.resourceType, resourceType)) {\n    return false;\n  }\n  if (resourcePolicy.readonly && !resourceReadInteractions.includes(interaction)) {\n    return false;\n  }\n  if (\n    resourcePolicy.compartment &&\n    !resource.meta?.compartment?.find((c) => c.reference === resourcePolicy.compartment?.reference)\n  ) {\n    // Deprecated - to be removed\n    return false;\n  }\n  if (resourcePolicy.criteria && !matchesSearchRequest(resource, parseSearchRequest(resourcePolicy.criteria))) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Returns true if the resource type matches the access policy resource type.\n * @param accessPolicyResourceType - The resource type from the access policy.\n * @param resourceType - The candidate resource resource type.\n * @returns True if the resource type matches the access policy resource type.\n */\nfunction matchesAccessPolicyResourceType(\n  accessPolicyResourceType: string | undefined,\n  resourceType: ResourceType\n): boolean {\n  if (accessPolicyResourceType === resourceType) {\n    return true;\n  }\n  if (accessPolicyResourceType === '*' && !projectAdminResourceTypes.includes(resourceType)) {\n    // Project admin resource types are not allowed to be wildcarded\n    // Project admin resource types must be explicitly included\n    return true;\n  }\n  return false;\n}\n", "/**\n * Decodes a base64 string.\n * Handles both browser and Node environments.\n * Supports Unicode characters.\n * @param data - The base-64 encoded input string.\n * @returns The decoded string.\n */\nexport function decodeBase64(data: string): string {\n  if (typeof window !== 'undefined') {\n    const binaryString = window.atob(data);\n    const bytes = Uint8Array.from(binaryString, (c) => c.charCodeAt(0));\n    return new window.TextDecoder().decode(bytes);\n  }\n  if (typeof Buffer !== 'undefined') {\n    return Buffer.from(data, 'base64').toString('utf-8');\n  }\n  throw new Error('Unable to decode base64');\n}\n\n/**\n * Encodes a base64 string.\n * Handles both browser and Node environments.\n * Supports Unicode characters.\n * @param data - The unencoded input string.\n * @returns The base-64 encoded string.\n */\nexport function encodeBase64(data: string): string {\n  if (typeof window !== 'undefined') {\n    const utf8Bytes = new window.TextEncoder().encode(data);\n    // utf8Bytes is a Uint8Array, but String.fromCharCode expects a sequence of numbers.\n    const binaryString = String.fromCharCode.apply(null, utf8Bytes as unknown as number[]);\n    return window.btoa(binaryString);\n  }\n  if (typeof Buffer !== 'undefined') {\n    return Buffer.from(data, 'utf8').toString('base64');\n  }\n  throw new Error('Unable to encode base64');\n}\n", "import { arrayBufferToHex } from './utils';\n\n/**\n * Returns a cryptographically secure random string.\n * @returns A cryptographically secure random string.\n */\nexport function getRandomString(): string {\n  const randomItems = new Uint32Array(28);\n  crypto.getRandomValues(randomItems);\n  return arrayBufferToHex(randomItems.buffer);\n}\n\n/**\n * Encrypts a string with SHA256 encryption.\n * @param str - The unencrypted input string.\n * @returns The encrypted value in an ArrayBuffer.\n */\nexport async function encryptSHA256(str: string): Promise<ArrayBuffer> {\n  return crypto.subtle.digest('SHA-256', new TextEncoder().encode(str));\n}\n\n/**\n * Cross platform random UUID generator\n * Note that this is not intended for production use, but rather for testing\n * This should be replaced when crypto.randomUUID is fully supported\n * See: https://stackoverflow.com/revisions/2117523/28\n * @returns A random UUID.\n */\nexport function generateId(): string {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0;\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n}\n", "import { Bundle, BundleEntry, BundleEntryRequest, Resource } from '@medplum/fhirtypes';\nimport { generateId } from './crypto';\nimport { isReference } from './types';\nimport { deepClone } from './utils';\n\n/**\n * More on Bundles can be found here\n * http://hl7.org/fhir/R4/bundle.html\n */\n\n/**\n * Takes a bundle and creates a Transaction Type bundle\n * @param bundle - The Bundle object that we'll receive from the search query\n * @returns transaction type bundle\n */\nexport function convertToTransactionBundle(bundle: Bundle): Bundle {\n  const idToUuid: Record<string, string> = {};\n  bundle = deepClone(bundle);\n  for (const entry of bundle.entry || []) {\n    if (entry.resource?.meta !== undefined) {\n      delete entry.resource.meta.author;\n      delete entry.resource.meta.compartment;\n      delete entry.resource.meta.lastUpdated;\n      delete entry.resource.meta.project;\n      delete entry.resource.meta.versionId;\n    }\n    const id = entry.resource?.id;\n    if (id) {\n      idToUuid[id] = generateId();\n\n      entry.fullUrl = 'urn:uuid:' + idToUuid[id];\n      delete entry.resource?.id;\n    }\n  }\n  const input = bundle.entry;\n  const jsonString = JSON.stringify(\n    {\n      resourceType: 'Bundle',\n      type: 'transaction',\n      entry: input?.map((entry: any) => ({\n        fullUrl: entry.fullUrl,\n        request: { method: 'POST', url: entry.resource.resourceType },\n        resource: entry.resource,\n      })),\n    },\n    (key, value) => referenceReplacer(key, value, idToUuid),\n    2\n  );\n  return reorderBundle(JSON.parse(jsonString) as Bundle);\n}\n\nfunction referenceReplacer(key: string, value: string, idToUuid: Record<string, string>): string {\n  if (key === 'reference' && typeof value === 'string') {\n    let id;\n    if (value.includes('/')) {\n      id = value.split('/')[1];\n    } else if (value.startsWith('urn:uuid:')) {\n      id = value.slice(9);\n    } else if (value.startsWith('#')) {\n      id = value.slice(1);\n    }\n    if (id) {\n      const replacement = idToUuid[id];\n      if (replacement) {\n        return 'urn:uuid:' + replacement;\n      }\n    }\n  }\n  return value;\n}\n\n/**\n * Topologically sorts a `batch` or `transaction` bundle to improve reference resolution.\n * The bundle is sorted such that a resource is created _before_ references to that resource appear in the bundle.\n *\n * In the event of cycles, this function will first create a POST request for each resource in the cycle, and then will\n * append a PUT request to the bundle. This ensures that each resources in the cycle is visited twice, and all\n * references can be resolved\n * @param bundle - Input bundle with type `batch` or `transaction`\n * @returns Bundle of the same type, with Bundle.entry reordered\n */\nexport function reorderBundle(bundle: Bundle): Bundle {\n  const adjacencyList = buildAdjacencyList(bundle);\n  const { sorted: sortedFullUrls, cycles } = topologicalSortWithCycles(adjacencyList);\n\n  const entryMap: Record<string, BundleEntry> = {};\n\n  for (const entry of bundle.entry ?? []) {\n    if (entry.fullUrl) {\n      entryMap[entry.fullUrl] = entry;\n    }\n  }\n\n  const reorderedEntries = sortedFullUrls.map((fullUrl) => entryMap[fullUrl]);\n\n  // Handle cycles by appending additional entries with a method of 'PUT'\n  for (const cycle of cycles) {\n    for (const fullUrl of cycle) {\n      const originalEntry = entryMap[fullUrl];\n      const putEntry: BundleEntry = {\n        ...originalEntry,\n        request: {\n          ...(originalEntry.request as BundleEntryRequest),\n          method: 'PUT',\n        },\n      };\n      reorderedEntries.push(putEntry);\n    }\n  }\n\n  return { ...bundle, entry: reorderedEntries };\n}\n\ntype AdjacencyList = Record<string, string[]>;\n\nenum VertexState {\n  NotVisited,\n  Visiting,\n  Visited,\n}\n\nfunction topologicalSortWithCycles(graph: AdjacencyList): { sorted: string[]; cycles: string[][] } {\n  const sorted: string[] = [];\n  const state: Record<string, VertexState> = {};\n  const cycles: string[][] = [];\n\n  // Initialize all vertices to NotVisited state\n  for (const vertex of Object.keys(graph)) {\n    state[vertex] = VertexState.NotVisited;\n  }\n\n  function visit(vertex: string, path: string[]): boolean {\n    // If this vertex is already visited, return true\n    if (state[vertex] === VertexState.Visited) {\n      return true;\n    }\n\n    // If this vertex is currently being visited, we have a cycle\n    if (state[vertex] === VertexState.Visiting) {\n      const cycleStartIndex = path.lastIndexOf(vertex);\n      if (cycleStartIndex !== -1) {\n        cycles.push(path.slice(cycleStartIndex));\n      }\n      return true; // return true for vertices that are part of cycles\n    }\n\n    // Mark the vertex as visiting and add it to the path\n    state[vertex] = VertexState.Visiting;\n    path.push(vertex);\n\n    // Visit all neighbors\n    let hasCycle = false;\n    for (const neighbor of graph[vertex]) {\n      if (!visit(neighbor, path)) {\n        hasCycle = true;\n      }\n    }\n\n    // Mark the vertex as visited, remove it from the path, and add it to the sorted list\n    state[vertex] = VertexState.Visited;\n    path.pop();\n    sorted.unshift(vertex);\n\n    return !hasCycle;\n  }\n\n  for (const vertex in graph) {\n    if (state[vertex] === VertexState.NotVisited) {\n      const path: string[] = [];\n      visit(vertex, path);\n    }\n  }\n\n  return { sorted, cycles };\n}\n\nfunction findReferences(resource: any, callback: (reference: string) => void): void {\n  for (const key in resource) {\n    if (resource[key] && typeof resource[key] === 'object') {\n      const value = resource[key];\n\n      if (isReference(value)) {\n        const reference = value.reference;\n        if (reference.startsWith('urn:uuid:')) {\n          callback(reference);\n        }\n      } else {\n        findReferences(value, callback);\n      }\n    }\n  }\n}\n\nfunction buildAdjacencyList(bundle: Bundle): AdjacencyList {\n  const adjacencyList: AdjacencyList = {};\n\n  // Initialize adjacency list with empty arrays for each entry's fullUrl\n  for (const entry of bundle.entry || []) {\n    if (entry.fullUrl) {\n      adjacencyList[entry.fullUrl] = [];\n    }\n  }\n\n  for (const entry of bundle.entry || []) {\n    const fullUrl = entry.fullUrl;\n\n    if (entry.resource) {\n      findReferences(entry.resource, (reference: string) => {\n        // Add an incoming reference to the adjacency list\n        if (adjacencyList[reference]) {\n          adjacencyList[reference].push(fullUrl as string);\n        }\n      });\n    }\n  }\n\n  return adjacencyList;\n}\n\n/**\n * Converts a resource with contained resources to a transaction bundle.\n * This function is useful when creating a resource that contains other resources.\n * Handles local references and topological sorting.\n * @param resource - The input resource which may or may not include contained resources.\n * @returns A bundle with the input resource and all contained resources.\n */\nexport function convertContainedResourcesToBundle(resource: Resource & { contained?: Resource[] }): Bundle {\n  // Create a clone so we don't modify the original resource\n  resource = deepClone(resource);\n\n  // Create the simple naive bundle\n  const simpleBundle = {\n    resourceType: 'Bundle',\n    type: 'transaction',\n    entry: [{ resource }],\n  } satisfies Bundle;\n\n  // Move all contained resources to the bundle\n  if (resource.contained) {\n    for (const contained of resource.contained) {\n      simpleBundle.entry.push({ resource: contained });\n    }\n    resource.contained = undefined;\n  }\n\n  // Make sure that all resources have an ID\n  // This is required for convertToTransactionBundle\n  for (const entry of simpleBundle.entry) {\n    if (entry.resource && !entry.resource.id) {\n      entry.resource.id = generateId();\n    }\n  }\n\n  // Convert to a transaction bundle\n  // This adds fullUrl and request properties to each entry\n  // and reorders the bundle to ensure that contained resources are created before they are referenced.\n  return convertToTransactionBundle(simpleBundle);\n}\n", "/**\n * LRU cache (least recently used)\n * Source: https://stackoverflow.com/a/46432113\n */\nexport class LRUCache<T> {\n  private readonly max: number;\n  private readonly cache: Map<string, T>;\n\n  constructor(max = 10) {\n    this.max = max;\n    this.cache = new Map();\n  }\n\n  /**\n   * Deletes all values from the cache.\n   */\n  clear(): void {\n    this.cache.clear();\n  }\n\n  /**\n   * Returns the value for the given key.\n   * @param key - The key to retrieve.\n   * @returns The value if found; undefined otherwise.\n   */\n  get(key: string): T | undefined {\n    const item = this.cache.get(key);\n    if (item) {\n      this.cache.delete(key);\n      this.cache.set(key, item);\n    }\n    return item;\n  }\n\n  /**\n   * Sets the value for the given key.\n   * @param key - The key to set.\n   * @param val - The value to set.\n   */\n  set(key: string, val: T): void {\n    if (this.cache.has(key)) {\n      this.cache.delete(key);\n    } else if (this.cache.size >= this.max) {\n      this.cache.delete(this.first());\n    }\n    this.cache.set(key, val);\n  }\n\n  /**\n   * Deletes the value for the given key.\n   * @param key - The key to delete.\n   */\n  delete(key: string): void {\n    this.cache.delete(key);\n  }\n\n  /**\n   * Returns the list of all keys in the cache.\n   * @returns The array of keys in the cache.\n   */\n  keys(): IterableIterator<string> {\n    return this.cache.keys();\n  }\n\n  private first(): string {\n    // This works because the Map class maintains ordered keys.\n    return this.cache.keys().next().value as string;\n  }\n}\n", "/**\n * Content type constants.\n */\nexport const ContentType = {\n  CSS: 'text/css',\n  DICOM: 'application/dicom',\n  FAVICON: 'image/vnd.microsoft.icon',\n  FHIR_JSON: 'application/fhir+json',\n  FORM_URL_ENCODED: 'application/x-www-form-urlencoded',\n  HL7_V2: 'x-application/hl7-v2+er7',\n  HTML: 'text/html',\n  JAVASCRIPT: 'text/javascript',\n  JSON: 'application/json',\n  JSON_PATCH: 'application/json-patch+json',\n  PNG: 'image/png',\n  SCIM_JSON: 'application/scim+json',\n  SVG: 'image/svg+xml',\n  TEXT: 'text/plain',\n  TYPESCRIPT: 'text/typescript',\n  PING: 'x-application/ping',\n} as const;\n", "/*\n * Based on: https://developer.mozilla.org/en-US/docs/Web/API/EventTarget\n */\n\nexport interface Event {\n  readonly type: string;\n  readonly defaultPrevented?: boolean;\n}\n\nexport type EventListener = (e: Event) => void;\n\nexport class EventTarget {\n  private readonly listeners: Record<string, EventListener[]>;\n\n  constructor() {\n    this.listeners = {};\n  }\n\n  addEventListener(type: string, callback: EventListener): void {\n    if (!this.listeners[type]) {\n      this.listeners[type] = [];\n    }\n    this.listeners[type].push(callback);\n  }\n\n  removeEventListener(type: string, callback: EventListener): void {\n    const array = this.listeners[type];\n    if (!array) {\n      return;\n    }\n    for (let i = 0; i < array.length; i++) {\n      if (array[i] === callback) {\n        array.splice(i, 1);\n        return;\n      }\n    }\n  }\n\n  dispatchEvent(event: Event): boolean {\n    const array = this.listeners[event.type];\n    if (array) {\n      for (const listener of array) {\n        listener.call(this, event);\n      }\n    }\n    return !event.defaultPrevented;\n  }\n\n  removeAllListeners(): void {\n    // @ts-expect-error Normally listeners is read-only. In this case we are dumping all listeners\n    this.listeners = {};\n  }\n}\n\nexport class TypedEventTarget<TEvents extends Record<string, Event>> {\n  private emitter = new EventTarget();\n\n  dispatchEvent<TEventType extends keyof TEvents & string>(event: TEvents[TEventType]): void {\n    this.emitter.dispatchEvent(event);\n  }\n\n  addEventListener<TEventType extends keyof TEvents & string>(\n    type: TEventType,\n    handler: (event: TEvents[TEventType]) => void\n  ): void {\n    this.emitter.addEventListener(type, handler as any);\n  }\n\n  removeEventListener<TEventType extends keyof TEvents & string>(\n    type: TEventType,\n    handler: (event: TEvents[TEventType]) => void\n  ): void {\n    this.emitter.removeEventListener(type, handler as any);\n  }\n\n  removeAllListeners(): void {\n    this.emitter.removeAllListeners();\n  }\n}\n", "import { Resource, ResourceType } from '@medplum/fhirtypes';\nimport { generateId } from '../crypto';\nimport { TypedEventTarget } from '../eventtarget';\nimport { OperationOutcomeError, validationError } from '../outcomes';\n\n// We currently try to satisfy both STU2 and STU3. Where STU3 removes a resource / key from STU2, we leave it in as a valid key but don't require it.\n\nexport const FHIRCAST_EVENT_NAMES = {\n  'Patient-open': 'Patient-open',\n  'Patient-close': 'Patient-close',\n  'ImagingStudy-open': 'ImagingStudy-open',\n  'ImagingStudy-close': 'ImagingStudy-close',\n  'Encounter-open': 'Encounter-open',\n  'Encounter-close': 'Encounter-close',\n  'DiagnosticReport-open': 'DiagnosticReport-open',\n  'DiagnosticReport-close': 'DiagnosticReport-close',\n  'DiagnosticReport-select': 'DiagnosticReport-select',\n  'DiagnosticReport-update': 'DiagnosticReport-update',\n  syncerror: 'syncerror',\n} as const;\n\nexport const FHIRCAST_RESOURCE_TYPES = [\n  'Patient',\n  'Encounter',\n  'ImagingStudy',\n  'DiagnosticReport',\n  'OperationOutcome',\n  'Bundle',\n] as const;\n\nexport const FHIRCAST_EVENT_VERSION_REQUIRED = ['DiagnosticReport-update'] as const;\nexport type FhircastEventVersionRequired = (typeof FHIRCAST_EVENT_VERSION_REQUIRED)[number];\nexport type FhircastEventVersionOptional = Exclude<FhircastEventName, FhircastEventVersionRequired>;\nexport function isContextVersionRequired(event: string): event is FhircastEventVersionRequired {\n  return (FHIRCAST_EVENT_VERSION_REQUIRED as readonly string[]).includes(event);\n}\nexport function assertContextVersionOptional(event: string): asserts event is FhircastEventVersionOptional {\n  if ((FHIRCAST_EVENT_VERSION_REQUIRED as readonly string[]).includes(event)) {\n    throw new OperationOutcomeError(validationError(`'context.version' is required for '${event}'.`));\n  }\n}\n\nexport type FhircastEventName = keyof typeof FHIRCAST_EVENT_NAMES;\nexport type FhircastResourceEventName = Exclude<FhircastEventName, 'syncerror'>;\nexport type FhircastResourceType = (typeof FHIRCAST_RESOURCE_TYPES)[number];\n\nexport type FhircastEventContextDetails = {\n  resourceType: FhircastResourceType | '*';\n  optional?: boolean; // NOTE: optional here is only referring to the schema, the spec often mentions that these are required if available as references for a given anchor resource\n  manyAllowed?: boolean;\n  isArray?: boolean;\n};\n\n// Key value pairs of { [FhircastEventName]: [required_resource1, required_resource2] }\nexport const FHIRCAST_EVENT_RESOURCES = {\n  'Patient-open': {\n    patient: { resourceType: 'Patient' },\n    /* STU2 only! `encounter` key removed in STU3 */\n    encounter: { resourceType: 'Encounter', optional: true },\n  },\n  'Patient-close': {\n    patient: { resourceType: 'Patient' },\n    /* STU2 only! `encounter` key removed in STU3 */\n    encounter: { resourceType: 'Encounter', optional: true },\n  },\n  'ImagingStudy-open': {\n    study: { resourceType: 'ImagingStudy' },\n    encounter: { resourceType: 'Encounter', optional: true },\n    patient: { resourceType: 'Patient', optional: true },\n  },\n  'ImagingStudy-close': {\n    study: { resourceType: 'ImagingStudy' },\n    encounter: { resourceType: 'Encounter', optional: true },\n    patient: { resourceType: 'Patient', optional: true },\n  },\n  'Encounter-open': {\n    encounter: { resourceType: 'Encounter' },\n    patient: { resourceType: 'Patient' },\n  },\n  'Encounter-close': {\n    encounter: { resourceType: 'Encounter' },\n    patient: { resourceType: 'Patient' },\n  },\n  'DiagnosticReport-open': {\n    report: { resourceType: 'DiagnosticReport' },\n    encounter: { resourceType: 'Encounter', optional: true },\n    study: { resourceType: 'ImagingStudy', optional: true, manyAllowed: true },\n    patient: { resourceType: 'Patient' },\n  },\n  'DiagnosticReport-close': {\n    report: { resourceType: 'DiagnosticReport' },\n    encounter: { resourceType: 'Encounter', optional: true },\n    study: { resourceType: 'ImagingStudy', optional: true, manyAllowed: true },\n    patient: { resourceType: 'Patient' },\n  },\n  'DiagnosticReport-select': {\n    report: { resourceType: 'DiagnosticReport' },\n    select: { resourceType: '*', isArray: true },\n  },\n  'DiagnosticReport-update': {\n    report: { resourceType: 'DiagnosticReport' },\n    patient: { resourceType: 'Patient', optional: true },\n    study: { resourceType: 'ImagingStudy', optional: true },\n    updates: { resourceType: 'Bundle' },\n  },\n  syncerror: {\n    operationoutcome: { resourceType: 'OperationOutcome' },\n  },\n} as const satisfies Record<FhircastEventName, Record<string, FhircastEventContextDetails>>;\n\n/**\n * Checks if a `ResourceType` can be used in a `FHIRcast` context.\n *\n * @param resourceType - A `ResourceType` to test.\n * @returns `true` if this is a resource type associated with `FHIRcast` contexts, otherwise returns `false`.\n */\nexport function isFhircastResourceType(resourceType: FhircastResourceType): boolean {\n  return FHIRCAST_RESOURCE_TYPES.includes(resourceType);\n}\n\n/**\n * A `FHIRcast` subscription request.\n *\n * Can be passed to `MedplumClient.fhircastConnect` or `MedplumClient.fhircastUnsubscribe` to either open a `FHIRcast` connection, or unsubscribe from the subscription.\n */\nexport type SubscriptionRequest = {\n  channelType: 'websocket';\n  mode: 'subscribe' | 'unsubscribe';\n  events: FhircastEventName[];\n  topic: string;\n  endpoint: string;\n};\n\nexport type CurrentContext<EventName extends FhircastResourceEventName = FhircastResourceEventName> = {\n  'context.type': ResourceType | '';\n  'context.versionId'?: string;\n  context: FhircastEventContext<EventName>[];\n};\n\nexport type PendingSubscriptionRequest = Omit<SubscriptionRequest, 'endpoint'>;\n\nexport type FhircastEventContextMap<EventName extends FhircastEventName = FhircastEventName> =\n  (typeof FHIRCAST_EVENT_RESOURCES)[EventName];\nexport type FhircastEventContextKey<EventName extends FhircastEventName = FhircastEventName> =\n  keyof FhircastEventContextMap<EventName>;\n\nexport type FhircastEventResourceType<\n  EventName extends FhircastEventName = FhircastEventName,\n  K extends FhircastEventContextKey<EventName> = FhircastEventContextKey<EventName>,\n> = FhircastEventContextMap<EventName>[K] extends infer _Ev extends FhircastEventContextDetails\n  ? _Ev['resourceType']\n  : never;\n\nexport type FhircastEventResource<\n  EventName extends FhircastEventName = FhircastEventName,\n  K extends FhircastEventContextKey<EventName> = FhircastEventContextKey<EventName>,\n> = FhircastEventContextMap<EventName>[K] extends infer _Ev extends FhircastEventContextDetails\n  ? FhircastEventResourceType<EventName, K> extends '*'\n    ? Resource & { id: string }\n    : Resource & { resourceType: FhircastEventResourceType<EventName, K>; id: string }\n  : never;\n\nexport type FhircastSingleResourceContext<\n  EventName extends FhircastEventName = FhircastEventName,\n  K extends FhircastEventContextKey<EventName> = FhircastEventContextKey<EventName>,\n> = { key: K; resource: FhircastEventResource<EventName, K> };\n\nexport type FhircastMultiResourceContext<\n  EventName extends FhircastEventName = FhircastEventName,\n  K extends FhircastEventContextKey<EventName> = FhircastEventContextKey<EventName>,\n> = { key: K; resources: FhircastEventResource<EventName, K>[] };\n\nexport type FhircastEventContext<\n  EventName extends FhircastEventName = FhircastEventName,\n  K extends FhircastEventContextKey<EventName> = FhircastEventContextKey<EventName>,\n> = FhircastEventContextMap<EventName>[K] extends infer _Ev extends FhircastEventContextDetails\n  ? _Ev['isArray'] extends true\n    ? FhircastMultiResourceContext<EventName, K>\n    : FhircastSingleResourceContext<EventName, K>\n  : never;\n\nexport type ConvertToUnion<T> = T[keyof T];\nexport type FhircastValidContextForEvent<EventName extends FhircastEventName = FhircastEventName> = ConvertToUnion<{\n  [key in FhircastEventContextKey<EventName>]: FhircastEventContext<EventName, key>;\n}>;\n\nexport type FhircastEventPayload<\n  EventName extends FhircastEventName = FhircastEventName,\n  K extends FhircastEventContextKey<EventName> = FhircastEventContextKey<EventName>,\n> = {\n  'hub.topic': string;\n  'hub.event': EventName;\n  context: FhircastEventContext<EventName, K>[];\n  'context.versionId'?: string;\n  'context.priorVersionId'?: string;\n};\n\nexport type FhircastMessagePayload<EventName extends FhircastEventName = FhircastEventName> = {\n  timestamp: string;\n  id: string;\n  event: FhircastEventPayload<EventName>;\n};\n\nexport function isCompletedSubscriptionRequest(\n  subscriptionRequest: SubscriptionRequest | PendingSubscriptionRequest\n): subscriptionRequest is SubscriptionRequest {\n  return !!(subscriptionRequest as SubscriptionRequest).endpoint;\n}\n\n/**\n * Creates a serialized url-encoded payload for a `FHIRcast` subscription from a `SubscriptionRequest` object that can be directly used in an HTTP request to the Hub.\n *\n * @param subscriptionRequest - An object representing a subscription request.\n * @returns A serialized subscription in url-encoded form.\n */\nexport function serializeFhircastSubscriptionRequest(\n  subscriptionRequest: SubscriptionRequest | PendingSubscriptionRequest\n): string {\n  if (!validateFhircastSubscriptionRequest(subscriptionRequest)) {\n    throw new OperationOutcomeError(\n      validationError('subscriptionRequest must be an object conforming to SubscriptionRequest type.')\n    );\n  }\n\n  const { channelType, mode, topic, events } = subscriptionRequest;\n\n  const formattedSubRequest = {\n    'hub.channel.type': channelType,\n    'hub.mode': mode,\n    'hub.topic': topic,\n    'hub.events': events.join(','),\n  } as Record<string, string>;\n\n  if (isCompletedSubscriptionRequest(subscriptionRequest)) {\n    formattedSubRequest.endpoint = subscriptionRequest.endpoint;\n  }\n  return new URLSearchParams(formattedSubRequest).toString();\n}\n\n/**\n * Validates that a `SubscriptionRequest`.\n *\n * @param subscriptionRequest - The `SubscriptionRequest` to validate.\n * @returns A `boolean` indicating whether or not the `SubscriptionRequest` is valid.\n */\nexport function validateFhircastSubscriptionRequest(\n  subscriptionRequest: SubscriptionRequest | PendingSubscriptionRequest\n): boolean {\n  if (typeof subscriptionRequest !== 'object') {\n    return false;\n  }\n  const { channelType, mode, topic, events } = subscriptionRequest;\n  if (!(channelType && mode && topic && events)) {\n    return false;\n  }\n  if (typeof topic !== 'string') {\n    return false;\n  }\n  if (typeof events !== 'object' || !Array.isArray(events) || events.length < 1) {\n    return false;\n  }\n  if (channelType !== 'websocket') {\n    return false;\n  }\n  if (mode !== 'subscribe' && mode !== 'unsubscribe') {\n    return false;\n  }\n  for (const event of events) {\n    if (!FHIRCAST_EVENT_NAMES[event]) {\n      return false;\n    }\n  }\n  if (\n    isCompletedSubscriptionRequest(subscriptionRequest) &&\n    !(typeof subscriptionRequest.endpoint === 'string' && subscriptionRequest.endpoint.startsWith('ws'))\n  ) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Throws if the context resource type is invalid. Intended as a helper for `validateFhircastContexts` only.\n *\n * @param event - The `FHIRcast` event name associated with the provided contexts.\n * @param resource - The `FHIRcast` event context resource to validate for given key.\n * @param i - The index of the current context in the context list.\n * @param keySchema - Schema for given key for FHIRcast event.\n */\nfunction validateSingleResourceContext<\n  EventName extends FhircastEventName,\n  K extends FhircastEventContextKey<EventName>,\n>(\n  event: EventName,\n  resource: FhircastEventResource<EventName, K>,\n  i: number,\n  keySchema: FhircastEventContextDetails\n): void {\n  if (typeof resource !== 'object') {\n    throw new OperationOutcomeError(\n      validationError(\n        `context[${i}] is invalid. Context must contain a single valid FHIR resource! Resource is not an object.`\n      )\n    );\n  }\n  if (!(resource.id && typeof resource.id === 'string')) {\n    throw new OperationOutcomeError(\n      validationError(`context[${i}] is invalid. Resource must contain a valid string ID.`)\n    );\n  }\n  if (!resource.resourceType) {\n    throw new OperationOutcomeError(\n      validationError(`context[${i}] is invalid. Resource must contain a resource type. No resource type found.`)\n    );\n  }\n  const expectedResourceType = keySchema.resourceType;\n  // Make sure that resource is a valid type for this event if expected is not wildcard\n  if (expectedResourceType !== '*') {\n    if (!isFhircastResourceType(resource.resourceType as FhircastResourceType)) {\n      throw new OperationOutcomeError(\n        validationError(\n          `context[${i}] is invalid. Resource must contain a valid FHIRcast resource type. Resource type is not a known resource type.`\n        )\n      );\n    }\n    if (expectedResourceType && resource.resourceType !== expectedResourceType) {\n      throw new OperationOutcomeError(\n        validationError(\n          `context[${i}] is invalid. context[${i}] for the '${event}' event should contain resource of type ${expectedResourceType}.`\n        )\n      );\n    }\n  }\n}\n\n/**\n * Throws if the context is invalid. Intended as a helper for `validateFhircastContexts` only.\n *\n * @param event - The `FHIRcast` event name associated with the provided contexts.\n * @param context - The `FHIRcast` event contexts to validate.\n * @param i - The index of the current context in the context list.\n * @param keySchema - Schema for given key for FHIRcast event.\n * @param keysSeen - Set of keys seen so far. Used to prevent duplicate keys.\n */\nfunction validateFhircastContext<EventName extends FhircastEventName>(\n  event: EventName,\n  context: FhircastEventContext<EventName>,\n  i: number,\n  keySchema: FhircastEventContextDetails,\n  keysSeen: Map<FhircastEventContextKey<EventName>, number>\n): void {\n  keysSeen.set(context.key, (keysSeen.get(context.key) ?? 0) + 1);\n\n  // Cases:\n  // 1. isArray, resourceType: *\n  //    Don't validate resource types, just check that they are resources\n  // 2. isArray, resourceType: not *\n  //    Validate all resources match resourceType\n  // 3. not isArray, resourceType: *\n  //    Validate that it is a resource\n  // not isArray, resourceType: not *\n  //    Validate that it matches expected resource type\n\n  if (!keySchema.isArray) {\n    // validateSingleResourceKey\n    validateSingleResourceContext(event, context.resource, i, keySchema);\n  } else {\n    // validateMultipleResourceKey\n    const { resources } = context as unknown as {\n      key: FhircastEventContextKey<EventName>;\n      resources: FhircastEventResource<EventName>[];\n    };\n    if (!resources) {\n      throw new OperationOutcomeError(\n        validationError(\n          `context[${i}] is invalid. context[${i}] for the '${event}' with key '${String(\n            context.key\n          )}' should contain an array of resources on the key 'resources'.`\n        )\n      );\n    }\n    for (const resource of resources) {\n      validateSingleResourceContext(event, resource, i, keySchema);\n    }\n  }\n}\n\n/**\n * Throws if any context in the given array of contexts is invalid.\n *\n * @param event - The `FHIRcast` event name associated with the provided contexts.\n * @param contexts - The `FHIRcast` event contexts to validate.\n */\nfunction validateFhircastContexts<EventName extends FhircastEventName>(\n  event: EventName,\n  contexts: FhircastEventContext<EventName>[]\n): void {\n  const keysSeen = new Map<FhircastEventContextKey, number>();\n  const eventSchema = FHIRCAST_EVENT_RESOURCES[event] as Record<FhircastEventContextKey, FhircastEventContextDetails>;\n  for (let i = 0; i < contexts.length; i++) {\n    const key = contexts[i].key as FhircastEventContextKey;\n    if (!eventSchema[key]) {\n      throw new OperationOutcomeError(\n        validationError(`Key '${key}' not found for event '${event}'. Make sure to add only valid keys.`)\n      );\n    }\n    validateFhircastContext(event, contexts[i], i, eventSchema[key], keysSeen);\n  }\n  // Iterate each key, if conditions for keys are not met as confirmed by `keysSeen` map, throw an error\n  for (const [key, details] of Object.entries(eventSchema) as [\n    FhircastEventContextKey,\n    FhircastEventContextDetails,\n  ][]) {\n    // If not optional and not keysSeen.has(key), throw\n    if (!(details.optional || keysSeen.has(key))) {\n      throw new OperationOutcomeError(\n        validationError(`Missing required key '${key}' on context for '${event}' event.`)\n      );\n    }\n    // If not multiple allowed and keySeen.get(key) > 1, throw\n    if (!details.manyAllowed && (keysSeen.get(key) || 0) > 1) {\n      throw new OperationOutcomeError(\n        validationError(\n          `${keysSeen.get(\n            key\n          )} context entries with key '${key}' found for the '${event}' event when schema only allows for 1.`\n        )\n      );\n    }\n  }\n}\n\n/**\n * Creates a serializable JSON payload for the `FHIRcast` protocol\n *\n * @param topic - The topic that this message will be published on. Usually a UUID.\n * @param event - The event name, ie. \"Patient-open\" or \"Patient-close\".\n * @param context - The updated context, containing new versions of resources related to this event.\n * @param versionId - The current `versionId` of the anchor context. For example, in `DiagnosticReport-update`, it's the `versionId` of the `DiagnosticReport`.\n * @returns A serializable `FhircastMessagePayload`.\n */\nexport function createFhircastMessagePayload<EventName extends FhircastEventVersionOptional>(\n  topic: string,\n  event: EventName,\n  context: FhircastValidContextForEvent<EventName> | FhircastValidContextForEvent<EventName>[],\n  versionId?: never\n): FhircastMessagePayload<EventName>;\n\nexport function createFhircastMessagePayload<EventName extends FhircastEventVersionRequired>(\n  topic: string,\n  event: EventName,\n  context: FhircastValidContextForEvent<EventName> | FhircastValidContextForEvent<EventName>[],\n  versionId: string\n): FhircastMessagePayload<EventName>;\n\nexport function createFhircastMessagePayload<\n  EventName extends FhircastEventVersionOptional | FhircastEventVersionRequired,\n>(\n  topic: string,\n  event: EventName,\n  context: FhircastValidContextForEvent<EventName> | FhircastValidContextForEvent<EventName>[],\n  versionId?: string\n): FhircastMessagePayload<EventName> {\n  if (!(topic && typeof topic === 'string')) {\n    throw new OperationOutcomeError(validationError('Must provide a topic.'));\n  }\n  if (!FHIRCAST_EVENT_NAMES[event]) {\n    throw new OperationOutcomeError(\n      validationError(\n        `Must provide a valid FHIRcast event name. Supported events: ${Object.keys(FHIRCAST_EVENT_NAMES).join(', ')}`\n      )\n    );\n  }\n  if (typeof context !== 'object') {\n    throw new OperationOutcomeError(validationError('context must be a context object or array of context objects.'));\n  }\n  if ((FHIRCAST_EVENT_VERSION_REQUIRED as readonly string[]).includes(event) && !versionId) {\n    throw new OperationOutcomeError(validationError(`The '${event}' event must contain a 'context.versionId'.`));\n  }\n  const normalizedContexts = Array.isArray(context) ? context : [context];\n  // This will throw if any context in the array is invalid\n  validateFhircastContexts(event, normalizedContexts);\n  return {\n    timestamp: new Date().toISOString(),\n    id: generateId(),\n    event: {\n      'hub.topic': topic,\n      'hub.event': event,\n      context: normalizedContexts,\n      ...(versionId ? { 'context.versionId': versionId } : {}),\n    },\n  };\n}\n\nexport type FhircastConnectEvent = { type: 'connect' };\nexport type FhircastMessageEvent = { type: 'message'; payload: FhircastMessagePayload };\nexport type FhircastDisconnectEvent = { type: 'disconnect' };\n\nexport type FhircastSubscriptionEventMap = {\n  connect: FhircastConnectEvent;\n  message: FhircastMessageEvent;\n  disconnect: FhircastDisconnectEvent;\n};\n\n/**\n * A class representing a `FHIRcast` connection.\n *\n * `FhircastConnection` extends `EventTarget` and emits 3 lifecycle events:\n * 1. `connect` - An event to signal when a WebSocket connection has been opened. Fired as soon as a WebSocket emits `open`.\n * 2. `message` - Contains a `payload` field containing a `FHIRcast` message payload exactly as it comes in over WebSockets.\n * 3. `disconnect` - An event to signal when a WebSocket connection has been closed. Fired as soon as a WebSocket emits `close`.\n *\n * To close the connection, call `connection.disconnect()` and listen to the `disconnect` event to know when the connection has been disconnected.\n */\nexport class FhircastConnection extends TypedEventTarget<FhircastSubscriptionEventMap> {\n  subRequest: SubscriptionRequest;\n  private websocket: WebSocket;\n\n  /**\n   * Creates a new `FhircastConnection`.\n   * @param subRequest - The subscription request to initialize the connection from.\n   */\n  constructor(subRequest: SubscriptionRequest) {\n    super();\n    this.subRequest = subRequest;\n    if (!subRequest.endpoint) {\n      throw new OperationOutcomeError(validationError('Subscription request should contain an endpoint.'));\n    }\n    if (!validateFhircastSubscriptionRequest(subRequest)) {\n      throw new OperationOutcomeError(validationError('Subscription request failed validation.'));\n    }\n    const websocket = new WebSocket(subRequest.endpoint);\n    websocket.addEventListener('open', () => {\n      this.dispatchEvent({ type: 'connect' });\n\n      websocket.addEventListener('message', (event: MessageEvent) => {\n        const message = JSON.parse(event.data) as Record<string, string | object>;\n\n        // This is a check for `subscription request confirmations`, we just discard these for now\n        if (message['hub.topic']) {\n          return;\n        }\n\n        const fhircastMessage = message as unknown as FhircastMessagePayload;\n        // Don't bubble up heartbeats, they are just noise\n        if (fhircastMessage.event['hub.event'] === ('heartbeat' as unknown as FhircastEventName)) {\n          return;\n        }\n        this.dispatchEvent({ type: 'message', payload: fhircastMessage });\n\n        websocket.send(\n          JSON.stringify({\n            id: message?.id,\n            timestamp: new Date().toISOString(),\n          })\n        );\n      });\n\n      websocket.addEventListener('close', () => {\n        this.dispatchEvent({ type: 'disconnect' });\n      });\n    });\n    this.websocket = websocket;\n  }\n\n  disconnect(): void {\n    this.websocket.close();\n  }\n}\n", "import { decodeBase64 } from './base64';\n\n/**\n * Decodes a section of a JWT.\n * See: https://tools.ietf.org/html/rfc7519\n * @param payload - The JWT payload string.\n * @returns Collection of key value claims in the JWT payload.\n */\nfunction decodePayload(payload: string): Record<string, number | string> {\n  const cleanedPayload = payload.replace(/-/g, '+').replace(/_/g, '/');\n  const decodedPayload = decodeBase64(cleanedPayload);\n  const uriEncodedPayload = Array.from(decodedPayload).reduce((acc, char) => {\n    const uriEncodedChar = ('00' + char.charCodeAt(0).toString(16)).slice(-2);\n    return `${acc}%${uriEncodedChar}`;\n  }, '');\n  const jsonPayload = decodeURIComponent(uriEncodedPayload);\n  return JSON.parse(jsonPayload);\n}\n\n/**\n * Returns true if the token is a JWT.\n * @param token - The potential JWT token.\n * @returns True if the token is a JWT.\n */\nexport function isJwt(token: string): boolean {\n  return token.split('.').length === 3;\n}\n\n/**\n * Parses the JWT payload.\n * @param token - JWT token.\n * @returns Collection of key value claims in the JWT payload.\n */\nexport function parseJWTPayload(token: string): Record<string, number | string> {\n  const [_header, payload, _signature] = token.split('.');\n  return decodePayload(payload);\n}\n\n/**\n * Returns true if the access token was issued by a Medplum server.\n * @param accessToken - An access token of unknown origin.\n * @returns True if the access token was issued by a Medplum server.\n */\nexport function isMedplumAccessToken(accessToken: string): boolean {\n  try {\n    const payload = parseJWTPayload(accessToken);\n    return typeof payload.login_id === 'string';\n  } catch (_err) {\n    return false;\n  }\n}\n\n/**\n * Returns the JWT expiration time in number of milliseconds elapsed since the epoch.\n * @param token - The JWT token.\n * @returns The JWT expiration time in number of milliseconds elapsed since the epoch if available, undefined if unknown.\n */\nexport function tryGetJwtExpiration(token: string): number | undefined {\n  try {\n    const payload = parseJWTPayload(token);\n    const exp = payload.exp;\n    if (typeof exp === 'number') {\n      return exp * 1000;\n    }\n    return undefined;\n  } catch (_err) {\n    return undefined;\n  }\n}\n", "import { MedplumClient } from './client';\nimport { ContentType } from './contenttype';\n\nexport class MedplumKeyValueClient {\n  constructor(readonly medplum: MedplumClient) {}\n\n  /**\n   * Gets the value for the given key from the keyvalue store.\n   * @param key - The key to get the value for.\n   * @returns The value for the given key.\n   */\n  async get(key: string): Promise<string | undefined> {\n    return this.medplum.get(`keyvalue/v1/${key}`);\n  }\n\n  /**\n   * Sets the value for the given key in the keyvalue store.\n   * @param key - The key to set the value for.\n   * @param value - The value to set.\n   */\n  async set(key: string, value: string): Promise<void> {\n    await this.medplum.put(`keyvalue/v1/${key}`, value, ContentType.TEXT);\n  }\n\n  /**\n   * Deletes the value for the given key from the keyvalue store.\n   * @param key - The key to delete the value for.\n   */\n  async delete(key: string): Promise<void> {\n    await this.medplum.delete(`keyvalue/v1/${key}`);\n  }\n}\n", "/**\n * The ReadablePromise class wraps a request promise suitable for React Suspense.\n * See: https://blog.logrocket.com/react-suspense-data-fetching/#wrappromise-js\n * See: https://github.com/ovieokeh/suspense-data-fetching/blob/master/lib/api/wrapPromise.js\n */\nexport class ReadablePromise<T> implements Promise<T> {\n  readonly [Symbol.toStringTag]: string = 'ReadablePromise';\n  private suspender: Promise<T>;\n  private status: 'pending' | 'error' | 'success' = 'pending';\n  private response: T | undefined;\n  private error: Error | undefined;\n\n  constructor(requestPromise: Promise<T>) {\n    this.suspender = requestPromise.then(\n      (res: T) => {\n        this.status = 'success';\n        this.response = res;\n        return res;\n      },\n      (err: any) => {\n        this.status = 'error';\n        this.error = err;\n        throw err;\n      }\n    );\n  }\n\n  /**\n   * Returns true if the promise is pending.\n   * @returns True if the Promise is pending.\n   */\n  isPending(): boolean {\n    return this.status === 'pending';\n  }\n\n  /**\n   * Returns true if the promise resolved successfully.\n   * @returns True if the Promise resolved successfully.\n   */\n  isOk(): boolean {\n    return this.status === 'success';\n  }\n\n  /**\n   * Attempts to read the value of the promise.\n   * If the promise is pending, this method will throw a promise.\n   * If the promise rejected, this method will throw the rejection reason.\n   * If the promise resolved, this method will return the resolved value.\n   * @returns The resolved value of the Promise.\n   */\n  read(): T {\n    switch (this.status) {\n      case 'pending':\n        throw this.suspender;\n      case 'error':\n        throw this.error;\n      default:\n        return this.response as T;\n    }\n  }\n\n  /**\n   * Attaches callbacks for the resolution and/or rejection of the Promise.\n   * @param onfulfilled - The callback to execute when the Promise is resolved.\n   * @param onrejected - The callback to execute when the Promise is rejected.\n   * @returns A Promise for the completion of which ever callback is executed.\n   */\n  then<TResult1 = T, TResult2 = never>(\n    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | null,\n    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | null\n  ): Promise<TResult1 | TResult2> {\n    return this.suspender.then(onfulfilled, onrejected);\n  }\n\n  /**\n   * Attaches a callback for only the rejection of the Promise.\n   * @param onrejected - The callback to execute when the Promise is rejected.\n   * @returns A Promise for the completion of the callback.\n   */\n  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | null): Promise<T | TResult> {\n    return this.suspender.catch(onrejected);\n  }\n\n  /**\n   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The\n   * resolved value cannot be modified from the callback.\n   * @param onfinally - The callback to execute when the Promise is settled (fulfilled or rejected).\n   * @returns A Promise for the completion of the callback.\n   */\n  finally(onfinally?: (() => void) | null): Promise<T> {\n    return this.suspender.finally(onfinally);\n  }\n}\n", "import { stringify } from './utils';\n\nexport interface IClientStorage {\n  getInitPromise?(): Promise<void>;\n  clear(): void;\n  getString(key: string): string | undefined;\n  setString(key: string, value: string | undefined): void;\n  getObject<T>(key: string): T | undefined;\n  setObject<T>(key: string, value: T): void;\n}\n\n/**\n * The ClientStorage class is a utility class for storing strings and objects.\n *\n * When using MedplumClient in the browser, it will be backed by browser localStorage.\n *\n * When Using MedplumClient in the server, it will be backed by the MemoryStorage class.  For example, the Medplum CLI uses `FileSystemStorage`.\n */\nexport class ClientStorage implements IClientStorage {\n  private readonly storage: Storage;\n\n  constructor(storage?: Storage) {\n    this.storage = storage ?? (typeof localStorage !== 'undefined' ? localStorage : new MemoryStorage());\n  }\n\n  clear(): void {\n    this.storage.clear();\n  }\n\n  getString(key: string): string | undefined {\n    return this.storage.getItem(key) ?? undefined;\n  }\n\n  setString(key: string, value: string | undefined): void {\n    if (value) {\n      this.storage.setItem(key, value);\n    } else {\n      this.storage.removeItem(key);\n    }\n  }\n\n  getObject<T>(key: string): T | undefined {\n    const str = this.getString(key);\n    return str ? (JSON.parse(str) as T) : undefined;\n  }\n\n  setObject<T>(key: string, value: T): void {\n    this.setString(key, value ? stringify(value) : undefined);\n  }\n}\n\n/**\n * The MemoryStorage class is a minimal in-memory implementation of the Storage interface.\n */\nexport class MemoryStorage implements Storage {\n  private data: Map<string, string>;\n\n  constructor() {\n    this.data = new Map<string, string>();\n  }\n\n  /**\n   * Returns the number of key/value pairs.\n   * @returns The number of key/value pairs.\n   */\n  get length(): number {\n    return this.data.size;\n  }\n\n  /**\n   * Removes all key/value pairs, if there are any.\n   */\n  clear(): void {\n    this.data.clear();\n  }\n\n  /**\n   * Returns the current value associated with the given key, or null if the given key does not exist.\n   * @param key - The specified storage key.\n   * @returns The current value associated with the given key, or null if the given key does not exist.\n   */\n  getItem(key: string): string | null {\n    return this.data.get(key) ?? null;\n  }\n\n  /**\n   * Sets the value of the pair identified by key to value, creating a new key/value pair if none existed for key previously.\n   * @param key - The storage key.\n   * @param value - The new value.\n   */\n  setItem(key: string, value: string | null): void {\n    if (value) {\n      this.data.set(key, value);\n    } else {\n      this.data.delete(key);\n    }\n  }\n\n  /**\n   * Removes the key/value pair with the given key, if a key/value pair with the given key exists.\n   * @param key - The storage key.\n   */\n  removeItem(key: string): void {\n    this.data.delete(key);\n  }\n\n  /**\n   * Returns the name of the nth key, or null if n is greater than or equal to the number of key/value pairs.\n   * @param index - The numeric index.\n   * @returns The nth key.\n   */\n  key(index: number): string | null {\n    return Array.from(this.data.keys())[index];\n  }\n}\n\n/**\n * The MockAsyncClientStorage class is a mock implementation of the ClientStorage class.\n * This can be used for testing async initialization of the MedplumClient.\n */\nexport class MockAsyncClientStorage extends ClientStorage implements IClientStorage {\n  private initialized: boolean;\n  private initPromise: Promise<void>;\n  private initResolve: () => void = () => undefined;\n\n  constructor() {\n    super();\n    this.initialized = false;\n    this.initPromise = new Promise((resolve) => {\n      this.initResolve = resolve;\n    });\n  }\n\n  setInitialized(): void {\n    if (!this.initialized) {\n      this.initResolve();\n      this.initialized = true;\n    }\n  }\n\n  getInitPromise(): Promise<void> {\n    return this.initPromise;\n  }\n\n  get isInitialized(): boolean {\n    return this.initialized;\n  }\n}\n", "import { TypedEventTarget } from '../eventtarget';\n\n/*!\n * Reconnecting WebSocket\n * by Pedro Ladaria <pedro.ladaria@gmail.com>\n * https://github.com/pladaria/reconnecting-websocket\n * License MIT\n *\n * Copy of \"partysocket\" from Partykit team, a fork of the original \"Reconnecting WebSocket\"\n * https://github.com/partykit/partykit/blob/main/packages/partysocket\n */\n\nexport interface IReconnectingWebSocket extends TypedEventTarget<WebSocketEventMap> {\n  readyState: number;\n  close(code?: number, reason?: string): void;\n  send(message: string): void;\n  reconnect(code?: number, reason?: string): void;\n}\n\nexport interface IReconnectingWebSocketCtor {\n  new (url: string, protocols?: ProtocolsProvider, options?: Options): IReconnectingWebSocket;\n}\n\nexport interface ErrorEvent extends globalThis.Event {\n  message: string;\n  error: Error;\n}\n\nexport interface CloseEvent extends globalThis.Event {\n  code: number;\n  reason: string;\n  wasClean: boolean;\n}\n\nexport type WebSocketEventMap = {\n  close: CloseEvent;\n  error: ErrorEvent;\n  message: MessageEvent;\n  open: Event;\n};\n\n/**\n * This map exists separately from `WebSocketEventMap`, which is the actual event map used for the `ReconnectingWebSocket` class itself,\n * due to slight difference in the type between the events as we use them, and the events as they exist as global interfaces. We need the global interfaces\n * to be generic enough to satisfy conformant implementations that don't exactly match the events we export and use in `ReconnectingWebSocket` itself.\n */\nexport type IWebSocketEventMap = {\n  close: globalThis.CloseEvent;\n  error: globalThis.ErrorEvent;\n  message: globalThis.MessageEvent;\n  open: Event;\n};\n\n/**\n * Generic interface that an implementation of `WebSocket` must satisfy to be used with `ReconnectingWebSocket`.\n * This is a slightly modified fork of the `WebSocket` global type used in Node.\n *\n * The main key difference is making all the `onclose`, `onerror`, etc. functions have `any[]` args, making `data` in `send()` of type `any`, and making `binaryType` of type string,\n * though the particular implementation should narrow each of these implementation-specific types.\n */\nexport interface IWebSocket {\n  binaryType: string;\n\n  readonly bufferedAmount: number;\n  readonly extensions: string;\n\n  onclose: ((...args: any[]) => any) | null;\n  onerror: ((...args: any[]) => any) | null;\n  onmessage: ((...args: any[]) => any) | null;\n  onopen: ((...args: any[]) => any) | null;\n\n  readonly protocol: string;\n  readonly readyState: number;\n  readonly url: string;\n\n  close(code?: number, reason?: string): void;\n  send(data: any): void;\n\n  readonly CLOSED: number;\n  readonly CLOSING: number;\n  readonly CONNECTING: number;\n  readonly OPEN: number;\n\n  addEventListener<K extends keyof WebSocketEventMap>(\n    type: K,\n    listener: (ev: WebSocketEventMap[K]) => any,\n    options?: boolean | AddEventListenerOptions\n  ): void;\n  addEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | AddEventListenerOptions\n  ): void;\n  removeEventListener<K extends keyof WebSocketEventMap>(\n    type: K,\n    listener: (ev: WebSocketEventMap[K]) => any,\n    options?: boolean | EventListenerOptions\n  ): void;\n  removeEventListener(\n    type: string,\n    listener: EventListenerOrEventListenerObject,\n    options?: boolean | EventListenerOptions\n  ): void;\n}\n\nconst Events = {\n  Event: (typeof globalThis.Event !== 'undefined' ? globalThis.Event : undefined) as\n    | typeof globalThis.Event\n    | undefined,\n  ErrorEvent: undefined as any,\n  CloseEvent: undefined as any,\n};\n\nlet eventsInitialized = false;\n\nfunction lazyInitEvents(): void {\n  if (typeof globalThis.Event === 'undefined') {\n    throw new Error('Unable to lazy init events for ReconnectingWebSocket. globalThis.Event is not defined yet');\n  }\n\n  Events.Event = globalThis.Event;\n\n  Events.ErrorEvent = class ErrorEvent extends Event implements ErrorEvent {\n    public message: string;\n    public error: Error;\n    constructor(error: Error, target: any) {\n      super('error', target);\n      this.message = error.message;\n      this.error = error;\n    }\n  } as unknown as typeof globalThis.ErrorEvent;\n\n  Events.CloseEvent = class CloseEvent extends Event implements CloseEvent {\n    public code: number;\n    public reason: string;\n    public wasClean = true;\n    // eslint-disable-next-line default-param-last\n    constructor(code = 1000, reason = '', target: any) {\n      super('close', target);\n      this.code = code;\n      this.reason = reason;\n    }\n  } as unknown as typeof globalThis.CloseEvent;\n}\n\nexport function assert(condition: unknown, msg?: string): asserts condition {\n  if (!condition) {\n    throw new Error(msg);\n  }\n}\n\nfunction cloneEvent(e: Event): Event {\n  return new (e as any).constructor(e.type, e);\n}\n\nexport type Options<WS extends IWebSocket = WebSocket> = {\n  WebSocket?: any;\n  binaryType?: WS['binaryType'];\n  maxReconnectionDelay?: number;\n  minReconnectionDelay?: number;\n  reconnectionDelayGrowFactor?: number;\n  minUptime?: number;\n  connectionTimeout?: number;\n  maxRetries?: number;\n  maxEnqueuedMessages?: number;\n  startClosed?: boolean;\n  debug?: boolean;\n  debugLogger?: (...args: any[]) => void;\n};\n\nconst DEFAULT = {\n  maxReconnectionDelay: 10000,\n  minReconnectionDelay: 1000 + Math.random() * 4000,\n  minUptime: 5000,\n  reconnectionDelayGrowFactor: 1.3,\n  connectionTimeout: 4000,\n  maxRetries: Infinity,\n  maxEnqueuedMessages: Infinity,\n  startClosed: false,\n  debug: false,\n};\n\nexport type ProtocolsProvider = null | string | string[];\n\nexport type Message = string | ArrayBuffer | Blob | ArrayBufferView;\n\nlet didWarnAboutMissingWebSocket = false;\n\nexport class ReconnectingWebSocket<WS extends IWebSocket = WebSocket>\n  extends TypedEventTarget<WebSocketEventMap>\n  implements IReconnectingWebSocket\n{\n  private _ws: IWebSocket | undefined;\n  private _retryCount = -1;\n  private _uptimeTimeout: ReturnType<typeof setTimeout> | undefined;\n  private _connectTimeout: ReturnType<typeof setTimeout> | undefined;\n  private _shouldReconnect = true;\n  private _connectLock = false;\n  private _binaryType: WS['binaryType'];\n  private _closeCalled = false;\n  private _messageQueue: Message[] = [];\n\n  private _debugLogger = console.log.bind(console);\n\n  protected _url: string;\n  protected _protocols?: ProtocolsProvider;\n  protected _options: Options<WS>;\n\n  constructor(url: string, protocols?: ProtocolsProvider, options: Options<WS> = {}) {\n    // Initialize all events if they haven't been created yet\n    if (!eventsInitialized) {\n      lazyInitEvents();\n      eventsInitialized = true;\n    }\n\n    super();\n    this._url = url;\n    this._protocols = protocols;\n    this._options = options;\n    if (this._options.startClosed) {\n      this._shouldReconnect = false;\n    }\n    if (this._options.binaryType) {\n      this._binaryType = this._options.binaryType;\n    } else {\n      this._binaryType = 'blob';\n    }\n    if (this._options.debugLogger) {\n      this._debugLogger = this._options.debugLogger;\n    }\n    this._connect();\n  }\n\n  static get CONNECTING(): number {\n    return 0;\n  }\n  static get OPEN(): number {\n    return 1;\n  }\n  static get CLOSING(): number {\n    return 2;\n  }\n  static get CLOSED(): number {\n    return 3;\n  }\n\n  get CONNECTING(): number {\n    return ReconnectingWebSocket.CONNECTING;\n  }\n  get OPEN(): number {\n    return ReconnectingWebSocket.OPEN;\n  }\n  get CLOSING(): number {\n    return ReconnectingWebSocket.CLOSING;\n  }\n  get CLOSED(): number {\n    return ReconnectingWebSocket.CLOSED;\n  }\n\n  get binaryType(): WS['binaryType'] {\n    return this._ws ? this._ws.binaryType : this._binaryType;\n  }\n\n  set binaryType(value: WS['binaryType']) {\n    this._binaryType = value;\n    if (this._ws) {\n      this._ws.binaryType = value;\n    }\n  }\n\n  /**\n   * @returns The number or connection retries.\n   */\n  get retryCount(): number {\n    return Math.max(this._retryCount, 0);\n  }\n\n  /**\n   * @returns The number of bytes of data that have been queued using calls to send() but not yet\n   * transmitted to the network. This value resets to zero once all queued data has been sent.\n   * This value does not reset to zero when the connection is closed; if you keep calling send(),\n   * this will continue to climb. Read only\n   *\n   */\n  get bufferedAmount(): number {\n    const bytes = this._messageQueue.reduce((acc, message) => {\n      if (typeof message === 'string') {\n        acc += message.length; // not byte size\n      } else if (message instanceof Blob) {\n        acc += message.size;\n      } else {\n        acc += message.byteLength;\n      }\n      return acc;\n    }, 0);\n    return bytes + (this._ws?.bufferedAmount ?? 0);\n  }\n\n  /**\n   * @returns The extensions selected by the server. This is currently only the empty string or a list of\n   * extensions as negotiated by the connection\n   */\n  get extensions(): string {\n    return this._ws?.extensions ?? '';\n  }\n\n  /**\n   * @returns A string indicating the name of the sub-protocol the server selected;\n   * this will be one of the strings specified in the protocols parameter when creating the\n   * WebSocket object.\n   */\n  get protocol(): string {\n    return this._ws?.protocol ?? '';\n  }\n\n  /**\n   * @returns The current state of the connection; this is one of the Ready state constants.\n   */\n  get readyState(): number {\n    if (this._ws) {\n      return this._ws.readyState;\n    }\n    return this._options.startClosed ? ReconnectingWebSocket.CLOSED : ReconnectingWebSocket.CONNECTING;\n  }\n\n  /**\n   * @returns The URL as resolved by the constructor.\n   */\n  get url(): string {\n    return this._ws ? this._ws.url : '';\n  }\n\n  /**\n   * @returns Whether the websocket object is now in reconnectable state.\n   */\n  get shouldReconnect(): boolean {\n    return this._shouldReconnect;\n  }\n\n  /**\n   * An event listener to be called when the WebSocket connection's readyState changes to CLOSED\n   */\n  public onclose: ((event: CloseEvent) => void) | null = null;\n\n  /**\n   * An event listener to be called when an error occurs\n   */\n  public onerror: ((event: ErrorEvent) => void) | null = null;\n\n  /**\n   * An event listener to be called when a message is received from the server\n   */\n  public onmessage: ((event: MessageEvent) => void) | null = null;\n\n  /**\n   * An event listener to be called when the WebSocket connection's readyState changes to OPEN;\n   * this indicates that the connection is ready to send and receive data\n   */\n  public onopen: ((event: Event) => void) | null = null;\n\n  /**\n   * Closes the WebSocket connection or connection attempt, if any. If the connection is already\n   * CLOSED, this method does nothing\n   * @param code - The code to close with. Default is 1000.\n   * @param reason - An optional reason for closing the connection.\n   */\n  // eslint-disable-next-line default-param-last\n  public close(code = 1000, reason?: string): void {\n    this._closeCalled = true;\n    this._shouldReconnect = false;\n    this._clearTimeouts();\n    if (!this._ws) {\n      this._debug('close enqueued: no ws instance');\n      return;\n    }\n    if (this._ws.readyState === this.CLOSED) {\n      this._debug('close: already closed');\n      return;\n    }\n    this._ws.close(code, reason);\n  }\n\n  /**\n   * Closes the WebSocket connection or connection attempt and connects again.\n   * Resets retry counter;\n   * @param code - The code to disconnect with. Default is 1000.\n   * @param reason - An optional reason for disconnecting the connection.\n   */\n  public reconnect(code?: number, reason?: string): void {\n    this._shouldReconnect = true;\n    this._closeCalled = false;\n    this._retryCount = -1;\n    if (!this._ws || this._ws.readyState === this.CLOSED) {\n      this._connect();\n    } else {\n      this._disconnect(code, reason);\n      this._connect();\n    }\n  }\n\n  /**\n   * Enqueue specified data to be transmitted to the server over the WebSocket connection\n   * @param data - The data to enqueue.\n   */\n  public send(data: Message): void {\n    if (this._ws && this._ws.readyState === this.OPEN) {\n      this._debug('send', data);\n      this._ws.send(data);\n    } else {\n      const { maxEnqueuedMessages = DEFAULT.maxEnqueuedMessages } = this._options;\n      if (this._messageQueue.length < maxEnqueuedMessages) {\n        this._debug('enqueue', data);\n        this._messageQueue.push(data);\n      }\n    }\n  }\n\n  private _debug(...args: unknown[]): void {\n    if (this._options.debug) {\n      this._debugLogger('RWS>', ...args);\n    }\n  }\n\n  private _getNextDelay(): number {\n    const {\n      reconnectionDelayGrowFactor = DEFAULT.reconnectionDelayGrowFactor,\n      minReconnectionDelay = DEFAULT.minReconnectionDelay,\n      maxReconnectionDelay = DEFAULT.maxReconnectionDelay,\n    } = this._options;\n    let delay = 0;\n    if (this._retryCount > 0) {\n      delay = minReconnectionDelay * Math.pow(reconnectionDelayGrowFactor, this._retryCount - 1);\n      if (delay > maxReconnectionDelay) {\n        delay = maxReconnectionDelay;\n      }\n    }\n    this._debug('next delay', delay);\n    return delay;\n  }\n\n  private _wait(): Promise<void> {\n    return new Promise((resolve) => {\n      setTimeout(resolve, this._getNextDelay());\n    });\n  }\n\n  private _connect(): void {\n    if (this._connectLock || !this._shouldReconnect) {\n      return;\n    }\n    this._connectLock = true;\n\n    const { maxRetries = DEFAULT.maxRetries, connectionTimeout = DEFAULT.connectionTimeout } = this._options;\n\n    if (this._retryCount >= maxRetries) {\n      this._debug('max retries reached', this._retryCount, '>=', maxRetries);\n      return;\n    }\n\n    this._retryCount++;\n\n    this._debug('connect', this._retryCount);\n    this._removeListeners();\n\n    this._wait()\n      .then(() => {\n        // close could be called before creating the ws\n        if (this._closeCalled) {\n          this._connectLock = false;\n          return;\n        }\n        if (!this._options.WebSocket && typeof WebSocket === 'undefined' && !didWarnAboutMissingWebSocket) {\n          console.error('\u203C\uFE0F No WebSocket implementation available. You should define options.WebSocket.');\n          didWarnAboutMissingWebSocket = true;\n        }\n        const WS: typeof WebSocket = this._options.WebSocket || WebSocket;\n        this._debug('connect', { url: this._url, protocols: this._protocols });\n        this._ws = this._protocols ? new WS(this._url, this._protocols) : new WS(this._url);\n\n        this._ws.binaryType = this._binaryType;\n        this._connectLock = false;\n        this._addListeners();\n\n        this._connectTimeout = setTimeout(() => this._handleTimeout(), connectionTimeout);\n      })\n      // via https://github.com/pladaria/reconnecting-websocket/pull/166\n      .catch((err) => {\n        this._connectLock = false;\n        this._handleError(new Events.ErrorEvent(Error(err.message), this));\n      });\n  }\n\n  private _handleTimeout(): void {\n    this._debug('timeout event');\n    this._handleError(new Events.ErrorEvent(Error('TIMEOUT'), this));\n  }\n\n  // eslint-disable-next-line default-param-last\n  private _disconnect(code = 1000, reason?: string): void {\n    this._clearTimeouts();\n    if (!this._ws) {\n      return;\n    }\n    this._removeListeners();\n    try {\n      this._ws.close(code, reason);\n      this._handleClose(new Events.CloseEvent(code, reason, this));\n    } catch (_error) {\n      // ignore\n    }\n  }\n\n  private _acceptOpen(): void {\n    this._debug('accept open');\n    this._retryCount = 0;\n  }\n\n  private _handleOpen = (event: Event): void => {\n    this._debug('open event');\n    const { minUptime = DEFAULT.minUptime } = this._options;\n\n    clearTimeout(this._connectTimeout);\n    this._uptimeTimeout = setTimeout(() => this._acceptOpen(), minUptime);\n\n    assert(this._ws, 'WebSocket is not defined');\n\n    this._ws.binaryType = this._binaryType;\n\n    // send enqueued messages (messages sent before websocket open event)\n    this._messageQueue.forEach((message) => this._ws?.send(message));\n    this._messageQueue = [];\n\n    if (this.onopen) {\n      this.onopen(event);\n    }\n    this.dispatchEvent(cloneEvent(event));\n  };\n\n  private _handleMessage = (event: MessageEvent): void => {\n    this._debug('message event');\n\n    if (this.onmessage) {\n      this.onmessage(event);\n    }\n    this.dispatchEvent(cloneEvent(event));\n  };\n\n  private _handleError = (event: ErrorEvent): void => {\n    this._debug('error event', event.message);\n    this._disconnect(undefined, event.message === 'TIMEOUT' ? 'timeout' : undefined);\n\n    if (this.onerror) {\n      this.onerror(event);\n    }\n    this._debug('exec error listeners');\n    this.dispatchEvent(cloneEvent(event));\n\n    this._connect();\n  };\n\n  private _handleClose = (event: CloseEvent): void => {\n    this._debug('close event');\n    this._clearTimeouts();\n\n    if (this._shouldReconnect) {\n      this._connect();\n    }\n\n    if (this.onclose) {\n      this.onclose(event);\n    }\n    this.dispatchEvent(cloneEvent(event));\n  };\n\n  private _removeListeners(): void {\n    if (!this._ws) {\n      return;\n    }\n    this._debug('removeListeners');\n    this._ws.removeEventListener('open', this._handleOpen);\n    this._ws.removeEventListener('close', this._handleClose);\n    this._ws.removeEventListener('message', this._handleMessage);\n    this._ws.removeEventListener('error', this._handleError);\n  }\n\n  private _addListeners(): void {\n    if (!this._ws) {\n      return;\n    }\n    this._debug('addListeners');\n    this._ws.addEventListener('open', this._handleOpen);\n    this._ws.addEventListener('close', this._handleClose);\n    this._ws.addEventListener('message', this._handleMessage);\n    this._ws.addEventListener('error', this._handleError);\n  }\n\n  private _clearTimeouts(): void {\n    clearTimeout(this._connectTimeout);\n    clearTimeout(this._uptimeTimeout);\n  }\n}\n", "import { Bundle, Parameters, Resource, Subscription, SubscriptionStatus } from '@medplum/fhirtypes';\nimport { MedplumClient } from '../client';\nimport { TypedEventTarget } from '../eventtarget';\nimport { evalFhirPathTyped } from '../fhirpath/parse';\nimport { toTypedValue } from '../fhirpath/utils';\nimport { Logger } from '../logger';\nimport { normalizeErrorString, OperationOutcomeError, serverError, validationError } from '../outcomes';\nimport { matchesSearchRequest } from '../search/match';\nimport { parseSearchRequest } from '../search/search';\nimport { deepEquals, getExtension, getReferenceString, ProfileResource, resolveId } from '../utils';\nimport {\n  IReconnectingWebSocket,\n  IReconnectingWebSocketCtor,\n  ReconnectingWebSocket,\n} from '../websockets/reconnecting-websocket';\n\nconst DEFAULT_PING_INTERVAL_MS = 5_000;\n\nexport type SubscriptionEventMap = {\n  connect: { type: 'connect'; payload: { subscriptionId: string } };\n  disconnect: { type: 'disconnect'; payload: { subscriptionId: string } };\n  error: { type: 'error'; payload: Error };\n  message: { type: 'message'; payload: Bundle };\n  open: { type: 'open' };\n  close: { type: 'close' };\n  heartbeat: { type: 'heartbeat'; payload: Bundle };\n};\n\n/**\n * An `EventTarget` that emits events when new subscription notifications come in over WebSockets.\n *\n * -----\n *\n * ### Events emitted:\n *\n * - `connect` - A new subscription is connected to the `SubscriptionManager` and `message` events for this subscription can be expected.\n * - `disconnect` - The specified subscription is no longer being monitored by the `SubscriptionManager`.\n * - `error` - An error has occurred.\n * - `message` - A message containing a notification `Bundle` has been received.\n * - `open` - The WebSocket has been opened.\n * - `close` - The WebSocket has been closed.\n * - `heartbeat` - A `heartbeat` message has been received.\n */\nexport class SubscriptionEmitter extends TypedEventTarget<SubscriptionEventMap> {\n  private criteria: Set<string>;\n  constructor(...criteria: string[]) {\n    super();\n    this.criteria = new Set(criteria);\n  }\n  getCriteria(): Set<string> {\n    return this.criteria;\n  }\n  /**\n   * @internal\n   * @param criteria - The criteria to add to this `SubscriptionEmitter`.\n   */\n  _addCriteria(criteria: string): void {\n    this.criteria.add(criteria);\n  }\n  /**\n   * @internal\n   * @param criteria - The criteria to remove from this `SubscriptionEmitter`.\n   */\n  _removeCriteria(criteria: string): void {\n    this.criteria.delete(criteria);\n  }\n}\n\nclass CriteriaEntry {\n  readonly criteria: string;\n  readonly emitter: SubscriptionEmitter;\n  refCount: number;\n  readonly subscriptionProps?: Partial<Subscription>;\n  subscriptionId?: string;\n  token?: string;\n  connecting = false;\n\n  constructor(criteria: string, subscriptionProps?: Partial<Subscription>) {\n    this.criteria = criteria;\n    this.emitter = new SubscriptionEmitter(criteria);\n    this.refCount = 1;\n    this.subscriptionProps = subscriptionProps\n      ? {\n          ...subscriptionProps,\n        }\n      : undefined;\n  }\n\n  clearAttachedSubscription(): void {\n    this.subscriptionId = undefined;\n    this.token = undefined;\n  }\n}\n\ntype CriteriaMapEntry = { bareCriteria?: CriteriaEntry; criteriaWithProps: CriteriaEntry[] };\n\nexport interface SubManagerOptions {\n  ReconnectingWebSocket?: IReconnectingWebSocketCtor;\n  pingIntervalMs?: number;\n  debug?: boolean;\n  debugLogger?: (...args: any[]) => void;\n}\n\nexport class SubscriptionManager {\n  private readonly medplum: MedplumClient;\n  private ws: IReconnectingWebSocket;\n  private masterSubEmitter?: SubscriptionEmitter;\n  private criteriaEntries: Map<string, CriteriaMapEntry>; // Map<criteriaStr, CriteriaMapEntry>\n  private criteriaEntriesBySubscriptionId: Map<string, CriteriaEntry>; // Map<subscriptionId, CriteriaEntry>\n  private wsClosed: boolean;\n  private pingTimer: ReturnType<typeof setInterval> | undefined = undefined;\n  private pingIntervalMs: number;\n  private waitingForPong = false;\n  private currentProfile: ProfileResource | undefined;\n\n  constructor(medplum: MedplumClient, wsUrl: URL | string, options?: SubManagerOptions) {\n    if (!(medplum instanceof MedplumClient)) {\n      throw new OperationOutcomeError(validationError('First arg of constructor should be a `MedplumClient`'));\n    }\n    let url: string;\n    try {\n      url = new URL(wsUrl).toString();\n    } catch (_err) {\n      throw new OperationOutcomeError(validationError('Not a valid URL'));\n    }\n    const ws = options?.ReconnectingWebSocket\n      ? new options.ReconnectingWebSocket(url, undefined, { debug: options?.debug, debugLogger: options?.debugLogger })\n      : new ReconnectingWebSocket(url, undefined, { debug: options?.debug, debugLogger: options?.debugLogger });\n\n    this.medplum = medplum;\n    this.ws = ws;\n    this.masterSubEmitter = new SubscriptionEmitter();\n    this.criteriaEntries = new Map<string, CriteriaMapEntry>();\n    this.criteriaEntriesBySubscriptionId = new Map<string, CriteriaEntry>();\n    this.wsClosed = false;\n    this.pingIntervalMs = options?.pingIntervalMs ?? DEFAULT_PING_INTERVAL_MS;\n    this.currentProfile = medplum.getProfile();\n\n    this.setupListeners();\n  }\n\n  private setupListeners(): void {\n    const ws = this.ws;\n\n    ws.addEventListener('message', (event) => {\n      try {\n        const parsedData = JSON.parse(event.data) as { type: 'pong' } | Bundle;\n        if (parsedData.type === 'pong') {\n          this.waitingForPong = false;\n          return;\n        }\n        const bundle = parsedData;\n        // Get criteria for event\n        const status = bundle?.entry?.[0]?.resource as SubscriptionStatus;\n\n        // Handle heartbeat\n        if (status.type === 'heartbeat') {\n          this.masterSubEmitter?.dispatchEvent({ type: 'heartbeat', payload: bundle });\n          return;\n        }\n\n        // Handle handshake\n        if (status.type === 'handshake') {\n          const subscriptionId = resolveId(status.subscription) as string;\n          const connectEvent = {\n            type: 'connect',\n            payload: { subscriptionId },\n          } as const;\n          this.masterSubEmitter?.dispatchEvent(connectEvent);\n          const criteriaEntry = this.criteriaEntriesBySubscriptionId.get(subscriptionId);\n          if (!criteriaEntry) {\n            console.warn('Received handshake for criteria the SubscriptionManager is not listening for yet');\n            return;\n          }\n          criteriaEntry.connecting = false;\n          criteriaEntry.emitter.dispatchEvent({ ...connectEvent });\n          return;\n        }\n\n        this.masterSubEmitter?.dispatchEvent({ type: 'message', payload: bundle });\n        const criteriaEntry = this.criteriaEntriesBySubscriptionId.get(resolveId(status.subscription) as string);\n        if (!criteriaEntry) {\n          console.warn('Received notification for criteria the SubscriptionManager is not listening for');\n          return;\n        }\n        // Emit event for criteria\n        criteriaEntry.emitter.dispatchEvent({ type: 'message', payload: bundle });\n      } catch (err: unknown) {\n        console.error(err);\n        const errorEvent = { type: 'error', payload: err as Error } as SubscriptionEventMap['error'];\n        this.masterSubEmitter?.dispatchEvent(errorEvent);\n        for (const emitter of this.getAllCriteriaEmitters()) {\n          emitter.dispatchEvent({ ...errorEvent });\n        }\n      }\n    });\n\n    ws.addEventListener('error', () => {\n      const errorEvent = {\n        type: 'error',\n        payload: new OperationOutcomeError(serverError(new Error('WebSocket error'))),\n      } as SubscriptionEventMap['error'];\n      this.masterSubEmitter?.dispatchEvent(errorEvent);\n      for (const emitter of this.getAllCriteriaEmitters()) {\n        emitter.dispatchEvent({ ...errorEvent });\n      }\n    });\n\n    ws.addEventListener('close', () => {\n      const closeEvent = { type: 'close' } as SubscriptionEventMap['close'];\n      this.masterSubEmitter?.dispatchEvent(closeEvent);\n      for (const emitter of this.getAllCriteriaEmitters()) {\n        emitter.dispatchEvent({ ...closeEvent });\n      }\n\n      if (this.pingTimer) {\n        clearInterval(this.pingTimer);\n        this.pingTimer = undefined;\n        this.waitingForPong = false;\n      }\n\n      if (this.wsClosed) {\n        this.criteriaEntries.clear();\n        this.criteriaEntriesBySubscriptionId.clear();\n        this.masterSubEmitter?.removeAllListeners();\n      }\n    });\n\n    ws.addEventListener('open', () => {\n      const openEvent = { type: 'open' } as SubscriptionEventMap['open'];\n      this.masterSubEmitter?.dispatchEvent(openEvent);\n      for (const emitter of this.getAllCriteriaEmitters()) {\n        emitter.dispatchEvent({ ...openEvent });\n      }\n      // We do this after dispatching the events so listeners can check if this is the initial open or not\n      // We are reconnecting\n      // So we refresh all current subscriptions\n      this.refreshAllSubscriptions().catch(console.error);\n\n      if (!this.pingTimer) {\n        this.pingTimer = setInterval(() => {\n          if (this.waitingForPong) {\n            this.waitingForPong = false;\n            ws.reconnect();\n            return;\n          }\n          ws.send(JSON.stringify({ type: 'ping' }));\n          this.waitingForPong = true;\n        }, this.pingIntervalMs);\n      }\n    });\n\n    this.medplum.addEventListener('change', () => {\n      const nextProfile = this.medplum.getProfile();\n      if (this.currentProfile && nextProfile === undefined) {\n        this.ws.close();\n      } else if (nextProfile && this.currentProfile?.id !== nextProfile.id) {\n        this.ws.reconnect();\n      }\n      this.currentProfile = nextProfile;\n    });\n  }\n\n  private emitError(criteriaEntry: CriteriaEntry, error: Error): void {\n    const errorEvent = { type: 'error', payload: error } as SubscriptionEventMap['error'];\n    this.masterSubEmitter?.dispatchEvent(errorEvent);\n    criteriaEntry.emitter.dispatchEvent({ ...errorEvent });\n  }\n\n  private maybeEmitDisconnect(criteriaEntry: CriteriaEntry): void {\n    const { subscriptionId } = criteriaEntry;\n    if (subscriptionId) {\n      const disconnectEvent = {\n        type: 'disconnect',\n        payload: { subscriptionId },\n      } as SubscriptionEventMap['disconnect'];\n      // Emit disconnect on master\n      this.masterSubEmitter?.dispatchEvent(disconnectEvent);\n      // Emit disconnect on criteria emitter\n      criteriaEntry.emitter.dispatchEvent({ ...disconnectEvent });\n    } else {\n      console.warn('Called disconnect for `CriteriaEntry` before `subscriptionId` was present.');\n    }\n  }\n\n  private async getTokenForCriteria(criteriaEntry: CriteriaEntry): Promise<[string, string]> {\n    let subscriptionId = criteriaEntry?.subscriptionId;\n    if (!subscriptionId) {\n      // Make a new subscription\n      const subscription = await this.medplum.createResource<Subscription>({\n        ...criteriaEntry.subscriptionProps,\n        resourceType: 'Subscription',\n        status: 'active',\n        reason: `WebSocket subscription for ${getReferenceString(this.medplum.getProfile() as ProfileResource)}`,\n        channel: { type: 'websocket' },\n        criteria: criteriaEntry.criteria,\n      });\n      subscriptionId = subscription.id as string;\n    }\n\n    // Get binding token\n    const { parameter } = (await this.medplum.get(\n      `fhir/R4/Subscription/${subscriptionId}/$get-ws-binding-token`\n    )) as Parameters;\n    const token = parameter?.find((param) => param.name === 'token')?.valueString;\n    const url = parameter?.find((param) => param.name === 'websocket-url')?.valueUrl;\n\n    if (!token) {\n      throw new OperationOutcomeError(validationError('Failed to get token'));\n    }\n    if (!url) {\n      throw new OperationOutcomeError(validationError('Failed to get URL from $get-ws-binding-token'));\n    }\n\n    return [subscriptionId, token];\n  }\n\n  private maybeGetCriteriaEntry(\n    criteria: string,\n    subscriptionProps?: Partial<Subscription>\n  ): CriteriaEntry | undefined {\n    const entries = this.criteriaEntries.get(criteria);\n    if (!entries) {\n      return undefined;\n    }\n    if (!subscriptionProps) {\n      return entries.bareCriteria;\n    }\n    for (const entry of entries.criteriaWithProps) {\n      if (deepEquals(subscriptionProps, entry.subscriptionProps)) {\n        return entry;\n      }\n    }\n    return undefined;\n  }\n\n  private getAllCriteriaEmitters(): SubscriptionEmitter[] {\n    const emitters = [];\n    for (const mapEntry of this.criteriaEntries.values()) {\n      if (mapEntry.bareCriteria) {\n        emitters.push(mapEntry.bareCriteria.emitter);\n      }\n      for (const entry of mapEntry.criteriaWithProps) {\n        emitters.push(entry.emitter);\n      }\n    }\n    return emitters;\n  }\n\n  private addCriteriaEntry(criteriaEntry: CriteriaEntry): void {\n    const { criteria, subscriptionProps } = criteriaEntry;\n    let mapEntry: CriteriaMapEntry;\n    if (!this.criteriaEntries.has(criteria)) {\n      mapEntry = { criteriaWithProps: [] as CriteriaEntry[] };\n      this.criteriaEntries.set(criteria, mapEntry);\n    } else {\n      mapEntry = this.criteriaEntries.get(criteria) as CriteriaMapEntry;\n    }\n    // We can assume because this will be \"guarded\" by `maybeGetCriteriaEntry()`,\n    // that we don't need to check if a matching `CriteriaEntry` exists\n    // We just need to put the given one into the right spot\n    if (!subscriptionProps) {\n      mapEntry.bareCriteria = criteriaEntry;\n    } else {\n      mapEntry.criteriaWithProps.push(criteriaEntry);\n    }\n  }\n\n  private removeCriteriaEntry(criteriaEntry: CriteriaEntry): void {\n    const { criteria, subscriptionProps, subscriptionId, token } = criteriaEntry;\n    if (!this.criteriaEntries.has(criteria)) {\n      return;\n    }\n    const mapEntry = this.criteriaEntries.get(criteria) as CriteriaMapEntry;\n    if (!subscriptionProps) {\n      mapEntry.bareCriteria = undefined;\n    } else {\n      mapEntry.criteriaWithProps = mapEntry.criteriaWithProps.filter((otherEntry): boolean => {\n        const otherProps = otherEntry.subscriptionProps as Partial<Subscription>;\n        return !deepEquals(subscriptionProps, otherProps);\n      });\n    }\n    if (!mapEntry.bareCriteria && mapEntry.criteriaWithProps.length === 0) {\n      this.criteriaEntries.delete(criteria);\n      this.masterSubEmitter?._removeCriteria(criteria);\n    }\n    if (subscriptionId) {\n      this.criteriaEntriesBySubscriptionId.delete(subscriptionId);\n    }\n    if (token && this.ws.readyState === WebSocket.OPEN) {\n      this.ws.send(JSON.stringify({ type: 'unbind-from-token', payload: { token } }));\n    }\n  }\n\n  private async subscribeToCriteria(criteriaEntry: CriteriaEntry): Promise<void> {\n    // We check to see if the WebSocket is open first, since if it's not, we will automatically refresh this later when it opens\n    if (this.ws.readyState !== WebSocket.OPEN || criteriaEntry.connecting) {\n      return;\n    }\n    // Set connecting flag to true so other incoming subscription requests to this criteria don't try to subscribe also\n    criteriaEntry.connecting = true;\n    try {\n      const [subscriptionId, token] = await this.getTokenForCriteria(criteriaEntry);\n      criteriaEntry.subscriptionId = subscriptionId;\n      criteriaEntry.token = token;\n      this.criteriaEntriesBySubscriptionId.set(subscriptionId, criteriaEntry);\n      // Send binding message\n      this.ws.send(JSON.stringify({ type: 'bind-with-token', payload: { token } }));\n    } catch (err: unknown) {\n      console.error(normalizeErrorString(err));\n      this.emitError(criteriaEntry, err as Error);\n      this.removeCriteriaEntry(criteriaEntry);\n    }\n  }\n\n  private async refreshAllSubscriptions(): Promise<void> {\n    this.criteriaEntriesBySubscriptionId.clear();\n    for (const mapEntry of this.criteriaEntries.values()) {\n      for (const criteriaEntry of [\n        ...(mapEntry.bareCriteria ? [mapEntry.bareCriteria] : []),\n        ...mapEntry.criteriaWithProps,\n      ]) {\n        criteriaEntry.clearAttachedSubscription();\n        await this.subscribeToCriteria(criteriaEntry);\n      }\n    }\n  }\n\n  addCriteria(criteria: string, subscriptionProps?: Partial<Subscription>): SubscriptionEmitter {\n    if (this.masterSubEmitter) {\n      this.masterSubEmitter._addCriteria(criteria);\n    }\n\n    const criteriaEntry = this.maybeGetCriteriaEntry(criteria, subscriptionProps);\n    if (criteriaEntry) {\n      criteriaEntry.refCount += 1;\n      return criteriaEntry.emitter;\n    }\n\n    const newCriteriaEntry = new CriteriaEntry(criteria, subscriptionProps);\n    this.addCriteriaEntry(newCriteriaEntry);\n\n    this.subscribeToCriteria(newCriteriaEntry).catch(console.error);\n\n    return newCriteriaEntry.emitter;\n  }\n\n  removeCriteria(criteria: string, subscriptionProps?: Partial<Subscription>): void {\n    const criteriaEntry = this.maybeGetCriteriaEntry(criteria, subscriptionProps);\n    if (!criteriaEntry) {\n      console.warn('Criteria not known to `SubscriptionManager`. Possibly called remove too many times.');\n      return;\n    }\n\n    criteriaEntry.refCount -= 1;\n    if (criteriaEntry.refCount > 0) {\n      return;\n    }\n\n    // If actually removing (refcount === 0)\n    this.maybeEmitDisconnect(criteriaEntry);\n    this.removeCriteriaEntry(criteriaEntry);\n  }\n\n  getWebSocket(): IReconnectingWebSocket {\n    return this.ws;\n  }\n\n  closeWebSocket(): void {\n    if (this.wsClosed) {\n      return;\n    }\n    this.wsClosed = true;\n    this.ws.close();\n  }\n\n  reconnectWebSocket(): void {\n    this.ws.reconnect();\n    this.wsClosed = false;\n  }\n\n  getCriteriaCount(): number {\n    return this.getAllCriteriaEmitters().length;\n  }\n\n  getMasterEmitter(): SubscriptionEmitter {\n    if (!this.masterSubEmitter) {\n      this.masterSubEmitter = new SubscriptionEmitter(...Array.from(this.criteriaEntries.keys()));\n    }\n    return this.masterSubEmitter;\n  }\n}\n\nexport type BackgroundJobInteraction = 'create' | 'update' | 'delete';\n\nexport interface BackgroundJobContext {\n  interaction: BackgroundJobInteraction;\n}\n\nexport type ResourceMatchesSubscriptionCriteria = {\n  resource: Resource;\n  subscription: Subscription;\n  context: BackgroundJobContext;\n  logger?: Logger;\n  getPreviousResource: (currentResource: Resource) => Promise<Resource | undefined>;\n};\n\nexport async function resourceMatchesSubscriptionCriteria({\n  resource,\n  subscription,\n  context,\n  getPreviousResource,\n  logger,\n}: ResourceMatchesSubscriptionCriteria): Promise<boolean> {\n  if (subscription.meta?.account && resource.meta?.account?.reference !== subscription.meta.account.reference) {\n    logger?.debug('Ignore resource in different account compartment');\n    return false;\n  }\n\n  if (!matchesChannelType(subscription, logger)) {\n    logger?.debug(`Ignore subscription without recognized channel type`);\n    return false;\n  }\n\n  const subscriptionCriteria = subscription.criteria;\n  if (!subscriptionCriteria) {\n    logger?.debug(`Ignore rest hook missing criteria`);\n    return false;\n  }\n\n  const searchRequest = parseSearchRequest(subscriptionCriteria);\n  if (resource.resourceType !== searchRequest.resourceType) {\n    logger?.debug(\n      `Ignore rest hook for different resourceType (wanted \"${searchRequest.resourceType}\", received \"${resource.resourceType}\")`\n    );\n    return false;\n  }\n\n  const fhirPathCriteria = await isFhirCriteriaMet(subscription, resource, getPreviousResource);\n  if (!fhirPathCriteria) {\n    logger?.debug(`Ignore rest hook for criteria returning false`);\n    return false;\n  }\n\n  const supportedInteractionExtension = getExtension(\n    subscription,\n    'https://medplum.com/fhir/StructureDefinition/subscription-supported-interaction'\n  );\n  if (supportedInteractionExtension && supportedInteractionExtension.valueCode !== context.interaction) {\n    logger?.debug(\n      `Ignore rest hook for different interaction (wanted \"${supportedInteractionExtension.valueCode}\", received \"${context.interaction}\")`\n    );\n    return false;\n  }\n\n  return matchesSearchRequest(resource, searchRequest);\n}\n\n/**\n * Returns true if the subscription channel type is ok to execute.\n * @param subscription - The subscription resource.\n * @param logger - The logger.\n * @returns True if the subscription channel type is ok to execute.\n */\nfunction matchesChannelType(subscription: Subscription, logger?: Logger): boolean {\n  const channelType = subscription.channel?.type;\n\n  if (channelType === 'rest-hook') {\n    const url = subscription.channel?.endpoint;\n    if (!url) {\n      logger?.debug(`Ignore rest-hook missing URL`);\n      return false;\n    }\n\n    return true;\n  }\n\n  if (channelType === 'websocket') {\n    return true;\n  }\n\n  return false;\n}\n\nexport async function isFhirCriteriaMet(\n  subscription: Subscription,\n  currentResource: Resource,\n  getPreviousResource: (currentResource: Resource) => Promise<Resource | undefined>\n): Promise<boolean> {\n  const criteria = getExtension(\n    subscription,\n    'https://medplum.com/fhir/StructureDefinition/fhir-path-criteria-expression'\n  );\n  if (!criteria?.valueString) {\n    return true;\n  }\n  const previous = await getPreviousResource(currentResource);\n  const evalInput = {\n    '%current': toTypedValue(currentResource),\n    '%previous': toTypedValue(previous ?? {}),\n  };\n  const evalValue = evalFhirPathTyped(criteria.valueString, [toTypedValue(currentResource)], evalInput);\n  return evalValue?.[0]?.value === true;\n}\n", "// PKCE auth based on:\n// https://aws.amazon.com/blogs/security/how-to-add-authentication-single-page-web-application-with-amazon-cognito-oauth2-implementation/\n\nimport {\n  AccessPolicy,\n  Agent,\n  Attachment,\n  Binary,\n  Bot,\n  BulkDataExport,\n  Bundle,\n  BundleEntry,\n  BundleLink,\n  Communication,\n  Device,\n  Encounter,\n  ExtractResource,\n  Identifier,\n  Media,\n  OperationOutcome,\n  Patient,\n  Project,\n  ProjectMembership,\n  ProjectMembershipAccess,\n  ProjectSetting,\n  Reference,\n  Resource,\n  ResourceType,\n  SearchParameter,\n  StructureDefinition,\n  Subscription,\n  UserConfiguration,\n  ValueSet,\n} from '@medplum/fhirtypes';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n/** @ts-ignore */\nimport type { CustomTableLayout, TDocumentDefinitions, TFontDictionary } from 'pdfmake/interfaces';\nimport { encodeBase64 } from './base64';\nimport { LRUCache } from './cache';\nimport { ContentType } from './contenttype';\nimport { encryptSHA256, getRandomString } from './crypto';\nimport { TypedEventTarget } from './eventtarget';\nimport {\n  CurrentContext,\n  FhircastConnection,\n  FhircastEventContext,\n  FhircastEventName,\n  FhircastEventVersionOptional,\n  FhircastEventVersionRequired,\n  PendingSubscriptionRequest,\n  SubscriptionRequest,\n  assertContextVersionOptional,\n  createFhircastMessagePayload,\n  isContextVersionRequired,\n  serializeFhircastSubscriptionRequest,\n  validateFhircastSubscriptionRequest,\n} from './fhircast';\nimport { Hl7Message } from './hl7';\nimport { isJwt, isMedplumAccessToken, parseJWTPayload, tryGetJwtExpiration } from './jwt';\nimport { MedplumKeyValueClient } from './keyvalue';\nimport {\n  OperationOutcomeError,\n  badRequest,\n  isOk,\n  isOperationOutcome,\n  normalizeOperationOutcome,\n  notFound,\n  unauthorized,\n  unauthorizedTokenAudience,\n  unauthorizedTokenExpired,\n  validationError,\n} from './outcomes';\nimport { ReadablePromise } from './readablepromise';\nimport { ClientStorage, IClientStorage } from './storage';\nimport { SubscriptionEmitter, SubscriptionManager } from './subscriptions';\nimport { indexSearchParameter } from './types';\nimport { indexStructureDefinitionBundle, isDataTypeLoaded, isProfileLoaded, loadDataType } from './typeschema/types';\nimport {\n  CodeChallengeMethod,\n  ProfileResource,\n  QueryTypes,\n  arrayBufferToBase64,\n  concatUrls,\n  createReference,\n  ensureTrailingSlash,\n  getQueryString,\n  getReferenceString,\n  getWebSocketUrl,\n  isObject,\n  resolveId,\n  sleep,\n  sortStringArray,\n} from './utils';\n\nexport const MEDPLUM_VERSION: string = import.meta.env.MEDPLUM_VERSION ?? '';\nexport const MEDPLUM_CLI_CLIENT_ID = 'medplum-cli';\nexport const DEFAULT_ACCEPT = ContentType.FHIR_JSON + ', */*; q=0.1';\n\nconst DEFAULT_BASE_URL = 'https://api.medplum.com/';\nconst DEFAULT_RESOURCE_CACHE_SIZE = 1000;\nconst DEFAULT_BROWSER_CACHE_TIME = 60000; // 60 seconds\nconst DEFAULT_NODE_CACHE_TIME = 0;\nconst DEFAULT_REFRESH_GRACE_PERIOD = 300000; // 5 minutes\nconst BINARY_URL_PREFIX = 'Binary/';\n\nconst system: Device = {\n  resourceType: 'Device',\n  id: 'system',\n  deviceName: [{ type: 'model-name', name: 'System' }],\n};\n\n/**\n * The MedplumClientOptions interface defines configuration options for MedplumClient.\n *\n * All configuration settings are optional.\n */\nexport interface MedplumClientOptions {\n  /**\n   * Base server URL.\n   *\n   * Default value is https://api.medplum.com/\n   *\n   * Use this to point to a custom Medplum deployment.\n   */\n  baseUrl?: string;\n\n  /**\n   * OAuth2 authorize URL.\n   *\n   * Default value is baseUrl + \"/oauth2/authorize\".\n   *\n   * Can be specified as absolute URL or relative to baseUrl.\n   *\n   * Use this if you want to use a separate OAuth server.\n   */\n  authorizeUrl?: string;\n\n  /**\n   * FHIR URL path.\n   *\n   * Default value is \"fhir/R4/\".\n   *\n   * Can be specified as absolute URL or relative to baseUrl.\n   *\n   * Use this if you want to use a different path when connecting to a FHIR server.\n   */\n  fhirUrlPath?: string;\n\n  /**\n   * OAuth2 token URL.\n   *\n   * Default value is baseUrl + \"/oauth2/token\".\n   *\n   * Can be specified as absolute URL or relative to baseUrl.\n   *\n   * Use this if you want to use a separate OAuth server.\n   */\n  tokenUrl?: string;\n\n  /**\n   * OAuth2 logout URL.\n   *\n   * Default value is baseUrl + \"/oauth2/logout\".\n   *\n   * Can be specified as absolute URL or relative to baseUrl.\n   *\n   * Use this if you want to use a separate OAuth server.\n   */\n  logoutUrl?: string;\n\n  /**\n   * FHIRcast Hub URL.\n   *\n   * Default value is `fhircast/STU3`.\n   *\n   * Can be specified as absolute URL or relative to `baseUrl`.\n   *\n   * Use this if you want to use a different path when connecting to a FHIRcast hub.\n   */\n  fhircastHubUrl?: string;\n\n  /**\n   * The client ID.\n   *\n   * Client ID can be used for SMART-on-FHIR customization.\n   */\n  clientId?: string;\n\n  /**\n   * The client secret.\n   *\n   * Client secret can be used for FHIR Oauth Client Credential flows\n   */\n  clientSecret?: string;\n\n  /**\n   * The OAuth Access Token.\n   *\n   * Access Token used to connect to make request to FHIR servers\n   */\n  accessToken?: string;\n\n  /**\n   * Number of resources to store in the cache.\n   *\n   * Default value is 1000.\n   *\n   * Consider using this for performance of displaying Patient or Practitioner resources.\n   */\n  resourceCacheSize?: number;\n\n  /**\n   * The length of time in milliseconds to cache resources.\n   *\n   * Default value is 60000 (60 seconds).\n   *\n   * Cache time of zero disables all caching.\n   *\n   * For any individual request, the cache behavior can be overridden by setting the cache property on request options.\n   *\n   * See: https://developer.mozilla.org/en-US/docs/Web/API/Request/cache\n   */\n  cacheTime?: number;\n\n  /**\n   * The length of time in milliseconds to delay requests for auto batching.\n   *\n   * Auto batching attempts to group multiple requests together into a single batch request.\n   *\n   * Default value is 0, which disables auto batching.\n   */\n  autoBatchTime?: number;\n\n  /**\n   * The refresh grace period in milliseconds.\n   *\n   * This is the amount of time before the access token expires that the client will attempt to refresh the token.\n   *\n   * Default value is 300000 (5 minutes).\n   */\n  refreshGracePeriod?: number;\n\n  /**\n   * Fetch implementation.\n   *\n   * Default is window.fetch (if available).\n   *\n   * For Node.js applications, consider the 'node-fetch' package.\n   */\n  fetch?: FetchLike;\n\n  /**\n   * Storage implementation.\n   *\n   * Default is window.localStorage (if available), this is the common implementation for use in the browser, or an in-memory storage implementation.  If using Medplum on a server it may be useful to provide a custom storage implementation, for example using redis, a database or a file based storage.  Medplum CLI is an an example of `FileSystemStorage`, for reference.\n   */\n  storage?: IClientStorage;\n\n  /**\n   * Create PDF implementation.\n   *\n   * Default is none, and PDF generation is disabled.\n   *\n   * @example\n   * In browser environments, import the client-side pdfmake library.\n   *\n   * ```html\n   * <script src=\"pdfmake.min.js\"></script>\n   * <script>\n   * async function createPdf(docDefinition, tableLayouts, fonts) {\n   *   return new Promise((resolve) => {\n   *     pdfMake.createPdf(docDefinition, tableLayouts, fonts).getBlob(resolve);\n   *   });\n   * }\n   * </script>\n   * ```\n   *\n   * @example\n   * In Node.js applications:\n   *\n   * ```ts\n   * import type { CustomTableLayout, TDocumentDefinitions, TFontDictionary } from 'pdfmake/interfaces';\n   * function createPdf(\n   *   docDefinition: TDocumentDefinitions,\n   *   tableLayouts?: { [name: string]: CustomTableLayout },\n   *   fonts?: TFontDictionary\n   * ): Promise<Buffer> {\n   *   return new Promise((resolve, reject) => {\n   *     const printer = new PdfPrinter(fonts ?? {});\n   *     const pdfDoc = printer.createPdfKitDocument(docDefinition, { tableLayouts });\n   *     const chunks: Uint8Array[] = [];\n   *     pdfDoc.on('data', (chunk: Uint8Array) => chunks.push(chunk));\n   *     pdfDoc.on('end', () => resolve(Buffer.concat(chunks)));\n   *     pdfDoc.on('error', reject);\n   *     pdfDoc.end();\n   *   });\n   * }\n   * ```\n   */\n  createPdf?: CreatePdfFunction;\n\n  /**\n   * Callback for when the client is unauthenticated.\n   *\n   * Default is do nothing.\n   *\n   * For client side applications, consider redirecting to a sign in page.\n   */\n  onUnauthenticated?: () => void;\n\n  /**\n   * The default redirect behavior.\n   *\n   * The default behavior is to not follow redirects.\n   *\n   * Use \"follow\" to automatically follow redirects.\n   */\n  redirect?: RequestRedirect;\n\n  /**\n   * When the verbose flag is set, the client will log all requests and responses to the console.\n   */\n  verbose?: boolean;\n\n  /**\n   * Optional flag to enable or disable Medplum extended mode.\n   *\n   * Medplum extended mode includes a few non-standard FHIR properties such as meta.author and meta.project.\n   *\n   * Default is true.\n   */\n  extendedMode?: boolean;\n\n  /**\n   * Default headers to include in all requests.\n   * This can be used to set custom headers such as Cookies or Authorization headers.\n   * @default {}\n   */\n  defaultHeaders?: Record<string, string>;\n}\n\nexport interface MedplumRequestOptions extends RequestInit {\n  /**\n   * Optional flag to follow \"Location\" or \"Content-Location\" URL on successful HTTP 200 \"OK\" responses.\n   */\n  followRedirectOnOk?: boolean;\n\n  /**\n   * Optional flag to follow \"Location\" or \"Content-Location\" URL on successful HTTP 201 \"Created\" responses.\n   */\n  followRedirectOnCreated?: boolean;\n\n  /**\n   * Optional flag to poll the status URL on successful HTTP 202 \"Accepted\" responses.\n   */\n  pollStatusOnAccepted?: boolean;\n\n  /**\n   * Optional polling time interval in milliseconds.\n   * Default value is 1000 (1 second).\n   */\n  pollStatusPeriod?: number;\n  /**\n   * Optional max number of retries that should be made in the case of a failed request. Default is `2`.\n   */\n  maxRetries?: number;\n}\n\nexport type FetchLike = (url: string, options?: any) => Promise<any>;\n\n/**\n * ResourceArray is an array of resources with a bundle property.\n * The bundle property is a FHIR Bundle containing the search results.\n * This is useful for retrieving bundle metadata such as total, offset, and next link.\n */\nexport type ResourceArray<T extends Resource = Resource> = T[] & { bundle: Bundle<T> };\n\nexport interface CreatePdfFunction {\n  (\n    docDefinition: TDocumentDefinitions,\n    tableLayouts?: Record<string, CustomTableLayout>,\n    fonts?: TFontDictionary\n  ): Promise<any>;\n}\n\nexport interface BaseLoginRequest {\n  readonly projectId?: string;\n  readonly clientId?: string;\n  readonly resourceType?: string;\n  readonly scope?: string;\n  readonly nonce?: string;\n  readonly codeChallenge?: string;\n  readonly codeChallengeMethod?: CodeChallengeMethod;\n  readonly googleClientId?: string;\n  readonly launch?: string;\n  readonly redirectUri?: string;\n}\n\nexport interface EmailPasswordLoginRequest extends BaseLoginRequest {\n  readonly email: string;\n  readonly password: string;\n  /** @deprecated Use scope of \"offline\" or \"offline_access\" instead. */\n  readonly remember?: boolean;\n}\n\nexport interface NewUserRequest {\n  readonly firstName: string;\n  readonly lastName: string;\n  readonly email: string;\n  readonly password: string;\n  readonly recaptchaToken: string;\n  readonly recaptchaSiteKey?: string;\n  readonly remember?: boolean;\n  readonly projectId?: string;\n  readonly clientId?: string;\n}\n\nexport interface NewProjectRequest {\n  readonly login: string;\n  readonly projectName: string;\n}\n\nexport interface NewPatientRequest {\n  readonly login: string;\n  readonly projectId: string;\n}\n\nexport interface GoogleCredentialResponse {\n  readonly clientId: string;\n  readonly credential: string;\n}\n\nexport interface GoogleLoginRequest extends BaseLoginRequest {\n  readonly googleClientId: string;\n  readonly googleCredential: string;\n  readonly createUser?: boolean;\n}\n\nexport interface LoginAuthenticationResponse {\n  readonly login: string;\n  readonly mfaRequired?: boolean;\n  readonly code?: string;\n  readonly memberships?: ProjectMembership[];\n}\n\nexport interface LoginProfileResponse {\n  readonly login: string;\n  readonly scope: string;\n}\n\nexport interface LoginScopeResponse {\n  readonly login: string;\n  readonly code: string;\n}\n\nexport interface LoginState {\n  readonly project: Reference<Project>;\n  readonly profile: Reference<ProfileResource>;\n  readonly accessToken: string;\n  readonly refreshToken: string;\n}\n\nexport interface TokenResponse {\n  readonly token_type: string;\n  readonly id_token: string;\n  readonly access_token: string;\n  readonly refresh_token: string;\n  readonly expires_in: number;\n  readonly project: Reference<Project>;\n  readonly profile: Reference<ProfileResource>;\n}\n\nexport interface BotEvent<T = Resource | Hl7Message | string | Record<string, any>> {\n  readonly bot: Reference<Bot>;\n  readonly contentType: string;\n  readonly input: T;\n  readonly secrets: Record<string, ProjectSetting>;\n  readonly traceId?: string;\n}\n\nexport interface InviteRequest {\n  resourceType: 'Patient' | 'Practitioner' | 'RelatedPerson';\n  firstName: string;\n  lastName: string;\n  email?: string;\n  externalId?: string;\n  password?: string;\n  sendEmail?: boolean;\n  membership?: Partial<ProjectMembership>;\n  upsert?: boolean;\n  /** @deprecated Use membership.accessPolicy instead. */\n  accessPolicy?: Reference<AccessPolicy>;\n  /** @deprecated Use membership.access instead. */\n  access?: ProjectMembershipAccess[];\n  /** @deprecated Use membership.admin instead. */\n  admin?: boolean;\n}\n\n/**\n * JSONPatch patch operation.\n * Compatible with fast-json-patch and rfc6902 Operation.\n */\nexport interface PatchOperation {\n  readonly op: 'add' | 'remove' | 'replace' | 'copy' | 'move' | 'test';\n  readonly path: string;\n  readonly value?: any;\n}\n\n/**\n * Source for a FHIR Binary.\n */\nexport type BinarySource = string | File | Blob | Uint8Array;\n\n/**\n * Binary upload options.\n */\nexport interface CreateBinaryOptions {\n  /**\n   * The binary data to upload.\n   */\n  readonly data: BinarySource;\n\n  /**\n   * Content type for the binary.\n   */\n  readonly contentType: string;\n\n  /**\n   * Optional filename for the binary.\n   */\n  readonly filename?: string;\n\n  /**\n   * Optional security context for the binary.\n   */\n  readonly securityContext?: Reference;\n\n  /**\n   * Optional fetch options. **NOTE:** only `requestOptions.signal` is respected when `onProgress` is also provided.\n   */\n  readonly onProgress?: (e: ProgressEvent) => void;\n}\n\nexport interface CreateMediaOptions extends CreateBinaryOptions {\n  /**\n   * Optional additional fields for the Media resource.\n   */\n  readonly additionalFields?: Partial<Media>;\n}\n\n/**\n * PDF upload options.\n */\nexport interface CreatePdfOptions extends Omit<CreateBinaryOptions, 'data' | 'contentType'> {\n  /**\n   * The PDF document definition. See https://pdfmake.github.io/docs/0.1/document-definition-object/\n   */\n  readonly docDefinition: TDocumentDefinitions;\n\n  /**\n   * Optional pdfmake custom table layout.\n   */\n  readonly tableLayouts?: Record<string, CustomTableLayout>;\n\n  /**\n   * Optional pdfmake custom font dictionary.\n   */\n  readonly fonts?: TFontDictionary;\n}\n\n/**\n * Email address definition.\n * Compatible with nodemailer Mail.Address.\n */\nexport interface MailAddress {\n  readonly name: string;\n  readonly address: string;\n}\n\n/**\n * Email destination definition.\n */\nexport type MailDestination = string | MailAddress | string[] | MailAddress[];\n\n/**\n * Email attachment definition.\n * Compatible with nodemailer Mail.Options.\n */\nexport interface MailAttachment {\n  /** String, Buffer or a Stream contents for the attachment */\n  readonly content?: string;\n  /** path to a file or an URL (data uris are allowed as well) if you want to stream the file instead of including it (better for larger attachments) */\n  readonly path?: string;\n  /** filename to be reported as the name of the attached file, use of unicode is allowed. If you do not want to use a filename, set this value as false, otherwise a filename is generated automatically */\n  readonly filename?: string | false;\n  /** optional content type for the attachment, if not set will be derived from the filename property */\n  readonly contentType?: string;\n}\n\n/**\n * Email message definition.\n * Compatible with nodemailer Mail.Options.\n */\nexport interface MailOptions {\n  /** The e-mail address of the sender. All e-mail addresses can be plain `sender@server.com` or formatted `Sender Name <sender@server.com>` */\n  readonly from?: string | MailAddress;\n  /** An e-mail address that will appear on the Sender: field */\n  readonly sender?: string | MailAddress;\n  /** Comma separated list or an array of recipients e-mail addresses that will appear on the To: field */\n  readonly to?: MailDestination;\n  /** Comma separated list or an array of recipients e-mail addresses that will appear on the Cc: field */\n  readonly cc?: MailDestination;\n  /** Comma separated list or an array of recipients e-mail addresses that will appear on the Bcc: field */\n  readonly bcc?: MailDestination;\n  /** An e-mail address that will appear on the Reply-To: field */\n  readonly replyTo?: string | MailAddress;\n  /** The subject of the e-mail */\n  readonly subject?: string;\n  /** The plaintext version of the message */\n  readonly text?: string;\n  /** The HTML version of the message */\n  readonly html?: string;\n  /** An array of attachment objects */\n  readonly attachments?: MailAttachment[];\n}\n\ninterface SchemaGraphQLResponse {\n  readonly data: {\n    readonly StructureDefinitionList: StructureDefinition[];\n    readonly SearchParameterList: SearchParameter[];\n  };\n}\n\ninterface RequestCacheEntry {\n  readonly requestTime: number;\n  readonly value: ReadablePromise<any>;\n}\n\ninterface AutoBatchEntry<T = any> {\n  readonly method: 'GET';\n  readonly url: string;\n  readonly options: MedplumRequestOptions;\n  readonly resolve: (value: T) => void;\n  readonly reject: (reason: any) => void;\n}\n\ninterface RequestState {\n  statusUrl?: string;\n  pollCount?: number;\n}\n\n/**\n * OAuth 2.0 Grant Type Identifiers\n * Standard identifiers: https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-07#name-grant-types\n * JWT bearer extension: https://datatracker.ietf.org/doc/html/rfc7523\n * Token exchange extension: https://datatracker.ietf.org/doc/html/rfc8693\n */\nexport enum OAuthGrantType {\n  ClientCredentials = 'client_credentials',\n  AuthorizationCode = 'authorization_code',\n  RefreshToken = 'refresh_token',\n  JwtBearer = 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n  TokenExchange = 'urn:ietf:params:oauth:grant-type:token-exchange',\n}\n\n/**\n * OAuth 2.0 Token Type Identifiers\n * See: https://datatracker.ietf.org/doc/html/rfc8693#name-token-type-identifiers\n */\nexport enum OAuthTokenType {\n  /** Indicates that the token is an OAuth 2.0 access token issued by the given authorization server. */\n  AccessToken = 'urn:ietf:params:oauth:token-type:access_token',\n  /** Indicates that the token is an OAuth 2.0 refresh token issued by the given authorization server. */\n  RefreshToken = 'urn:ietf:params:oauth:token-type:refresh_token',\n  /** Indicates that the token is an ID Token as defined in Section 2 of [OpenID.Core]. */\n  IdToken = 'urn:ietf:params:oauth:token-type:id_token',\n  /** Indicates that the token is a base64url-encoded SAML 1.1 [OASIS.saml-core-1.1] assertion. */\n  Saml1Token = 'urn:ietf:params:oauth:token-type:saml1',\n  /** Indicates that the token is a base64url-encoded SAML 2.0 [OASIS.saml-core-2.0-os] assertion. */\n  Saml2Token = 'urn:ietf:params:oauth:token-type:saml2',\n}\n\n/**\n * OAuth 2.0 Client Authentication Methods\n * See: https://openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication\n */\nexport enum OAuthTokenAuthMethod {\n  ClientSecretBasic = 'client_secret_basic',\n  ClientSecretPost = 'client_secret_post',\n  ClientSecretJwt = 'client_secret_jwt',\n  PrivateKeyJwt = 'private_key_jwt',\n  None = 'none',\n}\n\n/**\n * OAuth 2.0 Client Authentication Methods\n * See: https://datatracker.ietf.org/doc/html/rfc7523#section-2.2\n */\nexport enum OAuthClientAssertionType {\n  /** Using JWTs for Client Authentication */\n  JwtBearer = 'urn:ietf:params:oauth:client-assertion-type:jwt-bearer',\n}\n\ninterface SessionDetails {\n  project: Project;\n  membership: ProjectMembership;\n  profile: ProfileResource;\n  config: UserConfiguration;\n  accessPolicy: AccessPolicy;\n}\n\n/**\n * ValueSet $expand operation parameters.\n * See: https://hl7.org/fhir/r4/valueset-operation-expand.html\n */\nexport interface ValueSetExpandParams {\n  url?: string;\n  filter?: string;\n  date?: string;\n  offset?: number;\n  count?: number;\n}\n\nexport interface RequestProfileSchemaOptions {\n  /** (optional) Whether to include nested profiles, e.g. from extensions. Defaults to false. */\n  expandProfile?: boolean;\n}\n\n/**\n * This map enumerates all the lifecycle events that `MedplumClient` emits and what the shape of the `Event` is.\n */\nexport type MedplumClientEventMap = {\n  change: { type: 'change' };\n  offline: { type: 'offline' };\n  profileRefreshing: { type: 'profileRefreshing' };\n  profileRefreshed: { type: 'profileRefreshed' };\n  storageInitialized: { type: 'storageInitialized' };\n  storageInitFailed: { type: 'storageInitFailed'; payload: { error: Error } };\n};\n\n/**\n * The MedplumClient class provides a client for the Medplum FHIR server.\n *\n * The client can be used in the browser, in a Node.js application, or in a Medplum Bot.\n *\n * The client provides helpful methods for common operations such as:\n *   1. Authenticating\n *   2. Creating resources\n *   3. Reading resources\n *   4. Updating resources\n *   5. Deleting resources\n *   6. Searching\n *   7. Making GraphQL queries\n *\n * The client can also be used to integrate with other FHIR servers. For an example, see the Epic Connection Demo Bot [here](https://github.com/medplum/medplum/tree/main/examples/medplum-demo-bots/src/epic).\n *\n * @example\n * Here is a quick example of how to use the client:\n *\n * ```typescript\n * import { MedplumClient } from '@medplum/core';\n * const medplum = new MedplumClient();\n * ```\n *\n * @example\n * Create a `Patient`:\n *\n * ```typescript\n * const patient = await medplum.createResource({\n *   resourceType: 'Patient',\n *   name: [{\n *     given: ['Alice'],\n *     family: 'Smith'\n *   }]\n * });\n * ```\n *\n * @example\n * Read a `Patient` by ID:\n *\n * ```typescript\n * const patient = await medplum.readResource('Patient', '123');\n * console.log(patient.name[0].given[0]);\n * ```\n *\n * @example\n * Search for a `Patient` by name:\n *\n * ```typescript\n * const bundle = await medplum.search('Patient', 'name=Alice');\n * console.log(bundle.total);\n * ```\n *\n *  <head>\n *    <meta name=\"algolia:pageRank\" content=\"100\" />\n *  </head>\n */\nexport class MedplumClient extends TypedEventTarget<MedplumClientEventMap> {\n  private readonly options: MedplumClientOptions;\n  private readonly fetch: FetchLike;\n  private readonly createPdfImpl?: CreatePdfFunction;\n  private readonly storage: IClientStorage;\n  private readonly requestCache: LRUCache<RequestCacheEntry> | undefined;\n  private readonly cacheTime: number;\n  private readonly baseUrl: string;\n  private readonly fhirBaseUrl: string;\n  private readonly authorizeUrl: string;\n  private readonly tokenUrl: string;\n  private readonly logoutUrl: string;\n  private readonly fhircastHubUrl: string;\n  private readonly defaultHeaders: Record<string, string>;\n  private readonly onUnauthenticated?: () => void;\n  private readonly autoBatchTime: number;\n  private readonly autoBatchQueue: AutoBatchEntry[] | undefined;\n  private readonly refreshGracePeriod: number;\n  private subscriptionManager?: SubscriptionManager;\n  private medplumServer?: boolean;\n  private clientId?: string;\n  private clientSecret?: string;\n  private autoBatchTimerId?: any;\n  private accessToken?: string;\n  private accessTokenExpires?: number;\n  private refreshToken?: string;\n  private refreshPromise?: Promise<any>;\n  private profilePromise?: Promise<any>;\n  private sessionDetails?: SessionDetails;\n  private basicAuth?: string;\n  private initPromise: Promise<void>;\n  private initComplete = true;\n  private keyValueClient?: MedplumKeyValueClient;\n\n  constructor(options?: MedplumClientOptions) {\n    super();\n\n    if (options?.baseUrl) {\n      if (!options.baseUrl.startsWith('http')) {\n        throw new Error('Base URL must start with http or https');\n      }\n    }\n\n    this.options = options ?? {};\n    this.fetch = options?.fetch ?? getDefaultFetch();\n    this.storage = options?.storage ?? new ClientStorage();\n    this.createPdfImpl = options?.createPdf;\n    this.baseUrl = ensureTrailingSlash(options?.baseUrl ?? DEFAULT_BASE_URL);\n    this.fhirBaseUrl = concatUrls(this.baseUrl, options?.fhirUrlPath ?? 'fhir/R4');\n    this.authorizeUrl = concatUrls(this.baseUrl, options?.authorizeUrl ?? 'oauth2/authorize');\n    this.tokenUrl = concatUrls(this.baseUrl, options?.tokenUrl ?? 'oauth2/token');\n    this.logoutUrl = concatUrls(this.baseUrl, options?.logoutUrl ?? 'oauth2/logout');\n    this.fhircastHubUrl = concatUrls(this.baseUrl, options?.fhircastHubUrl ?? 'fhircast/STU3');\n    this.clientId = options?.clientId ?? '';\n    this.clientSecret = options?.clientSecret ?? '';\n    this.defaultHeaders = options?.defaultHeaders ?? {};\n    this.onUnauthenticated = options?.onUnauthenticated;\n    this.refreshGracePeriod = options?.refreshGracePeriod ?? DEFAULT_REFRESH_GRACE_PERIOD;\n\n    this.cacheTime =\n      options?.cacheTime ?? (typeof window === 'undefined' ? DEFAULT_NODE_CACHE_TIME : DEFAULT_BROWSER_CACHE_TIME);\n    if (this.cacheTime > 0) {\n      this.requestCache = new LRUCache(options?.resourceCacheSize ?? DEFAULT_RESOURCE_CACHE_SIZE);\n    } else {\n      this.requestCache = undefined;\n    }\n\n    if (options?.autoBatchTime) {\n      this.autoBatchTime = options.autoBatchTime;\n      this.autoBatchQueue = [];\n    } else {\n      this.autoBatchTime = 0;\n      this.autoBatchQueue = undefined;\n    }\n\n    if (options?.accessToken) {\n      this.setAccessToken(options.accessToken);\n    }\n\n    if (this.storage.getInitPromise === undefined) {\n      if (!options?.accessToken) {\n        this.attemptResumeActiveLogin().catch(console.error);\n      }\n      this.initPromise = Promise.resolve();\n      this.dispatchEvent({ type: 'storageInitialized' });\n    } else {\n      this.initComplete = false;\n      this.initPromise = this.storage.getInitPromise();\n      this.initPromise\n        .then(() => {\n          if (!options?.accessToken) {\n            this.attemptResumeActiveLogin().catch(console.error);\n          }\n          this.initComplete = true;\n          this.dispatchEvent({ type: 'storageInitialized' });\n        })\n        .catch((err: Error) => {\n          console.error(err);\n          this.initComplete = true;\n          this.dispatchEvent({ type: 'storageInitFailed', payload: { error: err } });\n        });\n    }\n\n    this.setupStorageListener();\n  }\n\n  /**\n   * @returns Whether the client has been fully initialized or not. Should always be true unless a custom asynchronous `ClientStorage` was passed into the constructor.\n   */\n  get isInitialized(): boolean {\n    return this.initComplete;\n  }\n\n  /**\n   * Gets a Promise that resolves when async initialization is complete. This is particularly useful for waiting for an async `ClientStorage` and/or authentication to finish.\n   * @returns A Promise that resolves when any async initialization of the client is finished.\n   */\n  getInitPromise(): Promise<void> {\n    return this.initPromise;\n  }\n\n  private async attemptResumeActiveLogin(): Promise<void> {\n    const activeLogin = this.getActiveLogin();\n    if (!activeLogin) {\n      return;\n    }\n    this.setAccessToken(activeLogin.accessToken, activeLogin.refreshToken);\n    await this.refreshProfile();\n  }\n\n  /**\n   * Returns the current base URL for all API requests.\n   * By default, this is set to `https://api.medplum.com/`.\n   * This can be overridden by setting the `baseUrl` option when creating the client.\n   * @category HTTP\n   * @returns The current base URL for all API requests.\n   */\n  getBaseUrl(): string {\n    return this.baseUrl;\n  }\n\n  /**\n   * Returns the current authorize URL.\n   * By default, this is set to `https://api.medplum.com/oauth2/authorize`.\n   * This can be overridden by setting the `authorizeUrl` option when creating the client.\n   * @category HTTP\n   * @returns The current authorize URL.\n   */\n  getAuthorizeUrl(): string {\n    return this.authorizeUrl;\n  }\n\n  /**\n   * Returns the current token URL.\n   * By default, this is set to `https://api.medplum.com/oauth2/token`.\n   * This can be overridden by setting the `tokenUrl` option when creating the client.\n   * @category HTTP\n   * @returns The current token URL.\n   */\n  getTokenUrl(): string {\n    return this.tokenUrl;\n  }\n\n  /**\n   * Returns the current logout URL.\n   * By default, this is set to `https://api.medplum.com/oauth2/logout`.\n   * This can be overridden by setting the `logoutUrl` option when creating the client.\n   * @category HTTP\n   * @returns The current logout URL.\n   */\n  getLogoutUrl(): string {\n    return this.logoutUrl;\n  }\n\n  /**\n   * Returns the current FHIRcast Hub URL.\n   * By default, this is set to `https://api.medplum.com/fhircast/STU3`.\n   * This can be overridden by setting the `logoutUrl` option when creating the client.\n   * @category HTTP\n   * @returns The current FHIRcast Hub URL.\n   */\n  getFhircastHubUrl(): string {\n    return this.fhircastHubUrl;\n  }\n\n  /**\n   * Returns default headers to include in all requests.\n   * This can be used to set custom headers such as Cookies or Authorization headers.\n   * @category HTTP\n   * @returns Default headers to include in all requests.\n   */\n  getDefaultHeaders(): Record<string, string> {\n    return this.defaultHeaders;\n  }\n\n  /**\n   * Clears all auth state including local storage and session storage.\n   * @category Authentication\n   */\n  clear(): void {\n    this.storage.clear();\n    if (typeof window !== 'undefined') {\n      sessionStorage.clear();\n    }\n    this.clearActiveLogin();\n  }\n\n  /**\n   * Clears the active login from local storage.\n   * Does not clear all local storage (such as other logins).\n   * @category Authentication\n   */\n  clearActiveLogin(): void {\n    this.storage.setString('activeLogin', undefined);\n    this.requestCache?.clear();\n    this.accessToken = undefined;\n    this.refreshToken = undefined;\n    this.refreshPromise = undefined;\n    this.accessTokenExpires = undefined;\n    this.sessionDetails = undefined;\n    this.medplumServer = undefined;\n    this.dispatchEvent({ type: 'change' });\n  }\n\n  /**\n   * Invalidates any cached values or cached requests for the given URL.\n   * @category Caching\n   * @param url - The URL to invalidate.\n   */\n  invalidateUrl(url: URL | string): void {\n    url = url.toString();\n    this.requestCache?.delete(url);\n  }\n\n  /**\n   * Invalidates all cached values and flushes the cache.\n   * @category Caching\n   */\n  invalidateAll(): void {\n    this.requestCache?.clear();\n  }\n\n  /**\n   * Invalidates all cached search results or cached requests for the given resourceType.\n   * @category Caching\n   * @param resourceType - The resource type to invalidate.\n   */\n  invalidateSearches<K extends ResourceType>(resourceType: K): void {\n    const url = concatUrls(this.fhirBaseUrl, resourceType);\n    if (this.requestCache) {\n      for (const key of this.requestCache.keys()) {\n        if (key.endsWith(url) || key.includes(url + '?')) {\n          this.requestCache.delete(key);\n        }\n      }\n    }\n  }\n\n  /**\n   * Makes an HTTP GET request to the specified URL.\n   *\n   * This is a lower level method for custom requests.\n   * For common operations, we recommend using higher level methods\n   * such as `readResource()`, `search()`, etc.\n   * @category HTTP\n   * @param url - The target URL.\n   * @param options - Optional fetch options.\n   * @returns Promise to the response content.\n   */\n  get<T = any>(url: URL | string, options: MedplumRequestOptions = {}): ReadablePromise<T> {\n    url = url.toString();\n    const cached = this.getCacheEntry(url, options);\n    if (cached) {\n      return cached.value;\n    }\n\n    let promise: Promise<T>;\n\n    if (url.startsWith(this.fhirBaseUrl) && this.autoBatchQueue) {\n      promise = new Promise<T>((resolve, reject) => {\n        (this.autoBatchQueue as AutoBatchEntry[]).push({\n          method: 'GET',\n          url: (url as string).replace(this.fhirBaseUrl, ''),\n          options,\n          resolve,\n          reject,\n        });\n        if (!this.autoBatchTimerId) {\n          this.autoBatchTimerId = setTimeout(() => this.executeAutoBatch(), this.autoBatchTime);\n        }\n      });\n    } else {\n      promise = this.request<T>('GET', url, options);\n    }\n\n    const readablePromise = new ReadablePromise(promise);\n    this.setCacheEntry(url, readablePromise);\n    return readablePromise;\n  }\n\n  /**\n   * Makes an HTTP POST request to the specified URL.\n   *\n   * This is a lower level method for custom requests.\n   * For common operations, we recommend using higher level methods\n   * such as `createResource()`.\n   * @category HTTP\n   * @param url - The target URL.\n   * @param body - The content body. Strings and `File` objects are passed directly. Other objects are converted to JSON.\n   * @param contentType - The content type to be included in the \"Content-Type\" header.\n   * @param options - Optional fetch options.\n   * @returns Promise to the response content.\n   */\n  post(url: URL | string, body?: any, contentType?: string, options: MedplumRequestOptions = {}): Promise<any> {\n    url = url.toString();\n    this.setRequestBody(options, body);\n    if (contentType) {\n      this.setRequestContentType(options, contentType);\n    }\n    this.invalidateUrl(url);\n    return this.request('POST', url, options);\n  }\n\n  /**\n   * Makes an HTTP PUT request to the specified URL.\n   *\n   * This is a lower level method for custom requests.\n   * For common operations, we recommend using higher level methods\n   * such as `updateResource()`.\n   * @category HTTP\n   * @param url - The target URL.\n   * @param body - The content body. Strings and `File` objects are passed directly. Other objects are converted to JSON.\n   * @param contentType - The content type to be included in the \"Content-Type\" header.\n   * @param options - Optional fetch options.\n   * @returns Promise to the response content.\n   */\n  put(url: URL | string, body: any, contentType?: string, options: MedplumRequestOptions = {}): Promise<any> {\n    url = url.toString();\n    this.setRequestBody(options, body);\n    if (contentType) {\n      this.setRequestContentType(options, contentType);\n    }\n    this.invalidateUrl(url);\n    return this.request('PUT', url, options);\n  }\n\n  /**\n   * Makes an HTTP PATCH request to the specified URL.\n   *\n   * This is a lower level method for custom requests.\n   * For common operations, we recommend using higher level methods\n   * such as `patchResource()`.\n   * @category HTTP\n   * @param url - The target URL.\n   * @param operations - Array of JSONPatch operations.\n   * @param options - Optional fetch options.\n   * @returns Promise to the response content.\n   */\n  patch(url: URL | string, operations: PatchOperation[], options: MedplumRequestOptions = {}): Promise<any> {\n    url = url.toString();\n    this.setRequestBody(options, operations);\n    this.setRequestContentType(options, ContentType.JSON_PATCH);\n    this.invalidateUrl(url);\n    return this.request('PATCH', url, options);\n  }\n\n  /**\n   * Makes an HTTP DELETE request to the specified URL.\n   *\n   *\n   * This is a lower level method for custom requests.\n   * For common operations, we recommend using higher level methods\n   * such as `deleteResource()`.\n   * @category HTTP\n   * @param url - The target URL.\n   * @param options - Optional fetch options.\n   * @returns Promise to the response content.\n   */\n  delete(url: URL | string, options?: MedplumRequestOptions): Promise<any> {\n    url = url.toString();\n    this.invalidateUrl(url);\n    return this.request('DELETE', url, options);\n  }\n\n  /**\n   * Initiates a new user flow.\n   *\n   * This method is part of the two different user registration flows:\n   * 1) New Practitioner and new Project\n   * 2) New Patient registration\n   * @category Authentication\n   * @param newUserRequest - Register request including email and password.\n   * @param options - Optional fetch options.\n   * @returns Promise to the authentication response.\n   */\n  async startNewUser(\n    newUserRequest: NewUserRequest,\n    options?: MedplumRequestOptions\n  ): Promise<LoginAuthenticationResponse> {\n    const { codeChallengeMethod, codeChallenge } = await this.startPkce();\n    return this.post(\n      'auth/newuser',\n      {\n        ...newUserRequest,\n        clientId: newUserRequest.clientId ?? this.clientId,\n        codeChallengeMethod,\n        codeChallenge,\n      },\n      undefined,\n      options\n    ) as Promise<LoginAuthenticationResponse>;\n  }\n\n  /**\n   * Initiates a new project flow.\n   *\n   * This requires a partial login from `startNewUser` or `startNewGoogleUser`.\n   * @param newProjectRequest - Register request including email and password.\n   * @param options - Optional fetch options.\n   * @returns Promise to the authentication response.\n   */\n  async startNewProject(\n    newProjectRequest: NewProjectRequest,\n    options?: MedplumRequestOptions\n  ): Promise<LoginAuthenticationResponse> {\n    return this.post('auth/newproject', newProjectRequest, undefined, options) as Promise<LoginAuthenticationResponse>;\n  }\n\n  /**\n   * Initiates a new patient flow.\n   *\n   * This requires a partial login from `startNewUser` or `startNewGoogleUser`.\n   * @param newPatientRequest - Register request including email and password.\n   * @param options - Optional fetch options.\n   * @returns Promise to the authentication response.\n   */\n  async startNewPatient(\n    newPatientRequest: NewPatientRequest,\n    options?: MedplumRequestOptions\n  ): Promise<LoginAuthenticationResponse> {\n    return this.post('auth/newpatient', newPatientRequest, undefined, options) as Promise<LoginAuthenticationResponse>;\n  }\n\n  /**\n   * Initiates a user login flow.\n   * @category Authentication\n   * @param loginRequest - Login request including email and password.\n   * @param options - Optional fetch options.\n   * @returns Promise to the authentication response.\n   */\n  async startLogin(\n    loginRequest: EmailPasswordLoginRequest,\n    options?: MedplumRequestOptions\n  ): Promise<LoginAuthenticationResponse> {\n    return this.post(\n      'auth/login',\n      {\n        ...(await this.ensureCodeChallenge(loginRequest)),\n        clientId: loginRequest.clientId ?? this.clientId,\n        scope: loginRequest.scope,\n      },\n      undefined,\n      options\n    ) as Promise<LoginAuthenticationResponse>;\n  }\n\n  /**\n   * Tries to sign in with Google authentication.\n   * The response parameter is the result of a Google authentication.\n   * See: https://developers.google.com/identity/gsi/web/guides/handle-credential-responses-js-functions\n   * @category Authentication\n   * @param loginRequest - Login request including Google credential response.\n   * @param options - Optional fetch options.\n   * @returns Promise to the authentication response.\n   */\n  async startGoogleLogin(\n    loginRequest: GoogleLoginRequest,\n    options?: MedplumRequestOptions\n  ): Promise<LoginAuthenticationResponse> {\n    return this.post(\n      'auth/google',\n      {\n        ...(await this.ensureCodeChallenge(loginRequest)),\n        clientId: loginRequest.clientId ?? this.clientId,\n        scope: loginRequest.scope,\n      },\n      undefined,\n      options\n    ) as Promise<LoginAuthenticationResponse>;\n  }\n\n  /**\n   * Returns the PKCE code challenge and method.\n   * If the login request already includes a code challenge, it is returned.\n   * Otherwise, a new PKCE code challenge is generated.\n   * @category Authentication\n   * @param loginRequest - The original login request.\n   * @returns The PKCE code challenge and method.\n   */\n  async ensureCodeChallenge<T extends BaseLoginRequest>(loginRequest: T): Promise<T> {\n    if (loginRequest.codeChallenge) {\n      return loginRequest;\n    }\n    return { ...loginRequest, ...(await this.startPkce()) };\n  }\n\n  /**\n   * Signs out locally.\n   * Does not invalidate tokens with the server.\n   * @category Authentication\n   */\n  async signOut(): Promise<void> {\n    await this.post(this.logoutUrl, {});\n    this.clear();\n  }\n\n  /**\n   * Tries to sign in the user.\n   * Returns true if the user is signed in.\n   * This may result in navigating away to the sign in page.\n   * @category Authentication\n   * @param loginParams - Optional login parameters.\n   * @returns The user profile resource if available.\n   */\n  async signInWithRedirect(loginParams?: Partial<BaseLoginRequest>): Promise<ProfileResource | undefined> {\n    const urlParams = new URLSearchParams(window.location.search);\n    const code = urlParams.get('code');\n    if (!code) {\n      await this.requestAuthorization(loginParams);\n      return undefined;\n    }\n    return this.processCode(code);\n  }\n\n  /**\n   * Tries to sign out the user.\n   * See: https://docs.aws.amazon.com/cognito/latest/developerguide/logout-endpoint.html\n   * @category Authentication\n   */\n  signOutWithRedirect(): void {\n    window.location.assign(this.logoutUrl);\n  }\n\n  /**\n   * Initiates sign in with an external identity provider.\n   * @param authorizeUrl - The external authorization URL.\n   * @param clientId - The external client ID.\n   * @param redirectUri - The external identity provider redirect URI.\n   * @param baseLogin - The Medplum login request.\n   * @param pkceEnabled - Whether `PKCE` should be enabled for this external auth request. Defaults to `true`.\n   * @category Authentication\n   */\n  async signInWithExternalAuth(\n    authorizeUrl: string,\n    clientId: string,\n    redirectUri: string,\n    baseLogin: BaseLoginRequest,\n    pkceEnabled = true\n  ): Promise<void> {\n    let loginRequest = baseLogin;\n    if (pkceEnabled) {\n      loginRequest = await this.ensureCodeChallenge(baseLogin);\n    }\n    window.location.assign(\n      this.getExternalAuthRedirectUri(authorizeUrl, clientId, redirectUri, loginRequest, pkceEnabled)\n    );\n  }\n\n  /**\n   * Exchange an external access token for a Medplum access token.\n   * @param token - The access token that was generated by the external identity provider.\n   * @param clientId - The ID of the `ClientApplication` in your Medplum project that will be making the exchange request.\n   * @returns The user profile resource.\n   * @category Authentication\n   */\n  async exchangeExternalAccessToken(token: string, clientId?: string): Promise<ProfileResource> {\n    clientId = clientId ?? this.clientId;\n    if (!clientId) {\n      throw new Error('MedplumClient is missing clientId');\n    }\n\n    const formBody = new URLSearchParams();\n    formBody.set('grant_type', OAuthGrantType.TokenExchange);\n    formBody.set('subject_token_type', OAuthTokenType.AccessToken);\n    formBody.set('client_id', clientId);\n    formBody.set('subject_token', token);\n    return this.fetchTokens(formBody);\n  }\n\n  /**\n   * Builds the external identity provider redirect URI.\n   * @param authorizeUrl - The external authorization URL.\n   * @param clientId - The external client ID.\n   * @param redirectUri - The external identity provider redirect URI.\n   * @param loginRequest - The Medplum login request.\n   * @param pkceEnabled - Whether `PKCE` should be enabled for this external auth request. Defaults to `true`.\n   * @returns The external identity provider redirect URI.\n   * @category Authentication\n   */\n  getExternalAuthRedirectUri(\n    authorizeUrl: string,\n    clientId: string,\n    redirectUri: string,\n    loginRequest: BaseLoginRequest,\n    pkceEnabled = true\n  ): string {\n    const url = new URL(authorizeUrl);\n    url.searchParams.set('response_type', 'code');\n    url.searchParams.set('client_id', clientId);\n    url.searchParams.set('redirect_uri', redirectUri);\n    url.searchParams.set('scope', loginRequest.scope ?? 'openid profile email');\n    url.searchParams.set('state', JSON.stringify(loginRequest));\n\n    if (pkceEnabled) {\n      const { codeChallenge, codeChallengeMethod } = loginRequest;\n      if (!codeChallengeMethod) {\n        throw new Error('`LoginRequest` for external auth must include a `codeChallengeMethod`.');\n      }\n      if (!codeChallenge) {\n        throw new Error('`LoginRequest` for external auth must include a `codeChallenge`.');\n      }\n      url.searchParams.set('code_challenge_method', codeChallengeMethod);\n      url.searchParams.set('code_challenge', codeChallenge);\n    }\n\n    return url.toString();\n  }\n\n  /**\n   * Builds a FHIR URL from a collection of URL path components.\n   * For example, `fhirUrl('Patient', '123')` returns `fhir/R4/Patient/123`.\n   * @category HTTP\n   * @param path - The path component of the URL.\n   * @returns The well-formed FHIR URL.\n   */\n  fhirUrl(...path: string[]): URL {\n    return new URL(concatUrls(this.fhirBaseUrl, path.join('/')));\n  }\n\n  /**\n   * Builds a FHIR search URL from a search query or structured query object.\n   * @category HTTP\n   * @category Search\n   * @param resourceType - The FHIR resource type.\n   * @param query - The FHIR search query or structured query object. Can be any valid input to the URLSearchParams() constructor.\n   * @returns The well-formed FHIR URL.\n   */\n  fhirSearchUrl(resourceType: ResourceType, query: QueryTypes): URL {\n    const url = this.fhirUrl(resourceType);\n    if (query) {\n      url.search = getQueryString(query);\n    }\n    return url;\n  }\n\n  /**\n   * Sends a FHIR search request.\n   *\n   * @example\n   * Example using a FHIR search string:\n   *\n   * ```typescript\n   * const bundle = await client.search('Patient', 'name=Alice');\n   * console.log(bundle);\n   * ```\n   *\n   * @example\n   * The return value is a FHIR bundle:\n   *\n   * ```json\n   * {\n   *    \"resourceType\": \"Bundle\",\n   *    \"type\": \"searchset\",\n   *    \"entry\": [\n   *       {\n   *          \"resource\": {\n   *             \"resourceType\": \"Patient\",\n   *             \"name\": [\n   *                {\n   *                   \"given\": [\n   *                      \"George\"\n   *                   ],\n   *                   \"family\": \"Washington\"\n   *                }\n   *             ],\n   *          }\n   *       }\n   *    ]\n   * }\n   * ```\n   *\n   * @example\n   * To query the count of a search, use the summary feature like so:\n   *\n   * ```typescript\n   * const patients = medplum.search('Patient', '_summary=count');\n   * ```\n   *\n   * See FHIR search for full details: https://www.hl7.org/fhir/search.html\n   * @category Search\n   * @param resourceType - The FHIR resource type.\n   * @param query - Optional FHIR search query or structured query object. Can be any valid input to the URLSearchParams() constructor.\n   * @param options - Optional fetch options.\n   * @returns Promise to the search result bundle.\n   */\n  search<K extends ResourceType>(\n    resourceType: K,\n    query?: QueryTypes,\n    options?: MedplumRequestOptions\n  ): ReadablePromise<Bundle<ExtractResource<K>>> {\n    const url = this.fhirSearchUrl(resourceType, query);\n    const cacheKey = 'search-' + url.toString();\n    const cached = this.getCacheEntry(cacheKey, options);\n    if (cached) {\n      return cached.value;\n    }\n    const promise = new ReadablePromise(\n      (async () => {\n        const bundle = await this.get<Bundle<ExtractResource<K>>>(url, options);\n        if (bundle.entry) {\n          for (const entry of bundle.entry) {\n            this.cacheResource(entry.resource);\n          }\n        }\n        return bundle;\n      })()\n    );\n    this.setCacheEntry(cacheKey, promise);\n    return promise;\n  }\n\n  /**\n   * Sends a FHIR search request for a single resource.\n   *\n   * This is a convenience method for `search()` that returns the first resource rather than a `Bundle`.\n   *\n   * @example\n   * Example using a FHIR search string:\n   *\n   * ```typescript\n   * const patient = await client.searchOne('Patient', 'identifier=123');\n   * console.log(patient);\n   * ```\n   *\n   * The return value is the resource, if available; otherwise, undefined.\n   *\n   * See FHIR search for full details: https://www.hl7.org/fhir/search.html\n   * @category Search\n   * @param resourceType - The FHIR resource type.\n   * @param query - Optional FHIR search query or structured query object. Can be any valid input to the URLSearchParams() constructor.\n   * @param options - Optional fetch options.\n   * @returns Promise to the first search result.\n   */\n  searchOne<K extends ResourceType>(\n    resourceType: K,\n    query?: QueryTypes,\n    options?: MedplumRequestOptions\n  ): ReadablePromise<ExtractResource<K> | undefined> {\n    const url = this.fhirSearchUrl(resourceType, query);\n    url.searchParams.set('_count', '1');\n    url.searchParams.sort();\n    const cacheKey = 'searchOne-' + url.toString();\n    const cached = this.getCacheEntry(cacheKey, options);\n    if (cached) {\n      return cached.value;\n    }\n    const promise = new ReadablePromise(\n      this.search<K>(resourceType, url.searchParams, options).then((b) => b.entry?.[0]?.resource)\n    );\n    this.setCacheEntry(cacheKey, promise);\n    return promise;\n  }\n\n  /**\n   * Sends a FHIR search request for an array of resources.\n   *\n   * This is a convenience method for `search()` that returns the resources as an array rather than a `Bundle`.\n   *\n   * @example\n   * Example using a FHIR search string:\n   *\n   * ```typescript\n   * const patients = await client.searchResources('Patient', 'name=Alice');\n   * console.log(patients);\n   * ```\n   *\n   * The return value is an array of resources.\n   *\n   * See FHIR search for full details: https://www.hl7.org/fhir/search.html\n   * @category Search\n   * @param resourceType - The FHIR resource type.\n   * @param query - Optional FHIR search query or structured query object. Can be any valid input to the URLSearchParams() constructor.\n   * @param options - Optional fetch options.\n   * @returns Promise to the array of search results.\n   */\n  searchResources<K extends ResourceType>(\n    resourceType: K,\n    query?: QueryTypes,\n    options?: MedplumRequestOptions\n  ): ReadablePromise<ResourceArray<ExtractResource<K>>> {\n    const url = this.fhirSearchUrl(resourceType, query);\n    const cacheKey = 'searchResources-' + url.toString();\n    const cached = this.getCacheEntry(cacheKey, options);\n    if (cached) {\n      return cached.value;\n    }\n    const promise = new ReadablePromise(this.search<K>(resourceType, query, options).then(bundleToResourceArray));\n    this.setCacheEntry(cacheKey, promise);\n    return promise;\n  }\n\n  /**\n   * Creates an\n   * [async generator](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AsyncGenerator)\n   * over a series of FHIR search requests for paginated search results. Each iteration of the generator yields\n   * the array of resources on each page. Searches using _offset based pagination are limited to 10,000 records.\n   * For larger result sets, _cursor based pagination should be used instead.\n   * See: https://www.medplum.com/docs/search/paginated-search#cursor-based-pagination\n   *\n   * @example\n   *\n   * ```typescript\n   * for await (const page of medplum.searchResourcePages('Patient', { _count: 10 })) {\n   *  for (const patient of page) {\n   *    console.log(`Processing Patient resource with ID: ${patient.id}`);\n   *  }\n   * }\n   * ```\n   *\n   * @category Search\n   * @param resourceType - The FHIR resource type.\n   * @param query - Optional FHIR search query or structured query object. Can be any valid input to the URLSearchParams() constructor.\n   * @param options - Optional fetch options.\n   * @yields An async generator, where each result is an array of resources for each page.\n   */\n  async *searchResourcePages<K extends ResourceType>(\n    resourceType: K,\n    query?: QueryTypes,\n    options?: MedplumRequestOptions\n  ): AsyncGenerator<ResourceArray<ExtractResource<K>>> {\n    let url: URL | undefined = this.fhirSearchUrl(resourceType, query);\n\n    while (url) {\n      const searchParams: URLSearchParams = new URL(url).searchParams;\n      const bundle = await this.search(resourceType, searchParams, options);\n      const nextLink: BundleLink | undefined = bundle.link?.find((link) => link.relation === 'next');\n      if (!bundle.entry?.length && !nextLink) {\n        break;\n      }\n\n      yield bundleToResourceArray(bundle);\n      url = nextLink?.url ? new URL(nextLink.url) : undefined;\n    }\n  }\n\n  /**\n   * Searches a ValueSet resource using the \"expand\" operation.\n   * See: https://www.hl7.org/fhir/operation-valueset-expand.html\n   * @category Search\n   * @param system - The ValueSet system url.\n   * @param filter - The search string.\n   * @param options - Optional fetch options.\n   * @returns Promise to expanded ValueSet.\n   * @deprecated Use `valueSetExpand()` instead.\n   */\n  searchValueSet(system: string, filter: string, options?: MedplumRequestOptions): ReadablePromise<ValueSet> {\n    return this.valueSetExpand({ url: system, filter }, options);\n  }\n\n  /**\n   * Searches a ValueSet resource using the \"expand\" operation.\n   * See: https://www.hl7.org/fhir/operation-valueset-expand.html\n   * @category Search\n   * @param params - The ValueSet expand parameters.\n   * @param options - Optional fetch options.\n   * @returns Promise to expanded ValueSet.\n   */\n  valueSetExpand(params: ValueSetExpandParams, options?: MedplumRequestOptions): ReadablePromise<ValueSet> {\n    const url = this.fhirUrl('ValueSet', '$expand');\n    url.search = new URLSearchParams(params as Record<string, string>).toString();\n    return this.get(url.toString(), options);\n  }\n\n  /**\n   * Returns a cached resource if it is available.\n   * @category Caching\n   * @param resourceType - The FHIR resource type.\n   * @param id - The FHIR resource ID.\n   * @returns The resource if it is available in the cache; undefined otherwise.\n   */\n  getCached<K extends ResourceType>(resourceType: K, id: string): ExtractResource<K> | undefined {\n    const cached = this.requestCache?.get(this.fhirUrl(resourceType, id).toString())?.value;\n    return cached?.isOk() ? (cached.read() as ExtractResource<K>) : undefined;\n  }\n\n  /**\n   * Returns a cached resource if it is available.\n   * @category Caching\n   * @param reference - The FHIR reference.\n   * @returns The resource if it is available in the cache; undefined otherwise.\n   */\n  getCachedReference<T extends Resource>(reference: Reference<T>): T | undefined {\n    const refString = reference.reference as string;\n    if (!refString) {\n      return undefined;\n    }\n    if (refString === 'system') {\n      return system as T;\n    }\n    const [resourceType, id] = refString.split('/');\n    if (!resourceType || !id) {\n      return undefined;\n    }\n    return this.getCached(resourceType as ResourceType, id) as T | undefined;\n  }\n\n  /**\n   * Reads a resource by resource type and ID.\n   *\n   * @example\n   * Example:\n   *\n   * ```typescript\n   * const patient = await medplum.readResource('Patient', '123');\n   * console.log(patient);\n   * ```\n   *\n   * See the FHIR \"read\" operation for full details: https://www.hl7.org/fhir/http.html#read\n   * @category Read\n   * @param resourceType - The FHIR resource type.\n   * @param id - The resource ID.\n   * @param options - Optional fetch options.\n   * @returns The resource if available.\n   */\n  readResource<K extends ResourceType>(\n    resourceType: K,\n    id: string,\n    options?: MedplumRequestOptions\n  ): ReadablePromise<ExtractResource<K>> {\n    if (!id) {\n      throw new Error('The \"id\" parameter cannot be null, undefined, or an empty string.');\n    }\n    return this.get<ExtractResource<K>>(this.fhirUrl(resourceType, id), options);\n  }\n\n  /**\n   * Reads a resource by `Reference`.\n   *\n   * This is a convenience method for `readResource()` that accepts a `Reference` object.\n   *\n   * @example\n   * Example:\n   *\n   * ```typescript\n   * const serviceRequest = await medplum.readResource('ServiceRequest', '123');\n   * const patient = await medplum.readReference(serviceRequest.subject);\n   * console.log(patient);\n   * ```\n   *\n   * See the FHIR \"read\" operation for full details: https://www.hl7.org/fhir/http.html#read\n   * @category Read\n   * @param reference - The FHIR reference object.\n   * @param options - Optional fetch options.\n   * @returns The resource if available.\n   */\n  readReference<T extends Resource>(reference: Reference<T>, options?: MedplumRequestOptions): ReadablePromise<T> {\n    const refString = reference.reference;\n    if (!refString) {\n      return new ReadablePromise(Promise.reject(new Error('Missing reference')));\n    }\n    if (refString === 'system') {\n      return new ReadablePromise(Promise.resolve(system as unknown as T));\n    }\n    const [resourceType, id] = refString.split('/');\n    if (!resourceType || !id) {\n      return new ReadablePromise(Promise.reject(new Error('Invalid reference')));\n    }\n    return this.readResource(resourceType as ResourceType, id, options) as ReadablePromise<T>;\n  }\n\n  /**\n   * Requests the schema for a resource type.\n   * If the schema is already cached, the promise is resolved immediately.\n   * @category Schema\n   * @param resourceType - The FHIR resource type.\n   * @returns Promise to a schema with the requested resource type.\n   */\n  requestSchema(resourceType: string): Promise<void> {\n    if (isDataTypeLoaded(resourceType)) {\n      return Promise.resolve();\n    }\n\n    const cacheKey = resourceType + '-requestSchema';\n    const cached = this.getCacheEntry(cacheKey, undefined);\n    if (cached) {\n      return cached.value;\n    }\n\n    const promise = new ReadablePromise<void>(\n      (async () => {\n        const query = `{\n      StructureDefinitionList(name: \"${resourceType}\") {\n        resourceType,\n        name,\n        kind,\n        description,\n        type,\n        url,\n        snapshot {\n          element {\n            id,\n            path,\n            definition,\n            min,\n            max,\n            base {\n              path,\n              min,\n              max\n            },\n            contentReference,\n            type {\n              code,\n              profile,\n              targetProfile\n            },\n            binding {\n              strength,\n              valueSet\n            }\n          }\n        }\n      }\n      SearchParameterList(base: \"${resourceType}\", _count: 100) {\n        base,\n        code,\n        type,\n        expression,\n        target\n      }\n    }`.replace(/\\s+/g, ' ');\n\n        const response = (await this.graphql(query)) as SchemaGraphQLResponse;\n\n        indexStructureDefinitionBundle(response.data.StructureDefinitionList.filter((sd) => sd.name === resourceType));\n\n        for (const searchParameter of response.data.SearchParameterList) {\n          indexSearchParameter(searchParameter);\n        }\n      })()\n    );\n    this.setCacheEntry(cacheKey, promise);\n    return promise;\n  }\n\n  /**\n   * Requests the schema for a profile.\n   * If the schema is already cached, the promise is resolved immediately.\n   * @category Schema\n   * @param profileUrl - The FHIR URL of the profile\n   * @param options - (optional) Additional options\n   * @returns Promise for schema request.\n   */\n  requestProfileSchema(profileUrl: string, options?: RequestProfileSchemaOptions): Promise<void> {\n    if (!options?.expandProfile && isProfileLoaded(profileUrl)) {\n      return Promise.resolve();\n    }\n\n    const cacheKey = profileUrl + '-requestSchema' + (options?.expandProfile ? '-nested' : '');\n    const cached = this.getCacheEntry(cacheKey, undefined);\n    if (cached) {\n      return cached.value;\n    }\n\n    const promise = new ReadablePromise<void>(\n      (async () => {\n        if (options?.expandProfile) {\n          const url = this.fhirUrl('StructureDefinition', '$expand-profile');\n          url.search = new URLSearchParams({ url: profileUrl }).toString();\n          const sdBundle = (await this.post(url.toString(), {})) as Bundle<StructureDefinition>;\n          indexStructureDefinitionBundle(sdBundle);\n        } else {\n          // Just sort by lastUpdated. Ideally, it would also be based on a logical sort of version\n          // See https://hl7.org/fhir/references.html#canonical-matching for more discussion\n          const sd = await this.searchOne('StructureDefinition', {\n            url: profileUrl,\n            _sort: '-_lastUpdated',\n          });\n\n          if (!sd) {\n            console.warn(`No StructureDefinition found for ${profileUrl}!`);\n            return;\n          }\n\n          loadDataType(sd);\n        }\n      })()\n    );\n    this.setCacheEntry(cacheKey, promise);\n    return promise;\n  }\n\n  /**\n   * Reads resource history by resource type and ID.\n   *\n   * The return value is a bundle of all versions of the resource.\n   *\n   * @example\n   * Example:\n   *\n   * ```typescript\n   * const history = await medplum.readHistory('Patient', '123');\n   * console.log(history);\n   * ```\n   *\n   * See the FHIR \"history\" operation for full details: https://www.hl7.org/fhir/http.html#history\n   * @category Read\n   * @param resourceType - The FHIR resource type.\n   * @param id - The resource ID.\n   * @param options - Optional fetch options.\n   * @returns Promise to the resource history.\n   */\n  readHistory<K extends ResourceType>(\n    resourceType: K,\n    id: string,\n    options?: MedplumRequestOptions\n  ): ReadablePromise<Bundle<ExtractResource<K>>> {\n    return this.get(this.fhirUrl(resourceType, id, '_history'), options);\n  }\n\n  /**\n   * Reads a specific version of a resource by resource type, ID, and version ID.\n   *\n   * @example\n   * Example:\n   *\n   * ```typescript\n   * const version = await medplum.readVersion('Patient', '123', '456');\n   * console.log(version);\n   * ```\n   *\n   * See the FHIR \"vread\" operation for full details: https://www.hl7.org/fhir/http.html#vread\n   * @category Read\n   * @param resourceType - The FHIR resource type.\n   * @param id - The resource ID.\n   * @param vid - The version ID.\n   * @param options - Optional fetch options.\n   * @returns The resource if available.\n   */\n  readVersion<K extends ResourceType>(\n    resourceType: K,\n    id: string,\n    vid: string,\n    options?: MedplumRequestOptions\n  ): ReadablePromise<ExtractResource<K>> {\n    return this.get(this.fhirUrl(resourceType, id, '_history', vid), options);\n  }\n\n  /**\n   * Executes the Patient \"everything\" operation for a patient.\n   *\n   * @example\n   * Example:\n   *\n   * ```typescript\n   * const bundle = await medplum.readPatientEverything('123');\n   * console.log(bundle);\n   * ```\n   *\n   * See the FHIR \"patient-everything\" operation for full details: https://hl7.org/fhir/operation-patient-everything.html\n   * @category Read\n   * @param id - The Patient Id\n   * @param options - Optional fetch options.\n   * @returns A Bundle of all Resources related to the Patient\n   */\n  readPatientEverything(id: string, options?: MedplumRequestOptions): ReadablePromise<Bundle> {\n    return this.get(this.fhirUrl('Patient', id, '$everything'), options);\n  }\n\n  /**\n   * Creates a new FHIR resource.\n   *\n   * The return value is the newly created resource, including the ID and meta.\n   *\n   * @example\n   * Example:\n   *\n   * ```typescript\n   * const result = await medplum.createResource({\n   *   resourceType: 'Patient',\n   *   name: [{\n   *    family: 'Smith',\n   *    given: ['John']\n   *   }]\n   * });\n   * console.log(result.id);\n   * ```\n   *\n   * See the FHIR \"create\" operation for full details: https://www.hl7.org/fhir/http.html#create\n   * @category Create\n   * @param resource - The FHIR resource to create.\n   * @param options - Optional fetch options.\n   * @returns The result of the create operation.\n   */\n  createResource<T extends Resource>(resource: T, options?: MedplumRequestOptions): Promise<T> {\n    if (!resource.resourceType) {\n      throw new Error('Missing resourceType');\n    }\n    this.invalidateSearches(resource.resourceType);\n    return this.post(this.fhirUrl(resource.resourceType), resource, undefined, options);\n  }\n\n  /**\n   * Conditionally create a new FHIR resource only if some equivalent resource does not already exist on the server.\n   *\n   * The return value is the existing resource or the newly created resource, including the ID and meta.\n   *\n   * @example\n   * Example:\n   *\n   * ```typescript\n   * const result = await medplum.createResourceIfNoneExist(\n   *   {\n   *     resourceType: 'Patient',\n   *     identifier: [{\n   *      system: 'http://example.com/mrn',\n   *      value: '123'\n   *     }]\n   *     name: [{\n   *      family: 'Smith',\n   *      given: ['John']\n   *     }]\n   *   },\n   *   'identifier=123'\n   * );\n   * console.log(result.id);\n   * ```\n   *\n   * This method is syntactic sugar for:\n   *\n   * ```typescript\n   * return searchOne(resourceType, query) ?? createResource(resource);\n   * ```\n   *\n   * The query parameter only contains the search parameters (what would be in the URL following the \"?\").\n   *\n   * See the FHIR \"conditional create\" operation for full details: https://www.hl7.org/fhir/http.html#ccreate\n   * @category Create\n   * @param resource - The FHIR resource to create.\n   * @param query - The search query for an equivalent resource (should not include resource type or \"?\").\n   * @param options - Optional fetch options.\n   * @returns The result of the create operation.\n   */\n  async createResourceIfNoneExist<T extends Resource>(\n    resource: T,\n    query: string,\n    options?: MedplumRequestOptions\n  ): Promise<T> {\n    const url = this.fhirUrl(resource.resourceType);\n    if (!options) {\n      options = { headers: { 'If-None-Exist': query } };\n    } else if (!options.headers) {\n      options.headers = { 'If-None-Exist': query };\n    } else if (Array.isArray(options.headers)) {\n      options.headers.push(['If-None-Exist', query]);\n    } else if (options.headers instanceof Headers) {\n      options.headers.set('If-None-Exist', query);\n    } else {\n      options.headers['If-None-Exist'] = query;\n    }\n\n    const result = await this.post(url, resource, undefined, options);\n    this.cacheResource(result);\n    this.invalidateUrl(this.fhirUrl(resource.resourceType, resource.id as string, '_history'));\n    this.invalidateSearches(resource.resourceType);\n    return result;\n  }\n\n  /**\n   * Upsert a resource: update it in place if it exists, otherwise create it.  This is done in a single, transactional\n   * request to guarantee data consistency.\n   * @param resource - The resource to update or create.\n   * @param query - A FHIR search query to uniquely identify the resource if it already exists.\n   * @param options  - Optional fetch options.\n   * @returns The updated/created resource.\n   */\n  async upsertResource<T extends Resource>(\n    resource: T,\n    query: QueryTypes,\n    options?: MedplumRequestOptions\n  ): Promise<T> {\n    // Build conditional update URL, e.g. `PUT /ResourceType?search-param=value`\n    const url = this.fhirSearchUrl(resource.resourceType, query);\n\n    let result = await this.put(url, resource, undefined, options);\n    if (!result) {\n      // On 304 not modified, result will be undefined\n      // Return the user input instead\n      result = resource;\n    }\n    this.cacheResource(result);\n    this.invalidateUrl(this.fhirUrl(resource.resourceType, resource.id as string, '_history'));\n    this.invalidateSearches(resource.resourceType);\n    return result;\n  }\n\n  /**\n   * Creates a FHIR `Attachment` with the provided data content.\n   *\n   * This is a convenience method for creating a `Binary` resource and then creating an `Attachment` element.\n   *\n   * The `data` parameter can be a string or a `File` object.\n   *\n   * A `File` object often comes from a `<input type=\"file\">` element.\n   *\n   * @example\n   * Example:\n   *\n   * ```typescript\n   * const result = await medplum.createAttachment(myFile, 'test.jpg', 'image/jpeg');\n   * console.log(result);\n   * ```\n   *\n   * See the FHIR \"create\" operation for full details: https://www.hl7.org/fhir/http.html#create\n   * @category Create\n   * @param createBinaryOptions -The binary options. See `CreateBinaryOptions` for full details.\n   * @param requestOptions - Optional fetch options. **NOTE:** only `options.signal` is respected when `onProgress` is also provided.\n   * @returns The result of the create operation.\n   */\n  createAttachment(\n    createBinaryOptions: CreateBinaryOptions,\n    requestOptions?: MedplumRequestOptions\n  ): Promise<Attachment>;\n\n  /**\n   * @category Create\n   * @param data - The binary data to upload.\n   * @param filename - Optional filename for the binary.\n   * @param contentType - Content type for the binary.\n   * @param onProgress - Optional callback for progress events. **NOTE:** only `options.signal` is respected when `onProgress` is also provided.\n   * @param options - Optional fetch options. **NOTE:** only `options.signal` is respected when `onProgress` is also provided.\n   * @returns The result of the create operation.\n   * @deprecated Use `createAttachment` with `CreateBinaryOptions` instead. To be removed in Medplum 4.0.\n   */\n  createAttachment(\n    data: BinarySource,\n    filename: string | undefined,\n    contentType: string,\n    onProgress?: (e: ProgressEvent) => void,\n    options?: MedplumRequestOptions\n  ): Promise<Attachment>;\n\n  async createAttachment(\n    arg1: BinarySource | CreateBinaryOptions,\n    arg2: string | undefined | MedplumRequestOptions,\n    arg3?: string,\n    arg4?: (e: ProgressEvent) => void,\n    arg5?: MedplumRequestOptions\n  ): Promise<Attachment> {\n    const createBinaryOptions = normalizeCreateBinaryOptions(arg1, arg2, arg3, arg4);\n    const requestOptions = arg5 ?? (typeof arg2 === 'object' ? arg2 : {});\n    const binary = await this.createBinary(createBinaryOptions, requestOptions);\n    return {\n      contentType: createBinaryOptions.contentType,\n      url: binary.url,\n      title: createBinaryOptions.filename,\n    };\n  }\n\n  /**\n   * Creates a FHIR `Binary` resource with the provided data content.\n   *\n   * The return value is the newly created resource, including the ID and meta.\n   *\n   * The `data` parameter can be a string or a `File` object.\n   *\n   * A `File` object often comes from a `<input type=\"file\">` element.\n   *\n   * @example\n   * Example:\n   *\n   * ```typescript\n   * const result = await medplum.createBinary(myFile, 'test.jpg', 'image/jpeg');\n   * console.log(result.id);\n   * ```\n   *\n   * See the FHIR \"create\" operation for full details: https://www.hl7.org/fhir/http.html#create\n   *\n   * @category Create\n   * @param createBinaryOptions -The binary options. See `CreateBinaryOptions` for full details.\n   * @param requestOptions - Optional fetch options. **NOTE:** only `options.signal` is respected when `onProgress` is also provided.\n   * @returns The result of the create operation.\n   */\n  createBinary(createBinaryOptions: CreateBinaryOptions, requestOptions?: MedplumRequestOptions): Promise<Binary>;\n\n  /**\n   * @category Create\n   * @param data - The binary data to upload.\n   * @param filename - Optional filename for the binary.\n   * @param contentType - Content type for the binary.\n   * @param onProgress - Optional callback for progress events. **NOTE:** only `options.signal` is respected when `onProgress` is also provided.\n   * @param options - Optional fetch options. **NOTE:** only `options.signal` is respected when `onProgress` is also provided.\n   * @returns The result of the create operation.\n   * @deprecated Use `createBinary` with `CreateBinaryOptions` instead. To be removed in Medplum 4.0.\n   */\n  createBinary(\n    data: BinarySource,\n    filename: string | undefined,\n    contentType: string,\n    onProgress?: (e: ProgressEvent) => void,\n    options?: MedplumRequestOptions\n  ): Promise<Binary>;\n\n  createBinary(\n    arg1: BinarySource | CreateBinaryOptions,\n    arg2: string | undefined | MedplumRequestOptions,\n    arg3?: string,\n    arg4?: (e: ProgressEvent) => void,\n    arg5?: MedplumRequestOptions\n  ): Promise<Binary> {\n    const createBinaryOptions = normalizeCreateBinaryOptions(arg1, arg2, arg3, arg4);\n    const requestOptions = arg5 ?? (typeof arg2 === 'object' ? arg2 : {});\n\n    const { data, contentType, filename, securityContext, onProgress } = createBinaryOptions;\n\n    const url = this.fhirUrl('Binary');\n    if (filename) {\n      url.searchParams.set('_filename', filename);\n    }\n\n    if (securityContext?.reference) {\n      this.setRequestHeader(requestOptions, 'X-Security-Context', securityContext.reference);\n    }\n\n    if (onProgress) {\n      return this.uploadwithProgress(url, data, contentType, onProgress, requestOptions);\n    }\n    return this.post(url, data, contentType, requestOptions);\n  }\n\n  uploadwithProgress(\n    url: URL,\n    data: BinarySource,\n    contentType: string,\n    onProgress: (e: ProgressEvent) => void,\n    options?: MedplumRequestOptions\n  ): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const xhr = new XMLHttpRequest();\n\n      // Ensure the 'abort' event listener is removed from the signal to prevent memory leaks,\n      // especially in scenarios where there is a long-lived signal across multiple requests.\n      const handleSignalAbort = (): void => xhr.abort();\n      options?.signal?.addEventListener('abort', handleSignalAbort);\n      const sendResult = (result: any): void => {\n        options?.signal?.removeEventListener('abort', handleSignalAbort);\n\n        if (result instanceof Error) {\n          reject(result);\n        } else {\n          resolve(result);\n        }\n      };\n\n      xhr.responseType = 'json';\n      xhr.onabort = () => sendResult(new DOMException('Request aborted', 'AbortError'));\n      xhr.onerror = () => sendResult(new Error('Request error'));\n\n      if (onProgress) {\n        xhr.upload.onprogress = (e) => onProgress(e);\n        xhr.upload.onload = (e) => onProgress(e);\n      }\n\n      xhr.onload = () => {\n        if (xhr.status >= 200 && xhr.status < 300) {\n          sendResult(xhr.response);\n        } else {\n          sendResult(new OperationOutcomeError(normalizeOperationOutcome(xhr.response || xhr.statusText)));\n        }\n      };\n\n      xhr.open('POST', url);\n      xhr.withCredentials = true;\n      xhr.setRequestHeader('Authorization', 'Bearer ' + this.accessToken);\n      xhr.setRequestHeader('Cache-Control', 'no-cache, no-store, max-age=0');\n      xhr.setRequestHeader('Content-Type', contentType);\n\n      if (this.options.extendedMode !== false) {\n        xhr.setRequestHeader('X-Medplum', 'extended');\n      }\n\n      if (options?.headers) {\n        const headers = options.headers as Record<string, string>;\n        for (const [key, value] of Object.entries(headers)) {\n          xhr.setRequestHeader(key, value);\n        }\n      }\n\n      xhr.send(data);\n    });\n  }\n\n  /**\n   * Creates a PDF as a FHIR `Binary` resource based on pdfmake document definition.\n   *\n   * The return value is the newly created resource, including the ID and meta.\n   *\n   * The `docDefinition` parameter is a pdfmake document definition.\n   *\n   * @example\n   * Example:\n   *\n   * ```typescript\n   * const result = await medplum.createPdf({\n   *   content: ['Hello world']\n   * });\n   * console.log(result.id);\n   * ```\n   *\n   * See the pdfmake document definition for full details: https://pdfmake.github.io/docs/0.1/document-definition-object/\n   * @category Media\n   * @param createPdfOptions - The PDF creation options. See `CreatePdfOptions` for full details.\n   * @param requestOptions - Optional fetch options.\n   * @returns The result of the create operation.\n   */\n  createPdf(createPdfOptions: CreatePdfOptions, requestOptions?: MedplumRequestOptions): Promise<Binary>;\n\n  /**\n   * @category Media\n   * @param docDefinition - The PDF document definition.\n   * @param filename - Optional filename for the PDF binary resource.\n   * @param tableLayouts - Optional pdfmake custom table layout.\n   * @param fonts - Optional pdfmake custom font dictionary.\n   * @returns The result of the create operation.\n   * @deprecated Use `createPdf` with `CreatePdfOptions` instead. To be removed in Medplum 4.0.\n   */\n  createPdf(\n    docDefinition: TDocumentDefinitions,\n    filename: string | undefined,\n    tableLayouts?: Record<string, CustomTableLayout>,\n    fonts?: TFontDictionary\n  ): Promise<Binary>;\n\n  async createPdf(\n    arg1: TDocumentDefinitions | CreatePdfOptions,\n    arg2?: string | MedplumRequestOptions,\n    arg3?: Record<string, CustomTableLayout>,\n    arg4?: TFontDictionary\n  ): Promise<Binary> {\n    if (!this.createPdfImpl) {\n      throw new Error('PDF creation not enabled');\n    }\n    const createPdfOptions = normalizeCreatePdfOptions(arg1, arg2, arg3, arg4);\n    const requestOptions = typeof arg2 === 'object' ? arg2 : {};\n    const { docDefinition, tableLayouts, fonts, ...rest } = createPdfOptions;\n    const blob = await this.createPdfImpl(docDefinition, tableLayouts, fonts);\n    const createBinaryOptions = { ...rest, data: blob, contentType: 'application/pdf' };\n    return this.createBinary(createBinaryOptions, requestOptions);\n  }\n\n  /**\n   * Creates a FHIR `Communication` resource with the provided data content.\n   *\n   * This is a convenience method to handle common cases where a `Communication` resource is created with a `payload`.\n   * @category Create\n   * @param resource - The FHIR resource to comment on.\n   * @param text - The text of the comment.\n   * @param options - Optional fetch options.\n   * @returns The result of the create operation.\n   */\n  createComment(resource: Resource, text: string, options?: MedplumRequestOptions): Promise<Communication> {\n    const profile = this.getProfile();\n    let encounter: Reference<Encounter> | undefined = undefined;\n    let subject: Reference<Patient> | undefined = undefined;\n\n    if (resource.resourceType === 'Encounter') {\n      encounter = createReference(resource);\n      subject = resource.subject as Reference<Patient> | undefined;\n    }\n\n    if (resource.resourceType === 'ServiceRequest') {\n      encounter = resource.encounter;\n      subject = resource.subject as Reference<Patient> | undefined;\n    }\n\n    if (resource.resourceType === 'Patient') {\n      subject = createReference(resource);\n    }\n\n    return this.createResource<Communication>(\n      {\n        resourceType: 'Communication',\n        status: 'completed',\n        basedOn: [createReference(resource)],\n        encounter,\n        subject,\n        sender: profile ? createReference(profile) : undefined,\n        sent: new Date().toISOString(),\n        payload: [{ contentString: text }],\n      },\n      options\n    );\n  }\n\n  /**\n   * Updates a FHIR resource.\n   *\n   * The return value is the updated resource, including the ID and meta.\n   *\n   * @example\n   * Example:\n   *\n   * ```typescript\n   * const result = await medplum.updateResource({\n   *   resourceType: 'Patient',\n   *   id: '123',\n   *   name: [{\n   *    family: 'Smith',\n   *    given: ['John']\n   *   }]\n   * });\n   * console.log(result.meta.versionId);\n   * ```\n   *\n   * See the FHIR \"update\" operation for full details: https://www.hl7.org/fhir/http.html#update\n   * @category Write\n   * @param resource - The FHIR resource to update.\n   * @param options - Optional fetch options.\n   * @returns The result of the update operation.\n   */\n  async updateResource<T extends Resource>(resource: T, options?: MedplumRequestOptions): Promise<T> {\n    if (!resource.resourceType) {\n      throw new Error('Missing resourceType');\n    }\n    if (!resource.id) {\n      throw new Error('Missing id');\n    }\n    let result = await this.put(this.fhirUrl(resource.resourceType, resource.id), resource, undefined, options);\n    if (!result) {\n      // On 304 not modified, result will be undefined\n      // Return the user input instead\n      result = resource;\n    }\n    this.cacheResource(result);\n    this.invalidateUrl(this.fhirUrl(resource.resourceType, resource.id, '_history'));\n    this.invalidateSearches(resource.resourceType);\n    return result;\n  }\n\n  /**\n   * Updates a FHIR resource using JSONPatch operations.\n   *\n   * The return value is the updated resource, including the ID and meta.\n   *\n   * @example\n   * Example:\n   *\n   * ```typescript\n   * const result = await medplum.patchResource('Patient', '123', [\n   *   {op: 'replace', path: '/name/0/family', value: 'Smith'},\n   * ]);\n   * console.log(result.meta.versionId);\n   * ```\n   *\n   * See the FHIR \"update\" operation for full details: https://www.hl7.org/fhir/http.html#patch\n   *\n   * See the JSONPatch specification for full details: https://tools.ietf.org/html/rfc6902\n   * @category Write\n   * @param resourceType - The FHIR resource type.\n   * @param id - The resource ID.\n   * @param operations - The JSONPatch operations.\n   * @param options - Optional fetch options.\n   * @returns The result of the patch operations.\n   */\n  async patchResource<K extends ResourceType>(\n    resourceType: K,\n    id: string,\n    operations: PatchOperation[],\n    options?: MedplumRequestOptions\n  ): Promise<ExtractResource<K>> {\n    const result = await this.patch(this.fhirUrl(resourceType, id), operations, options);\n    this.cacheResource(result);\n    this.invalidateUrl(this.fhirUrl(resourceType, id, '_history'));\n    this.invalidateSearches(resourceType);\n    return result;\n  }\n\n  /**\n   * Deletes a FHIR resource by resource type and ID.\n   *\n   * @example\n   * Example:\n   *\n   * ```typescript\n   * await medplum.deleteResource('Patient', '123');\n   * ```\n   *\n   * See the FHIR \"delete\" operation for full details: https://www.hl7.org/fhir/http.html#delete\n   * @category Delete\n   * @param resourceType - The FHIR resource type.\n   * @param id - The resource ID.\n   * @param options - Optional fetch options.\n   * @returns The result of the delete operation.\n   */\n  deleteResource(resourceType: ResourceType, id: string, options?: MedplumRequestOptions): Promise<any> {\n    this.deleteCacheEntry(this.fhirUrl(resourceType, id).toString());\n    this.invalidateSearches(resourceType);\n    return this.delete(this.fhirUrl(resourceType, id), options);\n  }\n\n  /**\n   * Executes the validate operation with the provided resource.\n   *\n   * @example\n   * Example:\n   *\n   * ```typescript\n   * const result = await medplum.validateResource({\n   *   resourceType: 'Patient',\n   *   name: [{ given: ['Alice'], family: 'Smith' }],\n   * });\n   * ```\n   *\n   * See the FHIR \"$validate\" operation for full details: https://www.hl7.org/fhir/resource-operation-validate.html\n   * @param resource - The FHIR resource.\n   * @param options - Optional fetch options.\n   * @returns The validate operation outcome.\n   */\n  validateResource<T extends Resource>(resource: T, options?: MedplumRequestOptions): Promise<OperationOutcome> {\n    return this.post(this.fhirUrl(resource.resourceType, '$validate'), resource, undefined, options);\n  }\n\n  /**\n   * Executes a bot by ID or Identifier.\n   * @param idOrIdentifier - The Bot ID or Identifier.\n   * @param body - The content body. Strings and `File` objects are passed directly. Other objects are converted to JSON.\n   * @param contentType - The content type to be included in the \"Content-Type\" header.\n   * @param options - Optional fetch options.\n   * @returns The Bot return value.\n   */\n  executeBot(\n    idOrIdentifier: string | Identifier,\n    body: any,\n    contentType?: string,\n    options?: MedplumRequestOptions\n  ): Promise<any> {\n    let url: URL;\n    if (typeof idOrIdentifier === 'string') {\n      const id = idOrIdentifier;\n      url = this.fhirUrl('Bot', id, '$execute');\n    } else {\n      const identifier = idOrIdentifier;\n      url = this.fhirUrl('Bot', '$execute');\n      url.searchParams.set('identifier', identifier.system + '|' + identifier.value);\n    }\n    return this.post(url, body, contentType, options);\n  }\n\n  /**\n   * Executes a batch or transaction of FHIR operations.\n   *\n   * @example\n   * Example:\n   *\n   * ```typescript\n   * await medplum.executeBatch({\n   *   \"resourceType\": \"Bundle\",\n   *   \"type\": \"transaction\",\n   *   \"entry\": [\n   *     {\n   *       \"fullUrl\": \"urn:uuid:61ebe359-bfdc-4613-8bf2-c5e300945f0a\",\n   *       \"resource\": {\n   *         \"resourceType\": \"Patient\",\n   *         \"name\": [{ \"use\": \"official\", \"given\": [\"Alice\"], \"family\": \"Smith\" }],\n   *         \"gender\": \"female\",\n   *         \"birthDate\": \"1974-12-25\"\n   *       },\n   *       \"request\": {\n   *         \"method\": \"POST\",\n   *         \"url\": \"Patient\"\n   *       }\n   *     },\n   *     {\n   *       \"fullUrl\": \"urn:uuid:88f151c0-a954-468a-88bd-5ae15c08e059\",\n   *       \"resource\": {\n   *         \"resourceType\": \"Patient\",\n   *         \"identifier\": [{ \"system\": \"http:/example.org/fhir/ids\", \"value\": \"234234\" }],\n   *         \"name\": [{ \"use\": \"official\", \"given\": [\"Bob\"], \"family\": \"Jones\" }],\n   *         \"gender\": \"male\",\n   *         \"birthDate\": \"1974-12-25\"\n   *       },\n   *       \"request\": {\n   *         \"method\": \"POST\",\n   *         \"url\": \"Patient\",\n   *         \"ifNoneExist\": \"identifier=http:/example.org/fhir/ids|234234\"\n   *       }\n   *     }\n   *   ]\n   * });\n   * ```\n   *\n   * See The FHIR \"batch/transaction\" section for full details: https://hl7.org/fhir/http.html#transaction\n   * @category Batch\n   * @param bundle - The FHIR batch/transaction bundle.\n   * @param options - Optional fetch options.\n   * @returns The FHIR batch/transaction response bundle.\n   */\n  executeBatch(bundle: Bundle, options?: MedplumRequestOptions): Promise<Bundle> {\n    return this.post(this.fhirBaseUrl, bundle, undefined, options);\n  }\n\n  /**\n   * Sends an email using the Medplum Email API.\n   *\n   * Builds the email using nodemailer MailComposer.\n   *\n   * Examples:\n   *\n   * @example\n   * Send a simple text email:\n   *\n   * ```typescript\n   * await medplum.sendEmail({\n   *   to: 'alice@example.com',\n   *   cc: 'bob@example.com',\n   *   subject: 'Hello',\n   *   text: 'Hello Alice',\n   * });\n   * ```\n   *\n   * @example\n   * Send an email with a `Binary` attachment:\n   *\n   * ```typescript\n   * await medplum.sendEmail({\n   *   to: 'alice@example.com',\n   *   subject: 'Email with attachment',\n   *   text: 'See the attached report',\n   *   attachments: [{\n   *     filename: 'report.pdf',\n   *     path: \"Binary/\" + binary.id\n   *   }]\n   * });\n   * ```\n   *\n   * See options here: https://nodemailer.com/extras/mailcomposer/\n   * @category Media\n   * @param email - The MailComposer options.\n   * @param options - Optional fetch options.\n   * @returns Promise to the operation outcome.\n   */\n  sendEmail(email: MailOptions, options?: MedplumRequestOptions): Promise<OperationOutcome> {\n    return this.post('email/v1/send', email, ContentType.JSON, options);\n  }\n\n  /**\n   * Executes a GraphQL query.\n   *\n   * @example\n   * Example:\n   *\n   * ```typescript\n   * const result = await medplum.graphql(`{\n   *   Patient(id: \"123\") {\n   *     resourceType\n   *     id\n   *     name {\n   *       given\n   *       family\n   *     }\n   *   }\n   * }`);\n   * ```\n   *\n   * @example\n   * Advanced queries such as named operations and variable substitution are supported:\n   *\n   * ```typescript\n   * const result = await medplum.graphql(\n   *   `query GetPatientById($patientId: ID!) {\n   *     Patient(id: $patientId) {\n   *       resourceType\n   *       id\n   *       name {\n   *         given\n   *         family\n   *       }\n   *     }\n   *   }`,\n   *   'GetPatientById',\n   *   { patientId: '123' }\n   * );\n   * ```\n   *\n   * See the GraphQL documentation for more details: https://graphql.org/learn/\n   *\n   * See the FHIR GraphQL documentation for FHIR specific details: https://www.hl7.org/fhir/graphql.html\n   * @category Read\n   * @param query - The GraphQL query.\n   * @param operationName - Optional GraphQL operation name.\n   * @param variables - Optional GraphQL variables.\n   * @param options - Optional fetch options.\n   * @returns The GraphQL result.\n   */\n  graphql(\n    query: string,\n    operationName?: string | null,\n    variables?: any,\n    options?: MedplumRequestOptions\n  ): Promise<any> {\n    return this.post(this.fhirUrl('$graphql'), { query, operationName, variables }, ContentType.JSON, options);\n  }\n\n  /**\n   * Executes the $graph operation on this resource to fetch a Bundle of resources linked to the target resource\n   * according to a graph definition\n   * @category Read\n   * @param resourceType - The FHIR resource type.\n   * @param id - The resource ID.\n   * @param graphName - `name` parameter of the GraphDefinition\n   * @param options - Optional fetch options.\n   * @returns A Bundle\n   */\n  readResourceGraph<K extends ResourceType>(\n    resourceType: K,\n    id: string,\n    graphName: string,\n    options?: MedplumRequestOptions\n  ): ReadablePromise<Bundle> {\n    return this.get<Bundle>(`${this.fhirUrl(resourceType, id)}/$graph?graph=${graphName}`, options);\n  }\n\n  /**\n   * Pushes a message to an agent.\n   *\n   * @param agent - The agent to push to.\n   * @param destination - The destination device.\n   * @param body - The message body.\n   * @param contentType - Optional message content type.\n   * @param waitForResponse - Optional wait for response flag.\n   * @param options - Optional fetch options.\n   * @returns Promise to the result. If waiting for response, the result is the response body. Otherwise, it is an operation outcome.\n   */\n  pushToAgent(\n    agent: Agent | Reference<Agent>,\n    destination: Device | Reference<Device> | string,\n    body: any,\n    contentType?: string,\n    waitForResponse?: boolean,\n    options?: MedplumRequestOptions\n  ): Promise<any> {\n    return this.post(\n      this.fhirUrl('Agent', resolveId(agent) as string, '$push'),\n      {\n        destination: typeof destination === 'string' ? destination : getReferenceString(destination),\n        body,\n        contentType,\n        waitForResponse,\n      },\n      ContentType.FHIR_JSON,\n      options\n    );\n  }\n\n  /**\n   * @category Authentication\n   * @returns The Login State\n   */\n  getActiveLogin(): LoginState | undefined {\n    return this.storage.getObject('activeLogin');\n  }\n\n  /**\n   * Sets the active login.\n   * @param login - The new active login state.\n   * @category Authentication\n   */\n  async setActiveLogin(login: LoginState): Promise<void> {\n    if (!this.sessionDetails?.profile || getReferenceString(this.sessionDetails.profile) !== login.profile?.reference) {\n      this.clearActiveLogin();\n    }\n    this.setAccessToken(login.accessToken, login.refreshToken);\n    this.storage.setObject('activeLogin', login);\n    this.addLogin(login);\n    this.refreshPromise = undefined;\n    await this.refreshProfile();\n  }\n\n  /**\n   * Returns the current access token.\n   * @returns The current access token.\n   * @category Authentication\n   */\n  getAccessToken(): string | undefined {\n    return this.accessToken;\n  }\n\n  /**\n   * Sets the current access token.\n   * @param accessToken - The new access token.\n   * @param refreshToken - Optional refresh token.\n   * @category Authentication\n   */\n  setAccessToken(accessToken: string, refreshToken?: string): void {\n    this.accessToken = accessToken;\n    this.refreshToken = refreshToken;\n    this.accessTokenExpires = tryGetJwtExpiration(accessToken);\n    this.medplumServer = isMedplumAccessToken(accessToken);\n  }\n\n  /**\n   * Returns the list of available logins.\n   * @returns The list of available logins.\n   * @category Authentication\n   */\n  getLogins(): LoginState[] {\n    return this.storage.getObject<LoginState[]>('logins') ?? [];\n  }\n\n  private addLogin(newLogin: LoginState): void {\n    const logins = this.getLogins().filter((login) => login.profile?.reference !== newLogin.profile?.reference);\n    logins.push(newLogin);\n    this.storage.setObject('logins', logins);\n  }\n\n  private async refreshProfile(): Promise<ProfileResource | undefined> {\n    if (!this.medplumServer) {\n      return Promise.resolve(undefined);\n    }\n\n    this.profilePromise = new Promise((resolve, reject) => {\n      this.get('auth/me', { cache: 'no-cache' })\n        .then((result: SessionDetails) => {\n          this.profilePromise = undefined;\n          const profileChanged = this.sessionDetails?.profile?.id !== result.profile.id;\n          this.sessionDetails = result;\n          if (profileChanged) {\n            this.dispatchEvent({ type: 'change' });\n          }\n          resolve(result.profile);\n          this.dispatchEvent({ type: 'profileRefreshed' });\n        })\n        .catch(reject);\n    });\n\n    this.dispatchEvent({ type: 'profileRefreshing' });\n    return this.profilePromise;\n  }\n\n  /**\n   * Returns true if the client is waiting for initial authentication.\n   * @returns True if the client is waiting for initial authentication.\n   * @category Authentication\n   */\n  isLoading(): boolean {\n    return !this.isInitialized || (Boolean(this.profilePromise) && !this.sessionDetails?.profile);\n  }\n\n  /**\n   * Returns true if the current user is authenticated as a super admin.\n   * @returns True if the current user is authenticated as a super admin.\n   * @category Authentication\n   */\n  isSuperAdmin(): boolean {\n    return !!this.sessionDetails?.project.superAdmin;\n  }\n\n  /**\n   * Returns true if the current user is authenticated as a project admin.\n   * @returns True if the current user is authenticated as a project admin.\n   * @category Authentication\n   */\n  isProjectAdmin(): boolean {\n    return !!this.sessionDetails?.membership.admin;\n  }\n\n  /**\n   * Returns the current project if available.\n   * @returns The current project if available.\n   * @category User Profile\n   */\n  getProject(): Project | undefined {\n    return this.sessionDetails?.project;\n  }\n\n  /**\n   * Returns the current project membership if available.\n   * @returns The current project membership if available.\n   * @category User Profile\n   */\n  getProjectMembership(): ProjectMembership | undefined {\n    return this.sessionDetails?.membership;\n  }\n\n  /**\n   * Returns the current user profile resource if available.\n   * This method does not wait for loading promises.\n   * @returns The current user profile resource if available.\n   * @category User Profile\n   */\n  getProfile(): ProfileResource | undefined {\n    return this.sessionDetails?.profile;\n  }\n\n  /**\n   * Returns the current user profile resource, retrieving form the server if necessary.\n   * This method waits for loading promises.\n   * @returns The current user profile resource.\n   * @category User Profile\n   */\n  async getProfileAsync(): Promise<ProfileResource | undefined> {\n    if (this.profilePromise) {\n      return this.profilePromise;\n    }\n    if (this.sessionDetails) {\n      return this.sessionDetails.profile;\n    }\n    return this.refreshProfile();\n  }\n\n  /**\n   * Returns the current user configuration if available.\n   * @returns The current user configuration if available.\n   * @category User Profile\n   */\n  getUserConfiguration(): UserConfiguration | undefined {\n    return this.sessionDetails?.config;\n  }\n\n  /**\n   * Returns the current user access policy if available.\n   * @returns The current user access policy if available.\n   * @category User Profile\n   */\n  getAccessPolicy(): AccessPolicy | undefined {\n    return this.sessionDetails?.accessPolicy;\n  }\n\n  /**\n   * Downloads the URL as a blob. Can accept binary URLs in the form of `Binary/{id}` as well.\n   * @category Read\n   * @param url - The URL to request. Can be a standard URL or one in the form of `Binary/{id}`.\n   * @param options - Optional fetch request init options.\n   * @returns Promise to the response body as a blob.\n   */\n  async download(url: URL | string, options: MedplumRequestOptions = {}): Promise<Blob> {\n    if (this.refreshPromise) {\n      await this.refreshPromise;\n    }\n    const urlString = url.toString();\n    if (urlString.startsWith(BINARY_URL_PREFIX)) {\n      url = this.fhirUrl(urlString);\n    }\n\n    let headers = options.headers as Record<string, string> | undefined;\n    if (!headers) {\n      headers = {};\n      options.headers = headers;\n    }\n\n    if (!headers['Accept']) {\n      headers['Accept'] = '*/*';\n    }\n\n    this.addFetchOptionsDefaults(options);\n    const response = await this.fetchWithRetry(url.toString(), options);\n    return response.blob();\n  }\n\n  /**\n   * Creates a FHIR Media resource with the provided data content.\n   *\n   * @category Create\n   * @param createMediaOptions - The media creation options. See `CreateMediaOptions` for full details.\n   * @param requestOptions - Optional fetch options.\n   * @returns The new media resource.\n   */\n  async createMedia(createMediaOptions: CreateMediaOptions, requestOptions?: MedplumRequestOptions): Promise<Media> {\n    const { additionalFields, ...createBinaryOptions } = createMediaOptions;\n\n    // First, create the media:\n    const media = await this.createResource({\n      resourceType: 'Media',\n      status: 'preparation',\n      content: {\n        contentType: createMediaOptions.contentType,\n      },\n      ...additionalFields,\n    });\n\n    // If the caller did not specify a security context, use the media reference:\n    if (!createBinaryOptions.securityContext) {\n      createBinaryOptions.securityContext = createReference(media);\n    }\n\n    // Next, upload the binary:\n    const content = await this.createAttachment(createBinaryOptions, requestOptions);\n\n    // Update the media with the binary content:\n    return this.updateResource({\n      ...media,\n      status: 'completed',\n      content,\n    });\n  }\n\n  /**\n   * Upload media to the server and create a Media instance for the uploaded content.\n   * @param contents - The contents of the media file, as a string, Uint8Array, File, or Blob.\n   * @param contentType - The media type of the content.\n   * @param filename - Optional filename for the binary, or extended upload options (see `BinaryUploadOptions`).\n   * @param additionalFields - Additional fields for Media.\n   * @param options - Optional fetch options.\n   * @returns Promise that resolves to the created Media\n   * @deprecated Use `createMedia` with `CreateMediaOptions` instead. To be removed in Medplum 4.0.\n   */\n  async uploadMedia(\n    contents: string | Uint8Array | File | Blob,\n    contentType: string,\n    filename: string | undefined,\n    additionalFields?: Partial<Media>,\n    options?: MedplumRequestOptions\n  ): Promise<Media> {\n    return this.createMedia(\n      {\n        data: contents,\n        contentType,\n        filename,\n        additionalFields,\n      },\n      options\n    );\n  }\n\n  /**\n   * Performs Bulk Data Export operation request flow. See The FHIR \"Bulk Data Export\" for full details: https://build.fhir.org/ig/HL7/bulk-data/export.html#bulk-data-export\n   * @param exportLevel - Optional export level. Defaults to system level export. 'Group/:id' - Group of Patients, 'Patient' - All Patients.\n   * @param resourceTypes - A string of comma-delimited FHIR resource types.\n   * @param since - Resources will be included in the response if their state has changed after the supplied time (e.g. if Resource.meta.lastUpdated is later than the supplied _since time).\n   * @param options - Optional fetch options.\n   * @returns Bulk Data Response containing links to Bulk Data files. See \"Response - Complete Status\" for full details: https://build.fhir.org/ig/HL7/bulk-data/export.html#response---complete-status\n   */\n  async bulkExport(\n    //eslint-disable-next-line default-param-last\n    exportLevel = '',\n    resourceTypes?: string,\n    since?: string,\n    options?: MedplumRequestOptions\n  ): Promise<Partial<BulkDataExport>> {\n    const fhirPath = exportLevel ? `${exportLevel}/` : exportLevel;\n    const url = this.fhirUrl(`${fhirPath}$export`);\n\n    if (resourceTypes) {\n      url.searchParams.set('_type', resourceTypes);\n    }\n    if (since) {\n      url.searchParams.set('_since', since);\n    }\n\n    return this.startAsyncRequest<Partial<BulkDataExport>>(url.toString(), options);\n  }\n\n  /**\n   * Starts an async request following the FHIR \"Asynchronous Request Pattern\".\n   * See: https://hl7.org/fhir/r4/async.html\n   * @param url - The URL to request.\n   * @param options - Optional fetch options.\n   * @returns The response body.\n   */\n  async startAsyncRequest<T>(url: string, options: MedplumRequestOptions = {}): Promise<T> {\n    this.addFetchOptionsDefaults(options);\n\n    const headers = options.headers as Record<string, string>;\n    headers['Prefer'] = 'respond-async';\n\n    return this.request('POST', url, options);\n  }\n\n  /**\n   * Returns the key value client.\n   * @returns The key value client.\n   */\n  get keyValue(): MedplumKeyValueClient {\n    if (!this.keyValueClient) {\n      this.keyValueClient = new MedplumKeyValueClient(this);\n    }\n    return this.keyValueClient;\n  }\n\n  //\n  // Private helpers\n  //\n\n  /**\n   * Returns the cache entry if available and not expired.\n   * @param key - The cache key to retrieve.\n   * @param options - Optional fetch options for cache settings.\n   * @returns The cached entry if found.\n   */\n  private getCacheEntry(key: string, options: MedplumRequestOptions | undefined): RequestCacheEntry | undefined {\n    if (!this.requestCache || options?.cache === 'no-cache' || options?.cache === 'reload') {\n      return undefined;\n    }\n    const entry = this.requestCache.get(key);\n    if (!entry || entry.requestTime + this.cacheTime < Date.now()) {\n      return undefined;\n    }\n    return entry;\n  }\n\n  /**\n   * Adds a readable promise to the cache.\n   * @param key - The cache key to store.\n   * @param value - The readable promise to store.\n   */\n  private setCacheEntry(key: string, value: ReadablePromise<any>): void {\n    if (this.requestCache) {\n      this.requestCache.set(key, { requestTime: Date.now(), value });\n    }\n  }\n\n  /**\n   * Adds a concrete value as the cache entry for the given resource.\n   * This is used in cases where the resource is loaded indirectly.\n   * For example, when a resource is loaded as part of a Bundle.\n   * @param resource - The resource to cache.\n   */\n  private cacheResource(resource: Resource | undefined): void {\n    if (resource?.id && !resource.meta?.tag?.some((t) => t.code === 'SUBSETTED')) {\n      this.setCacheEntry(\n        this.fhirUrl(resource.resourceType, resource.id).toString(),\n        new ReadablePromise(Promise.resolve(resource))\n      );\n    }\n  }\n\n  /**\n   * Deletes a cache entry.\n   * @param key - The cache key to delete.\n   */\n  private deleteCacheEntry(key: string): void {\n    if (this.requestCache) {\n      this.requestCache.delete(key);\n    }\n  }\n\n  /**\n   * Makes an HTTP request.\n   * @param method - The HTTP method (GET, POST, etc).\n   * @param url - The target URL.\n   * @param options - Optional fetch request init options.\n   * @param state - Optional request state.\n   * @returns The JSON content body if available.\n   */\n  private async request<T>(\n    method: string,\n    url: string,\n    options: MedplumRequestOptions = {},\n    state: RequestState = {}\n  ): Promise<T> {\n    await this.refreshIfExpired();\n\n    options.method = method;\n    this.addFetchOptionsDefaults(options);\n\n    const response = await this.fetchWithRetry(url, options);\n\n    if (response.status === 401) {\n      // Refresh and try again\n      return this.handleUnauthenticated(method, url, options);\n    }\n\n    if (response.status === 204 || response.status === 304) {\n      // No content or change\n      return undefined as unknown as T;\n    }\n\n    const contentType = response.headers.get('content-type');\n    const isJson = contentType?.includes('json');\n\n    if (response.status === 404 && !isJson) {\n      // Special case for non-JSON 404 responses\n      // In the common case, the 404 response will include an OperationOutcome in JSON with additional details.\n      // In the non-JSON case, we can't parse the response, so we'll just throw a generic \"Not Found\" error.\n      throw new OperationOutcomeError(notFound);\n    }\n\n    const obj = await this.parseBody(response, isJson);\n\n    if (\n      (response.status === 200 && options.followRedirectOnOk) ||\n      (response.status === 201 && options.followRedirectOnCreated)\n    ) {\n      const contentLocation = await tryGetContentLocation(response, obj);\n      if (contentLocation) {\n        return this.request('GET', contentLocation, { ...options, body: undefined });\n      }\n    }\n\n    if (response.status === 202 && options.pollStatusOnAccepted) {\n      const contentLocation = await tryGetContentLocation(response, obj);\n      const statusUrl = contentLocation ?? state.statusUrl;\n      if (statusUrl) {\n        return this.pollStatus(statusUrl, options, state);\n      }\n    }\n\n    if (response.status >= 400) {\n      throw new OperationOutcomeError(normalizeOperationOutcome(obj));\n    }\n\n    return obj;\n  }\n\n  private async parseBody(response: Response, isJson: boolean | undefined): Promise<any> {\n    let obj: any = undefined;\n    if (isJson) {\n      try {\n        obj = await response.json();\n      } catch (err) {\n        console.error('Error parsing response', response.status, err);\n        throw err;\n      }\n    } else {\n      obj = await response.text();\n    }\n    return obj;\n  }\n\n  private async fetchWithRetry(url: string, options: MedplumRequestOptions): Promise<Response> {\n    if (!url.startsWith('http')) {\n      url = concatUrls(this.baseUrl, url);\n    }\n\n    // Previously default for maxRetries was 3, but we will interpret maxRetries literally and not count first attempt\n    // Default of 2 matches old behavior with the new semantics\n    const maxRetries = options?.maxRetries ?? 2;\n    const retryDelay = 200;\n\n    // We use <= since we want to retry maxRetries times and first retry is when attemptNum === 1\n    for (let attemptNum = 0; attemptNum <= maxRetries; attemptNum++) {\n      try {\n        if (this.options.verbose) {\n          this.logRequest(url, options);\n        }\n        const response = (await this.fetch(url, options)) as Response;\n        if (this.options.verbose) {\n          this.logResponse(response);\n        }\n        // Handle non-500 response and max retries exceeded\n        // We return immediately for non-500 or 500 that has exceeded max retries\n        if (response.status < 500 || attemptNum === maxRetries) {\n          return response;\n        }\n      } catch (err) {\n        // This is for the 1st retry to avoid multiple notifications\n        if ((err as Error).message === 'Failed to fetch' && attemptNum === 0) {\n          this.dispatchEvent({ type: 'offline' });\n        }\n\n        // If we got an abort error or exceeded retries, then throw immediately\n        if ((err as Error).name === 'AbortError' || attemptNum === maxRetries) {\n          throw err;\n        }\n      }\n\n      await sleep(retryDelay);\n    }\n\n    throw new Error('Unreachable');\n  }\n\n  private logRequest(url: string, options: MedplumRequestOptions): void {\n    console.log(`> ${options.method} ${url}`);\n    if (options.headers) {\n      const headers = options.headers as Record<string, string>;\n      for (const key of sortStringArray(Object.keys(headers))) {\n        console.log(`> ${key}: ${headers[key]}`);\n      }\n    }\n  }\n\n  private logResponse(response: Response): void {\n    console.log(`< ${response.status} ${response.statusText}`);\n    if (response.headers) {\n      response.headers.forEach((value, key) => console.log(`< ${key}: ${value}`));\n    }\n  }\n\n  private async pollStatus<T>(statusUrl: string, options: MedplumRequestOptions, state: RequestState): Promise<T> {\n    const statusOptions: MedplumRequestOptions = { ...options, method: 'GET', body: undefined, redirect: 'follow' };\n    if (state.pollCount === undefined) {\n      // First request - try request immediately\n      if (options.headers && typeof options.headers === 'object' && 'Prefer' in options.headers) {\n        statusOptions.headers = { ...options.headers };\n        delete statusOptions.headers.Prefer;\n      }\n      state.statusUrl = statusUrl;\n      state.pollCount = 1;\n    } else {\n      // Subsequent requests - wait and retry\n      const retryDelay = options.pollStatusPeriod ?? 1000;\n      await sleep(retryDelay);\n      state.pollCount++;\n    }\n    return this.request('GET', statusUrl, statusOptions, state);\n  }\n\n  /**\n   * Executes a batch of requests that were automatically batched together.\n   */\n  private async executeAutoBatch(): Promise<void> {\n    // Get the current queue\n    if (this.autoBatchQueue === undefined) {\n      return;\n    }\n\n    const entries = [...this.autoBatchQueue];\n\n    // Clear the queue\n    this.autoBatchQueue.length = 0;\n\n    // Clear the timer\n    this.autoBatchTimerId = undefined;\n\n    // If there is only one request in the batch, just execute it\n    if (entries.length === 1) {\n      const entry = entries[0];\n      try {\n        entry.resolve(await this.request(entry.method, concatUrls(this.fhirBaseUrl, entry.url), entry.options));\n      } catch (err) {\n        entry.reject(new OperationOutcomeError(normalizeOperationOutcome(err)));\n      }\n      return;\n    }\n\n    // Build the batch request\n    const batch: Bundle = {\n      resourceType: 'Bundle',\n      type: 'batch',\n      entry: entries.map(\n        (e): BundleEntry => ({\n          request: {\n            method: e.method,\n            url: e.url,\n          },\n          resource: e.options.body ? (JSON.parse(e.options.body as string) as Resource) : undefined,\n        })\n      ),\n    };\n\n    // Execute the batch request\n    const response = (await this.post(this.fhirBaseUrl, batch)) as Bundle;\n\n    // Process the response\n    for (let i = 0; i < entries.length; i++) {\n      const entry = entries[i];\n      const responseEntry = response.entry?.[i];\n      if (responseEntry?.response?.outcome && !isOk(responseEntry.response.outcome)) {\n        entry.reject(new OperationOutcomeError(responseEntry.response.outcome));\n      } else {\n        entry.resolve(responseEntry?.resource);\n      }\n    }\n  }\n\n  /**\n   * Adds default options to the fetch options.\n   * @param options - The options to add defaults to.\n   */\n  private addFetchOptionsDefaults(options: MedplumRequestOptions): void {\n    // Apply default headers\n    Object.entries(this.defaultHeaders).forEach(([name, value]) => {\n      this.setRequestHeader(options, name, value);\n    });\n\n    this.setRequestHeader(options, 'Accept', DEFAULT_ACCEPT, true);\n\n    if (this.options.extendedMode !== false) {\n      this.setRequestHeader(options, 'X-Medplum', 'extended');\n    }\n\n    if (options.body) {\n      this.setRequestHeader(options, 'Content-Type', ContentType.FHIR_JSON, true);\n    }\n\n    if (this.accessToken) {\n      this.setRequestHeader(options, 'Authorization', 'Bearer ' + this.accessToken);\n    } else if (this.basicAuth) {\n      this.setRequestHeader(options, 'Authorization', 'Basic ' + this.basicAuth);\n    }\n\n    if (!options.cache) {\n      options.cache = 'no-cache';\n    }\n\n    if (!options.credentials) {\n      options.credentials = 'include';\n    }\n  }\n\n  /**\n   * Sets the \"Content-Type\" header on fetch options.\n   * @param options - The fetch options.\n   * @param contentType - The new content type to set.\n   */\n  private setRequestContentType(options: MedplumRequestOptions, contentType: string): void {\n    this.setRequestHeader(options, 'Content-Type', contentType);\n  }\n\n  /**\n   * Sets a header on fetch options.\n   * @param options - The fetch options.\n   * @param key - The header key.\n   * @param value - The header value.\n   * @param ifNoneExist - Optional flag to only set the header if it doesn't already exist.\n   */\n  private setRequestHeader(options: MedplumRequestOptions, key: string, value: string, ifNoneExist = false): void {\n    if (!options.headers) {\n      options.headers = {};\n    }\n    const headers = options.headers as Record<string, string>;\n    if (ifNoneExist && headers[key]) {\n      return;\n    }\n    headers[key] = value;\n  }\n\n  /**\n   * Sets the body on fetch options.\n   * @param options - The fetch options.\n   * @param data - The new content body.\n   */\n  private setRequestBody(options: MedplumRequestOptions, data: any): void {\n    if (\n      typeof data === 'string' ||\n      (typeof Blob !== 'undefined' && (data instanceof Blob || data?.constructor.name === 'Blob')) ||\n      (typeof File !== 'undefined' && (data instanceof File || data?.constructor.name === 'File')) ||\n      (typeof Uint8Array !== 'undefined' && (data instanceof Uint8Array || data?.constructor.name === 'Uint8Array'))\n    ) {\n      options.body = data;\n    } else if (data) {\n      options.body = JSON.stringify(data);\n    }\n  }\n\n  /**\n   * Handles an unauthenticated response from the server.\n   * First, tries to refresh the access token and retry the request.\n   * Otherwise, calls unauthenticated callbacks and rejects.\n   * @param method - The HTTP method of the original request.\n   * @param url - The URL of the original request.\n   * @param options - Optional fetch request init options.\n   * @returns The result of the retry.\n   */\n  private handleUnauthenticated(method: string, url: string, options: MedplumRequestOptions): Promise<any> {\n    if (this.refresh()) {\n      return this.request(method, url, options);\n    }\n    this.clear();\n    if (this.onUnauthenticated) {\n      this.onUnauthenticated();\n    }\n    return Promise.reject(new OperationOutcomeError(unauthorized));\n  }\n\n  /**\n   * Starts a new PKCE flow.\n   * These PKCE values are stateful, and must survive redirects and page refreshes.\n   * @category Authentication\n   * @returns The PKCE code challenge details.\n   */\n  async startPkce(): Promise<{ codeChallengeMethod: CodeChallengeMethod; codeChallenge: string }> {\n    const pkceState = getRandomString();\n    sessionStorage.setItem('pkceState', pkceState);\n\n    const codeVerifier = getRandomString().slice(0, 128);\n    sessionStorage.setItem('codeVerifier', codeVerifier);\n\n    const arrayHash = await encryptSHA256(codeVerifier);\n    const codeChallenge = arrayBufferToBase64(arrayHash).replaceAll('+', '-').replaceAll('/', '_').replaceAll('=', '');\n    sessionStorage.setItem('codeChallenge', codeChallenge);\n\n    return { codeChallengeMethod: 'S256', codeChallenge };\n  }\n\n  /**\n   * Redirects the user to the login screen for authorization.\n   * Clears all auth state including local storage and session storage.\n   * @param loginParams - The authorization login parameters.\n   * @see https://openid.net/specs/openid-connect-core-1_0.html#AuthorizationEndpoint\n   */\n  private async requestAuthorization(loginParams?: Partial<BaseLoginRequest>): Promise<void> {\n    const loginRequest = await this.ensureCodeChallenge(loginParams ?? {});\n    const url = new URL(this.authorizeUrl);\n    url.searchParams.set('response_type', 'code');\n    url.searchParams.set('state', sessionStorage.getItem('pkceState') as string);\n    url.searchParams.set('client_id', loginRequest.clientId ?? (this.clientId as string));\n    url.searchParams.set('redirect_uri', loginRequest.redirectUri ?? getWindowOrigin());\n    url.searchParams.set('code_challenge_method', loginRequest.codeChallengeMethod as string);\n    url.searchParams.set('code_challenge', loginRequest.codeChallenge as string);\n    url.searchParams.set('scope', loginRequest.scope ?? 'openid profile');\n    window.location.assign(url.toString());\n  }\n\n  /**\n   * Processes an OAuth authorization code.\n   * See: https://openid.net/specs/openid-connect-core-1_0.html#TokenRequest\n   * @param code - The authorization code received by URL parameter.\n   * @param loginParams - Optional login parameters.\n   * @returns The user profile resource.\n   * @category Authentication\n   */\n  processCode(code: string, loginParams?: Partial<BaseLoginRequest>): Promise<ProfileResource> {\n    const formBody = new URLSearchParams();\n    formBody.set('grant_type', OAuthGrantType.AuthorizationCode);\n    formBody.set('code', code);\n    formBody.set('client_id', loginParams?.clientId ?? (this.clientId as string));\n    formBody.set('redirect_uri', loginParams?.redirectUri ?? getWindowOrigin());\n\n    if (typeof sessionStorage !== 'undefined') {\n      const codeVerifier = sessionStorage.getItem('codeVerifier');\n      if (codeVerifier) {\n        formBody.set('code_verifier', codeVerifier);\n      }\n    }\n\n    return this.fetchTokens(formBody);\n  }\n\n  /**\n   * Refreshes the access token using the refresh token if available.\n   * @param gracePeriod - Optional grace period in milliseconds. If not specified, uses the client configured grace period (default 5 minutes).\n   * @returns Promise to refresh the access token.\n   */\n  refreshIfExpired(gracePeriod?: number): Promise<void> {\n    if (gracePeriod === undefined) {\n      gracePeriod = this.refreshGracePeriod;\n    }\n    // If (1) not already refreshing, (2) we have an access token, and (3) the access token is expired,\n    // then start a refresh.\n    if (\n      !this.refreshPromise &&\n      this.accessTokenExpires !== undefined &&\n      Date.now() > this.accessTokenExpires - gracePeriod\n    ) {\n      // The result of the `refresh()` function is cached in `this.refreshPromise`,\n      // so we can safely ignore the return value here.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.refresh();\n    }\n    return this.refreshPromise ?? Promise.resolve();\n  }\n\n  /**\n   * Tries to refresh the auth tokens.\n   * @returns The refresh promise if available; otherwise undefined.\n   * @see https://openid.net/specs/openid-connect-core-1_0.html#RefreshTokens\n   */\n  private refresh(): Promise<void> | undefined {\n    if (this.refreshPromise) {\n      return this.refreshPromise;\n    }\n\n    if (this.refreshToken) {\n      const formBody = new URLSearchParams();\n      formBody.set('grant_type', OAuthGrantType.RefreshToken);\n      formBody.set('client_id', this.clientId as string);\n      formBody.set('refresh_token', this.refreshToken);\n      this.refreshPromise = this.fetchTokens(formBody);\n      return this.refreshPromise;\n    }\n\n    if (this.clientId && this.clientSecret) {\n      this.refreshPromise = this.startClientLogin(this.clientId, this.clientSecret);\n      return this.refreshPromise;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Starts a new OAuth2 client credentials flow.\n   *\n   * @example\n   * ```typescript\n   * await medplum.startClientLogin(import.meta.env.MEDPLUM_CLIENT_ID, import.meta.env.MEDPLUM_CLIENT_SECRET)\n   * // Example Search\n   * await medplum.searchResources('Patient')\n   * ```\n   *\n   * See: https://datatracker.ietf.org/doc/html/rfc6749#section-4.4\n   *\n   * @category Authentication\n   * @param clientId - The client ID.\n   * @param clientSecret - The client secret.\n   * @returns Promise that resolves to the client profile.\n   */\n  async startClientLogin(clientId: string, clientSecret: string): Promise<ProfileResource> {\n    this.clientId = clientId;\n    this.clientSecret = clientSecret;\n\n    const formBody = new URLSearchParams();\n    formBody.set('grant_type', OAuthGrantType.ClientCredentials);\n    formBody.set('client_id', clientId);\n    formBody.set('client_secret', clientSecret);\n    return this.fetchTokens(formBody);\n  }\n\n  /**\n   * Starts a new OAuth2 JWT bearer flow.\n   *\n   * @example\n   * ```typescript\n   * await medplum.startJwtBearerLogin(import.meta.env.MEDPLUM_CLIENT_ID, import.meta.env.MEDPLUM_JWT_BEARER_ASSERTION, 'openid profile');\n   * // Example Search\n   * await medplum.searchResources('Patient')\n   * ```\n   *\n   * See: https://datatracker.ietf.org/doc/html/rfc7523#section-2.1\n   *\n   * @category Authentication\n   * @param clientId - The client ID.\n   * @param assertion - The JWT assertion.\n   * @param scope - The OAuth scope.\n   * @returns Promise that resolves to the client profile.\n   */\n  async startJwtBearerLogin(clientId: string, assertion: string, scope: string): Promise<ProfileResource> {\n    this.clientId = clientId;\n\n    const formBody = new URLSearchParams();\n    formBody.set('grant_type', OAuthGrantType.JwtBearer);\n    formBody.set('client_id', clientId);\n    formBody.set('assertion', assertion);\n    formBody.set('scope', scope);\n    return this.fetchTokens(formBody);\n  }\n\n  /**\n   * Starts a new OAuth2 JWT assertion flow.\n   *\n   * See: https://datatracker.ietf.org/doc/html/rfc7523#section-2.2\n   *\n   * @category Authentication\n   * @param jwt - The JWT assertion.\n   * @returns Promise that resolves to the client profile.\n   */\n  async startJwtAssertionLogin(jwt: string): Promise<ProfileResource> {\n    const formBody = new URLSearchParams();\n    formBody.append('grant_type', OAuthGrantType.ClientCredentials);\n    formBody.append('client_assertion_type', OAuthClientAssertionType.JwtBearer);\n    formBody.append('client_assertion', jwt);\n    return this.fetchTokens(formBody);\n  }\n\n  /**\n   * Sets the client ID and secret for basic auth.\n   *\n   * @example\n   * ```typescript\n   * medplum.setBasicAuth(import.meta.env.MEDPLUM_CLIENT_ID, import.meta.env.MEDPLUM_CLIENT_SECRET);\n   * // Example Search\n   * await medplum.searchResources('Patient');\n   * ```\n   *\n   * @category Authentication\n   * @param clientId - The client ID.\n   * @param clientSecret - The client secret.\n   */\n  setBasicAuth(clientId: string, clientSecret: string): void {\n    this.clientId = clientId;\n    this.clientSecret = clientSecret;\n    this.basicAuth = encodeBase64(clientId + ':' + clientSecret);\n  }\n\n  /**\n   * Subscribes to a specified topic, listening for a list of specified events.\n   *\n   * Once you have the `SubscriptionRequest` returned from this method, you can call `fhircastConnect(subscriptionRequest)` to connect to the subscription stream.\n   *\n   * @category FHIRcast\n   * @param topic - The topic to publish to. Usually a UUID.\n   * @param events - An array of event names to listen for.\n   * @returns A `Promise` that resolves once the request completes, or rejects if it fails.\n   */\n  async fhircastSubscribe(topic: string, events: FhircastEventName[]): Promise<SubscriptionRequest> {\n    if (!(typeof topic === 'string' && topic !== '')) {\n      throw new OperationOutcomeError(validationError('Invalid topic provided. Topic must be a valid string.'));\n    }\n    if (!(typeof events === 'object' && Array.isArray(events) && events.length > 0)) {\n      throw new OperationOutcomeError(\n        validationError(\n          'Invalid events provided. Events must be an array of event names containing at least one event.'\n        )\n      );\n    }\n\n    const subRequest = {\n      channelType: 'websocket',\n      mode: 'subscribe',\n      topic,\n      events,\n    } as PendingSubscriptionRequest;\n\n    const body = (await this.post(\n      this.fhircastHubUrl,\n      serializeFhircastSubscriptionRequest(subRequest),\n      ContentType.FORM_URL_ENCODED\n    )) as { 'hub.channel.endpoint': string };\n\n    const endpoint = body['hub.channel.endpoint'];\n    if (!endpoint) {\n      throw new Error('Invalid response!');\n    }\n\n    // Add endpoint to subscription request before returning\n    (subRequest as SubscriptionRequest).endpoint = endpoint;\n    return subRequest as SubscriptionRequest;\n  }\n\n  /**\n   * Unsubscribes from the specified topic.\n   *\n   * @category FHIRcast\n   * @param subRequest - A `SubscriptionRequest` representing a subscription to cancel. Mode will be set to `unsubscribe` automatically.\n   * @returns A `Promise` that resolves when request to unsubscribe is completed.\n   */\n  async fhircastUnsubscribe(subRequest: SubscriptionRequest): Promise<void> {\n    if (!validateFhircastSubscriptionRequest(subRequest)) {\n      throw new OperationOutcomeError(\n        validationError('Invalid topic or subscriptionRequest. SubscriptionRequest must be an object.')\n      );\n    }\n    if (!(subRequest.endpoint && typeof subRequest.endpoint === 'string' && subRequest.endpoint.startsWith('ws'))) {\n      throw new OperationOutcomeError(\n        validationError('Provided subscription request must have an endpoint in order to unsubscribe.')\n      );\n    }\n\n    // Turn subRequest -> unsubRequest\n    subRequest.mode = 'unsubscribe';\n    // Send unsub request\n    await this.post(\n      this.fhircastHubUrl,\n      serializeFhircastSubscriptionRequest(subRequest),\n      ContentType.FORM_URL_ENCODED\n    );\n  }\n\n  /**\n   * Connects to a `FHIRcast` session.\n   *\n   * @category FHIRcast\n   * @param subRequest - The `SubscriptionRequest` to use for connecting.\n   * @returns A `FhircastConnection` which emits lifecycle events for the `FHIRcast` WebSocket connection.\n   */\n  fhircastConnect(subRequest: SubscriptionRequest): FhircastConnection {\n    return new FhircastConnection(subRequest);\n  }\n\n  /**\n   * Publishes a new context to a given topic for a specified event type.\n   *\n   * @category FHIRcast\n   * @param topic - The topic to publish to. Usually a UUID.\n   * @param event - The name of the event to publish an updated context for, ie. `Patient-open`.\n   * @param context - The updated context containing resources relevant to this event.\n   * @param versionId - The `versionId` of the `anchor context` of the given event. Used for `DiagnosticReport-update` event.\n   * @returns A `Promise` that resolves once the request completes, or rejects if it fails.\n   */\n  async fhircastPublish<EventName extends FhircastEventVersionOptional>(\n    topic: string,\n    event: EventName,\n    context: FhircastEventContext<EventName> | FhircastEventContext<EventName>[],\n    versionId?: never\n  ): Promise<Record<string, any>>;\n\n  async fhircastPublish<RequiredVersionEvent extends FhircastEventVersionRequired>(\n    topic: string,\n    event: RequiredVersionEvent,\n    context: FhircastEventContext<RequiredVersionEvent> | FhircastEventContext<RequiredVersionEvent>[],\n    versionId: string\n  ): Promise<Record<string, any>>;\n\n  async fhircastPublish<EventName extends FhircastEventVersionRequired | FhircastEventVersionOptional>(\n    topic: string,\n    event: EventName,\n    context: FhircastEventContext<EventName> | FhircastEventContext<EventName>[],\n    versionId?: string\n  ): Promise<Record<string, any>> {\n    if (isContextVersionRequired(event)) {\n      return this.post(\n        this.fhircastHubUrl,\n        createFhircastMessagePayload<typeof event>(topic, event, context, versionId as string),\n        ContentType.JSON\n      );\n    }\n    assertContextVersionOptional(event);\n    return this.post(\n      this.fhircastHubUrl,\n      createFhircastMessagePayload<typeof event>(topic, event, context),\n      ContentType.JSON\n    );\n  }\n\n  /**\n   * Gets the current context of the given FHIRcast `topic`.\n   *\n   * @category FHIRcast\n   * @param topic - The topic to get the current context for. Usually a UUID.\n   * @returns A Promise which resolves to the `CurrentContext` for the given topic.\n   */\n  async fhircastGetContext(topic: string): Promise<CurrentContext> {\n    return this.get(`${this.fhircastHubUrl}/${topic}`);\n  }\n\n  /**\n   * Invite a user to a project.\n   * @param projectId - The project ID.\n   * @param body - The InviteRequest.\n   * @returns Promise that returns a project membership or an operation outcome.\n   */\n  async invite(projectId: string, body: InviteRequest): Promise<ProjectMembership | OperationOutcome> {\n    return this.post('admin/projects/' + projectId + '/invite', body);\n  }\n\n  /**\n   * Makes a POST request to the tokens endpoint.\n   * See: https://openid.net/specs/openid-connect-core-1_0.html#TokenEndpoint\n   * @param formBody - Token parameters in URL encoded format.\n   * @returns The user profile resource.\n   */\n  private async fetchTokens(formBody: URLSearchParams): Promise<ProfileResource> {\n    const options: MedplumRequestOptions = {\n      method: 'POST',\n      headers: { 'Content-Type': ContentType.FORM_URL_ENCODED },\n      body: formBody.toString(),\n      credentials: 'include',\n    };\n    const headers = options.headers as Record<string, string>;\n    Object.assign(headers, this.defaultHeaders);\n\n    if (this.basicAuth) {\n      headers['Authorization'] = `Basic ${this.basicAuth}`;\n    }\n\n    let response: Response;\n    try {\n      response = await this.fetchWithRetry(this.tokenUrl, options);\n    } catch (err) {\n      this.refreshPromise = undefined;\n      throw err;\n    }\n\n    if (!response.ok) {\n      this.clearActiveLogin();\n      try {\n        const error = await response.json();\n        throw new OperationOutcomeError(badRequest(error.error_description));\n      } catch (err) {\n        throw new OperationOutcomeError(badRequest('Failed to fetch tokens'), err);\n      }\n    }\n    const tokens = await response.json();\n    await this.verifyTokens(tokens);\n    return this.getProfile() as ProfileResource;\n  }\n\n  /**\n   * Verifies the tokens received from the auth server.\n   * Validates the JWT against the JWKS.\n   * See: https://openid.net/specs/openid-connect-core-1_0.html#TokenEndpoint\n   * @param tokens - The token response.\n   * @returns Promise to complete.\n   */\n  private async verifyTokens(tokens: TokenResponse): Promise<void> {\n    const token = tokens.access_token;\n\n    if (isJwt(token)) {\n      // Verify token has not expired\n      const tokenPayload = parseJWTPayload(token);\n\n      if (Date.now() >= (tokenPayload.exp as number) * 1000) {\n        this.clearActiveLogin();\n        throw new OperationOutcomeError(unauthorizedTokenExpired);\n      }\n\n      // Verify app_client_id\n      if (tokenPayload.cid) {\n        if (tokenPayload.cid !== this.clientId) {\n          this.clearActiveLogin();\n          throw new OperationOutcomeError(unauthorizedTokenAudience);\n        }\n      } else if (this.clientId && tokenPayload.client_id !== this.clientId) {\n        this.clearActiveLogin();\n        throw new OperationOutcomeError(unauthorizedTokenAudience);\n      }\n    }\n\n    return this.setActiveLogin({\n      accessToken: token,\n      refreshToken: tokens.refresh_token,\n      project: tokens.project,\n      profile: tokens.profile,\n    });\n  }\n\n  private checkSessionDetailsMatchLogin(login?: LoginState): boolean {\n    // We only need to validate if we already have session details\n    if (!(this.sessionDetails && login)) {\n      return true;\n    }\n    // Make sure sessionDetails.profile.id matches the ID in the profile reference we are checking against\n    // Otherwise return false if no profile reference in login\n    return login.profile?.reference?.endsWith(this.sessionDetails.profile.id as string) ?? false;\n  }\n\n  /**\n   * Sets up a listener for window storage events.\n   * This synchronizes state across browser windows and browser tabs.\n   */\n  private setupStorageListener(): void {\n    try {\n      window.addEventListener('storage', (e: StorageEvent) => {\n        // Storage events fire when different tabs make changes.\n        // On storage clear (key === null) or profile change (key === 'activeLogin', and profile in 'activeLogin' is different)\n        // Refresh the page to ensure the active login is up to date.\n        if (e.key === null) {\n          window.location.reload();\n        } else if (e.key === 'activeLogin') {\n          const oldState = (e.oldValue ? JSON.parse(e.oldValue) : undefined) as LoginState | undefined;\n          const newState = (e.newValue ? JSON.parse(e.newValue) : undefined) as LoginState | undefined;\n          if (\n            oldState?.profile.reference !== newState?.profile.reference ||\n            !this.checkSessionDetailsMatchLogin(newState)\n          ) {\n            window.location.reload();\n          } else if (newState) {\n            this.setAccessToken(newState.accessToken, newState.refreshToken);\n          } else {\n            // Theoretically this should never be called, but we might want to keep it here just in case\n            this.clear();\n          }\n        }\n      });\n    } catch (_err) {\n      // Silently ignore if this environment does not support storage events\n    }\n  }\n\n  /**\n   * Gets the `SubscriptionManager` for WebSocket subscriptions.\n   *\n   * @category Subscriptions\n   * @returns the `SubscriptionManager` for this client.\n   */\n  getSubscriptionManager(): SubscriptionManager {\n    if (!this.subscriptionManager) {\n      this.subscriptionManager = new SubscriptionManager(this, getWebSocketUrl(this.baseUrl, '/ws/subscriptions-r4'));\n    }\n    return this.subscriptionManager;\n  }\n\n  /**\n   * Subscribes to a given criteria, listening to notifications over WebSockets.\n   *\n   * This uses Medplum's `WebSocket Subscriptions` under the hood.\n   *\n   * A `SubscriptionEmitter` is returned from this function, which can be used to listen for updates to resources described by the given criteria.\n   *\n   * When subscribing to the same criteria multiple times, the same `SubscriptionEmitter` will be returned, and a reference count will be incremented.\n   *\n   * -----\n   * @example\n   * ```ts\n   * const emitter = medplum.subscribeToCriteria('Communication');\n   *\n   * emitter.addEventListener('message', (bundle: Bundle) => {\n   *   // Called when a `Communication` resource is created or modified\n   *   console.log(bundle?.entry?.[1]?.resource); // Logs the `Communication` resource that was updated\n   * });\n   * ```\n   *\n   * @category Subscriptions\n   * @param criteria - The criteria to subscribe to.\n   * @param subscriptionProps - Optional properties to add to the created `Subscription` resource.\n   * @returns a `SubscriptionEmitter` that emits `Bundle` resources containing changes to resources based on the given criteria.\n   */\n  subscribeToCriteria(criteria: string, subscriptionProps?: Partial<Subscription>): SubscriptionEmitter {\n    return this.getSubscriptionManager().addCriteria(criteria, subscriptionProps);\n  }\n\n  /**\n   * Unsubscribes from the given criteria.\n   *\n   * When called the same amount of times as proceeding calls to `subscribeToCriteria` on a given `criteria`,\n   * the criteria is fully removed from the `SubscriptionManager`.\n   *\n   * @category Subscriptions\n   * @param criteria - The criteria to unsubscribe from.\n   * @param subscriptionProps - The optional properties that `subscribeToCriteria` was called with.\n   */\n  unsubscribeFromCriteria(criteria: string, subscriptionProps?: Partial<Subscription>): void {\n    if (!this.subscriptionManager) {\n      return;\n    }\n    this.subscriptionManager.removeCriteria(criteria, subscriptionProps);\n    if (this.subscriptionManager.getCriteriaCount() === 0) {\n      this.subscriptionManager.closeWebSocket();\n    }\n  }\n\n  /**\n   * Get the master `SubscriptionEmitter` for the `SubscriptionManager`.\n   *\n   * The master `SubscriptionEmitter` gets messages for all subscribed `criteria` as well as WebSocket errors, `connect` and `disconnect` events, and the `close` event.\n   *\n   * It can also be used to listen for `heartbeat` messages.\n   *\n   *------\n   * @example\n   * ### Listening for `heartbeat`:\n   * ```ts\n   * const masterEmitter = medplum.getMasterSubscriptionEmitter();\n   *\n   * masterEmitter.addEventListener('heartbeat', (bundle: Bundle<SubscriptionStatus>) => {\n   *   console.log(bundle?.entry?.[0]?.resource); // A `SubscriptionStatus` of type `heartbeat`\n   * });\n   *\n   * ```\n   * @category Subscriptions\n   * @returns the master `SubscriptionEmitter` from the `SubscriptionManager`.\n   */\n  getMasterSubscriptionEmitter(): SubscriptionEmitter {\n    return this.getSubscriptionManager().getMasterEmitter();\n  }\n}\n\n/**\n * Returns the default fetch method.\n * The default fetch is currently only available in browser environments.\n * If you want to use SSR such as Next.js, you should pass a custom fetch function.\n * @returns The default fetch function for the current environment.\n */\nfunction getDefaultFetch(): FetchLike {\n  if (!globalThis.fetch) {\n    throw new Error('Fetch not available in this environment');\n  }\n  return globalThis.fetch.bind(globalThis);\n}\n\n/**\n * Returns the base URL for the current page.\n * @returns The window origin string.\n * @category HTTP\n */\nfunction getWindowOrigin(): string {\n  if (typeof window === 'undefined') {\n    return '';\n  }\n  return window.location.protocol + '//' + window.location.host + '/';\n}\n\n/**\n * Attempts to retrieve the content location from the given HTTP response.\n *\n * This function prioritizes the \"Content-Location\" HTTP header as the\n * most authoritative source for the content location. If this header is\n * not present, it falls back to the \"Location\" HTTP header.\n *\n * Note that the FHIR spec does not follow the traditional HTTP semantics of \"Content-Location\" and \"Location\".\n * \"Content-Location\" is not typically used with HTTP 202 responses because the content itself isn't available at the time of the response.\n * However, the FHIR spec explicitly recommends it:\n *\n *   3.2.6.1.2 Kick-off Request\n *   3.2.6.1.2.0.3 Response - Success\n *   HTTP Status Code of 202 Accepted\n *   Content-Location header with the absolute URL of an endpoint for subsequent status requests (polling location)\n *\n * Source: https://hl7.org/fhir/async-bulk.html\n *\n * In cases where neither of these headers are available (for instance,\n * due to CORS restrictions), it attempts to retrieve the content location\n * from the 'diagnostics' field of the first issue in an OperationOutcome object\n * present in the response body. If all attempts fail, the function returns 'undefined'.\n *\n * @async\n * @param response - The HTTP response object from which to extract the content location.\n * @param body - The response body.\n * @returns A Promise that resolves to the content location string if it is found, or 'undefined' if the content location cannot be determined from the response.\n */\nasync function tryGetContentLocation(response: Response, body: any): Promise<string | undefined> {\n  // Accepted content location can come from multiple sources\n  // The authoritative source is the \"Content-Location\" HTTP header.\n  const contentLocation = response.headers.get('content-location');\n  if (contentLocation) {\n    return contentLocation;\n  }\n\n  // The next best source is the \"Location\" HTTP header.\n  const location = response.headers.get('location');\n  if (location) {\n    return location;\n  }\n\n  // However, \"Content-Location\" may not be available due to CORS limitations.\n  // In this case, we use the OperationOutcome.diagnostics field.\n  if (isOperationOutcome(body) && body.issue?.[0]?.diagnostics) {\n    return body.issue[0].diagnostics;\n  }\n\n  // If all else fails, return undefined.\n  return undefined;\n}\n\n/**\n * Converts a FHIR resource bundle to a resource array.\n * The bundle is attached to the array as a property named \"bundle\".\n * @param bundle - A FHIR resource bundle.\n * @returns The resource array with the bundle attached.\n */\nfunction bundleToResourceArray<T extends Resource>(bundle: Bundle<T>): ResourceArray<T> {\n  const array = bundle.entry?.map((e) => e.resource as T) ?? [];\n  return Object.assign(array, { bundle });\n}\n\nfunction isCreateBinaryOptions(input: unknown): input is CreateBinaryOptions {\n  return isObject(input) && 'data' in input && 'contentType' in input;\n}\n\n// This function can be deleted after Medplum 4.0 and we remove the legacy createBinary method\nexport function normalizeCreateBinaryOptions(\n  arg1: BinarySource | CreateBinaryOptions,\n  arg2: string | undefined | MedplumRequestOptions,\n  arg3?: string,\n  arg4?: (e: ProgressEvent) => void\n): CreateBinaryOptions {\n  if (isCreateBinaryOptions(arg1)) {\n    return arg1;\n  }\n  return {\n    data: arg1,\n    filename: arg2 as string | undefined,\n    contentType: arg3 as string,\n    onProgress: arg4,\n  };\n}\n\nfunction isCreatePdfOptions(input: unknown): input is CreatePdfOptions {\n  return isObject(input) && 'docDefinition' in input;\n}\n\n// This function can be deleted after Medplum 4.0 and we remove the legacy createPdf method\nexport function normalizeCreatePdfOptions(\n  arg1: TDocumentDefinitions | CreatePdfOptions,\n  arg2: string | undefined | MedplumRequestOptions,\n  arg3: Record<string, CustomTableLayout> | undefined,\n  arg4: TFontDictionary | undefined\n): CreatePdfOptions {\n  if (isCreatePdfOptions(arg1)) {\n    return arg1;\n  }\n  return {\n    docDefinition: arg1,\n    filename: arg2 as string,\n    tableLayouts: arg3,\n    fonts: arg4,\n  };\n}\n", "import { TypeName } from './types';\n\nexport const ExternalSecretSystems = {\n  aws_ssm_parameter_store: 'aws_ssm_parameter_store',\n} as const;\n\nexport type ExternalSecretSystem = keyof typeof ExternalSecretSystems;\nexport type ExternalSecretPrimitive = string | boolean | number;\nexport type ExternalSecretPrimitiveType = 'string' | 'boolean' | 'number';\nexport type ExternalSecret<T extends ExternalSecretPrimitive = ExternalSecretPrimitive> = {\n  system: ExternalSecretSystem;\n  key: string;\n  type: TypeName<T>;\n};\nexport type ValueOrExternalSecret<T extends ExternalSecretPrimitive> = T | ExternalSecret<T>;\nexport type StringMap = { [key: string]: string };\n\nexport interface MedplumSourceInfraConfig {\n  name: ValueOrExternalSecret<string>;\n  stackName: ValueOrExternalSecret<string>;\n  accountNumber: ValueOrExternalSecret<string>;\n  region: string;\n  domainName: ValueOrExternalSecret<string>;\n  vpcId: ValueOrExternalSecret<string>;\n  apiPort: ValueOrExternalSecret<number>;\n  apiDomainName: ValueOrExternalSecret<string>;\n  apiSslCertArn: ValueOrExternalSecret<string>;\n  apiInternetFacing?: ValueOrExternalSecret<boolean>;\n  apiWafIpSetArn: ValueOrExternalSecret<string>;\n  appDomainName: ValueOrExternalSecret<string>;\n  appSslCertArn: ValueOrExternalSecret<string>;\n  appApiProxy?: ValueOrExternalSecret<boolean>;\n  appWafIpSetArn: ValueOrExternalSecret<string>;\n  appLoggingBucket?: ValueOrExternalSecret<string>;\n  appLoggingPrefix?: ValueOrExternalSecret<string>;\n  storageBucketName: ValueOrExternalSecret<string>;\n  storageDomainName: ValueOrExternalSecret<string>;\n  storageSslCertArn: ValueOrExternalSecret<string>;\n  signingKeyId: ValueOrExternalSecret<string>;\n  storagePublicKey: ValueOrExternalSecret<string>;\n  storageWafIpSetArn: ValueOrExternalSecret<string>;\n  storageLoggingBucket?: ValueOrExternalSecret<string>;\n  storageLoggingPrefix?: ValueOrExternalSecret<string>;\n  baseUrl: ValueOrExternalSecret<string>;\n  maxAzs: ValueOrExternalSecret<number>;\n  rdsInstances: ValueOrExternalSecret<number>;\n  rdsInstanceType: ValueOrExternalSecret<string>;\n  rdsInstanceVersion?: ValueOrExternalSecret<string>;\n  rdsSecretsArn?: ValueOrExternalSecret<string>;\n  rdsReaderInstanceType?: ValueOrExternalSecret<string>;\n  rdsProxyEnabled?: ValueOrExternalSecret<boolean>;\n  rdsClusterParameters?: StringMap;\n  cacheNodeType?: ValueOrExternalSecret<string>;\n  cacheSecurityGroupId?: ValueOrExternalSecret<string>;\n  desiredServerCount: ValueOrExternalSecret<number>;\n  serverImage: ValueOrExternalSecret<string>;\n  serverMemory: ValueOrExternalSecret<number>;\n  serverCpu: ValueOrExternalSecret<number>;\n  loadBalancerSecurityGroupId?: ValueOrExternalSecret<string>;\n  loadBalancerLoggingBucket?: ValueOrExternalSecret<string>;\n  loadBalancerLoggingPrefix?: ValueOrExternalSecret<string>;\n  clamscanEnabled: ValueOrExternalSecret<boolean>;\n  clamscanLoggingBucket: ValueOrExternalSecret<string>;\n  clamscanLoggingPrefix: ValueOrExternalSecret<string>;\n  skipDns?: ValueOrExternalSecret<boolean>;\n  hostedZoneName?: ValueOrExternalSecret<string>;\n  additionalContainers?: {\n    name: ValueOrExternalSecret<string>;\n    image: ValueOrExternalSecret<string>;\n    cpu?: ValueOrExternalSecret<number>;\n    memory?: ValueOrExternalSecret<number>;\n    essential?: ValueOrExternalSecret<boolean>;\n    command?: ValueOrExternalSecret<string>[];\n    environment?: {\n      [key: string]: ValueOrExternalSecret<string>;\n    };\n  }[];\n  containerInsights?: ValueOrExternalSecret<boolean>;\n  cloudTrailAlarms?: {\n    logGroupName: ValueOrExternalSecret<string>;\n    logGroupCreate?: ValueOrExternalSecret<boolean>;\n    snsTopicArn?: ValueOrExternalSecret<string>;\n    snsTopicName?: ValueOrExternalSecret<string>;\n  };\n  fargateAutoScaling?: {\n    minCapacity: ValueOrExternalSecret<number>;\n    maxCapacity: ValueOrExternalSecret<number>;\n    targetUtilizationPercent: ValueOrExternalSecret<number>;\n    scaleInCooldown: ValueOrExternalSecret<number>;\n    scaleOutCooldown: ValueOrExternalSecret<number>;\n  };\n  environment?: StringMap;\n}\n\nexport interface MedplumInfraConfig {\n  name: string;\n  stackName: string;\n  accountNumber: string;\n  region: string;\n  domainName: string;\n  vpcId: string;\n  apiPort: number;\n  apiDomainName: string;\n  apiSslCertArn: string;\n  apiInternetFacing?: boolean;\n  apiWafIpSetArn?: string;\n  appDomainName: string;\n  appSslCertArn: string;\n  appApiProxy?: boolean;\n  appWafIpSetArn?: string;\n  appLoggingBucket?: string;\n  appLoggingPrefix?: string;\n  storageBucketName: string;\n  storageDomainName: string;\n  storageSslCertArn: string;\n  signingKeyId: string;\n  storagePublicKey: string;\n  storageWafIpSetArn?: string;\n  storageLoggingBucket?: string;\n  storageLoggingPrefix?: string;\n  baseUrl: string;\n  maxAzs: number;\n  rdsInstances: number;\n  rdsInstanceType: string;\n  rdsInstanceVersion?: string;\n  rdsClusterParameters?: StringMap;\n  rdsSecretsArn?: string;\n  rdsReaderInstanceType?: string;\n  rdsProxyEnabled?: boolean;\n  cacheNodeType?: string;\n  cacheSecurityGroupId?: string;\n  desiredServerCount: number;\n  serverImage: string;\n  serverMemory: number;\n  serverCpu: number;\n  loadBalancerSecurityGroupId?: string;\n  loadBalancerLoggingBucket?: string;\n  loadBalancerLoggingPrefix?: string;\n  clamscanEnabled: boolean;\n  clamscanLoggingBucket: string;\n  clamscanLoggingPrefix: string;\n  skipDns?: boolean;\n  hostedZoneName?: string;\n  additionalContainers?: {\n    name: string;\n    image: string;\n    cpu?: number;\n    memory?: number;\n    essential?: boolean;\n    command?: string[];\n    environment?: {\n      [key: string]: string;\n    };\n  }[];\n  containerInsights?: boolean;\n  cloudTrailAlarms?: {\n    logGroupName: string;\n    logGroupCreate?: boolean;\n    snsTopicArn?: string;\n    snsTopicName?: string;\n  };\n  fargateAutoScaling?: {\n    minCapacity: number;\n    maxCapacity: number;\n    targetUtilizationPercent: number;\n    scaleInCooldown: number;\n    scaleOutCooldown: number;\n  };\n  environment?: StringMap;\n}\n", "import { AccessPolicyResource } from '@medplum/fhirtypes';\nimport { InternalSchemaElement } from './typeschema/types';\nimport { getPathDifference, splitN } from './utils';\n\nexport interface ExtendedInternalSchemaElement extends InternalSchemaElement {\n  readonly?: boolean;\n}\n\nexport type ExtendedElementProperties = { readonly: boolean; hidden: boolean };\n\n/*\nThroughout ElementsContext and the ResourceForm components, we use the following terminology:\n\"path\" refers to the FHIR path to an element including the resourceType, e.g. Patient.name.family\n\"key\" is a contextually relative path to an element not prefixed by the resourceType, e.g. name.family,\n*/\n\n/**\n * Information for the set of elements at a given path within in a resource. This mostly exists to\n * normalize access to elements regardless of whether they are from a profile, extension, or slice.\n */\nexport type ElementsContextType = {\n  /** The FHIR path from the root resource to which the keys of `elements` are relative. */\n  path: string;\n  /**\n   * The mapping of keys to `ExtendedInternalSchemaElement` at the current `path` relative to the\n   * root resource. `elements` originate from either `InternalTypeSchema.elements` or\n   * `SliceDefinition.elements` when the elements context is created within a slice.\n   */\n  elements: Record<string, ExtendedInternalSchemaElement>;\n  /**\n   * Similar mapping as `elements`, but with keys being the full path from the root resource rather\n   * than relative to `path`, in other words, the keys of the Record are `${path}.${key}`.\n   */\n  elementsByPath: Record<string, ExtendedInternalSchemaElement>;\n  /** The URL, if any, of the resource profile or extension from which the `elements` collection originated. */\n  profileUrl: string | undefined;\n  /** Whether debug logging is enabled */\n  debugMode: boolean;\n  /** The `AccessPolicyResource` provided, if any, used to determine hidden and readonly elements. */\n  accessPolicyResource?: AccessPolicyResource;\n  /**\n   * Used to get an `ExtendedElementProperties` object for an element at a given path. This\n   * is primarily useful when working with elements not included in `InternalTypeSchema.elements`\n   * as is the case for nested elements that have not been modified by a profile or extension,\n   * e.g. Patient.name.family.\n   *\n   * This function does not attempt to determine if the input `path` is actually an element in the\n   * resource. When a syntactically correct path to a nonexistent element, e.g. Patient.foobar, is provided,\n   * a `ExtendedElementProperties` object with default values is returned.\n   *\n   * @param path - The full path to an element in the resource, e.g. Patient.name.family\n   * @returns An `ExtendedElementProperties` object with `readonly` and `hidden` properties for the\n   * element at `path`, or `undefined` if the input path is malformed.\n   */\n  getExtendedProps(path: string): ExtendedElementProperties | undefined;\n  /** `true` if this is a default/placeholder `ElementsContextType` */\n  isDefaultContext?: boolean;\n};\n\nexport function buildElementsContext({\n  parentContext,\n  path,\n  elements,\n  profileUrl,\n  debugMode,\n  accessPolicyResource,\n}: {\n  /** The most recent `ElementsContextType` in which this context is being built. */\n  parentContext: ElementsContextType | undefined;\n  /** The FHIR path from the root resource to which the keys of `elements` are relative. */\n  path: string;\n  /**\n   * The mapping of keys to `InternalSchemaElement` at the current `path` relative to the\n   * root resource. This should be either `InternalTypeSchema.elements` or `SliceDefinition.elements`.\n   */\n  elements: Record<string, InternalSchemaElement>;\n  /** The URL, if any, of the resource profile or extension from which the `elements` collection originated. */\n  profileUrl?: string;\n  /** Whether debug logging is enabled */\n  debugMode?: boolean;\n  accessPolicyResource?: AccessPolicyResource;\n}): ElementsContextType | undefined {\n  if (path === parentContext?.path) {\n    return undefined;\n  }\n\n  debugMode ??= parentContext?.debugMode ?? false;\n  accessPolicyResource ??= parentContext?.accessPolicyResource;\n\n  let mergedElements: Record<string, ExtendedInternalSchemaElement> = mergeElementsForContext(\n    path,\n    elements,\n    parentContext,\n    Boolean(debugMode)\n  );\n\n  const keyPrefix = splitN(path, '.', 2)[1] as string | undefined;\n  mergedElements = removeHiddenFields(mergedElements, accessPolicyResource, keyPrefix);\n  mergedElements = markReadonlyFields(mergedElements, accessPolicyResource, keyPrefix);\n\n  const elementsByPath: Record<string, ExtendedInternalSchemaElement> = Object.create(null);\n  for (const [key, property] of Object.entries(mergedElements)) {\n    elementsByPath[path + '.' + key] = property;\n  }\n\n  /*\n  Since AccessPolicyResource.readonlyFields and hiddenFields are always relative to the root resource, we propagate\n  a memoized `getExtendedProps` from the outermost ElementsContext\n  */\n  let getExtendedProps: (path: string) => ExtendedElementProperties | undefined;\n  if (parentContext && !parentContext.isDefaultContext) {\n    getExtendedProps = parentContext.getExtendedProps;\n  } else {\n    const memoizedExtendedProps: Record<string, ExtendedElementProperties> = Object.create(null);\n    getExtendedProps = (path: string): ExtendedElementProperties | undefined => {\n      const key = splitN(path, '.', 2)[1] as string | undefined;\n      if (!key) {\n        return undefined;\n      }\n\n      if (!memoizedExtendedProps[key]) {\n        const hidden = matchesKeyPrefixes(key, accessPolicyResource?.hiddenFields);\n        memoizedExtendedProps[key] = {\n          hidden,\n          // hidden implies readonly even if it's not explicitly marked as such\n          readonly: hidden || matchesKeyPrefixes(key, accessPolicyResource?.readonlyFields),\n        };\n      }\n      return memoizedExtendedProps[key];\n    };\n  }\n\n  return {\n    path: path,\n    elements: mergedElements,\n    elementsByPath,\n    profileUrl: profileUrl ?? parentContext?.profileUrl,\n    debugMode,\n    getExtendedProps,\n    accessPolicyResource,\n  };\n}\n\nfunction mergeElementsForContext(\n  path: string,\n  elements: Record<string, InternalSchemaElement>,\n  parentContext: ElementsContextType | undefined,\n  debugMode: boolean\n): Record<string, InternalSchemaElement> {\n  const result: Record<string, InternalSchemaElement> = Object.create(null);\n\n  if (parentContext) {\n    for (const [elementPath, element] of Object.entries(parentContext.elementsByPath)) {\n      const key = getPathDifference(path, elementPath);\n      if (key !== undefined) {\n        result[key] = element;\n      }\n    }\n  }\n\n  let usedNewElements = false;\n  if (elements) {\n    for (const [key, element] of Object.entries(elements)) {\n      if (!(key in result)) {\n        result[key] = element;\n        usedNewElements = true;\n      }\n    }\n  }\n\n  // if no new elements are used, the ElementsContext is unnecessary.\n  // We could add another guard against unnecessary contexts if usedNewElements is false,\n  // but unnecessary contexts **should** already be taken care before\n  // this is ever hit. Leaving the debug logging in for now.\n  if (debugMode) {\n    console.assert(usedNewElements, 'Unnecessary ElementsContext; not using any newly provided elements');\n  }\n  return result;\n}\n\nfunction removeHiddenFields(\n  elements: Record<string, InternalSchemaElement>,\n  accessPolicyResource: AccessPolicyResource | undefined,\n  keyPrefix?: string\n): Record<string, InternalSchemaElement> {\n  if (!accessPolicyResource?.hiddenFields?.length) {\n    return elements;\n  }\n\n  const prefix = keyPrefix ? keyPrefix + '.' : '';\n  return Object.fromEntries(\n    Object.entries(elements).filter(([key]) => !matchesKeyPrefixes(prefix + key, accessPolicyResource.hiddenFields))\n  );\n}\n\nfunction markReadonlyFields(\n  elements: Record<string, InternalSchemaElement>,\n  accessPolicyResource: AccessPolicyResource | undefined,\n  keyPrefix?: string\n): Record<string, ExtendedInternalSchemaElement> {\n  if (!accessPolicyResource?.readonlyFields?.length) {\n    return elements;\n  }\n\n  const result: Record<string, ExtendedInternalSchemaElement> = Object.create(null);\n\n  const prefix = keyPrefix ? keyPrefix + '.' : '';\n  for (const [key, element] of Object.entries(elements)) {\n    const isReadonly = matchesKeyPrefixes(prefix + key, accessPolicyResource.readonlyFields);\n    if (isReadonly) {\n      // shallow-clone `element` to avoid modifying the in-memory DATA_TYPES cache access via `getDataType`\n      result[key] = { ...element, readonly: true };\n    } else {\n      result[key] = element;\n    }\n  }\n\n  return result;\n}\n\nfunction matchesKeyPrefixes(key: string, prefixes: string[] | undefined): boolean {\n  // It might be a performance win to convert prefixes to a set, but the\n  // cardinality of prefixes, i.e. hidden/readonly fields, is expected to be small (< 10)\n  // such that the memory overhead of a set is not worth the performance gain.\n\n  if (!prefixes?.length) {\n    return false;\n  }\n\n  const keyParts = key.split('.');\n  for (let i = 1; i <= keyParts.length; i++) {\n    const key = keyParts.slice(0, i).join('.');\n    if (prefixes.includes(key)) {\n      return true;\n    }\n  }\n  return false;\n}\n", "import { TypedValue } from '../types';\nimport { getNestedProperty } from './crawler';\nimport { InternalTypeSchema, SliceDefinition, SliceDiscriminator } from './types';\nimport { matchDiscriminant } from './validation';\n\nexport type SliceDefinitionWithTypes = SliceDefinition & {\n  type: NonNullable<SliceDefinition['type']>;\n  typeSchema?: InternalTypeSchema;\n};\n\nexport function isSliceDefinitionWithTypes(slice: SliceDefinition): slice is SliceDefinitionWithTypes {\n  return slice.type !== undefined && slice.type.length > 0;\n}\n\nfunction isDiscriminatorComponentMatch(\n  typedValue: TypedValue,\n  discriminator: SliceDiscriminator,\n  slice: SliceDefinitionWithTypes,\n  profileUrl: string | undefined\n): boolean {\n  const nestedProp = getNestedProperty(typedValue, discriminator.path, { profileUrl });\n\n  if (nestedProp) {\n    const elements = slice.typeSchema?.elements ?? slice.elements;\n    return nestedProp.some((v: any) => matchDiscriminant(v, discriminator, slice, elements)) ?? false;\n  }\n\n  console.assert(false, 'getNestedProperty[%s] in isDiscriminatorComponentMatch missed', discriminator.path);\n  return false;\n}\n\nexport function getValueSliceName(\n  value: any,\n  slices: SliceDefinitionWithTypes[],\n  discriminators: SliceDiscriminator[],\n  profileUrl: string | undefined\n): string | undefined {\n  if (!value) {\n    return undefined;\n  }\n\n  for (const slice of slices) {\n    const typedValue: TypedValue = {\n      value,\n      type: slice.typeSchema?.type ?? slice.type?.[0].code,\n    };\n    if (\n      discriminators.every((d) =>\n        isDiscriminatorComponentMatch(typedValue, d, slice, slice.typeSchema?.url ?? profileUrl)\n      )\n    ) {\n      return slice.name;\n    }\n  }\n  return undefined;\n}\n", "import { ElementsContextType, buildElementsContext } from './elements-context';\nimport { SliceDefinitionWithTypes, isSliceDefinitionWithTypes } from './typeschema/slices';\nimport {\n  InternalSchemaElement,\n  InternalTypeSchema,\n  SliceDefinition,\n  SlicingRules,\n  tryGetProfile,\n} from './typeschema/types';\nimport { isPopulated } from './utils';\n\nexport type VisitorSlicingRules = Omit<SlicingRules, 'slices'> & {\n  slices: SliceDefinitionWithTypes[];\n};\n\nexport interface SchemaVisitor {\n  /**\n   * Called when entering a schema. This is called once for the root profile and once for each\n   * extension with a profile associated with it.\n   * @param schema - The schema being entered.\n   */\n  onEnterSchema?: (schema: InternalTypeSchema) => void;\n  /**\n   * Called when exiting a schema. See `onEnterSchema` for more information.\n   * @param schema - The schema being exited.\n   */\n  onExitSchema?: (schema: InternalTypeSchema) => void;\n\n  /**\n   * Called when entering an element. This is called for every element in the schema in a\n   * tree-like fashion. If the element has slices, the slices are crawled after `onEnterElement`\n   * but before `onExitElement`.\n   *\n   * @example\n   * Example of tree-like method invocation ordering:\n   * '''typescript\n   * onEnterElement('Patient.name')\n   * onEnterElement('Patient.name.given')\n   * onExitElement('Patient.name.given')\n   * onEnterElement('Patient.name.family')\n   * onExitElement('Patient.name.family')\n   * onExitElement('Patient.name')\n   * '''\n   *\n   *\n   * @param path - The full path of the element being entered, even if within an extension. e.g The\n   * path of the ombCategory extension within the US Core Race extension will be\n   * 'Patient.extension.extension.value[x]' rather than 'Extension.extension.value[x]'. The latter is\n   * accessible on the element parameter.\n   * @param element - The element being entered.\n   * @param elementsContext - The context of the elements currently being crawled.\n   */\n  onEnterElement?: (path: string, element: InternalSchemaElement, elementsContext: ElementsContextType) => void;\n\n  /**\n   * Called when exiting an element. See `onEnterElement` for more information.\n   * @param path - The full path of the element being exited.\n   * @param element - The element being exited.\n   * @param elementsContext - The context of the elements currently being crawled.\n   */\n  onExitElement?: (path: string, element: InternalSchemaElement, elementsContext: ElementsContextType) => void;\n\n  /**\n   * Called when entering a slice. Called for every slice in a given sliced element. `onEnterElement` and `onExitElement`\n   * will be called in a tree-like fashion for elements within the slice followed by `onExitSlice`.\n   *\n   * @example\n   * Example of a sliced element being crawled with some elements excluded for brevity:\n   * '''typescript\n   * onEnterElement  ('Observation.component')\n   *\n   * // systolic\n   * onEnterSlice    ('Observation.component', systolicSlice, slicingRules)\n   * onEnterElement  ('Observation.component.code')\n   * onExitElement   ('Observation.component.code')\n   * onEnterElement  ('Observation.component.value[x]')\n   * onEnterElement  ('Observation.component.value[x].code')\n   * onExitElement   ('Observation.component.value[x].code')\n   * onEnterElement  ('Observation.component.value[x].system')\n   * onExitElement   ('Observation.component.value[x].system')\n   * onExitElement   ('Observation.component.value[x]')\n   * onExitSlice     ('Observation.component', systolicSlice, slicingRules)\n   *\n   * // similar set of invocations for diastolic slice\n   *\n   * onExitElement  ('Observation.component')\n   * '''\n   *\n   * @param path - The full path of the sliced element being entered. See `onEnterElement` for more information.\n   * @param slice - The slice being entered.\n   * @param slicing - The slicing rules related to the slice being entered.\n   */\n  onEnterSlice?: (path: string, slice: SliceDefinitionWithTypes, slicing: VisitorSlicingRules) => void;\n\n  /**\n   * Called when exiting a slice. See `onEnterSlice` for more information.\n   * @param path - The full path of the sliced element being exited. See `onEnterElement` for more information.\n   * @param slice - The slice being exited.\n   * @param slicing - The slicing rules related to the slice.\n   */\n  onExitSlice?: (path: string, slice: SliceDefinitionWithTypes, slicing: VisitorSlicingRules) => void;\n}\n\nexport class SchemaCrawler {\n  private readonly rootSchema: InternalTypeSchema & { type: string };\n  private readonly visitor: SchemaVisitor;\n  private readonly elementsContextStack: ElementsContextType[];\n  private sliceAllowList: SliceDefinition[] | undefined;\n\n  constructor(schema: InternalTypeSchema, visitor: SchemaVisitor, elements?: InternalTypeSchema['elements']) {\n    if (schema.type === undefined) {\n      throw new Error('schema must include a type');\n    }\n    this.rootSchema = schema as InternalTypeSchema & { type: string };\n\n    const rootContext = buildElementsContext({\n      parentContext: undefined,\n      path: this.rootSchema.type,\n      elements: elements ?? this.rootSchema.elements,\n      profileUrl: this.rootSchema.name === this.rootSchema.type ? undefined : this.rootSchema.url,\n    });\n    if (rootContext === undefined) {\n      throw new Error('Could not create root elements context');\n    }\n\n    this.elementsContextStack = [rootContext];\n    this.visitor = visitor;\n  }\n\n  private get elementsContext(): ElementsContextType {\n    return this.elementsContextStack[this.elementsContextStack.length - 1];\n  }\n\n  crawlElement(element: InternalSchemaElement, key: string, path: string): void {\n    if (this.visitor.onEnterSchema) {\n      this.visitor.onEnterSchema(this.rootSchema);\n    }\n\n    const allowedElements = Object.fromEntries(\n      Object.entries(this.elementsContext.elements).filter(([elementKey]) => {\n        return elementKey.startsWith(key);\n      })\n    );\n\n    this.crawlElementsImpl(allowedElements, path);\n\n    if (this.visitor.onExitSchema) {\n      this.visitor.onExitSchema(this.rootSchema);\n    }\n  }\n\n  crawlSlice(key: string, slice: SliceDefinition, slicing: SlicingRules): void {\n    const visitorSlicing = this.prepareSlices(slicing.slices, slicing);\n\n    if (!isPopulated(visitorSlicing.slices)) {\n      throw new Error(`cannot crawl slice ${slice.name} since it has no type information`);\n    }\n\n    if (this.visitor.onEnterSchema) {\n      this.visitor.onEnterSchema(this.rootSchema);\n    }\n\n    this.sliceAllowList = [slice];\n\n    this.crawlSliceImpl(visitorSlicing.slices[0], slice.path, visitorSlicing);\n    this.sliceAllowList = undefined;\n\n    if (this.visitor.onExitSchema) {\n      this.visitor.onExitSchema(this.rootSchema);\n    }\n  }\n\n  crawlResource(): void {\n    if (this.visitor.onEnterSchema) {\n      this.visitor.onEnterSchema(this.rootSchema);\n    }\n\n    this.crawlElementsImpl(this.rootSchema.elements, this.rootSchema.type);\n\n    if (this.visitor.onExitSchema) {\n      this.visitor.onExitSchema(this.rootSchema);\n    }\n  }\n\n  private crawlElementsImpl(elements: InternalTypeSchema['elements'], path: string): void {\n    const elementTree = createElementTree(elements);\n    for (const node of elementTree) {\n      this.crawlElementNode(node, path);\n    }\n  }\n\n  private crawlElementNode(node: ElementNode, path: string): void {\n    const nodePath = path + '.' + node.key;\n    if (this.visitor.onEnterElement) {\n      this.visitor.onEnterElement(nodePath, node.element, this.elementsContext);\n    }\n\n    for (const child of node.children) {\n      this.crawlElementNode(child, path);\n    }\n\n    if (isPopulated(node.element?.slicing?.slices)) {\n      this.crawlSlicingImpl(node.element.slicing, nodePath);\n    }\n\n    if (this.visitor.onExitElement) {\n      this.visitor.onExitElement(nodePath, node.element, this.elementsContext);\n    }\n  }\n\n  private prepareSlices(slices: SliceDefinition[], slicing: SlicingRules): VisitorSlicingRules {\n    const slicesToVisit: SliceDefinitionWithTypes[] = [];\n    for (const slice of slices) {\n      if (!isSliceDefinitionWithTypes(slice)) {\n        continue;\n      }\n      const profileUrl = slice.type.find((t) => isPopulated(t.profile))?.profile?.[0];\n      if (isPopulated(profileUrl)) {\n        const schema = tryGetProfile(profileUrl);\n        if (schema) {\n          slice.typeSchema = schema;\n        }\n      }\n      slicesToVisit.push(slice);\n    }\n\n    const visitorSlicing = { ...slicing, slices: slicesToVisit } as VisitorSlicingRules;\n    return visitorSlicing;\n  }\n\n  private crawlSlicingImpl(slicing: SlicingRules, path: string): void {\n    const visitorSlicing = this.prepareSlices(slicing.slices, slicing);\n\n    for (const slice of visitorSlicing.slices) {\n      if (this.sliceAllowList === undefined || this.sliceAllowList.includes(slice)) {\n        this.crawlSliceImpl(slice, path, visitorSlicing);\n      }\n    }\n  }\n\n  private crawlSliceImpl(slice: SliceDefinitionWithTypes, path: string, slicing: VisitorSlicingRules): void {\n    const sliceSchema = slice.typeSchema;\n    if (sliceSchema) {\n      if (this.visitor.onEnterSchema) {\n        this.visitor.onEnterSchema(sliceSchema);\n      }\n    }\n\n    if (this.visitor.onEnterSlice) {\n      this.visitor.onEnterSlice(path, slice, slicing);\n    }\n\n    let elementsContext: ElementsContextType | undefined;\n\n    const sliceElements = sliceSchema?.elements ?? slice.elements;\n    if (isPopulated(sliceElements)) {\n      elementsContext = buildElementsContext({\n        path,\n        parentContext: this.elementsContext,\n        elements: sliceElements,\n      });\n    }\n    if (elementsContext) {\n      this.elementsContextStack.push(elementsContext);\n    }\n\n    this.crawlElementsImpl(sliceElements, path);\n\n    if (elementsContext) {\n      this.elementsContextStack.pop();\n    }\n\n    if (this.visitor.onExitSlice) {\n      this.visitor.onExitSlice(path, slice, slicing);\n    }\n\n    if (sliceSchema) {\n      if (this.visitor.onExitSchema) {\n        this.visitor.onExitSchema(sliceSchema);\n      }\n    }\n  }\n}\n\ntype ElementNode = {\n  key: string;\n  element: InternalSchemaElement;\n  children: ElementNode[];\n};\n\n/**\n * Creates a tree of InternalSchemaElements nested by their key hierarchy:\n *\n * @param elements -\n * @returns The list of root nodes of the tree\n */\nfunction createElementTree(elements: Record<string, InternalSchemaElement>): ElementNode[] {\n  const rootNodes: ElementNode[] = [];\n\n  function isChildKey(parentKey: string, childKey: string): boolean {\n    return childKey.startsWith(parentKey + '.');\n  }\n\n  function addNode(currentNode: ElementNode, newNode: ElementNode): void {\n    for (const child of currentNode.children) {\n      // If the new node is a child of an existing child, recurse deeper\n      if (isChildKey(child.key, newNode.key)) {\n        addNode(child, newNode);\n        return;\n      }\n    }\n    // Otherwise, add it here\n    currentNode.children.push(newNode);\n  }\n\n  const elementEntries = Object.entries(elements);\n  /*\n   By sorting beforehand, we guarantee that no false root nodes are created.\n   e.g. if 'a.b' were to be added to the tree before 'a', 'a.b' would be made a\n   root node when it should be a child of 'a'.\n  */\n  elementEntries.sort((a, b) => a[0].localeCompare(b[0]));\n\n  for (const [key, element] of elementEntries) {\n    const newNode: ElementNode = { key, element, children: [] };\n\n    let added = false;\n    for (const rootNode of rootNodes) {\n      if (isChildKey(rootNode.key, key)) {\n        addNode(rootNode, newNode);\n        added = true;\n        break;\n      }\n    }\n\n    // If the string is not a child of any existing node, add it as a new root\n    if (!added) {\n      rootNodes.push(newNode);\n    }\n  }\n\n  return rootNodes;\n}\n", "import { Resource } from '@medplum/fhirtypes';\nimport { SchemaCrawler, SchemaVisitor, VisitorSlicingRules } from './schema-crawler';\nimport { SliceDefinitionWithTypes, getValueSliceName } from './typeschema/slices';\nimport { InternalSchemaElement, InternalTypeSchema, SliceDefinition, SlicingRules } from './typeschema/types';\nimport { capitalize, deepClone, getPathDifference, isComplexTypeCode, isEmpty, isObject, isPopulated } from './utils';\nimport { ElementsContextType } from './elements-context';\n\n/**\n * Used when an array entry, typically an empty one, needs to be assigned\n * to a given slice even though it doesn't match the slice's discriminator.\n */\nconst SLICE_NAME_KEY = '__sliceName';\n\n/**\n * Adds default values to `resource` based on the supplied `schema`. Default values includes all required fixed and pattern\n * values specified on elements in the schema. If an element has a fixed/pattern value but is optional, i.e.\n * `element.min === 0`, the default value is not added.\n *\n * @param resource - The resource to which default values should be added.\n * @param schema - The schema to use for adding default values.\n * @returns A clone of `resource` with default values added.\n */\nexport function applyDefaultValuesToResource(resource: Resource, schema: InternalTypeSchema): Resource {\n  const visitor = new DefaultValueVisitor(resource, resource.resourceType, 'resource');\n  const crawler = new SchemaCrawler(schema, visitor);\n  crawler.crawlResource();\n  return visitor.getDefaultValue();\n}\n\n/**\n * Adds default values to `existingValue` for the given `key` and its children. If `key` is undefined,\n * default values are added to all elements in `elements`. Default values consist of all fixed and pattern\n * values defined in the relevant elements.\n * @param existingValue - The\n * @param elements - The elements to which default values should be added.\n * @param key - (optional) The key of the element(s) for which default values should be added. Elements with nested\n * keys are also included. If undefined, default values for all elements are added.\n * @returns `existingValue` with default values added\n */\nexport function applyDefaultValuesToElement(\n  existingValue: object,\n  elements: Record<string, InternalSchemaElement>,\n  key?: string\n): object {\n  for (const [elementKey, element] of Object.entries(elements)) {\n    if (key === undefined || key === elementKey) {\n      applyFixedOrPatternValue(existingValue, elementKey, element, elements);\n      continue;\n    }\n\n    const keyDifference = getPathDifference(key, elementKey);\n    if (keyDifference !== undefined) {\n      applyFixedOrPatternValue(existingValue, keyDifference, element, elements);\n    }\n  }\n\n  return existingValue;\n}\n\nexport function applyDefaultValuesToElementWithVisitor(\n  existingValue: any,\n  path: string,\n  element: InternalSchemaElement,\n  elements: Record<string, InternalSchemaElement>,\n  schema: InternalTypeSchema\n): any {\n  const inputValue: object = existingValue ?? Object.create(null);\n\n  const [parentPath, key] = splitOnceRight(path, '.');\n  const parent = Object.create(null);\n  setValueAtKey(parent, inputValue, key, element);\n\n  const visitor = new DefaultValueVisitor(parent, parentPath, 'element');\n  const crawler = new SchemaCrawler(schema, visitor, elements);\n  crawler.crawlElement(element, key, parentPath);\n  const modifiedContainer = visitor.getDefaultValue();\n\n  return getValueAtKey(modifiedContainer, key, element, elements);\n}\n\nexport function getDefaultValuesForNewSliceEntry(\n  key: string,\n  slice: SliceDefinition,\n  slicing: SlicingRules,\n  schema: InternalTypeSchema\n): Resource {\n  const visitor = new DefaultValueVisitor([{ [SLICE_NAME_KEY]: slice.name }], slice.path, 'element');\n  const crawler = new SchemaCrawler(schema, visitor);\n  crawler.crawlSlice(key, slice, slicing);\n  return visitor.getDefaultValue()[0];\n}\n\ntype ValueContext = {\n  type: 'resource' | 'element' | 'slice';\n  path: string;\n  values: any[];\n};\n\nclass DefaultValueVisitor implements SchemaVisitor {\n  private rootValue: any;\n\n  private readonly schemaStack: InternalTypeSchema[];\n  private readonly valueStack: ValueContext[];\n\n  constructor(rootValue: any, path: string, type: ValueContext['type']) {\n    this.schemaStack = [];\n    this.valueStack = [];\n\n    this.rootValue = deepClone(rootValue);\n    this.valueStack.splice(0, this.valueStack.length, {\n      type,\n      path,\n      values: [this.rootValue],\n    });\n  }\n\n  private get schema(): InternalTypeSchema {\n    return this.schemaStack[this.schemaStack.length - 1];\n  }\n\n  private get value(): ValueContext {\n    return this.valueStack[this.valueStack.length - 1];\n  }\n\n  onEnterSchema(schema: InternalTypeSchema): void {\n    this.schemaStack.push(schema);\n  }\n\n  onExitSchema(): void {\n    this.schemaStack.pop();\n  }\n\n  onEnterElement(path: string, element: InternalSchemaElement, elementsContext: ElementsContextType): void {\n    // eld-6: Fixed value may only be specified if there is one type\n    // eld-7: Pattern may only be specified if there is one type\n    // It may be possible to optimize this by checking element.type.length > 1 and short-circuiting\n\n    const parentValues = this.value.values;\n    const parentPath = this.value.path;\n    const key = getPathDifference(parentPath, path);\n    if (key === undefined) {\n      throw new Error(`Expected ${path} to be prefixed by ${parentPath}`);\n    }\n    const elementValues: any[] = [];\n\n    for (const parentValue of parentValues) {\n      if (parentValue === undefined) {\n        continue;\n      }\n\n      const parentArray: any[] = Array.isArray(parentValue) ? parentValue : [parentValue];\n      for (const parent of parentArray) {\n        applyMinimums(parent, key, element, elementsContext.elements);\n        applyFixedOrPatternValue(parent, key, element, elementsContext.elements);\n        const elementValue = getValueAtKey(parent, key, element, elementsContext.elements);\n        if (elementValue !== undefined) {\n          elementValues.push(elementValue);\n        }\n      }\n    }\n\n    this.valueStack.push({\n      type: 'element',\n      path: path,\n      values: elementValues,\n    });\n  }\n\n  onExitElement(path: string, element: InternalSchemaElement, elementsContext: ElementsContextType): void {\n    const elementValueContext = this.valueStack.pop();\n    if (!elementValueContext) {\n      throw new Error('Expected value context to exist when exiting element');\n    }\n\n    const key = getPathDifference(this.value.path, path);\n    if (key === undefined) {\n      throw new Error(`Expected ${path} to be prefixed by ${this.value.path}`);\n    }\n\n    for (const parentValue of this.value.values) {\n      const elementValue = getValueAtKey(parentValue, key, element, elementsContext.elements);\n\n      // remove empty items from arrays\n      if (Array.isArray(elementValue)) {\n        for (let i = elementValue.length - 1; i >= 0; i--) {\n          const value: any = elementValue[i];\n          if (!isPopulated(value)) {\n            elementValue.splice(i, 1);\n          }\n        }\n      }\n\n      if (isEmpty(elementValue)) {\n        // setting undefined to delete the key\n        setValueAtKey(parentValue, undefined, key, element);\n      }\n    }\n  }\n\n  onEnterSlice(path: string, slice: SliceDefinitionWithTypes, slicing: VisitorSlicingRules): void {\n    const elementValues = this.value.values;\n    const sliceValues: any[] = [];\n\n    for (const value of elementValues) {\n      if (value !== undefined) {\n        const elementValues = Array.isArray(value) ? value : [value];\n        const matchingItems: any[] = this.getMatchingSliceValues(elementValues, slice, slicing);\n        sliceValues.push(matchingItems);\n      }\n    }\n\n    this.valueStack.push({\n      type: 'slice',\n      path,\n      values: sliceValues,\n    });\n  }\n\n  getMatchingSliceValues(elementValue: any[], slice: SliceDefinitionWithTypes, slicing: VisitorSlicingRules): any[] {\n    const matchingItems: any[] = [];\n    for (const arrayItem of elementValue) {\n      const sliceName: string | undefined =\n        arrayItem[SLICE_NAME_KEY] ?? getValueSliceName(arrayItem, [slice], slicing.discriminator, this.schema.url);\n\n      if (sliceName === slice.name) {\n        matchingItems.push(arrayItem);\n      }\n    }\n\n    // Make sure at least slice.min values exist\n    for (let i = matchingItems.length; i < slice.min; i++) {\n      if (isComplexTypeCode(slice.type[0].code)) {\n        const emptySliceValue = Object.create(null);\n        matchingItems.push(emptySliceValue);\n\n        // push onto input array so that it propagates upwards as well\n        elementValue.push(emptySliceValue);\n      }\n    }\n\n    return matchingItems;\n  }\n\n  onExitSlice(): void {\n    const sliceValuesContext = this.valueStack.pop();\n    if (!sliceValuesContext) {\n      throw new Error('Expected value context to exist in onExitSlice');\n    }\n\n    for (const sliceValueArray of sliceValuesContext.values) {\n      for (let i = sliceValueArray.length - 1; i >= 0; i--) {\n        const sliceValue = sliceValueArray[i];\n        if (SLICE_NAME_KEY in sliceValue) {\n          delete sliceValue[SLICE_NAME_KEY];\n        }\n      }\n    }\n  }\n\n  getDefaultValue(): any {\n    return this.rootValue;\n  }\n}\n\nfunction applyMinimums(\n  parent: any,\n  key: string,\n  element: InternalSchemaElement,\n  elements: Record<string, InternalSchemaElement>\n): void {\n  const existingValue = getValueAtKey(parent, key, element, elements);\n\n  if (element.min > 0 && existingValue === undefined) {\n    if (isComplexTypeCode(element.type[0].code)) {\n      if (element.isArray) {\n        setValueAtKey(parent, [Object.create(null)], key, element);\n      } else {\n        setValueAtKey(parent, Object.create(null), key, element);\n      }\n    }\n  }\n}\n\nfunction setValueAtKey(parent: any, value: any, key: string, element: InternalSchemaElement): void {\n  if (key.includes('.')) {\n    throw new Error('key cannot be nested');\n  }\n\n  let resolvedKey = key;\n\n  if (key.includes('[x]')) {\n    const code = element.type[0].code;\n    resolvedKey = key.replace('[x]', capitalize(code));\n  }\n\n  if (value === undefined) {\n    delete parent[resolvedKey];\n  } else {\n    parent[resolvedKey] = value;\n  }\n}\n\nfunction getValueAtKey(\n  value: object,\n  key: string,\n  element: InternalSchemaElement,\n  elements: Record<string, InternalSchemaElement>\n): any {\n  const keyParts = key.split('.');\n  let last: any = value;\n  let answer: any;\n  for (let i = 0; i < keyParts.length; i++) {\n    let keyPart = keyParts[i];\n    if (keyPart.includes('[x]')) {\n      const keyPartElem = elements[keyParts.slice(0, i + 1).join('.')];\n      // should this loop through all possible types instead of using type[0]?\n      const code = keyPartElem.type[0].code;\n      keyPart = keyPart.replace('[x]', capitalize(code));\n    }\n\n    // final key part\n    if (i === keyParts.length - 1) {\n      if (Array.isArray(last)) {\n        answer = last.map((item) => item[keyPart]);\n      } else {\n        answer = last[keyPart];\n      }\n      continue;\n    }\n\n    // intermediate key part\n    if (Array.isArray(last)) {\n      last = last.map((lastItem) => lastItem[keyPart]);\n    } else if (isObject(last)) {\n      if (last[keyPart] === undefined) {\n        return undefined;\n      }\n      last = last[keyPart];\n    } else {\n      return undefined;\n    }\n  }\n\n  return answer;\n}\n\nexport function applyFixedOrPatternValue(\n  inputValue: any,\n  key: string,\n  element: InternalSchemaElement,\n  elements: Record<string, InternalSchemaElement>\n): any {\n  if (!(element.fixed || element.pattern)) {\n    return inputValue;\n  }\n\n  if (Array.isArray(inputValue)) {\n    return inputValue.map((iv) => applyFixedOrPatternValue(iv, key, element, elements));\n  }\n\n  if (inputValue === undefined || inputValue === null) {\n    inputValue = Object.create(null);\n  }\n\n  const outputValue = inputValue;\n\n  const keyParts = key.split('.');\n  let last: any = outputValue;\n  for (let i = 0; i < keyParts.length; i++) {\n    let keyPart = keyParts[i];\n    if (keyPart.includes('[x]')) {\n      const keyPartElem = elements[keyParts.slice(0, i + 1).join('.')];\n      const code = keyPartElem.type[0].code;\n      keyPart = keyPart.replace('[x]', capitalize(code));\n    }\n\n    if (i === keyParts.length - 1) {\n      const lastArray = Array.isArray(last) ? last : [last];\n      for (const item of lastArray) {\n        if (element.fixed) {\n          item[keyPart] ??= element.fixed.value;\n        } else if (element.pattern) {\n          item[keyPart] = applyPattern(item[keyPart], element.pattern.value);\n        }\n      }\n    } else {\n      if (!(keyPart in last)) {\n        const elementKey = keyParts.slice(0, i + 1).join('.');\n        last[keyPart] = elements[elementKey].isArray ? [Object.create(null)] : Object.create(null);\n      }\n      last = last[keyPart];\n    }\n  }\n  return outputValue;\n}\n\nfunction applyPattern(existingValue: any, pattern: any): any {\n  if (Array.isArray(pattern) && (Array.isArray(existingValue) || existingValue === undefined)) {\n    if ((existingValue?.length ?? 0) > 0) {\n      // Cannot yet apply a pattern to a non-empty array since that would require considering cardinality and slicing\n      return existingValue;\n    }\n    return deepClone(pattern);\n  } else if (isObject(pattern)) {\n    if ((isObject(existingValue) && !Array.isArray(existingValue)) || existingValue === undefined) {\n      const resultObj = (deepClone(existingValue) ?? Object.create(null)) as { [key: string]: any };\n      for (const key of Object.keys(pattern)) {\n        resultObj[key] = applyPattern(resultObj[key], pattern[key]);\n      }\n      return resultObj;\n    }\n  }\n\n  return existingValue;\n}\n\n/**\n * Splits a string on the last occurrence of the delimiter\n * @param str - The string to split\n * @param delim - The delimiter string\n * @returns An array of two strings; the first consisting of the beginning of the\n * string up to the last occurrence of the delimiter. the second is the remainder of the\n * string after the last occurrence of the delimiter. If the delimiter is not present\n * in the string, the first element is empty and the second is the input string.\n */\nfunction splitOnceRight(str: string, delim: string): [string, string] {\n  const delimIndex = str.lastIndexOf(delim);\n  if (delimIndex === -1) {\n    return ['', str];\n  }\n  const beginning = str.substring(0, delimIndex);\n  const last = str.substring(delimIndex + delim.length);\n  return [beginning, last];\n}\n", "import { CodeableConcept, Coding, ConceptMap, ConceptMapGroup, OperationOutcome } from '@medplum/fhirtypes';\nimport { OperationOutcomeError, badRequest, isOperationOutcome } from '../outcomes';\n\nexport interface ConceptMapTranslateParameters {\n  url?: string;\n  source?: string;\n  code?: string;\n  system?: string;\n  coding?: Coding;\n  codeableConcept?: CodeableConcept;\n  targetsystem?: string;\n}\n\nexport interface ConceptMapTranslateMatch {\n  equivalence?: string;\n  concept?: Coding;\n}\n\nexport interface ConceptMapTranslateOutput {\n  result: boolean;\n  message?: string;\n  match?: ConceptMapTranslateMatch[];\n}\n\nexport function conceptMapTranslate(map: ConceptMap, params: ConceptMapTranslateParameters): ConceptMapTranslateOutput {\n  if (!map.group) {\n    throw new OperationOutcomeError(badRequest('ConceptMap does not specify a mapping group', 'ConceptMap.group'));\n  }\n\n  const sourceCodes = constructSourceSet(params);\n  if (isOperationOutcome(sourceCodes)) {\n    throw new OperationOutcomeError(sourceCodes);\n  }\n\n  const matches = translateCodes(\n    sourceCodes,\n    params.targetsystem ? map.group.filter((g) => g.target === params.targetsystem) : map.group\n  );\n\n  const result = matches.length > 0;\n\n  return {\n    result,\n    match: result ? matches : undefined,\n  };\n}\n\nfunction constructSourceSet(params: ConceptMapTranslateParameters): Record<string, string[]> | OperationOutcome {\n  if (params.code && !params.coding && !params.codeableConcept) {\n    if (params.system === undefined) {\n      return badRequest(`Missing required 'system' input parameter with 'code' parameter`);\n    }\n    return { [params.system]: [params.code] };\n  } else if (params.coding && !params.code && !params.codeableConcept) {\n    return { [params.coding.system ?? '']: [params.coding.code ?? ''] };\n  } else if (params.codeableConcept && !params.code && !params.coding) {\n    return indexCodes(params.codeableConcept);\n  } else if (params.code || params.coding || params.codeableConcept) {\n    return badRequest('Ambiguous input: multiple source codings provided');\n  } else {\n    return badRequest(\n      `No source provided: 'code'+'system', 'coding', or 'codeableConcept' input parameter is required`\n    );\n  }\n}\n\nfunction indexCodes(concept: CodeableConcept): Record<string, string[]> {\n  const result: Record<string, string[]> = Object.create(null);\n  if (!concept.coding?.length) {\n    return result;\n  }\n\n  for (const { system, code } of concept.coding) {\n    if (!code) {\n      continue;\n    }\n    const key = system ?? '';\n    result[key] = result[key] ? [...result[key], code] : [code];\n  }\n  return result;\n}\n\nfunction translateCodes(sourceCodes: Record<string, string[]>, groups: ConceptMapGroup[]): ConceptMapTranslateMatch[] {\n  const matches: ConceptMapTranslateMatch[] = [];\n  for (const [system, codes] of Object.entries(sourceCodes)) {\n    for (const group of groups.filter((g) => (g.source ?? '') === system)) {\n      let mappings: ConceptMapTranslateMatch[] | undefined = group.element\n        ?.filter((m) => codes.includes(m.code as string))\n        .flatMap(\n          (m) =>\n            m.target?.map((target) => ({\n              equivalence: target.equivalence,\n              concept: {\n                system: group.target,\n                code: target.code,\n                display: target.display,\n              },\n            })) ?? []\n        );\n\n      if (!mappings?.length) {\n        mappings = handleUnmappedCodes(codes, group);\n      }\n      if (mappings) {\n        matches.push(...mappings);\n      }\n    }\n  }\n  return matches;\n}\n\nfunction handleUnmappedCodes(codes: string[], group: ConceptMapGroup): ConceptMapTranslateMatch[] | undefined {\n  switch (group.unmapped?.mode) {\n    case 'provided':\n      return codes.map((code) => ({\n        equivalence: 'equal',\n        concept: { system: group.target, code },\n      }));\n    case 'fixed':\n      return [\n        {\n          equivalence: 'equivalent',\n          concept: {\n            system: group.target,\n            code: group.unmapped.code,\n            display: group.unmapped.display,\n          },\n        },\n      ];\n    default:\n      return undefined;\n  }\n}\n", "import { Token, Tokenizer } from '../fhirlexer/tokenize';\nimport { FHIRPATH_KEYWORDS, FHIRPATH_OPERATORS } from '../fhirpath/tokenize';\n\nconst MAPPING_LANGUAGE_OPERATORS = [...FHIRPATH_OPERATORS, '->', '<<', '>>', '=='];\n\nexport function tokenize(str: string): Token[] {\n  return new Tokenizer(str, FHIRPATH_KEYWORDS, MAPPING_LANGUAGE_OPERATORS).tokenize();\n}\n", "import {\n  ConceptMap,\n  StructureMap,\n  StructureMapGroup,\n  StructureMapGroupInput,\n  StructureMapGroupRule,\n  StructureMapGroupRuleDependent,\n  StructureMapGroupRuleSource,\n  StructureMapGroupRuleTarget,\n  StructureMapGroupRuleTargetParameter,\n  StructureMapStructure,\n} from '@medplum/fhirtypes';\nimport { Atom, Parser } from '../fhirlexer/parse';\nimport { FunctionAtom, LiteralAtom, SymbolAtom } from '../fhirpath/atoms';\nimport { OperatorPrecedence, initFhirPathParserBuilder } from '../fhirpath/parse';\nimport { tokenize } from './tokenize';\n\n/**\n * Mapping from FHIR Mapping Language equivalence operators to FHIR ConceptMap equivalence codes.\n *\n * See: https://build.fhir.org/mapping.g4 for FHIR Mapping Language operators.\n *\n * See: https://hl7.org/fhir/r4/valueset-concept-map-equivalence.html for ConceptMap equivalence codes.\n *\n * @internal\n */\nconst CONCEPT_MAP_EQUIVALENCE: Record<string, string> = {\n  '-': 'disjoint',\n  '==': 'equal',\n};\n\nclass StructureMapParser {\n  readonly structureMap: Partial<StructureMap> = {\n    resourceType: 'StructureMap',\n    status: 'active',\n  };\n\n  constructor(readonly parser: Parser) {}\n\n  parse(): StructureMap {\n    while (this.parser.hasMore()) {\n      const next = this.parser.peek()?.value;\n      switch (next) {\n        case 'map':\n          this.parseMap();\n          break;\n        case 'uses':\n          this.parseUses();\n          break;\n        case 'imports':\n          this.parseImport();\n          break;\n        case 'group':\n          this.parseGroup();\n          break;\n        case 'conceptmap':\n          this.parseConceptMap();\n          break;\n        default:\n          throw new Error(`Unexpected token: ${next}`);\n      }\n    }\n    return this.structureMap as StructureMap;\n  }\n\n  private parseMap(): void {\n    // 'map' url '=' identifier\n    // map \"http://hl7.org/fhir/StructureMap/tutorial\" = tutorial\n    this.parser.consume('Symbol', 'map');\n    this.structureMap.url = this.parser.consume('String').value;\n    this.parser.consume('=');\n    this.structureMap.name = this.parser.consume().value;\n  }\n\n  private parseUses(): void {\n    // 'uses' url structureAlias? 'as' modelMode\n    // uses \"http://hl7.org/fhir/StructureDefinition/tutorial-left\" as source\n    this.parser.consume('Symbol', 'uses');\n    const result: Partial<StructureMapStructure> = {};\n    result.url = this.parser.consume('String').value;\n    if (this.parser.peek()?.value === 'alias') {\n      this.parser.consume('Symbol', 'alias');\n      result.alias = this.parser.consume('Symbol').value;\n    }\n    this.parser.consume('Symbol', 'as');\n    result.mode = this.parser.consume().value as 'source' | 'queried' | 'target' | 'produced';\n    if (!this.structureMap.structure) {\n      this.structureMap.structure = [];\n    }\n    this.structureMap.structure.push(result as StructureMapStructure);\n  }\n\n  private parseImport(): void {\n    this.parser.consume('Symbol', 'imports');\n    if (!this.structureMap.import) {\n      this.structureMap.import = [];\n    }\n    this.structureMap.import.push(this.parser.consume('String').value);\n  }\n\n  private parseGroup(): void {\n    // 'group' identifier parameters extends? typeMode? rules\n    // group tutorial(source src : TLeft, target tgt : TRight) {\n    const result: Partial<StructureMapGroup> = {};\n    this.parser.consume('Symbol', 'group');\n    result.name = this.parser.consume('Symbol').value;\n    result.input = this.parseParameters();\n\n    if (this.parser.peek()?.value === 'extends') {\n      this.parser.consume('Symbol', 'extends');\n      result.extends = this.parser.consume('Symbol').value;\n    }\n\n    if (this.parser.peek()?.value === '<<') {\n      this.parser.consume('<<');\n      result.typeMode = this.parser.consume().value as 'none' | 'types' | 'type-and-types';\n      if (this.parser.peek()?.value === '+') {\n        this.parser.consume('+');\n        result.typeMode = 'type-and-types';\n      }\n      this.parser.consume('>>');\n    } else {\n      result.typeMode = 'none';\n    }\n\n    result.rule = this.parseRules();\n\n    if (!this.structureMap.group) {\n      this.structureMap.group = [];\n    }\n    this.structureMap.group.push(result as StructureMapGroup);\n  }\n\n  private parseParameters(): StructureMapGroupInput[] {\n    const parameters: StructureMapGroupInput[] = [];\n    this.parser.consume('(');\n    while (this.parser.hasMore() && this.parser.peek()?.value !== ')') {\n      parameters.push(this.parseParameter());\n      if (this.parser.peek()?.value === ',') {\n        this.parser.consume(',');\n      }\n    }\n    this.parser.consume(')');\n    return parameters;\n  }\n\n  private parseParameter(): StructureMapGroupInput {\n    // inputMode identifier type?\n    // ':' identifier\n    // source src : TLeft\n    const result: Partial<StructureMapGroupInput> = {};\n    result.mode = this.parser.consume().value as 'source' | 'target';\n    result.name = this.parser.consume('Symbol').value;\n    if (this.parser.peek()?.value === ':') {\n      this.parser.consume(':');\n      result.type = this.parser.consume('Symbol').value;\n    }\n    return result as StructureMapGroupInput;\n  }\n\n  private parseRules(): StructureMapGroupRule[] {\n    const rules = [];\n    this.parser.consume('{');\n    while (this.parser.hasMore() && this.parser.peek()?.value !== '}') {\n      rules.push(this.parseRule());\n    }\n    this.parser.consume('}');\n    return rules;\n  }\n\n  private parseRule(): StructureMapGroupRule {\n    const result: Partial<StructureMapGroupRule> = {\n      source: this.parseRuleSources(),\n    };\n\n    if (this.parser.peek()?.value === '->') {\n      this.parser.consume('->');\n      result.target = this.parseRuleTargets();\n    }\n\n    if (this.parser.peek()?.value === 'then') {\n      this.parser.consume('Symbol', 'then');\n      if (this.parser.peek()?.id === '{') {\n        result.rule = this.parseRules();\n      } else {\n        result.dependent = this.parseRuleDependents();\n      }\n    }\n\n    if (this.parser.peek()?.id === 'String') {\n      result.name = this.parser.consume().value;\n    } else {\n      result.name = result.source?.[0]?.element;\n    }\n\n    this.parser.consume(';');\n    return result as StructureMapGroupRule;\n  }\n\n  private parseRuleSources(): StructureMapGroupRuleSource[] {\n    if (this.parser.hasMore() && this.parser.peek()?.value === 'for') {\n      // The \"for\" keyword is optional\n      // It is not in the official grammar: https://build.fhir.org/mapping.g4\n      // But it is used in the examples: https://build.fhir.org/mapping-tutorial.html\n      this.parser.consume('Symbol', 'for');\n    }\n    const sources = [this.parseRuleSource()];\n    while (this.parser.hasMore() && this.parser.peek()?.value === ',') {\n      this.parser.consume(',');\n      sources.push(this.parseRuleSource());\n    }\n    return sources;\n  }\n\n  private parseRuleSource(): StructureMapGroupRuleSource {\n    const result: Partial<StructureMapGroupRuleSource> = {};\n\n    const context = this.parseRuleContext();\n    const parts = context.split('.');\n    result.context = parts[0];\n    result.element = parts[1];\n\n    if (this.parser.hasMore() && this.parser.peek()?.value === ':') {\n      this.parser.consume(':');\n      result.type = this.parser.consume().value;\n    }\n\n    if (this.parser.hasMore() && this.parser.peek()?.value === 'default') {\n      this.parser.consume('Symbol', 'default');\n      result.defaultValueString = this.parser.consume('String').value;\n    }\n\n    if (\n      this.parser.peek()?.value === 'first' ||\n      this.parser.peek()?.value === 'not_first' ||\n      this.parser.peek()?.value === 'last' ||\n      this.parser.peek()?.value === 'not_last' ||\n      this.parser.peek()?.value === 'only_one'\n    ) {\n      result.listMode = this.parser.consume().value as 'first' | 'not_first' | 'last' | 'not_last' | 'only_one';\n    }\n\n    if (this.parser.peek()?.value === 'as') {\n      this.parser.consume('Symbol', 'as');\n      result.variable = this.parser.consume().value;\n    }\n\n    if (this.parser.peek()?.value === 'log') {\n      this.parser.consume('Symbol', 'log');\n      result.logMessage = this.parser.consume().value;\n    }\n\n    if (this.parser.peek()?.value === 'where') {\n      this.parser.consume('Symbol', 'where');\n      const whereFhirPath = this.parser.consumeAndParse(OperatorPrecedence.Arrow);\n      result.condition = whereFhirPath.toString();\n    }\n\n    if (this.parser.peek()?.value === 'check') {\n      this.parser.consume('Symbol', 'check');\n      const checkFhirPath = this.parser.consumeAndParse(OperatorPrecedence.Arrow);\n      result.check = checkFhirPath.toString();\n    }\n\n    return result as StructureMapGroupRuleSource;\n  }\n\n  private parseRuleTargets(): StructureMapGroupRuleTarget[] {\n    const targets = [this.parseRuleTarget()];\n    while (this.parser.hasMore() && this.parser.peek()?.value === ',') {\n      this.parser.consume(',');\n      targets.push(this.parseRuleTarget());\n    }\n    return targets;\n  }\n\n  private parseRuleTarget(): StructureMapGroupRuleTarget {\n    const result: StructureMapGroupRuleTarget = {};\n\n    const context = this.parseRuleContext();\n    const parts = context.split('.');\n    result.contextType = 'variable';\n    result.context = parts[0];\n    result.element = parts[1];\n\n    if (this.parser.peek()?.value === '=') {\n      this.parser.consume('=');\n      this.parseRuleTargetTransform(result);\n    }\n\n    if (this.parser.peek()?.value === 'as') {\n      this.parser.consume('Symbol', 'as');\n      result.variable = this.parser.consume().value;\n    }\n\n    if (this.parser.peek()?.value === 'share') {\n      this.parser.consume('Symbol', 'share');\n      result.listMode = ['share'];\n      this.parser.consume('Symbol'); // NB: Not in the spec, but used by FHIRCH maps\n    }\n\n    if (\n      this.parser.peek()?.value === 'first' ||\n      this.parser.peek()?.value === 'last' ||\n      this.parser.peek()?.value === 'collate'\n    ) {\n      result.listMode = [this.parser.consume().value as 'first' | 'last' | 'collate'];\n    }\n\n    return result;\n  }\n\n  private parseRuleTargetTransform(result: StructureMapGroupRuleTarget): void {\n    const transformAtom = this.parser.consumeAndParse(OperatorPrecedence.As);\n    if (transformAtom instanceof FunctionAtom) {\n      result.transform = transformAtom.name as 'append' | 'truncate';\n      result.parameter = transformAtom.args?.map(atomToParameter);\n    } else if (transformAtom instanceof LiteralAtom || transformAtom instanceof SymbolAtom) {\n      result.transform = 'copy';\n      result.parameter = [atomToParameter(transformAtom)];\n    } else {\n      result.transform = 'evaluate';\n      result.parameter = [{ valueString: transformAtom.toString() }];\n    }\n  }\n\n  private parseRuleContext(): string {\n    let identifier = this.parser.consume().value;\n    while (this.parser.peek()?.value === '.') {\n      this.parser.consume('.');\n      identifier += '.' + this.parser.consume().value;\n    }\n    return identifier;\n  }\n\n  private parseRuleDependents(): StructureMapGroupRuleDependent[] | undefined {\n    const atom = this.parser.consumeAndParse(OperatorPrecedence.Arrow) as FunctionAtom;\n    return [\n      {\n        name: atom.name,\n        variable: atom.args.map((arg) => (arg as SymbolAtom).name),\n      },\n    ];\n  }\n\n  private parseConceptMap(): void {\n    this.parser.consume('Symbol', 'conceptmap');\n\n    const conceptMap: ConceptMap = {\n      resourceType: 'ConceptMap',\n      status: 'active',\n      url: '#' + this.parser.consume('String').value,\n    };\n\n    this.parser.consume('{');\n\n    const prefixes: Record<string, string> = {};\n\n    let next = this.parser.peek()?.value;\n    while (next !== '}') {\n      if (next === 'prefix') {\n        this.parseConceptMapPrefix(prefixes);\n      } else {\n        this.parseConceptMapRule(conceptMap, prefixes);\n      }\n      next = this.parser.peek()?.value;\n    }\n    this.parser.consume('}');\n\n    if (!this.structureMap.contained) {\n      this.structureMap.contained = [];\n    }\n    this.structureMap.contained.push(conceptMap as ConceptMap);\n  }\n\n  private parseConceptMapPrefix(prefixes: Record<string, string>): void {\n    this.parser.consume('Symbol', 'prefix');\n    const prefix = this.parser.consume().value;\n    this.parser.consume('=');\n    const uri = this.parser.consume().value;\n    prefixes[prefix] = uri;\n  }\n\n  private parseConceptMapRule(conceptMap: Partial<ConceptMap>, prefixes: Record<string, string>): void {\n    const sourcePrefix = this.parser.consume().value;\n    const sourceSystem = prefixes[sourcePrefix];\n    this.parser.consume(':');\n    const sourceCode = this.parser.consume().value;\n    const equivalence = CONCEPT_MAP_EQUIVALENCE[this.parser.consume().value] as 'relatedto';\n    const targetPrefix = this.parser.consume().value;\n    const targetSystem = prefixes[targetPrefix];\n    this.parser.consume(':');\n    const targetCode = this.parser.consume().value;\n\n    let group = conceptMap?.group?.find((g) => g.source === sourceSystem && g.target === targetSystem);\n\n    if (!group) {\n      group = { source: sourceSystem, target: targetSystem, element: [] };\n      if (!conceptMap.group) {\n        conceptMap.group = [];\n      }\n      conceptMap.group.push(group);\n    }\n\n    if (!group.element) {\n      group.element = [];\n    }\n\n    group.element.push({\n      code: sourceCode,\n      target: [{ code: targetCode, equivalence }],\n    });\n  }\n}\n\nfunction atomToParameter(atom: Atom): StructureMapGroupRuleTargetParameter {\n  if (atom instanceof SymbolAtom) {\n    return { valueId: atom.name };\n  }\n  if (atom instanceof LiteralAtom) {\n    return literalToParameter(atom);\n  }\n  throw new Error(`Unknown parameter atom type: ${atom.constructor.name} (${atom.toString()})`);\n}\n\nfunction literalToParameter(literalAtom: LiteralAtom): StructureMapGroupRuleTargetParameter {\n  switch (literalAtom.value.type) {\n    case 'boolean':\n      return { valueBoolean: literalAtom.value.value as boolean };\n    case 'decimal':\n      return { valueDecimal: literalAtom.value.value as number };\n    case 'integer':\n      return { valueInteger: literalAtom.value.value as number };\n    case 'dateTime':\n    case 'string':\n      return { valueString: literalAtom.value.value as string };\n    default:\n      throw new Error('Unknown target literal type: ' + literalAtom.value.type);\n  }\n}\n\nconst fhirPathParserBuilder = initFhirPathParserBuilder()\n  .registerInfix('->', { precedence: OperatorPrecedence.Arrow })\n  .registerInfix(';', { precedence: OperatorPrecedence.Semicolon });\n\n/**\n * Parses a FHIR Mapping Language document into an AST.\n * @param input - The FHIR Mapping Language document to parse.\n * @returns The AST representing the document.\n */\nexport function parseMappingLanguage(input: string): StructureMap {\n  const parser = fhirPathParserBuilder.construct(tokenize(input));\n  parser.removeComments();\n  return new StructureMapParser(parser).parse();\n}\n", "import {\n  ConceptMap,\n  ExtractResource,\n  ResourceType,\n  StructureMap,\n  StructureMapGroup,\n  StructureMapGroupInput,\n  StructureMapGroupRule,\n  StructureMapGroupRuleDependent,\n  StructureMapGroupRuleSource,\n  StructureMapGroupRuleTarget,\n  StructureMapGroupRuleTargetParameter,\n} from '@medplum/fhirtypes';\nimport { generateId } from '../crypto';\nimport { evalFhirPathTyped } from '../fhirpath/parse';\nimport { getTypedPropertyValue, toJsBoolean, toTypedValue } from '../fhirpath/utils';\nimport { TypedValue } from '../types';\nimport { InternalSchemaElement, tryGetDataType } from '../typeschema/types';\nimport { conceptMapTranslate } from './conceptmaptranslate';\n\n/**\n * The TransformMapCollection class is a collection of StructureMap and ConceptMap resources.\n * It is used to store and retrieve imported StructureMaps and ConceptMaps by URL.\n */\nexport class TransformMapCollection {\n  constructor(readonly resources: (StructureMap | ConceptMap)[] = []) {}\n\n  get<K extends ResourceType>(resourceType: K, url: string): ExtractResource<K>[] {\n    const result = [];\n    for (const r of this.resources) {\n      if (r.resourceType === resourceType && r.url && this.matchesUrl(r.url as string, url)) {\n        result.push(r);\n      }\n    }\n    return result as ExtractResource<K>[];\n  }\n\n  private matchesUrl(url: string, pattern: string): boolean {\n    if (pattern.includes('*')) {\n      const parts = pattern.split('*');\n      return url.startsWith(parts[0]) && url.endsWith(parts[1]);\n    } else {\n      return url === pattern;\n    }\n  }\n}\n\ninterface TransformContext {\n  root: StructureMap;\n  transformMaps?: TransformMapCollection;\n  parent?: TransformContext;\n  variables?: Record<string, TypedValue[] | TypedValue>;\n}\n\n/**\n * Transforms input values using a FHIR StructureMap.\n *\n * See: https://www.hl7.org/fhir/mapping-language.html\n *\n * @param structureMap - The StructureMap to transform.\n * @param input - The input values.\n * @param transformMaps - Optional collection of imported StructureMaps and ConceptMaps.\n * @returns The transformed values.\n */\nexport function structureMapTransform(\n  structureMap: StructureMap,\n  input: TypedValue[],\n  transformMaps = new TransformMapCollection()\n): TypedValue[] {\n  return evalStructureMap({ root: structureMap, transformMaps }, structureMap, input);\n}\n\n/**\n * Evaluates a FHIR StructureMap.\n *\n * @param ctx - The transform context.\n * @param structureMap - The FHIR StructureMap definition.\n * @param input - The input values.\n * @returns The transformed values.\n * @internal\n */\nfunction evalStructureMap(ctx: TransformContext, structureMap: StructureMap, input: TypedValue[]): TypedValue[] {\n  evalImports(ctx, structureMap);\n  registerGlobals(ctx, structureMap);\n  return evalGroup(ctx, structureMap.group[0], input);\n}\n\n/**\n * Evaluates the imports in a FHIR StructureMap.\n * For each import statement, the loader function is called to load the imported StructureMap.\n * The imported StructureMap is then hoisted into the current context.\n * @param ctx - The transform context.\n * @param structureMap - The FHIR StructureMap definition.\n * @internal\n */\nfunction evalImports(ctx: TransformContext, structureMap: StructureMap): void {\n  const transformMaps = getTransformMaps(ctx);\n  if (transformMaps && structureMap.import) {\n    for (const url of structureMap.import) {\n      const importedMaps = transformMaps.get('StructureMap', url);\n      for (const importedMap of importedMaps) {\n        registerGlobals(ctx, importedMap);\n      }\n    }\n  }\n}\n\n/**\n * Registers all globals in a FHIR StructureMap into the current context.\n * Adds all contained StructureMaps and ConceptMaps to the map collection.\n * Hoists the groups in a FHIR StructureMap into the current context.\n * This is necessary to allow groups to reference each other.\n *\n * @param ctx - The transform context.\n * @param structureMap - The FHIR StructureMap definition.\n * @internal\n */\nfunction registerGlobals(ctx: TransformContext, structureMap: StructureMap): void {\n  const transformMaps = getTransformMaps(ctx);\n  if (transformMaps && structureMap.contained) {\n    for (const c of structureMap.contained) {\n      if (c.resourceType === 'StructureMap' || c.resourceType === 'ConceptMap') {\n        transformMaps.resources.push(c);\n      }\n    }\n  }\n\n  if (structureMap.group) {\n    for (const group of structureMap.group) {\n      setVariable(ctx, group.name as string, { type: 'StructureMapGroup', value: group });\n    }\n  }\n}\n\n/**\n * Evaluates a FHIR StructureMapGroup.\n *\n * A \"group\" is similar to a function in a programming language.\n *\n * @param ctx - The transform context.\n * @param group - The FHIR StructureMapGroup definition.\n * @param input - The input values.\n * @returns The transformed values.\n * @internal\n */\nfunction evalGroup(ctx: TransformContext, group: StructureMapGroup, input: TypedValue[]): TypedValue[] {\n  const sourceDefinitions: StructureMapGroupInput[] = [];\n  const targetDefinitions: StructureMapGroupInput[] = [];\n\n  for (const inputDefinition of group.input as StructureMapGroupInput[]) {\n    if (inputDefinition.mode === 'source') {\n      sourceDefinitions.push(inputDefinition);\n    }\n    if (inputDefinition.mode === 'target') {\n      targetDefinitions.push(inputDefinition);\n    }\n  }\n\n  if (sourceDefinitions.length === 0) {\n    throw new Error('Missing source definitions');\n  }\n\n  if (targetDefinitions.length === 0) {\n    throw new Error('Missing target definitions');\n  }\n\n  if (input.length < sourceDefinitions.length) {\n    throw new Error(`Not enough arguments (got ${input.length}, min ${sourceDefinitions.length})`);\n  }\n\n  if (input.length > sourceDefinitions.length + targetDefinitions.length) {\n    throw new Error(\n      `Too many arguments (got ${input.length}, max ${sourceDefinitions.length + targetDefinitions.length})`\n    );\n  }\n\n  const variables: Record<string, TypedValue> = {};\n  const outputs = [];\n  let inputIndex = 0;\n\n  for (const sourceDefinition of sourceDefinitions) {\n    safeAssign(variables, sourceDefinition.name as string, input[inputIndex++]);\n  }\n\n  for (const targetDefinition of targetDefinitions) {\n    const output = input[inputIndex++] ?? { type: targetDefinition.type ?? 'BackboneElement', value: {} };\n    safeAssign(variables, targetDefinition.name as string, output);\n    outputs.push(output);\n  }\n\n  const newContext: TransformContext = { root: ctx.root, parent: ctx, variables };\n\n  if (group.rule) {\n    for (const rule of group.rule) {\n      evalRule(newContext, rule);\n    }\n  }\n\n  return outputs;\n}\n\n/**\n * Entry point for evaluating a rule.\n * Rule sources are evaluated first, followed by the rule target, child rules, and dependent groups.\n * Rule sources are evaluated recursively to handle multiple source statements.\n *\n * @param ctx - The transform context.\n * @param rule - The FHIR Mapping rule definition.\n * @internal\n */\nfunction evalRule(ctx: TransformContext, rule: StructureMapGroupRule): void {\n  // https://build.fhir.org/mapping-language.html#7.8.0.8.1\n  // If there are multiple source statements, the rule applies for the permutation of the source elements from each source statement.\n  // E.g. if there are 2 source statements, each with 2 matching elements, the rule applies 4 times, one for each combination.\n  // Typically, if there is more than one source statement, only one of the elements would repeat.\n  // If any of the source data elements have no value, then the rule never applies;\n  // only existing permutations are executed: for multiple source statements, all of them need to match.\n  if (rule.source) {\n    evalRuleSourceAt(ctx, rule, 0);\n  }\n}\n\n/**\n * Recursively evaluates a rule at a specific source index.\n *\n * @param ctx - The transform context.\n * @param rule - The FHIR Mapping rule definition.\n * @param index - The source index to evaluate.\n * @internal\n */\nfunction evalRuleSourceAt(\n  ctx: TransformContext,\n  rule: StructureMapGroupRule & { source: StructureMapGroupRuleSource[] },\n  index: number\n): void {\n  const source = rule.source[index];\n  for (const sourceValue of evalSource(ctx, source)) {\n    setVariable(ctx, '_', sourceValue);\n\n    if (source.variable) {\n      setVariable(ctx, source.variable, sourceValue);\n    }\n\n    if (index < rule.source.length - 1) {\n      // If there are more sources, evaluate the next source\n      evalRuleSourceAt(ctx, rule, index + 1);\n    } else {\n      // Otherwise, evaluate the rule after the sources\n      evalRuleAfterSources(ctx, rule);\n    }\n  }\n}\n\n/**\n * Evaluates a rule after the sources have been evaluated.\n *\n * This includes the rule targets, child rules, and dependent groups.\n *\n * @param ctx - The transform context.\n * @param rule - The FHIR Mapping rule definition.\n * @internal\n */\nfunction evalRuleAfterSources(ctx: TransformContext, rule: StructureMapGroupRule): void {\n  if (tryEvalShorthandRule(ctx, rule)) {\n    return;\n  }\n  if (rule.target) {\n    for (const target of rule.target) {\n      evalTarget(ctx, target);\n    }\n  }\n  if (rule.rule) {\n    for (const childRule of rule.rule) {\n      evalRule(ctx, childRule);\n    }\n  }\n  if (rule.dependent) {\n    for (const dependent of rule.dependent) {\n      evalDependent(ctx, dependent);\n    }\n  }\n}\n\n/**\n * Tries to evaluate a shorthand rule.\n * @param ctx - The transform context.\n * @param rule - The FHIR Mapping rule definition.\n * @returns True if the rule is a shorthand rule, false otherwise.\n */\nfunction tryEvalShorthandRule(ctx: TransformContext, rule: StructureMapGroupRule): boolean {\n  // First, check if this is actually a shorthand rule\n  // Shorthand rule has exactly one target, no transform, no rule, and no dependent\n  if (!rule.target || rule.target.length !== 1 || rule.target[0].transform || rule.rule || rule.dependent) {\n    return false;\n  }\n\n  // Determine the source value\n  let sourceValue = getVariable(ctx, '_');\n  if (Array.isArray(sourceValue)) {\n    sourceValue = sourceValue[0];\n  }\n  if (!sourceValue) {\n    return false;\n  }\n\n  // Ok, this is a shorthand rule.\n  // Next, try to find a \"types\" group that matches the input and output types\n  const group = tryFindTypesGroup(ctx, sourceValue);\n  if (!group) {\n    // No group found, fallback to simple copy transform\n    // This is commonly used for primitive types such as \"string\" and \"code\"\n    evalTarget(ctx, { ...rule.target[0], transform: 'copy', parameter: [{ valueId: '_' }] });\n    return true;\n  }\n\n  const target = rule.target[0];\n  const targetContext = getVariable(ctx, target.context as string) as TypedValue;\n  const originalValue = targetContext.value[target.element as string];\n  const isArray = isArrayProperty(targetContext, target.element as string) || Array.isArray(originalValue);\n  const newContext: TransformContext = { root: ctx.root, parent: ctx, variables: {} };\n  const targetValue = evalGroup(newContext, group, [sourceValue]);\n  setTargetValue(ctx, target, targetContext, targetValue, isArray, originalValue);\n  return true;\n}\n\n/**\n * Tries to find a \"types\" group that matches the input and output types.\n * This is used to determine the transform for a shorthand rule.\n * @param ctx - The transform context.\n * @param sourceValue - The source value.\n * @returns The matching group, if found; otherwise, undefined.\n */\nfunction tryFindTypesGroup(ctx: TransformContext, sourceValue: TypedValue): StructureMapGroup | undefined {\n  let currentContext: TransformContext | undefined = ctx;\n  while (currentContext) {\n    if (currentContext.variables) {\n      for (const value of Object.values(currentContext.variables)) {\n        const array = arrayify(value);\n        for (const entry of array) {\n          if (entry.type === 'StructureMapGroup') {\n            const group = entry.value as StructureMapGroup;\n            if (\n              (group.typeMode === 'types' || group.typeMode === 'type-and-types') &&\n              group.input.length === 2 &&\n              group.input[0].mode === 'source' &&\n              group.input[0].type === sourceValue.type &&\n              group.input[1].mode === 'target'\n            ) {\n              return group;\n            }\n          }\n        }\n      }\n    }\n    currentContext = currentContext.parent;\n  }\n\n  return undefined;\n}\n\n/**\n * Evaluates a FHIR Mapping source definition.\n *\n * If the source has a condition, the condition is evaluated.\n * If the source has a check, the check is evaluated.\n *\n * @param ctx - The transform context.\n * @param source - The FHIR Mapping source definition.\n * @returns The evaluated source values.\n * @internal\n */\nfunction evalSource(ctx: TransformContext, source: StructureMapGroupRuleSource): TypedValue[] {\n  const sourceContext = getVariable(ctx, source.context as string) as TypedValue | undefined;\n  if (!sourceContext) {\n    return [];\n  }\n\n  const sourceElement = source.element;\n  if (!sourceElement) {\n    return [sourceContext];\n  }\n\n  let sourceValue = evalFhirPathTyped(sourceElement, [sourceContext]);\n  if (!sourceValue || sourceValue.length === 0) {\n    return [];\n  }\n\n  if (source.condition) {\n    if (!evalCondition(sourceContext, { [source.variable as string]: sourceValue[0] }, source.condition)) {\n      return [];\n    }\n  }\n\n  if (source.check) {\n    if (!evalCondition(sourceContext, { [source.variable as string]: sourceValue[0] }, source.check)) {\n      throw new Error('Check failed: ' + source.check);\n    }\n  }\n\n  if (source.listMode) {\n    sourceValue = evalListMode(source, sourceValue);\n  }\n\n  return sourceValue;\n}\n\n/**\n * Evaluates a FHIRPath condition for a FHIR Mapping source.\n *\n * This is used for both the \"condition\" and \"check\" properties.\n *\n * @param input - The input value, typically the rule source.\n * @param variables - The variables in scope for the FHIRPath expression.\n * @param condition - The FHIRPath condition to evaluate.\n * @returns True if the condition is true, false otherwise.\n * @internal\n */\nfunction evalCondition(input: TypedValue, variables: Record<string, TypedValue>, condition: string): boolean {\n  return toJsBoolean(evalFhirPathTyped(condition, [input], variables));\n}\n\n/**\n * Evaluates the list mode for a FHIR Mapping source.\n *\n * @param source - The FHIR Mapping source definition.\n * @param sourceValue - The source values.\n * @returns The evaluated source values.\n * @internal\n */\nfunction evalListMode(source: StructureMapGroupRuleSource, sourceValue: TypedValue[]): TypedValue[] {\n  // eslint-disable-next-line @typescript-eslint/switch-exhaustiveness-check\n  switch (source.listMode) {\n    case 'first':\n      return [sourceValue[0]];\n    case 'not_first':\n      return sourceValue.slice(1);\n    case 'last':\n      return [sourceValue[sourceValue.length - 1]];\n    case 'not_last':\n      return sourceValue.slice(0, sourceValue.length - 1);\n    case 'only_one':\n      if (sourceValue.length !== 1) {\n        throw new Error('Expected only one value');\n      }\n      break;\n  }\n  return sourceValue;\n}\n\n/**\n * Evaluates a FHIR Mapping target definition.\n *\n * @param ctx - The transform context.\n * @param target - The FHIR Mapping target definition.\n * @internal\n */\nfunction evalTarget(ctx: TransformContext, target: StructureMapGroupRuleTarget): void {\n  const targetContext = getVariable(ctx, target.context as string) as TypedValue | undefined;\n  if (!targetContext) {\n    throw new Error('Target not found: ' + target.context);\n  }\n\n  const originalValue = targetContext.value[target.element as string];\n  let targetValue: TypedValue[];\n\n  // Determine if the target property is an array field or not\n  // If the target property is an array, then we need to append to the array\n  const isArray = isArrayProperty(targetContext, target.element as string) || Array.isArray(originalValue);\n\n  if (!target.transform) {\n    const elementTypes = tryGetPropertySchema(targetContext, target.element as string)?.type;\n    const elementType = elementTypes?.length === 1 ? elementTypes[0].code : undefined;\n    if (isArray || originalValue === undefined) {\n      targetValue = [elementType ? { type: elementType, value: {} } : toTypedValue({})];\n    } else {\n      targetValue = [elementType ? { type: elementType, value: originalValue } : toTypedValue(originalValue)];\n    }\n  } else {\n    switch (target.transform) {\n      case 'append':\n        targetValue = evalAppend(ctx, target);\n        break;\n      case 'cast':\n        targetValue = evalCast(ctx, target);\n        break;\n      case 'cc':\n        targetValue = evalCc(ctx, target);\n        break;\n      case 'copy':\n        targetValue = evalCopy(ctx, target);\n        break;\n      case 'create':\n        targetValue = evalCreate(ctx, target);\n        break;\n      case 'evaluate':\n        targetValue = evalEvaluate(ctx, target);\n        break;\n      case 'translate':\n        targetValue = evalTranslate(ctx, target);\n        break;\n      case 'truncate':\n        targetValue = evalTruncate(ctx, target);\n        break;\n      case 'uuid':\n        targetValue = [{ type: 'string', value: generateId() }];\n        break;\n      default:\n        throw new Error(`Unsupported transform: ${target.transform}`);\n    }\n  }\n\n  setTargetValue(ctx, target, targetContext, targetValue, isArray, originalValue);\n}\n\n/**\n * Sets a target value.\n *\n * @param ctx - The transform context.\n * @param target - The FHIR Mapping target definition.\n * @param targetContext - The target context.\n * @param targetValue - The target value.\n * @param isArray - True if the target property is an array field.\n * @param originalValue - The original value of the target property.\n * @internal\n */\nfunction setTargetValue(\n  ctx: TransformContext,\n  target: StructureMapGroupRuleTarget,\n  targetContext: TypedValue,\n  targetValue: TypedValue[],\n  isArray: boolean,\n  originalValue: any\n): void {\n  if (targetValue.length === 0) {\n    return;\n  }\n\n  if (isArray) {\n    if (!originalValue) {\n      originalValue = [];\n      safeAssign(targetContext.value, target.element as string, originalValue);\n    }\n    for (const el of targetValue) {\n      originalValue.push(el.value);\n    }\n  } else {\n    safeAssign(targetContext.value, target.element as string, targetValue[0].value);\n  }\n\n  if (target.variable) {\n    setVariable(ctx, target.variable, unarrayify(targetValue));\n  }\n}\n\n/**\n * Returns true if the target property is an array field.\n *\n * @param targetContext - The target context.\n * @param element - The element to check (i.e., the property name).\n * @returns True if the target property is an array field.\n * @internal\n */\nfunction isArrayProperty(targetContext: TypedValue, element: string): boolean | undefined {\n  return tryGetPropertySchema(targetContext, element)?.isArray;\n}\n\n/**\n * Returns the type schema\n * @param targetContext - The target context.\n * @param element - The element to check (i.e., the property name).\n * @returns the type schema for the target element, if it is loeaded\n * @internal\n */\nfunction tryGetPropertySchema(targetContext: TypedValue, element: string): InternalSchemaElement | undefined {\n  return tryGetDataType(targetContext.type)?.elements?.[element];\n}\n\n/**\n * Evaluates the \"append\" transform.\n *\n * \"Source is element or string - just append them all together\"\n *\n * See: https://build.fhir.org/mapping-language.html#7.8.0.8.2\n *\n * @param ctx - The transform context.\n * @param target - The FHIR Mapping target definition.\n * @returns The evaluated target values.\n * @internal\n */\nfunction evalAppend(ctx: TransformContext, target: StructureMapGroupRuleTarget): TypedValue[] {\n  const arg1 = resolveParameter(ctx, target.parameter?.[0])?.[0]?.value;\n  const arg2 = resolveParameter(ctx, target.parameter?.[1])?.[0]?.value;\n  return [{ type: 'string', value: (arg1 ?? '').toString() + (arg2 ?? '').toString() }];\n}\n\n/**\n * Evaluates the \"cast\" transform.\n *\n * \"Cast source from one type to another. target type can be left as implicit if there is one and only one target type known.\"\n *\n * See: https://build.fhir.org/mapping-language.html#7.8.0.8.2\n *\n * @param ctx - The transform context.\n * @param target - The FHIR Mapping target definition.\n * @returns The evaluated target values.\n * @internal\n */\nfunction evalCast(ctx: TransformContext, target: StructureMapGroupRuleTarget): TypedValue[] {\n  const arg1 = resolveParameter(ctx, target.parameter?.[0])?.[0];\n  const arg2 = resolveParameter(ctx, target.parameter?.[1])?.[0]?.value;\n  if (arg2 === 'string') {\n    return [{ type: 'string', value: arg1?.value?.toString() }];\n  }\n  return [arg1];\n}\n\n/**\n * Evaluates the \"cc\" transform.\n *\n * \"Create a CodeableConcept from the parameters provided.\"\n *\n * If there are two parameters, the first is the system and the second is the code.\n *\n * If there is only one parameter, it is the text.\n *\n * See: https://build.fhir.org/mapping-language.html#7.8.0.8.2\n *\n * @param ctx - The transform context.\n * @param target - The FHIR Mapping target definition.\n * @returns The evaluated target values.\n * @internal\n */\nfunction evalCc(ctx: TransformContext, target: StructureMapGroupRuleTarget): TypedValue[] {\n  const params = target.parameter as StructureMapGroupRuleTargetParameter[];\n  if (params.length === 2) {\n    // system and code\n    const system = resolveParameter(ctx, params[0])?.[0]?.value;\n    const code = resolveParameter(ctx, params[1])?.[0]?.value;\n    return [{ type: 'CodeableConcept', value: { coding: [{ system, code }] } }];\n  } else {\n    // text\n    const text = resolveParameter(ctx, params[0])?.[0]?.value;\n    return [{ type: 'CodeableConcept', value: { text } }];\n  }\n}\n\n/**\n * Evaluates the \"copy\" transform.\n *\n * \"Simply copy the source to the target as is (only allowed when the types in source and target match- typically for primitive types).\n * In the concrete syntax, this is simply represented as the source variable, e.g. src.a = tgt.b\"\n *\n * See: https://build.fhir.org/mapping-language.html#7.8.0.8.2\n *\n * @param ctx - The transform context.\n * @param target - The FHIR Mapping target definition.\n * @returns The evaluated target values.\n * @internal\n */\nfunction evalCopy(ctx: TransformContext, target: StructureMapGroupRuleTarget): TypedValue[] {\n  return (target.parameter as StructureMapGroupRuleTargetParameter[]).flatMap((p) => resolveParameter(ctx, p));\n}\n\n/**\n * Evaluates the \"create\" transform.\n *\n * \"Use the standard API to create a new instance of data.\n * Where structure definitions have been provided, the type parameter must be a string which is a known type of a root element.\n * Where they haven't, the application must know the name somehow.\"\"\n *\n * See: https://build.fhir.org/mapping-language.html#7.8.0.8.2\n *\n * @param ctx - The transform context.\n * @param target - The FHIR Mapping target definition.\n * @returns The evaluated target values.\n * @internal\n */\nfunction evalCreate(ctx: TransformContext, target: StructureMapGroupRuleTarget): TypedValue[] {\n  const result: Record<string, unknown> = {};\n  if (target.parameter && target.parameter.length > 0) {\n    result.resourceType = resolveParameter(ctx, target.parameter?.[0])?.[0]?.value;\n  }\n  return [toTypedValue(result)];\n}\n\n/**\n * Evaluates the \"evaluate\" transform.\n *\n * \"Execute the supplied FHIRPath expression and use the value returned by that.\"\n *\n * See: https://build.fhir.org/mapping-language.html#7.8.0.8.2\n *\n * @param ctx - The transform context.\n * @param target - The FHIR Mapping target definition.\n * @returns The evaluated target values.\n * @internal\n */\nfunction evalEvaluate(ctx: TransformContext, target: StructureMapGroupRuleTarget): TypedValue[] {\n  const typedExpr = resolveParameter(ctx, target.parameter?.[0]);\n  const expr = typedExpr[0].value as string;\n  return evalFhirPathTyped(expr, [], buildFhirPathVariables(ctx) as Record<string, TypedValue>);\n}\n\n/**\n * Evaluates the \"translate\" transform.\n *\n * \"Use the translate operation. The source is some type of code or coded datatype,\n * and the source and map_uri are passed to the translate operation.\n * The output determines what value from the translate operation is used for the result of the operation\n * (code, system, display, Coding, or CodeableConcept)\"\n *\n * See: https://build.fhir.org/mapping-language.html#7.8.0.8.2\n *\n * @param ctx - The transform context.\n * @param target - The FHIR Mapping target definition.\n * @returns The evaluated target values.\n * @internal\n */\nfunction evalTranslate(ctx: TransformContext, target: StructureMapGroupRuleTarget): TypedValue[] {\n  const args = (target.parameter as StructureMapGroupRuleTargetParameter[]).flatMap((p) => resolveParameter(ctx, p));\n  const sourceValue = args[0].value;\n  const mapUri = args[1].value;\n  const transformMaps = getTransformMaps(ctx);\n  const conceptMap = transformMaps?.get('ConceptMap', mapUri)[0];\n  if (!conceptMap) {\n    throw new Error('ConceptMap not found: ' + mapUri);\n  }\n  // TODO: Verify whether system is actually required\n  // The FHIR Mapping Language spec does not say whether it is required\n  // But our current implementation requires it\n  const result = conceptMapTranslate(conceptMap, { system: conceptMap.group?.[0]?.source, code: sourceValue });\n  return [toTypedValue(result.match?.[0]?.concept?.code)];\n}\n\n/**\n * Evaluates the \"truncate\" transform.\n *\n * \"Source must be some stringy type that has some meaningful length property\"\n *\n * See: https://build.fhir.org/mapping-language.html#7.8.0.8.2\n *\n * @param ctx - The transform context.\n * @param target - The FHIR Mapping target definition.\n * @returns The evaluated target values.\n * @internal\n */\nfunction evalTruncate(ctx: TransformContext, target: StructureMapGroupRuleTarget): TypedValue[] {\n  const targetValue = resolveParameter(ctx, target.parameter?.[0])?.[0];\n  const targetLength = resolveParameter(ctx, target.parameter?.[1])?.[0]?.value as number;\n  if (targetValue.type === 'string') {\n    return [{ type: 'string', value: targetValue.value.substring(0, targetLength) }];\n  }\n  return [targetValue];\n}\n\n/**\n * Evaluates a rule dependent group.\n *\n * See: https://hl7.org/fhir/r4/structuremap-definitions.html#StructureMap.group.rule.dependent\n *\n * @param ctx - The transform context.\n * @param dependent - The FHIR Mapping dependent definition.\n * @internal\n */\nfunction evalDependent(ctx: TransformContext, dependent: StructureMapGroupRuleDependent): void {\n  const dependentGroup = getVariable(ctx, dependent.name as string) as TypedValue | undefined;\n  if (!dependentGroup) {\n    throw new Error('Dependent group not found: ' + dependent.name);\n  }\n\n  const variables = dependent.variable as string[];\n  const args: TypedValue[] = [];\n  for (const variable of variables) {\n    const variableValue = getVariable(ctx, variable) as TypedValue | undefined;\n    if (!variableValue) {\n      throw new Error('Dependent variable not found: ' + variable);\n    }\n    args.push(variableValue);\n  }\n\n  const newContext: TransformContext = { root: ctx.root, parent: ctx, variables: {} };\n  evalGroup(newContext, dependentGroup.value as StructureMapGroup, args);\n}\n\nfunction getTransformMaps(ctx: TransformContext): TransformMapCollection | undefined {\n  if (ctx.transformMaps) {\n    return ctx.transformMaps;\n  }\n  if (ctx.parent) {\n    return getTransformMaps(ctx.parent);\n  }\n  return undefined;\n}\n\n/**\n * Resolves the value of a FHIR Mapping target parameter.\n *\n * For literal values, the value is returned as-is.\n *\n * For variables, the value is looked up in the current context.\n *\n * @param ctx - The transform context.\n * @param parameter - The FHIR Mapping target parameter definition.\n * @returns The resolved parameter values.\n * @internal\n */\nfunction resolveParameter(\n  ctx: TransformContext,\n  parameter: StructureMapGroupRuleTargetParameter | undefined\n): TypedValue[] {\n  const typedParameter = { type: 'StructureMapGroupRuleTargetParameter', value: parameter };\n  let paramValue = getTypedPropertyValue(typedParameter, 'value');\n  if (!paramValue) {\n    throw new Error('Missing target parameter: ' + JSON.stringify(parameter));\n  }\n\n  paramValue = arrayify(paramValue);\n\n  if (paramValue.length === 1 && paramValue[0].type === 'id') {\n    const variableValue = getVariable(ctx, paramValue[0].value as string);\n    if (!variableValue) {\n      throw new Error('Variable not found: ' + paramValue[0].value);\n    }\n    return arrayify(variableValue);\n  }\n\n  return paramValue;\n}\n\n/**\n * Returns a variable value by name.\n *\n * Recursively searches the parent context if the variable is not found in the current context.\n *\n * @param ctx - The transform context.\n * @param name - The variable name.\n * @returns The variable value.\n * @internal\n */\nfunction getVariable(ctx: TransformContext, name: string): TypedValue[] | TypedValue | undefined {\n  const value = ctx.variables?.[name];\n  if (value) {\n    return value;\n  }\n  if (ctx.parent) {\n    return getVariable(ctx.parent, name);\n  }\n  return undefined;\n}\n\n/**\n * Builds a collection of FHIRPath variables from the current context.\n *\n * Recursively searches the parent context to build the complete set of variables.\n *\n * @param ctx - The transform context.\n * @param result - The builder output.\n * @returns The result with the FHIRPath variables.\n * @internal\n */\nfunction buildFhirPathVariables(\n  ctx: TransformContext,\n  result: Record<string, TypedValue[] | TypedValue> = {}\n): Record<string, TypedValue[] | TypedValue> {\n  if (ctx.parent) {\n    buildFhirPathVariables(ctx.parent, result);\n  }\n  if (ctx.variables) {\n    for (const [key, value] of Object.entries(ctx.variables)) {\n      result[key] = value;\n      result['%' + key] = value;\n    }\n  }\n  return result;\n}\n\n/**\n * Sets a variable value in the current context.\n *\n * @param ctx - The transform context.\n * @param name - The variable name.\n * @param value - The variable value.\n * @internal\n */\nfunction setVariable(ctx: TransformContext, name: string, value: TypedValue[] | TypedValue): void {\n  if (!ctx.variables) {\n    ctx.variables = {};\n  }\n  safeAssign(ctx.variables, name, value);\n}\n\nfunction safeAssign(target: Record<string, unknown>, key: string, value: unknown): void {\n  if (key === '__proto__' || key === 'constructor' || key === 'prototype') {\n    throw new Error('Invalid key: ' + key);\n  }\n  target[key] = value;\n}\n\nfunction arrayify<T>(value: T | T[]): T[] {\n  return Array.isArray(value) ? value : [value];\n}\n\nfunction unarrayify<T>(value: T[]): T | T[] {\n  return value.length === 1 ? value[0] : value;\n}\n", "import { Token, Tokenizer } from '../fhirlexer/tokenize';\nimport { FHIRPATH_KEYWORDS, FHIRPATH_OPERATORS } from '../fhirpath/tokenize';\n\nconst MAPPING_LANGUAGE_OPERATORS = [...FHIRPATH_OPERATORS, 'eq', 'ne', 'co'];\n\nexport function tokenize(str: string): Token[] {\n  return new Tokenizer(str, FHIRPATH_KEYWORDS, MAPPING_LANGUAGE_OPERATORS, {\n    dateTimeLiterals: true,\n    symbolRegex: /[^\\s\\])]/,\n  }).tokenize();\n}\n", "// See: https://hl7.org/fhir/search_filter.html\n\nimport { Operator } from '../search/search';\n\n/**\n * The FhirFilterExpression type is the base type of all filter expressions.\n */\nexport type FhirFilterExpression = FhirFilterComparison | FhirFilterNegation | FhirFilterConnective;\n\n/**\n * The FhirFilterComparison class represents a comparison expression.\n */\nexport class FhirFilterComparison {\n  constructor(\n    readonly path: string,\n    readonly operator: Operator,\n    readonly value: string\n  ) {}\n}\n\n/**\n * The FhirFilterNegation class represents a negation expression.\n * It contains a single child expression.\n */\nexport class FhirFilterNegation {\n  constructor(readonly child: FhirFilterExpression) {}\n}\n\n/**\n * The FhirFilterConnective class represents a connective expression.\n * It contains a list of child expressions.\n */\nexport class FhirFilterConnective {\n  constructor(\n    readonly keyword: 'and' | 'or',\n    readonly left: FhirFilterExpression,\n    readonly right: FhirFilterExpression\n  ) {}\n}\n", "import { Parser } from '../fhirlexer/parse';\nimport { initFhirPathParserBuilder } from '../fhirpath/parse';\nimport { OperationOutcomeError, badRequest } from '../outcomes';\nimport { Operator } from '../search/search';\nimport { tokenize } from './tokenize';\nimport { FhirFilterComparison, FhirFilterConnective, FhirFilterExpression, FhirFilterNegation } from './types';\n\n/**\n * The operatorMap maps FHIR _filter operators to Medplum search operators.\n * See _filter operators: https://www.hl7.org/fhir/search_filter.html#ops\n */\nconst operatorMap: Record<string, Operator | undefined> = {\n  // eq - an item in the set has an equal value\n  eq: Operator.EQUALS,\n  // ne - An item in the set has an unequal value\n  ne: Operator.NOT_EQUALS,\n  // co - An item in the set contains this value\n  co: Operator.CONTAINS,\n  // sw - An item in the set starts with this value\n  sw: Operator.STARTS_WITH,\n  // ew - An item in the set ends with this value\n  ew: undefined,\n  // gt / lt / ge / le - A value in the set is (greater than, less than, greater or equal, less or equal) the given value\n  gt: Operator.GREATER_THAN,\n  lt: Operator.LESS_THAN,\n  ge: Operator.GREATER_THAN_OR_EQUALS,\n  le: Operator.LESS_THAN_OR_EQUALS,\n  // ap - A value in the set is approximately the same as this value.\n  // Note that the recommended value for the approximation is 10% of the stated value (or for a date, 10% of the gap between now and the date), but systems may choose other values where appropriate\n  ap: Operator.APPROXIMATELY,\n  // sa - The value starts after the specified value\n  sa: Operator.STARTS_AFTER,\n  // eb - The value ends before the specified value\n  eb: Operator.ENDS_BEFORE,\n  // pr - The set is empty or not (value is false or true)\n  pr: Operator.PRESENT,\n  // po - True if a (implied) date period in the set overlaps with the implied period in the value\n  po: undefined,\n  // ss - True if the value subsumes a concept in the set\n  ss: undefined,\n  // sb - True if the value is subsumed by a concept in the set\n  sb: undefined,\n  // in - True if one of the concepts is in the nominated value set by URI, either a relative, literal or logical vs\n  in: Operator.IN,\n  // ni - True if none of the concepts are in the nominated value set by URI, either a relative, literal or logical vs\n  ni: Operator.NOT_IN,\n  // re - True if one of the references in set points to the given URL\n  re: Operator.EQUALS,\n  // identifier - True if the identifier is in the identifier set (Medplum extension)\n  identifier: Operator.IDENTIFIER,\n};\n\nfunction getOperator(value: string): Operator {\n  const operator = operatorMap[value];\n  if (!operator) {\n    throw new OperationOutcomeError(badRequest('Invalid operator: ' + value));\n  }\n  return operator;\n}\n\nclass FilterParameterParser {\n  constructor(readonly parser: Parser) {}\n\n  parse(): FhirFilterExpression {\n    let result: FhirFilterExpression;\n\n    if (this.parser.peek()?.value === '(') {\n      this.parser.consume('(');\n      result = this.parse();\n      this.parser.consume(')');\n    } else if (this.parser.peek()?.value === 'not') {\n      this.parser.consume('Symbol', 'not');\n      this.parser.consume('(');\n      result = new FhirFilterNegation(this.parse());\n      this.parser.consume(')');\n    } else {\n      result = new FhirFilterComparison(\n        this.parser.consume('Symbol').value,\n        getOperator(this.parser.consume('Symbol').value),\n        this.parser.consume().value\n      );\n    }\n\n    const next = this.parser.peek()?.value;\n    if (next === 'and' || next === 'or') {\n      this.parser.consume('Symbol', next);\n      return new FhirFilterConnective(next, result, this.parse());\n    }\n\n    return result;\n  }\n}\n\nconst fhirPathParserBuilder = initFhirPathParserBuilder();\n\n/**\n * Parses a FHIR _filter parameter expression into an AST.\n * @param input - The FHIR _filter parameter expression.\n * @returns The AST representing the filters.\n */\nexport function parseFilterParameter(input: string): FhirFilterExpression {\n  const parser = fhirPathParserBuilder.construct(tokenize(input));\n  parser.removeComments();\n  return new FilterParameterParser(parser).parse();\n}\n", "import { isStringArray } from './utils';\n\n/**\n * The Hl7Context class represents the parsing context for an HL7 message.\n *\n * @see MSH-1: https://hl7-definition.caristix.com/v2/HL7v2.6/Fields/MSH.1\n * @see MSH-2: https://hl7-definition.caristix.com/v2/HL7v2.6/Fields/MSH.2\n * @see See this tutorial on MSH, and why it's a bad idea to use anything other than the default values: https://www.hl7soup.com/HL7TutorialMSH.html\n */\nexport class Hl7Context {\n  constructor(\n    public readonly segmentSeparator = '\\r',\n    public readonly fieldSeparator = '|',\n    public readonly componentSeparator = '^',\n    public readonly repetitionSeparator = '~',\n    public readonly escapeCharacter = '\\\\',\n    public readonly subcomponentSeparator = '&'\n  ) {}\n\n  /**\n   * Returns the MSH-1 field value based on the configured separators.\n   * @returns The HL7 MSH-1 field value.\n   */\n  getMsh1(): string {\n    return this.fieldSeparator;\n  }\n\n  /**\n   * Returns the MSH-2 field value based on the configured separators.\n   * @returns The HL7 MSH-2 field value.\n   */\n  getMsh2(): string {\n    return this.componentSeparator + this.repetitionSeparator + this.escapeCharacter + this.subcomponentSeparator;\n  }\n}\n\n/**\n * The Hl7Message class represents one HL7 message.\n * A message is a collection of segments.\n */\nexport class Hl7Message {\n  readonly context: Hl7Context;\n  readonly segments: Hl7Segment[];\n\n  /**\n   * Creates a new HL7 message.\n   * @param segments - The HL7 segments.\n   * @param context - Optional HL7 parsing context.\n   */\n  constructor(segments: Hl7Segment[], context = new Hl7Context()) {\n    this.context = context;\n    this.segments = segments;\n  }\n\n  /**\n   * Returns the HL7 message header.\n   * @returns The HL7 message header.\n   */\n  get header(): Hl7Segment {\n    return this.segments[0];\n  }\n\n  /**\n   * Returns an HL7 segment by index or by name.\n   * @param index - The HL7 segment index or name.\n   * @returns The HL7 segment if found; otherwise, undefined.\n   * @deprecated Use getSegment() instead. This method will be removed in a future release.\n   */\n  get(index: number | string): Hl7Segment | undefined {\n    return this.getSegment(index);\n  }\n\n  /**\n   * Returns all HL7 segments of a given name.\n   * @param name - The HL7 segment name.\n   * @returns An array of HL7 segments with the specified name.\n   * @deprecated Use getAllSegments() instead. This method will be removed in a future release.\n   */\n  getAll(name: string): Hl7Segment[] {\n    return this.getAllSegments(name);\n  }\n\n  /**\n   * Returns an HL7 segment by index or by name.\n   *\n   * When using a numeric index, the first segment (usually the MSH header segment) is at index 0.\n   *\n   * When using a string index, this method returns the first segment with the specified name.\n   *\n   * @param index - The HL7 segment index or name.\n   * @returns The HL7 segment if found; otherwise, undefined.\n   */\n  getSegment(index: number | string): Hl7Segment | undefined {\n    if (typeof index === 'number') {\n      return this.segments[index];\n    }\n    return this.segments.find((s) => s.name === index);\n  }\n\n  /**\n   * Returns all HL7 segments of a given name.\n   * @param name - The HL7 segment name.\n   * @returns An array of HL7 segments with the specified name.\n   */\n  getAllSegments(name: string): Hl7Segment[] {\n    return this.segments.filter((s) => s.name === name);\n  }\n\n  /**\n   * Returns the HL7 message as a string.\n   * @returns The HL7 message as a string.\n   */\n  toString(): string {\n    return this.segments.map((s) => s.toString()).join(this.context.segmentSeparator);\n  }\n\n  /**\n   * Returns an HL7 \"ACK\" (acknowledgement) message for this message.\n   * @returns The HL7 \"ACK\" message.\n   */\n  buildAck(): Hl7Message {\n    const now = new Date();\n    const msh = this.getSegment('MSH');\n    const sendingApp = msh?.getField(3)?.toString() ?? '';\n    const sendingFacility = msh?.getField(4)?.toString() ?? '';\n    const receivingApp = msh?.getField(5)?.toString() ?? '';\n    const receivingFacility = msh?.getField(6)?.toString() ?? '';\n    const controlId = msh?.getField(10)?.toString() ?? '';\n    const versionId = msh?.getField(12)?.toString() ?? '2.5.1';\n\n    return new Hl7Message([\n      new Hl7Segment(\n        [\n          'MSH',\n          this.context.getMsh2(),\n          receivingApp,\n          receivingFacility,\n          sendingApp,\n          sendingFacility,\n          formatHl7DateTime(now),\n          '',\n          this.buildAckMessageType(msh),\n          now.getTime().toString(),\n          'P',\n          versionId,\n        ],\n        this.context\n      ),\n      new Hl7Segment(['MSA', 'AA', controlId, 'OK'], this.context),\n    ]);\n  }\n\n  private buildAckMessageType(msh: Hl7Segment | undefined): string {\n    // MSH 7 is the message type\n    // https://hl7-definition.caristix.com/v2/HL7v2.4/DataTypes/MSG\n    // In HL7 v2.1, the message type is a single field\n    // In HL7 v2.2 through v2.3, message type has two components.\n    // In HL7 v2.3.1 and later, message type has three components.\n    // Rather than using version to determine behavior, we instead mirror the original message.\n    const messageType = msh?.getField(9);\n    const triggerEvent = messageType?.getComponent(2);\n    const messageStructure = messageType?.getComponent(3);\n    let result = 'ACK';\n    if (triggerEvent && messageStructure) {\n      result = `ACK^${triggerEvent}^ACK`;\n    } else if (triggerEvent) {\n      result = `ACK^${triggerEvent}`;\n    }\n    return result;\n  }\n\n  /**\n   * Parses an HL7 message string into an Hl7Message object.\n   * @param text - The HL7 message text.\n   * @returns The parsed HL7 message.\n   */\n  static parse(text: string): Hl7Message {\n    if (!text.startsWith('MSH')) {\n      const err = new Error('Invalid HL7 message');\n      (err as any).type = 'entity.parse.failed';\n      throw err;\n    }\n    const context = new Hl7Context(\n      '\\r',\n      text.charAt(3), // Field separator, recommended \"|\"\n      text.charAt(4), // Component separator, recommended \"^\"\n      text.charAt(5), // Repetition separator, recommended \"~\"\n      text.charAt(6), // Escape character, recommended \"\\\"\n      text.charAt(7) // Subcomponent separator, recommended \"&\"\n    );\n    return new Hl7Message(\n      text.split(/[\\r\\n]+/).map((line) => Hl7Segment.parse(line, context)),\n      context\n    );\n  }\n}\n\n/**\n * The Hl7Segment class represents one HL7 segment.\n * A segment is a collection of fields.\n * The name field is the first field.\n */\nexport class Hl7Segment {\n  readonly context: Hl7Context;\n  readonly name: string;\n  readonly fields: Hl7Field[];\n\n  /**\n   * Creates a new HL7 segment.\n   * @param fields - The HL7 fields. The first field is the segment name.\n   * @param context - Optional HL7 parsing context.\n   */\n  constructor(fields: Hl7Field[] | string[], context = new Hl7Context()) {\n    this.context = context;\n    if (isStringArray(fields)) {\n      this.fields = fields.map((f) => Hl7Field.parse(f, context));\n    } else {\n      this.fields = fields;\n    }\n    this.name = this.fields[0].components[0][0];\n  }\n\n  /**\n   * Returns an HL7 field by index.\n   * @param index - The HL7 field index.\n   * @returns The HL7 field.\n   * @deprecated Use getSegment() instead. This method includes the segment name in the index, which leads to confusing behavior. This method will be removed in a future release.\n   */\n  get(index: number): Hl7Field {\n    return this.fields[index];\n  }\n\n  /**\n   * Returns an HL7 field by index.\n   *\n   * Note that the index is 1-based, not 0-based.\n   *\n   * For example, to get the first field, use `getField(1)`.\n   *\n   * This aligns with HL7 field names such as PID.1, PID.2, etc.\n   *\n   * Field zero is the segment name.\n   *\n   * @param index - The HL7 field index.\n   * @returns The HL7 field.\n   */\n  getField(index: number): Hl7Field {\n    if (this.name === 'MSH') {\n      // MSH segments require special handling due to field separator\n      if (index === 1) {\n        // MSH.1 is the field separator\n        return new Hl7Field([[this.context.getMsh1()]], this.context);\n      }\n      if (index === 2) {\n        // MSH.2 is the encoding characters\n        return new Hl7Field([[this.context.getMsh2()]], this.context);\n      }\n      if (index > 2) {\n        // MSH.3 through MSH.n are offset by 1\n        return this.fields[index - 1];\n      }\n    }\n    return this.fields[index];\n  }\n\n  /**\n   * Returns an HL7 component by field index and component index.\n   *\n   * This is a shortcut for `getField(field).getComponent(component)`.\n   *\n   * Note that both indexex are 1-based, not 0-based.\n   *\n   * For example, to get the first component, use `getComponent(1, 1)`.\n   *\n   * This aligns with HL7 component names such as MSH.9.2.\n   *\n   * @param fieldIndex - The HL7 field index.\n   * @param component - The component index.\n   * @param subcomponent - Optional subcomponent index.\n   * @param repetition - Optional repetition index.\n   * @returns The string value of the specified component.\n   */\n  getComponent(fieldIndex: number, component: number, subcomponent?: number, repetition = 0): string {\n    return this.getField(fieldIndex)?.getComponent(component, subcomponent, repetition) ?? '';\n  }\n\n  /**\n   * Returns the HL7 segment as a string.\n   * @returns The HL7 segment as a string.\n   */\n  toString(): string {\n    return this.fields.map((f) => f.toString()).join(this.context.fieldSeparator);\n  }\n\n  /**\n   * Parses an HL7 segment string into an Hl7Segment object.\n   * @param text - The HL7 segment text.\n   * @param context - Optional HL7 parsing context.\n   * @returns The parsed HL7 segment.\n   */\n  static parse(text: string, context = new Hl7Context()): Hl7Segment {\n    return new Hl7Segment(\n      text.split(context.fieldSeparator).map((f) => Hl7Field.parse(f, context)),\n      context\n    );\n  }\n}\n\n/**\n * The Hl7Field class represents one HL7 field.\n * A field is a collection of components.\n */\nexport class Hl7Field {\n  readonly context: Hl7Context;\n  readonly components: string[][];\n\n  /**\n   * Creates a new HL7 field.\n   * @param components - The HL7 components.\n   * @param context - Optional HL7 parsing context.\n   */\n  constructor(components: string[][], context = new Hl7Context()) {\n    this.context = context;\n    this.components = components;\n  }\n\n  /**\n   * Returns an HL7 component by index.\n   * @param component - The component index.\n   * @param subcomponent - Optional subcomponent index.\n   * @param repetition - Optional repetition index.\n   * @returns The string value of the specified component.\n   * @deprecated Use getComponent() instead. This method will be removed in a future release.\n   */\n  get(component: number, subcomponent?: number, repetition = 0): string {\n    return this.getComponent(component + 1, subcomponent, repetition);\n  }\n\n  /**\n   * Returns an HL7 component by index.\n   *\n   * Note that the index is 1-based, not 0-based.\n   *\n   * For example, to get the first component, use `getComponent(1)`.\n   *\n   * This aligns with HL7 component names such as MSH.9.2.\n   *\n   * @param component - The component index.\n   * @param subcomponent - Optional subcomponent index.\n   * @param repetition - Optional repetition index.\n   * @returns The string value of the specified component.\n   */\n  getComponent(component: number, subcomponent?: number, repetition = 0): string {\n    let value = this.components[repetition][component - 1] ?? '';\n\n    if (subcomponent !== undefined) {\n      value = value.split(this.context.subcomponentSeparator)[subcomponent] ?? '';\n    }\n\n    return value;\n  }\n\n  /**\n   * Returns the HL7 field as a string.\n   * @returns The HL7 field as a string.\n   */\n  toString(): string {\n    return this.components.map((r) => r.join(this.context.componentSeparator)).join(this.context.repetitionSeparator);\n  }\n\n  /**\n   * Parses an HL7 field string into an Hl7Field object.\n   * @param text - The HL7 field text.\n   * @param context - Optional HL7 parsing context.\n   * @returns The parsed HL7 field.\n   */\n  static parse(text: string, context = new Hl7Context()): Hl7Field {\n    return new Hl7Field(\n      text.split(context.repetitionSeparator).map((r) => r.split(context.componentSeparator)),\n      context\n    );\n  }\n}\n\nexport interface Hl7DateParseOptions {\n  /**\n   * Default timezone offset.\n   * Example: \"-0500\"\n   */\n  tzOffset?: string;\n}\n\n/**\n * Returns a formatted string representing the date in ISO-8601 format.\n *\n * HL7-Definition V2\n * Specifies a point in time using a 24-hour clock notation.\n *\n * Format: YYYY[MM[DD[HH[MM[SS[. S[S[S[S]]]]]]]]][+/-ZZZZ].\n *\n * @param hl7DateTime - Date/time string.\n * @param options - Optional parsing options.\n * @returns The date in ISO-8601 format.\n */\nexport function parseHl7DateTime(hl7DateTime: string | undefined, options?: Hl7DateParseOptions): string | undefined {\n  if (!hl7DateTime) {\n    return undefined;\n  }\n\n  const year = parseIntOrDefault(hl7DateTime.slice(0, 4), 0);\n  const month = parseIntOrDefault(hl7DateTime.slice(4, 6), 1) - 1; // Months are 0-indexed in JavaScript Date\n  const day = parseIntOrDefault(hl7DateTime.slice(6, 8), 1); // Default to first day of month\n  const hour = parseIntOrDefault(hl7DateTime.slice(8, 10), 0);\n  const minute = parseIntOrDefault(hl7DateTime.slice(10, 12), 0);\n  const second = parseIntOrDefault(hl7DateTime.slice(12, 14), 0);\n\n  let millisecond = 0;\n  if (hl7DateTime.includes('.')) {\n    millisecond = parseIntOrDefault(hl7DateTime.slice(15, 19), 0);\n  }\n\n  let date = new Date(Date.UTC(year, month, day, hour, minute, second, millisecond));\n\n  const tzOffset = parseTimeZoneOffset(hl7DateTime, options?.tzOffset);\n  if (tzOffset !== 0) {\n    date = new Date(date.getTime() - tzOffset);\n  }\n\n  return date.toISOString();\n}\n\n/**\n * Parses an integer value from a string.\n * @param str - The string to parse.\n * @param defaultValue - The default value to return if the string is not a number.\n * @returns The parsed integer value, or the default value if the string is not a number.\n */\nfunction parseIntOrDefault(str: string, defaultValue: number): number {\n  const result = parseInt(str, 10);\n  return isNaN(result) ? defaultValue : result;\n}\n\n/**\n * Returns the timezone offset in milliseconds.\n * @param hl7DateTime - The HL7 date/time string.\n * @param defaultOffset - Optional default timezone offset.\n * @returns The timezone offset in milliseconds.\n */\nfunction parseTimeZoneOffset(hl7DateTime: string, defaultOffset?: string): number {\n  let offsetStr = defaultOffset;\n\n  const plusIndex = hl7DateTime.indexOf('+');\n  if (plusIndex !== -1) {\n    offsetStr = hl7DateTime.slice(plusIndex);\n  }\n\n  const minusIndex = hl7DateTime.indexOf('-');\n  if (minusIndex !== -1) {\n    offsetStr = hl7DateTime.slice(minusIndex);\n  }\n\n  if (!offsetStr) {\n    return 0;\n  }\n\n  const sign = offsetStr.startsWith('-') ? -1 : 1;\n\n  // Remove plus, minus, and optional colon\n  offsetStr = offsetStr.slice(1).replace(':', '');\n\n  const hour = parseInt(offsetStr.slice(0, 2), 10);\n  const minute = parseInt(offsetStr.slice(2, 4), 10);\n  return sign * (hour * 60 * 60 * 1000 + minute * 60 * 1000);\n}\n\n/**\n * Formats an ISO date/time string into an HL7 date/time string.\n * @param isoDate - The ISO date/time string.\n * @returns The HL7 date/time string.\n */\nexport function formatHl7DateTime(isoDate: Date | string): string {\n  const date = isoDate instanceof Date ? isoDate : new Date(isoDate);\n  const isoString = date.toISOString();\n\n  // Replace \"T\" and all dashes (-) and colons (:) with empty strings\n  // Replace Z with \"+0000\"\n  // Replace the last 3 digits before 'Z' with the 4-digit milliseconds\n  let result = isoString.replace(/[-:T]/g, '').replace(/(\\.\\d+)?Z$/, '');\n\n  const milliseconds = date.getUTCMilliseconds();\n  if (milliseconds > 0) {\n    result += '.' + milliseconds.toString();\n  }\n\n  return result;\n}\n", "/*\n * Once upon a time, we used Winston, and that was fine.\n * Then the log4j fiasco happened, and everyone started auditing logging libraries.\n * And we decided that we did not use any fancy logging features,\n * and that logging to console.log was actually perfectly adequate.\n */\n\n/**\n * Logging level, with greater values representing more detailed logs emitted.\n *\n * The zero value means no server logs will be emitted.\n */\nexport enum LogLevel {\n  NONE = 0,\n  ERROR,\n  WARN,\n  INFO,\n  DEBUG,\n}\n\nexport interface LoggerOptions {\n  prefix?: string;\n}\n\nexport interface LoggerConfig {\n  write: (msg: string) => void;\n  metadata: Record<string, any>;\n  level: LogLevel;\n  options?: LoggerOptions;\n}\n\nexport type LoggerConfigOverride = Partial<LoggerConfig>;\n\nexport class Logger {\n  readonly prefix?: string;\n  constructor(\n    readonly write: (msg: string) => void,\n    readonly metadata: Record<string, any> = {},\n    public level: LogLevel = LogLevel.INFO,\n    readonly options?: LoggerOptions\n  ) {\n    if (options?.prefix) {\n      this.prefix = options.prefix;\n    }\n\n    this.error = this.error.bind(this);\n    this.warn = this.warn.bind(this);\n    this.info = this.info.bind(this);\n    this.debug = this.debug.bind(this);\n    this.log = this.log.bind(this);\n  }\n\n  clone(override?: LoggerConfigOverride): Logger {\n    const config = this.getLoggerConfig();\n    const mergedConfig = override\n      ? { ...config, override, options: { ...config.options, ...override.options } }\n      : config;\n    return new Logger(mergedConfig.write, mergedConfig.metadata, mergedConfig.level, mergedConfig.options);\n  }\n\n  private getLoggerConfig(): LoggerConfig {\n    const { write, metadata, level, options } = this;\n    return { write, metadata, level, options };\n  }\n\n  error(msg: string, data?: Record<string, any> | Error): void {\n    this.log(LogLevel.ERROR, msg, data);\n  }\n\n  warn(msg: string, data?: Record<string, any> | Error): void {\n    this.log(LogLevel.WARN, msg, data);\n  }\n\n  info(msg: string, data?: Record<string, any> | Error): void {\n    this.log(LogLevel.INFO, msg, data);\n  }\n\n  debug(msg: string, data?: Record<string, any> | Error): void {\n    this.log(LogLevel.DEBUG, msg, data);\n  }\n\n  log(level: LogLevel, msg: string, data?: Record<string, any> | Error): void {\n    if (level > this.level) {\n      return;\n    }\n    if (data instanceof Error) {\n      data = {\n        error: data.toString(),\n        stack: data.stack?.split('\\n'),\n      };\n    }\n    this.write(\n      JSON.stringify({\n        level: LogLevel[level],\n        timestamp: new Date().toISOString(),\n        msg: this.prefix ? `${this.prefix}${msg}` : msg,\n        ...data,\n        ...this.metadata,\n      })\n    );\n  }\n}\n\nexport function parseLogLevel(level: string): LogLevel {\n  const value = LogLevel[level.toUpperCase() as keyof typeof LogLevel];\n  if (value === undefined) {\n    throw new Error(`Invalid log level: ${level}`);\n  }\n\n  return value;\n}\n", "import { OperationOutcomeIssue } from '@medplum/fhirtypes';\nimport { createStructureIssue, OperationOutcomeError, validationError } from './outcomes';\nimport { isResourceType } from './typeschema/types';\n\n/**\n * Validates that the given string is a valid FHIR resource type.\n *\n * On success, silently returns void.\n * On failure, throws an OperationOutcomeError.\n *\n * @example\n * ```ts\n * validateResourceType('Patient'); // nothing\n * validateResourceType('XYZ'); // throws OperationOutcomeError\n * ```\n *\n * Note that this depends on globalSchema, which is populated by the StructureDefinition loader.\n *\n * @example\n * In a server context, you can load all schema definitions:\n *\n * ```ts\n * import { indexStructureDefinitionBundle } from '@medplum/core';\n * import { readJson } from '@medplum/definitions';\n * import { Bundle } from '@medplum/fhirtypes';\n *\n * indexStructureDefinitionBundle(readJson('fhir/r4/profiles-resources.json') as Bundle);\n * ```\n *\n * @example\n * In a client context, you can load the schema definitions using MedplumClient:\n *\n * ```ts\n * import { MedplumClient } from '@medplum/core';\n *\n * const medplum = new MedplumClient();\n * await medplum.requestSchema('Patient');\n * ```\n *\n * @param resourceType - The candidate resource type string.\n */\nexport function validateResourceType(resourceType: string): void {\n  if (!resourceType) {\n    throw new OperationOutcomeError(validationError('Resource type is null'));\n  }\n  if (!isResourceType(resourceType)) {\n    throw new OperationOutcomeError(validationError('Unknown resource type'));\n  }\n}\n\n/**\n * Recursively checks for null values in an object.\n *\n * Note that \"null\" is a special value in JSON that is not allowed in FHIR.\n * @param value - Input value of any type.\n * @param path - Path string to the value for OperationOutcome.\n * @param issues - Output list of issues.\n */\nexport function checkForNull(value: unknown, path: string, issues: OperationOutcomeIssue[]): void {\n  if (value === null) {\n    issues.push(createStructureIssue(path, 'Invalid null value'));\n  } else if (Array.isArray(value)) {\n    checkArrayForNull(value, path, issues);\n  } else if (typeof value === 'object') {\n    checkObjectForNull(value as Record<string, unknown>, path, issues);\n  }\n}\n\nfunction checkArrayForNull(array: unknown[], path: string, issues: OperationOutcomeIssue[]): void {\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] === undefined) {\n      issues.push(createStructureIssue(`${path}[${i}]`, 'Invalid undefined value'));\n    } else {\n      checkForNull(array[i], `${path}[${i}]`, issues);\n    }\n  }\n}\n\nfunction checkObjectForNull(obj: Record<string, unknown>, path: string, issues: OperationOutcomeIssue[]): void {\n  for (const [key, value] of Object.entries(obj)) {\n    checkForNull(value, `${path}${path ? '.' : ''}${key}`, issues);\n  }\n}\n", "import { Readable } from 'stream';\n\n/**\n * Reads data from a Readable stream and returns a Promise that resolves with a Buffer containing all the data.\n * @param stream - The Readable stream to read from.\n * @returns A Promise that resolves with a Buffer containing all the data from the Readable stream.\n */\nexport function streamToBuffer(stream: Readable): Promise<Buffer> {\n  const chunks: Uint8Array[] = [];\n  return new Promise<Buffer>((resolve, reject) => {\n    stream.on('data', (chunk: Uint8Array) => chunks.push(Buffer.from(chunk)));\n    stream.on('error', (err: Error) => {\n      stream.destroy();\n      reject(err);\n    });\n    stream.on('end', () => {\n      resolve(Buffer.concat(chunks));\n    });\n    stream.on('close', () => {\n      stream.destroy();\n    });\n  });\n}\n", "import { Resource, ViewDefinition, ViewDefinitionSelect } from '@medplum/fhirtypes';\nimport { evalFhirPathTyped } from '../fhirpath/parse';\nimport { getTypedPropertyValue, toTypedValue } from '../fhirpath/utils';\nimport { TypedValue } from '../types';\n\n/**\n * Represents a \"selection structure\" in the SQL-on-FHIR specification.\n *\n * In practice, this can be a ViewDefinition or ViewDefinitionSelect.\n *\n * TypeScript does not like checks for properties that are not part of the type, so we use this interface instead.\n */\nexport interface SelectionStructure {\n  forEach?: string;\n  forEachOrNull?: string;\n  column?: ViewDefinitionSelect['column'];\n  select?: SelectionStructure[];\n  unionAll?: SelectionStructure[];\n}\n\n/**\n * SQL on FHIR output row.\n */\nexport type OutputRow = Record<string, any>;\n\n/**\n * Evaluates a SQL-on-FHIR view on a set of FHIR resources.\n * @param view - The view definition.\n * @param resources - The array of FHIR resources.\n * @returns The output rows.\n */\nexport function evalSqlOnFhir(view: ViewDefinition, resources: Resource[]): OutputRow[] {\n  const result = [];\n\n  for (const resource of resources) {\n    result.push(...processResource(view, resource));\n  }\n\n  return result;\n}\n\n/**\n * Processes a FHIR resource with a ViewDefinition to emit all rows.\n *\n * This step emits all rows produced by a ViewDefinition on an input Resource, by setting up a recursive call.\n *\n * See: https://build.fhir.org/ig/FHIR/sql-on-fhir-v2/implementer_guidance.html#process-a-resource-entry-point\n *\n * @param v - The view definition.\n * @param r - The FHIR resource.\n * @returns The output rows.\n */\nfunction processResource(v: ViewDefinition, r: Resource): OutputRow[] {\n  if (!v.resource) {\n    throw new Error('Resource type is required');\n  }\n\n  if (v.resource !== r.resourceType) {\n    return [];\n  }\n\n  const variables: Record<string, TypedValue> = {};\n  if (v.constant) {\n    for (const c of v.constant) {\n      const typedConstant = { type: 'ViewDefinitionConstant', value: c };\n      variables['%' + c.name] = getTypedPropertyValue(typedConstant, 'value') as TypedValue;\n    }\n  }\n\n  const typedResource = toTypedValue(r);\n\n  if (v.where) {\n    for (const where of v.where) {\n      const whereResult = evalFhirPathTyped(where.path, [typedResource], variables);\n      if (whereResult.length !== 1) {\n        return [];\n      }\n      if (whereResult[0].type !== 'boolean') {\n        throw new Error('WHERE clause must evaluate to a boolean');\n      }\n      if (!whereResult[0].value) {\n        return [];\n      }\n    }\n  }\n\n  return process(v, typedResource, variables);\n}\n\n/**\n * Processes a selection structure and node to emit all rows.\n *\n * This step emits all rows for a given Selection Structure and Node. We first generate sets of\n * \"partial rows\" (i.e., sets of incomplete column bindings from the various clauses of V) and combine them to emit complete rows.\n *\n * This function is deliberately structured to match the pseudocode in the SQL-on-FHIR specification.\n * See: https://build.fhir.org/ig/FHIR/sql-on-fhir-v2/implementer_guidance.html#processs-n-recursive-step\n *\n * @param s - The selection structure.\n * @param n - The node (element) from a FHIR resource.\n * @param variables - The variables.\n * @returns An array of output rows.\n */\nfunction process(s: SelectionStructure, n: TypedValue, variables: Record<string, TypedValue>): OutputRow[] {\n  const result: OutputRow[] = [];\n\n  // 1. Define a list of Nodes foci as\n  let foci: TypedValue[];\n  if (s.forEach) {\n    // If S.forEach is defined: fhirpath(S.forEach, N)\n    foci = evalFhirPathTyped(s.forEach, [n], variables);\n  } else if (s.forEachOrNull) {\n    // Else if S.forEachOrNull is defined: fhirpath(S.forEachOrNull, N)\n    foci = evalFhirPathTyped(s.forEachOrNull, [n], variables);\n  } else {\n    // Otherwise: [N] (a list with just the input node)\n    foci = [n];\n  }\n\n  // 2. For each element f of foci\n  for (const f of foci) {\n    // Initialize an empty list parts (each element of parts will be a list of partial rows)\n    const parts: OutputRow[][] = [];\n\n    // Process Columns:\n    for (const col of s.column ?? []) {\n      // For each Column col of S.column, define val as fhirpath(col.path, f)\n      const val = evalFhirPathTyped(col.path, [f], variables);\n\n      // Define b as a row whose column named col.name takes the value\n      let b: OutputRow;\n\n      if (val.length === 0) {\n        // If val was the empty set: null\n        b = { [col.name]: null };\n      } else if (col.collection) {\n        // Else if col.collection is true: val\n        b = { [col.name]: val.map((v) => v.value) };\n      } else if (val.length === 1) {\n        // Else if val has a single element e: e\n        b = { [col.name]: val[0].value };\n      } else {\n        // Else: throw \"Multiple values found but not expected for column\"\n        throw new Error('Multiple values found but not expected for column');\n      }\n\n      // Append [b] to parts\n      // (Note: append a list so the final element of parts is now a list containing the single row b).)\n      parts.push([b]);\n    }\n\n    // Process Selects:\n    // For each selection structure sel of S.select\n    for (const sel of s.select ?? []) {\n      // Define rows as the collection of all rows emitted by Process(sel, f)\n      const rows = process(sel, f, variables);\n\n      // Append rows to parts\n      // (Note: do not append the elements but the whole list, so the final element of parts is now the list rows)\n      parts.push(rows);\n    }\n\n    // Process UnionAlls:\n    // Initialize urows as an empty list of rows\n    // For each selection structure u of S.unionAll\n    if (s.unionAll) {\n      const urows: OutputRow[] = [];\n      for (const u of s.unionAll) {\n        // For each row r in Process(u, f)\n        for (const r of process(u, f, variables)) {\n          // Append r to urows\n          urows.push(r);\n        }\n      }\n\n      // Append urows to parts\n      // (Note: do not append the elements but the whole list, so the final element of parts is now the list urows\n      parts.push(urows);\n    }\n\n    // For every list of partial rows prows in the Cartesian product of parts\n    // (Note: the Cartesian product is always between a Selection Structure and its direct children, not deeper descendants.\n    // Because the process is recursive, rows generated by, for example, a .select[0].select[0].select[0] will eventually bubble up\n    // to the top level, but the bubbling happens one level at a time.)\n    result.push(...cartesianProduct(parts));\n  }\n\n  // If foci is an empty list and S.forEachOrNull is defined\n  if (foci.length === 0 && s.forEachOrNull) {\n    // (Note: when this condition is met, no rows have been emitted so far)\n    // Initialize a blank row r\n    const r: OutputRow = {};\n\n    // For each Column c in ValidateColumns(V, [])\n    for (const c of s.column ?? []) {\n      // Bind the column c.name to null in the row r\n      r[c.name] = null;\n    }\n\n    // Emit the row r\n    result.push(r);\n  }\n\n  return result;\n}\n\n/**\n * Returns the Cartesian product of the given arrays.\n *\n * For example, if there are two sets of partial rows:\n *\n *   [{\"a\": 1},{\"a\": 2}] with bindings for the variable a\n *   [{\"b\": 3},{\"b\": 4}] with bindings for the variable b\n *\n * Then the Cartesian product of these sets consists of four complete rows:\n *\n *   [\n *     {\"a\": 1, \"b\": 3},\n *     {\"a\": 1, \"b\": 4},\n *     {\"a\": 2, \"b\": 3},\n *     {\"a\": 2, \"b\": 4}\n *   ]\n *\n * @param parts - The arrays to combine.\n * @returns The Cartesian product of the arrays.\n */\nfunction cartesianProduct(parts: OutputRow[][]): OutputRow[] {\n  if (parts.length === 0) {\n    return [];\n  }\n\n  let temp = parts[0];\n  for (let i = 1; i < parts.length; i++) {\n    temp = cartesianProductHelper(temp, parts[i]);\n  }\n\n  return temp;\n}\n\nfunction cartesianProductHelper(aArray: OutputRow[], bArray: OutputRow[]): OutputRow[] {\n  const result = [];\n  for (const a of aArray) {\n    for (const b of bArray) {\n      result.push(combinePartialRows(a, b));\n    }\n  }\n  return result;\n}\n\nfunction combinePartialRows(a: OutputRow, b: OutputRow): OutputRow {\n  const result: OutputRow = {};\n  Object.assign(result, a);\n  Object.assign(result, b);\n  return result;\n}\n", "import { normalizeErrorString } from './outcomes';\n\nexport const GITHUB_RELEASES_URL = 'https://api.github.com/repos/medplum/medplum/releases';\n\nexport type ReleaseManifest = { tag_name: string; assets: { name: string; browser_download_url: string }[] };\n\nconst releaseManifests = new Map<string, ReleaseManifest>();\n\n/**\n * Clears the locally-cached `ReleaseManifest`s for all versions.\n */\nexport function clearReleaseCache(): void {\n  releaseManifests.clear();\n}\n\n/**\n * Asserts that a given candidate is a `ReleaseManifest`.\n * @param candidate - An object assumed to be a `ReleaseManifest`.\n */\nexport function assertReleaseManifest(candidate: unknown): asserts candidate is ReleaseManifest {\n  const manifest = candidate as ReleaseManifest;\n  if (!manifest.tag_name) {\n    throw new Error('Manifest missing tag_name');\n  }\n  const assets = manifest.assets;\n  if (!assets?.length) {\n    throw new Error('Manifest missing assets list');\n  }\n  for (const asset of assets) {\n    if (!asset.browser_download_url) {\n      throw new Error('Asset missing browser download URL');\n    }\n    if (!asset.name) {\n      throw new Error('Asset missing name');\n    }\n  }\n}\n\n/**\n * @param version - The version to fetch. If no `version` is provided, defaults to the `latest` version.\n * @returns - The manifest for the specified or latest version.\n */\nexport async function fetchVersionManifest(version?: string): Promise<ReleaseManifest> {\n  let manifest = releaseManifests.get(version ?? 'latest');\n  if (!manifest) {\n    const versionTag = version ? `tags/v${version}` : 'latest';\n    const res = await fetch(`${GITHUB_RELEASES_URL}/${versionTag}`);\n    if (res.status !== 200) {\n      let message: string | undefined;\n      try {\n        message = ((await res.json()) as { message: string }).message;\n      } catch (err) {\n        console.error(`Failed to parse message from body: ${normalizeErrorString(err)}`);\n      }\n      throw new Error(\n        `Received status code ${res.status} while fetching manifest for version '${version ?? 'latest'}'. Message: ${message}`\n      );\n    }\n    const response = (await res.json()) as ReleaseManifest;\n    assertReleaseManifest(response);\n    manifest = response;\n    releaseManifests.set(version ?? 'latest', manifest);\n    if (!version) {\n      releaseManifests.set(manifest.tag_name.slice(1), manifest);\n    }\n  }\n  return manifest;\n}\n\n/**\n * Tests that a given version string follows the basic semver pattern of `<int>.<int>.<int>`, which is used for Medplum versions.\n *\n * @param version - A version string that should be tested for valid semver semantics.\n * @returns `true` if `version` is a valid semver version that conforms to the Medplum versioning system, otherwise `false`.\n */\nexport function isValidMedplumSemver(version: string): boolean {\n  return /^\\d+\\.\\d+\\.\\d+$/.test(version);\n}\n\n/**\n * Tests that a given version string is a valid existing Medplum release version.\n * @param version - A version to be checked against the existing Medplum repo releases.\n * @returns `true` if `version` is a valid semver version that corresponds to an existing release, otherwise `false`.\n */\nexport async function checkIfValidMedplumVersion(version: string): Promise<boolean> {\n  if (!isValidMedplumSemver(version)) {\n    return false;\n  }\n  try {\n    await fetchVersionManifest(version);\n  } catch (_err) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * @returns A version string corresponding to the latest Medplum release version.\n */\nexport async function fetchLatestVersionString(): Promise<string> {\n  const latest = await fetchVersionManifest();\n  if (!latest.tag_name.startsWith('v')) {\n    throw new Error(`Invalid release name found. Release tag '${latest.tag_name}' did not start with 'v'`);\n  }\n  return latest.tag_name.slice(1);\n}\n"],
  "mappings": "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zD,GAAGF,IACH,OAAO,CACL,GAAGA,GAAa,OAChB,EACE,UAAU,SACV,MAAM,WACN,SAAS,EACP,MAAM,qCACR,EACF,CACF,EACF;AA9GA,IAgHaG,KAA8B,EACzC,cAAc,oBACd,IAAIb,IACJ,OAAO,CACL,EACE,UAAU,SACV,MAAM,aACN,SAAS,EACP,MAAM,YACR,EACF,CACF,EACF;AA5HA,IA8Hac,KAAyB,EACpC,cAAc,oBACd,IAAInB,IACJ,OAAO,CACL,EACE,UAAU,SACV,MAAM,WACN,SAAS,EACP,MAAM,OACR,EACF,CACF,EACF;AA1IA,IA4IaoB,KAAuC,EAClD,cAAc,oBACd,IAAId,IACJ,OAAO,CACL,EACE,UAAU,SACV,MAAM,cACN,SAAS,EACP,MAAM,sBACR,EACF,CACF,EACF;AAxJA,IA0Jae,KAAoC,EAC/C,cAAc,oBACd,IAAId,IACJ,OAAO,CACL,EACE,UAAU,SACV,MAAM,oBACN,SAAS,EACP,MAAM,8CACR,EACF,CACF,EACF;AAtKA,IAwKae,KAAoC,EAC/C,cAAc,oBACd,IAAId,IACJ,OAAO,CACL,EACE,UAAU,SACV,MAAM,aACN,SAAS,EACP,MAAM,oBACR,EACF,CACF,EACF;AAEO,SAASe,GAASC,IAAoC;AAC3D,SAAO,EACL,cAAc,oBACd,IAAIf,IACJ,OAAO,CACL,EACE,UAAU,eACV,MAAM,iBACN,SAAS,EACP,MAAM,WACR,GACA,aAAae,GACf,CACF,EACF;AACF;AAEO,SAASC,EAAWC,IAAiBC,GAAuC;AACjF,SAAO,EACL,cAAc,oBACd,OAAO,CACL,EACE,UAAU,SACV,MAAM,WACN,SAAS,EACP,MAAMD,GACR,GACA,GAAIC,IAAa,EAAE,YAAY,CAACA,CAAU,EAAE,IAAI,OAClD,CACF,EACF;AACF;AAEO,SAASC,GAASF,IAAiBG,GAAiC;AACzE,SAAO,EACL,cAAc,oBACd,IAAI1B,IACJ,OAAO,CACL,EACE,UAAU,SACV,MAAM,YACN,SAAS,EACP,QAAQ0B,IAAO,CAAC,EAAE,MAAAA,EAAK,CAAC,IAAI,QAC5B,MAAMH,GACR,EACF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MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,SAAW,EACT,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,EACF,EACF,GACA,KAAO,EACL,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,YAAc,EACZ,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,MACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,EACF,EACF,GACA,YAAc,EACZ,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,aAAa,EACX,MAAQ,CACN,EACE,MAAQ,aACR,eAAiB,CACf,wDACA,mDACA,yDACA,sDACF,EACF,GACA,EACE,MAAQ,SACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,GACA,MAAQ,EACN,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,EACF,EACF,GACA,YAAc,EACZ,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,aAAe,EACb,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,UAAY,EACV,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,eACV,CACF,EACF,GACA,KAAO,EACL,MAAQ,CACN,EACE,MAAQ,MACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,cACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,eACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,UAAY,EACV,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,EACF,EACF,GACA,iBAAmB,EACjB,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,QAAU,EACR,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,EACF,EACF,GACA,QAAU,EACR,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,MACV,CACF,EACF,GACA,SAAW,EACT,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,SAAW,EACT,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,cAAgB,EACd,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,EACF,EACF,GACA,eAAiB,EACf,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,SAAW,EACT,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,eACV,CACF,EACF,EACF,EACF,GACA,cAAgB,EACd,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,KAAO,EACL,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,cACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,EACF,EACF,GACA,aAAe,EACb,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,MAAQ,EACN,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,MAAQ,EACN,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,SAAW,EACT,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,gBACV,CACF,EACF,EACF,EACF,GACA,OAAS,EACP,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,YAAc,EACZ,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,MACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,EACF,EACF,GACA,iBAAmB,EACjB,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,MAAQ,EACN,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,SAAW,EACT,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,aACR,eAAiB,CAAC,6DAA6D,EACjF,CACF,EACF,GACA,cAAc,EACZ,MAAQ,CACN,EACE,MAAQ,kBACV,GACA,EACE,MAAQ,aACR,eAAiB,CAAC,+CAA+C,EACnE,CACF,EACF,GACA,aAAe,EACb,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,YAAc,EACZ,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,4BACV,CACF,EACF,GACA,YAAc,EACZ,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,4BACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,cACV,CACF,EACF,GACA,MAAQ,EACN,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,sBACV,CACF,EACF,EACF,EACF,GACA,2BAA6B,EAC3B,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,aAAe,EACb,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,UAAY,EACV,MAAQ,CACN,EACE,MAAQ,aACR,eAAiB,CAAC,kDAAkD,EACtE,CACF,EACF,GACA,MAAQ,EACN,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,EACF,EACF,GACA,2BAA6B,EAC3B,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,aAAe,EACb,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,YAAY,EACV,MAAQ,CACN,EACE,MAAQ,WACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,WACV,CACF,EACF,EACF,EACF,GACA,qBAAuB,EACrB,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,MAAQ,EACN,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,EACF,EACF,GACA,UAAY,EACV,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,YAAc,EACZ,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,MACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,EACF,EACF,GACA,QAAU,EACR,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,mBAAqB,EACnB,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,UAAY,EACV,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,uBAAyB,EACvB,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,kBACV,CACF,EACF,GACA,oBAAsB,EACpB,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,eAAe,EACb,MAAQ,CACN,EACE,MAAQ,UACV,GACA,EACE,MAAQ,kBACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,kBACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,kBACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,kBACV,CACF,EACF,GACA,aAAe,EACb,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,oBACV,CACF,EACF,GACA,kBAAoB,EAClB,MAAQ,CACN,EACE,MAAQ,QACV,CACF,EACF,GACA,0BAA4B,EAC1B,MAAQ,CACN,EACE,MAAQ,YACR,SAAW,CAAC,wDAAwD,EACtE,CACF,EACF,GACA,oBAAsB,EACpB,MAAQ,CACN,EACE,MAAQ,YACR,SAAW,CAAC,wDAAwD,EACtE,CACF,EACF,EACF,EACF,GACA,mBAAqB,EACnB,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,kBACV,CACF,EACF,GACA,WAAW,EACT,MAAQ,CACN,EACE,MAAQ,QACV,GACA,EACE,MAAQ,YACR,SAAW,CAAC,wDAAwD,EACtE,CACF,EACF,GACA,WAAW,EACT,MAAQ,CACN,EACE,MAAQ,QACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,YACR,SAAW,CAAC,wDAAwD,EACtE,CACF,EACF,EACF,EACF,GACA,UAAY,EACV,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,YAAc,EACZ,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,MACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,EACF,EACF,GACA,mBAAqB,EACnB,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,mBAAqB,EACnB,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,MAAQ,EACN,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,gBAAkB,EAChB,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,WAAa,EACX,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,qBAAuB,EACrB,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,MAAQ,EACN,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,SAAW,EACT,MAAQ,CACN,EACE,MAAQ,2BACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,YAAc,EACZ,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,GACA,SAAW,EACT,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,GACA,cAAgB,EACd,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,GACA,OAAS,EACP,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,KAAO,EACL,MAAQ,CACN,EACE,MAAQ,cACV,CACF,EACF,GACA,KAAO,EACL,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,wBACV,CACF,EACF,GACA,kBAAoB,EAClB,MAAQ,CACN,EACE,MAAQ,MACV,CACF,EACF,GACA,MAAQ,EACN,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,wBACV,CACF,EACF,GACA,mBAAmB,EACjB,MAAQ,CACN,EACE,MAAQ,eACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,YACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,KACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,MACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,MACV,GACA,EACE,MAAQ,MACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,MACV,GACA,EACE,MAAQ,aACV,GACA,EACE,MAAQ,aACV,GACA,EACE,MAAQ,kBACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,eACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,YACV,GACA,EACE,MAAQ,aACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,YACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,YACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,gBACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,kBACV,GACA,EACE,MAAQ,aACV,GACA,EACE,MAAQ,sBACV,GACA,EACE,MAAQ,kBACV,GACA,EACE,MAAQ,oBACV,GACA,EACE,MAAQ,eACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,OACV,CACF,EACF,GACA,oBAAsB,EACpB,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,GACA,cAAgB,EACd,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,YAAY,EACV,MAAQ,CACN,EACE,MAAQ,eACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,YACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,KACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,MACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,MACV,GACA,EACE,MAAQ,MACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,MACV,GACA,EACE,MAAQ,aACV,GACA,EACE,MAAQ,aACV,GACA,EACE,MAAQ,kBACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,eACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,YACV,GACA,EACE,MAAQ,aACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,YACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,YACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,gBACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,kBACV,GACA,EACE,MAAQ,aACV,GACA,EACE,MAAQ,sBACV,GACA,EACE,MAAQ,kBACV,GACA,EACE,MAAQ,oBACV,GACA,EACE,MAAQ,eACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,OACV,CACF,EACF,GACA,cAAc,EACZ,MAAQ,CACN,EACE,MAAQ,eACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,YACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,KACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,MACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,MACV,GACA,EACE,MAAQ,MACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,MACV,GACA,EACE,MAAQ,aACV,GACA,EACE,MAAQ,aACV,GACA,EACE,MAAQ,kBACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,eACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,YACV,GACA,EACE,MAAQ,aACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,YACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,YACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,gBACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,kBACV,GACA,EACE,MAAQ,aACV,GACA,EACE,MAAQ,sBACV,GACA,EACE,MAAQ,kBACV,GACA,EACE,MAAQ,oBACV,GACA,EACE,MAAQ,eACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,OACV,CACF,EACF,GACA,SAAW,EACT,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,2BACV,CACF,EACF,GACA,eAAe,EACb,MAAQ,CACN,EACE,MAAQ,OACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,WACV,CACF,EACF,GACA,eAAe,EACb,MAAQ,CACN,EACE,MAAQ,OACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,WACV,CACF,EACF,GACA,WAAa,EACX,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,KACV,CACF,EACF,GACA,YAAc,EACZ,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,8BACV,CACF,EACF,GACA,aAAe,EACb,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,YAAc,EACZ,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,kBAAoB,EAClB,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,SAAW,EACT,MAAQ,CACN,EACE,MAAQ,2BACV,CACF,EACF,GACA,SAAW,EACT,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,2BACV,CACF,EACF,EACF,EACF,GACA,uCAAyC,EACvC,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,MAAQ,EACN,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,MAAQ,EACN,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,EACF,EACF,GACA,0BAA4B,EAC1B,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,eAAiB,EACf,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,wCACV,CACF,EACF,GACA,aAAe,EACb,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,SAAW,EACT,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,OAAS,EACP,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,EACF,EACF,GACA,uBAAyB,EACvB,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,MAAQ,EACN,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,KAAO,EACL,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,cACV,CACF,EACF,GACA,KAAO,EACL,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,EACF,EACF,GACA,uBAAyB,EACvB,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,MAAQ,EACN,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,MACV,CACF,EACF,GACA,SAAW,EACT,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,aACR,eAAiB,CACf,+DACA,6DACF,EACF,CACF,EACF,GACA,eAAiB,EACf,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,aACR,eAAiB,CACf,+DACA,6DACF,EACF,CACF,EACF,GACA,aAAe,EACb,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,YAAc,EACZ,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,EACF,EACF,GACA,0BAA4B,EAC1B,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,OAAS,EACP,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,YAAY,EACV,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,eACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,YACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,KACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,MACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,MACV,GACA,EACE,MAAQ,MACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,MACV,GACA,EACE,MAAQ,aACV,GACA,EACE,MAAQ,aACV,GACA,EACE,MAAQ,kBACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,eACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,YACV,GACA,EACE,MAAQ,aACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,YACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,YACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,gBACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,kBACV,GACA,EACE,MAAQ,aACV,GACA,EACE,MAAQ,sBACV,GACA,EACE,MAAQ,kBACV,GACA,EACE,MAAQ,oBACV,GACA,EACE,MAAQ,eACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,OACV,CACF,EACF,EACF,EACF,GACA,6BAA+B,EAC7B,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,KAAO,EACL,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,KACV,CACF,EACF,GACA,cAAgB,EACd,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,UAAY,EACV,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,OAAS,EACP,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,YAAc,EACZ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,aACR,eAAiB,CAAC,6DAA6D,EACjF,CACF,EACF,EACF,EACF,GACA,0BAA4B,EAC1B,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,UAAY,EACV,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,aAAe,EACb,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,UAAY,EACV,MAAQ,CACN,EACE,MAAQ,aACR,eAAiB,CAAC,kDAAkD,EACtE,CACF,EACF,EACF,EACF,GACA,0BAA4B,EAC1B,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,UAAY,EACV,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,KACV,CACF,EACF,GACA,UAAY,EACV,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,KAAO,EACL,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,SAAW,EACT,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,EACF,EACF,GACA,YAAc,EACZ,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,aAAe,EACb,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,KACV,CACF,EACF,GACA,UAAY,EACV,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,YAAc,EACZ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,MAAQ,CACN,EACE,MAAQ,MACV,CACF,EACF,EACF,EACF,GACA,WAAa,EACX,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,KAAO,EACL,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,MACV,CACF,EACF,GACA,YAAY,EACV,MAAQ,CACN,EACE,MAAQ,eACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,YACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,KACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,MACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,MACV,GACA,EACE,MAAQ,MACV,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,UACV,GACA,EACE,MAAQ,MACV,GACA,EACE,MAAQ,aACV,GACA,EACE,MAAQ,aACV,GACA,EACE,MAAQ,kBACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,eACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,YACV,GACA,EACE,MAAQ,aACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,YACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,YACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,gBACV,GACA,EACE,MAAQ,cACV,GACA,EACE,MAAQ,kBACV,GACA,EACE,MAAQ,aACV,GACA,EACE,MAAQ,sBACV,GACA,EACE,MAAQ,kBACV,GACA,EACE,MAAQ,oBACV,GACA,EACE,MAAQ,eACV,GACA,EACE,MAAQ,SACV,GACA,EACE,MAAQ,OACV,CACF,EACF,EACF,EACF,GACA,WAAa,EACX,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,KAAO,EACL,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,OAAS,EACP,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,QAAU,EACR,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,QAAU,EACR,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,EACF,EACF,GACA,YAAc,EACZ,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,KAAO,EACL,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,kBACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,MACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,UAAY,EACV,MAAQ,CACN,EACE,MAAQ,aACR,eAAiB,CAAC,sDAAsD,EAC1E,CACF,EACF,EACF,EACF,GACA,iBAAmB,EACjB,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,mBAAqB,EACnB,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,SAAW,EACT,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,kBACV,CACF,EACF,GACA,cAAgB,EACd,MAAQ,CACN,EACE,MAAQ,kBACV,CACF,EACF,GACA,QAAU,EACR,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,kBACV,CACF,EACF,GACA,WAAa,EACX,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,aAAe,EACb,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,EACF,EACF,GACA,MAAQ,EACN,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,WAAa,EACX,MAAQ,CACN,EACE,MAAQ,KACV,CACF,EACF,GACA,aAAe,EACb,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,MACV,CACF,EACF,GACA,SAAW,EACT,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,aACR,eAAiB,CAAC,6DAA6D,EACjF,CACF,EACF,GACA,UAAY,EACV,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,KAAO,EACL,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,SAAW,EACT,MAAQ,CACN,EACE,MAAQ,MACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,YAAc,EACZ,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,SAAW,EACT,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,UAAY,EACV,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,aAAe,EACb,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,EACF,EACF,GACA,OAAS,EACP,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,UAAY,EACV,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,EACF,EACF,GACA,WAAa,EACX,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,QAAU,EACR,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,KAAO,EACL,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,QACV,CACF,EACF,EACF,EACF,GACA,qBAAuB,EACrB,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,KAAO,EACL,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,KAAO,EACL,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,KAAO,EACL,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,eAAiB,EACf,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,MAAQ,EACN,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,SAAW,EACT,MAAQ,CACN,EACE,MAAQ,aACR,eAAiB,CAAC,6DAA6D,EACjF,CACF,EACF,EACF,EACF,GACA,QAAU,EACR,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,GACA,KAAO,EACL,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,EACF,EACF,GACA,YAAc,EACZ,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,mBAAqB,EACnB,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,UAAU,EACR,MAAQ,CACN,EACE,MAAQ,QACV,GACA,EACE,MAAQ,kBACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,kBACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,kBACV,CACF,EACF,GACA,wBAA0B,EACxB,MAAQ,CACN,EACE,MAAQ,kBACV,CACF,EACF,EACF,EACF,GACA,oBAAsB,EACpB,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,mBAAqB,EACnB,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,GACA,eAAiB,EACf,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,GACA,kBAAoB,EAClB,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,OAAS,EACP,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,SAAW,EACT,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,OAAS,EACP,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,aACV,CACF,EACF,GACA,SAAW,EACT,MAAQ,CACN,EACE,MAAQ,kBACV,CACF,EACF,EACF,EACF,GACA,kBAAoB,EAClB,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,mBAAqB,EACnB,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,YAAc,EACZ,MAAQ,CACN,EACE,MAAQ,aACV,CACF,EACF,GACA,MAAQ,EACN,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,kBACV,CACF,EACF,GACA,QAAU,EACR,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,GACA,8BAAgC,EAC9B,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,kBACV,CACF,EACF,EACF,EACF,GACA,UAAY,EACV,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,YAAc,EACZ,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,MACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,EACF,EACF,GACA,OAAS,EACP,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,KAAO,EACL,MAAQ,CACN,EACE,MAAQ,YACR,SAAW,CAAC,wDAAwD,EACtE,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,YACR,SAAW,CAAC,wDAAwD,EACtE,CACF,EACF,EACF,EACF,GACA,OAAS,EACP,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,WAAa,EACX,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,GACA,aAAe,EACb,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,EACF,EACF,GACA,WAAa,EACX,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,WAAa,EACX,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,MACV,CACF,EACF,GACA,YAAc,EACZ,MAAQ,CACN,EACE,MAAQ,aACV,CACF,EACF,GACA,SAAW,EACT,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,EACF,EACF,GACA,iBAAmB,EACjB,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,MAAQ,EACN,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,SAAW,EACT,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,UAAY,EACV,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,GACA,KAAO,EACL,MAAQ,CACN,EACE,MAAQ,MACV,CACF,EACF,GACA,UAAY,EACV,MAAQ,CACN,EACE,MAAQ,aACV,CACF,EACF,GACA,UAAY,EACV,MAAQ,CACN,EACE,MAAQ,aACR,eAAiB,CAAC,kDAAkD,EACtE,CACF,EACF,EACF,EACF,GACA,aAAe,EACb,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,QAAU,EACR,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,YACR,SAAW,CAAC,wDAAwD,EACtE,CACF,EACF,GACA,QAAU,EACR,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,YAAc,EACZ,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,YAAc,EACZ,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,YAAc,EACZ,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,cACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,EACF,EACF,GACA,WAAa,EACX,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,MAAQ,EACN,KAAO,GACP,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,MAAQ,EACN,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,KAAO,EACL,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,aACR,eAAiB,CACf,wDACA,4DACA,yDACA,mDACA,kDACA,sDACF,EACF,CACF,EACF,GACA,YAAc,EACZ,MAAQ,CACN,EACE,MAAQ,aACR,eAAiB,CACf,wDACA,4DACA,yDACA,mDACA,kDACA,sDACF,EACF,CACF,EACF,GACA,cAAgB,EACd,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,WAAa,EACX,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,eACV,CACF,EACF,EACF,EACF,GACA,iBAAmB,EACjB,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,mBAAqB,EACnB,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,aAAa,EACX,MAAQ,CACN,EACE,MAAQ,WACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,SACV,CACF,EACF,GACA,YAAc,EACZ,MAAQ,CACN,EACE,MAAQ,kBACV,CACF,EACF,GACA,YAAc,EACZ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,gBAAkB,EAChB,MAAQ,CACN,EACE,MAAQ,gCACV,CACF,EACF,EACF,EACF,GACA,+BAAiC,EAC/B,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,UAAY,EACV,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,GACA,WAAa,EACX,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,EACF,EACF,GACA,QAAU,EACR,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,mBAAqB,EACnB,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,OAAS,EACP,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,WACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,eACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,kBACV,CACF,EACF,EACF,EACF,GACA,cAAgB,EACd,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,aAAa,EACX,MAAQ,CACN,EACE,MAAQ,WACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,SACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,cACV,CACF,EACF,GACA,UAAY,EACV,MAAQ,CACN,EACE,MAAQ,cACV,CACF,EACF,GACA,UAAY,EACV,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,aAAe,EACb,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,cAAgB,EACd,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,WAAa,EACX,MAAQ,CACN,EACE,MAAQ,cACV,CACF,EACF,GACA,cAAgB,EACd,MAAQ,CACN,EACE,MAAQ,cACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,WAAa,EACX,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,YAAc,EACZ,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,MAAQ,EACN,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,cACV,CACF,EACF,EACF,EACF,GACA,mBAAqB,EACnB,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,MAAQ,EACN,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,aAAa,EACX,MAAQ,CACN,EACE,MAAQ,SACV,GACA,EACE,MAAQ,aACR,eAAiB,CAAC,kDAAkD,EACtE,GACA,EACE,MAAQ,OACV,GACA,EACE,MAAQ,WACV,CACF,EACF,GACA,MAAQ,EACN,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,kBACV,CACF,EACF,GACA,WAAa,EACX,MAAQ,CACN,EACE,MAAQ,aACV,CACF,EACF,EACF,EACF,GACA,cAAgB,EACd,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,MAAQ,EACN,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,YAAY,EACV,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,kBACV,GACA,EACE,MAAQ,WACV,GACA,EACE,MAAQ,QACV,GACA,EACE,MAAQ,aACR,eAAiB,CACf,0DACA,yDACA,yDACA,6DACA,iDACA,oDACA,sDACF,EACF,CACF,EACF,EACF,EACF,GACA,eAAiB,EACf,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,YAAc,EACZ,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,MACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,EACF,EACF,GACA,gBAAkB,EAChB,UAAY,EACV,IAAM,EACJ,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,WAAa,EACX,KAAO,kBACP,MAAQ,CACN,EACE,MAAQ,YACV,CACF,EACF,GACA,OAAS,EACP,MAAQ,CACN,EACE,MAAQ,UACV,CACF,EACF,GACA,YAAc,EACZ,KAAO,GACP,MAAQ,CACN,EACE,MAAQ,OACV,CACF,EACF,GACA,MAAQ,EACN,MAAQ,CACN,EACE,MAAQ,SACV,CACF,EACF,GACA,QAAU,EACR,MAAQ,CACN,EACE,MAAQ,MACV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",
  "names": ["PrefixOperatorAtom", "operator", "child", "InfixOperatorAtom", "left", "right", "ParserBuilder", "tokenType", "parselet", "precedence", "builder", "parser", "token", "input", "Parser", "tokens", "prefixParselets", "infixParselets", "expected", "_a", "prefix", "next", "nextToken", "expectedId", "expectedValue", "actual", "t", "UCUM", "LOINC", "SNOMED", "RXNORM", "CPT", "ICD10", "NDC", "HTTP_HL7_ORG", "HTTP_TERMINOLOGY_HL7_ORG", "OK_ID", "CREATED_ID", "GONE_ID", "NOT_MODIFIED_ID", "NOT_FOUND_ID", "CONFLICT_ID", "UNAUTHORIZED_ID", "FORBIDDEN_ID", "PRECONDITION_FAILED_ID", "MULTIPLE_MATCHES_ID", "TOO_MANY_REQUESTS_ID", "ACCEPTED_ID", "SERVER_TIMEOUT_ID", "allOk", "created", "notModified", "notFound", "unauthorized", "unauthorizedTokenExpired", "unauthorizedTokenAudience", "forbidden", "gone", "preconditionFailed", "multipleMatches", "tooManyRequests", "accepted", "location", "badRequest", "details", "expression", "conflict", "code", "validationError", "serverError", "err", "serverTimeout", "msg", "isOperationOutcome", "value", "isOk", "outcome", "isCreated", "isAccepted", "isNotFound", "isConflict", "isGone", "isUnauthenticated", "getStatus", "assertOk", "resource", "OperationOutcomeError", "cause", "operationOutcomeToString", "normalizeOperationOutcome", "error", "normalizeErrorString", "strs", "operationOutcomeIssueToString", "issue", "issueStr", "createOperationOutcomeIssue", "severity", "message", "path", "data", "createStructureIssue", "createConstraintIssue", "constraint", "createProcessingIssue", "normalizedTypes", "compressElement", "element", "outputPropertySchema", "inflateElement", "partial", "max", "inflateBaseSchema", "base", "output", "key", "schema", "property", "base_schema_default", "parseStructureDefinition", "sd", "StructureDefinitionParser", "DATA_TYPES", "PROFILE_SCHEMAS_BY_URL", "PROFILE_DATA_TYPES", "TYPE_SPECIAL_CASES", "getDataTypesMap", "profileUrl", "dataTypes", "indexStructureDefinitionBundle", "bundle", "sds", "e", "loadDataType", "specialCase", "typeName", "inner", "getAllDataTypes", "isDataTypeLoaded", "type", "tryGetDataType", "profileType", "getDataType", "isResourceType", "resourceType", "typeSchema", "isResourceTypeSchema", "isProfileLoaded", "tryGetProfile", "getDescription", "_c", "elementPath", "field", "parentContext", "pathsCompatible", "getElementDefinitionTypeName", "hasDefaultExtensionSlice", "d", "contentRefPath", "ref", "current", "ed", "getExtension", "parseCardinality", "baseMax", "typedElementDef", "c", "firstValue", "getTypedPropertyValue", "subsetResource", "properties", "extraProperties", "choiceTypeField", "capitalize", "mandatorySubsetProperties", "subsetTag", "trimPrefix", "str", "parent", "obj", "isEmpty", "discriminators", "result", "isSchema", "isAsync", "visitor", "crawlResource", "initialPath", "options", "crawlTypedValueAsync", "toTypedValue", "crawlTypedValue", "crawlResourceAsync", "typedValue", "Crawler", "AsyncCrawler", "root", "objIsResource", "isResource", "propertyValues", "getNestedProperty", "propertyValue", "arrayify", "isPrimitiveType", "propertyGetter", "getTypedPropertyValueWithPath", "firstProp", "nestedProps", "prop", "parentPath", "withPath", "tv", "parentPrefix", "v", "idx", "fhirTypeToJsType", "validationRegexes", "skippedConstraintKeys", "validateResource", "ResourceValidator", "validateTypedValue", "checkObjectForNull", "issues", "foundError", "_path", "_parent", "values", "matchesSpecifiedValue", "sliceCounts", "s", "sliceName", "checkSliceElement", "slices", "counts", "slice", "sliceCardinality", "object", "choiceOfTypeElements", "choiceOfTypeElementName", "isChoiceOfType", "relatedElementName", "requiredRelatedElementName", "constraints", "reference", "isReference", "referenceResourceType", "targetProfiles", "hl7BaseUrl", "hl7AllResourcesUrl", "hl7ResourceTypeUrl", "medplumBaseUrl", "medplumResourceTypeUrl", "targetProfile", "variables", "evalValues", "evalFhirPathTyped", "primitiveValue", "extensionElement", "unpackPrimitiveElement", "expectedType", "regex", "n", "isIntegerType", "PropertyType", "propertyType", "propertyDefinitions", "parts", "testProperty", "part", "elementName", "propertyPath", "partnerKey", "i", "typeAndValue", "deepIncludes", "deepEquals", "matchDiscriminant", "discriminator", "elements", "sliceElement", "sliceType", "slicingRules", "primitiveKeys", "extensionEntries", "k", "_", "booleanToTypedValue", "isQuantity", "isCodeableConcept", "isCoding", "toJsBoolean", "singleton", "collection", "elementDefinition", "getElementDefinition", "getTypedPropertyValueWithSchema", "getTypedPropertyValueWithoutSchema", "types", "resultValue", "resultType", "primitiveExtension", "lastPathSegmentIndex", "lastPathSegment", "candidatePath", "assignPrimitiveExtension", "toTypedValueWithType", "trimmedPath", "propertyName", "removeDuplicates", "arr", "found", "j", "fhirPathEquals", "fhirPathNot", "fhirPathArrayEquals", "x", "y", "val", "index", "fhirPathArrayNotEquals", "xValue", "yValue", "isQuantityEquivalent", "fhirPathArrayEquivalent", "fhirPathEquivalentCompare", "fhirPathEquivalent", "xType", "xValueRaw", "yType", "yValueRaw", "fhirPathIs", "desiredType", "isDateString", "isDateTimeString", "isPeriod", "toPeriod", "dateStringToInstantString", "fill", "object1", "object2", "keys1", "keys2", "val1", "val2", "isObject", "target", "safeAssign", "source", "createReference", "getReferenceString", "display", "getDisplayString", "resolveId", "parseReference", "id", "isProfileResource", "profileName", "getProfileResourceDisplayString", "deviceName", "getDeviceDisplayString", "formatCodeableConcept", "isTextObject", "names", "formatHumanName", "device", "getImageSrc", "photo", "p", "url", "getPhotoImageSrc", "getDateProperty", "date", "calculateAge", "birthDateStr", "endDateStr", "startDate", "endDate", "startYear", "startMonth", "startDay", "endYear", "endMonth", "endDay", "years", "months", "days", "calculateAgeString", "getQuestionnaireAnswers", "response", "buildQuestionnaireAnswerItems", "items", "item", "getAllQuestionnaireAnswers", "buildAllQuestionnaireAnswerItems", "getIdentifier", "system", "identifiers", "array", "identifier", "setIdentifier", "getExtensionValue", "urls", "extension", "curr", "stringify", "pretty", "stringifyReplacer", "isArrayKey", "isPopulated", "arg", "deepEqualsArray", "deepEqualsObject", "array1", "array2", "keySet", "pattern", "deepIncludesArray", "deepIncludesObject", "patternVal", "valueVal", "patternKey", "deepClone", "isUUID", "isStringArray", "isString", "byteToHex", "arrayBufferToHex", "arrayBuffer", "buffer", "normalizeArrayBufferView", "bytes", "arrayBufferToBase64", "typedArrayOrBuffer", "word", "isLowerCase", "isComplexTypeCode", "getPathDifference", "parentPathPrefix", "getCodeBySystem", "concept", "coding", "setCodeBySystem", "findObservationInterval", "definition", "patient", "category", "interval", "observationIntervalMatchesPatient", "observationIntervalMatchesValue", "findObservationReferenceRange", "observationIntervalMatchesGender", "observationIntervalMatchesAge", "matchesRange", "precision", "range", "preciseGreaterThanOrEquals", "preciseLessThanOrEquals", "preciseRound", "a", "preciseEquals", "b", "toPreciseInteger", "preciseLessThan", "preciseGreaterThan", "findResourceByCode", "resources", "r", "singularize", "sleep", "ms", "resolve", "splitN", "delim", "delimIndex", "lazy", "fn", "executed", "append", "sortStringArray", "ensureTrailingSlash", "ensureNoLeadingSlash", "concatUrls", "baseUrl", "getWebSocketUrl", "getQueryString", "query", "entry", "VALID_HOSTNAME_REGEX", "isValidHostname", "addProfileToResource", "mapByIdentifier", "resourceBundle", "identifierSystem", "removeProfileFromResource", "flatMapFilter", "formatAddress", "address", "cityStateZip", "name", "textStr", "ensureString", "formatGivenName", "formatFamilyName", "isValidDate", "formatDate", "locales", "formatTime", "time", "formatDateTime", "dateTime", "formatPeriod", "period", "unitAdverbForm", "singularUnits", "pluralUnits", "formatTiming", "timing", "formatTimingRepeat", "repeat", "frequency", "periodUnit", "formatRange", "exclusive", "low", "high", "preciseDecrement", "formatQuantity", "preciseIncrement", "quantity", "formatMoney", "money", "codeableConcept", "formatCoding", "includeCode", "formatObservationValue", "obs", "valueString", "indexSearchParameterBundle", "indexSearchParameter", "indexDefaultSearchParameters", "getOrInitTypeSchema", "globalSchema", "searchParam", "buildTypeName", "components", "getResourceTypes", "getSearchParameters", "getSearchParameter", "getPathDisplayName", "getPropertyDisplayName", "words", "capitalizeDisplayWord", "capitalizedWords", "upper", "getElementDefinitionFromElements", "simpleMatch", "stringifyTypedValue", "stringifyCoding", "parseDateString", "stub", "functions", "_context", "context", "criteria", "other", "otherArray", "getRootInput", "num", "numValue", "_input", "_other", "criterion", "trueResult", "otherwiseResult", "evalResult", "validateInput", "lowerStr", "match", "substringAtom", "applyStringFunc", "substring", "startAtom", "lengthAtom", "start", "length", "startIndex", "endIndex", "prefixAtom", "suffixAtom", "suffix", "patternAtom", "substitionAtom", "substition", "regexAtom", "separatorAtom", "separator", "applyMathFunc", "baseAtom", "expAtom", "_nameAtom", "endAtom", "unitsAtom", "unit", "age", "typeAtom", "SymbolAtom", "DotAtom", "refStr", "systemAtom", "expectedResourceType", "urlAtom", "func", "argsAtoms", "atom", "numberInput", "returnValue", "count", "last", "FhirPathAtom", "original", "LiteralAtom", "variableValue", "EmptySetAtom", "UnaryOperatorAtom", "impl", "AsAtom", "BooleanInfixOperatorAtom", "ArithemticOperatorAtom", "leftEvalResult", "rightEvalResult", "leftValue", "rightValue", "leftNumber", "rightNumber", "ConcatAtom", "ContainsAtom", "InAtom", "UnionAtom", "leftResult", "rightResult", "EqualsAtom", "NotEqualsAtom", "EquivalentAtom", "NotEquivalentAtom", "IsAtom", "AndAtom", "OrAtom", "XorAtom", "ImpliesAtom", "FunctionAtom", "args", "IndexerAtom", "expr", "STANDARD_UNITS", "Tokenizer", "keywords", "operators", "endChar", "foundTime", "foundTimeZone", "isUnitToken", "twoCharOp", "condition", "mark", "FHIRPATH_KEYWORDS", "FHIRPATH_OPERATORS", "tokenize", "OperatorPrecedence", "PARENTHESES_PARSELET", "INDEXER_PARSELET", "FUNCTION_CALL_PARSELET", "parseQuantity", "initFhirPathParserBuilder", "fhirPathParserBuilder", "parseFhirPath", "evalFhirPath", "el", "SearchParameterType", "getSearchParameterDetails", "buildSearchParameterDetails", "setSearchParameterDetails", "columnName", "convertCodeToColumnName", "expressions", "getExpressionsForResourceType", "atomArray", "flattenAtom", "flattenedExpression", "crawlSearchParameterDetails", "getSearchParameterType", "atoms", "baseType", "currAtom", "handleFunctionAtom", "hasArrayIndex", "nextIndex", "elementDefinitionType", "isBackboneElement", "functionAtom", "propertyTypes", "fhirPathExpression", "buildExpressionsForResourceType", "getExpressionForResourceType", "DEFAULT_SEARCH_COUNT", "DEFAULT_MAX_SEARCH_COUNT", "Operator", "MODIFIER_OPERATORS", "PREFIX_OPERATORS", "parseSearchRequest", "pathname", "searchParams", "search", "queryArray", "parseSearchImpl", "parseSearchUrl", "parseSearchDefinition", "parseCriteriaAsSearchRequest", "searchRequest", "parseKeyValue", "modifier", "colonIndex", "parseSortRule", "parseIncludeTarget", "param", "parseParameter", "parseUnknownParameter", "descending", "searchValue", "parsePrefix", "isValidSearchValue", "parseModifier", "prefixOperator", "subexpressionPattern", "parseXFhirQuery", "replacement", "formatSearchQuery", "params", "filter", "formatFilter", "formatSortRules", "formatIncludeTarget", "sortRules", "sr", "kind", "splitSearchOnComma", "escaped", "matchesSearchRequest", "matchesSearchFilter", "matchesMissingOrPresent", "matchesReferenceFilter", "matchesStringFilter", "matchesTokenFilter", "matchesDateFilter", "exists", "negated", "isNegated", "references", "filterValue", "matchesBooleanFilter", "asToken", "searchParamElementType", "resourceValues", "filterValues", "resourceValue", "matchesTokenIdentifierValue", "matchesTokenCodeableConceptValue", "matchesStringValue", "_operator", "_b", "matchesDateValue", "universalAccessPolicy", "protectedResourceTypes", "projectAdminResourceTypes", "AccessPolicyInteraction", "resourceReadInteractions", "canReadResourceType", "accessPolicy", "resourcePolicy", "matchesAccessPolicyResourceType", "canWriteResourceType", "canWriteResource", "matchesAccessPolicy", "readonlyMode", "matchesAccessPolicyResourcePolicy", "satisfiedAccessPolicy", "interaction", "accessPolicyResourceType", "decodeBase64", "binaryString", "encodeBase64", "utf8Bytes", "getRandomString", "randomItems", "encryptSHA256", "generateId", "convertToTransactionBundle", "idToUuid", "jsonString", "referenceReplacer", "reorderBundle", "adjacencyList", "buildAdjacencyList", "sortedFullUrls", "cycles", "topologicalSortWithCycles", "entryMap", "reorderedEntries", "fullUrl", "cycle", "originalEntry", "putEntry", "graph", "sorted", "state", "vertex", "visit", "cycleStartIndex", "hasCycle", "neighbor", "findReferences", "callback", "convertContainedResourcesToBundle", "simpleBundle", "contained", "LRUCache", "ContentType", "EventTarget", "event", "listener", "TypedEventTarget", "handler", "FHIRCAST_EVENT_NAMES", "FHIRCAST_RESOURCE_TYPES", "FHIRCAST_EVENT_VERSION_REQUIRED", "isContextVersionRequired", "assertContextVersionOptional", "FHIRCAST_EVENT_RESOURCES", "isFhircastResourceType", "isCompletedSubscriptionRequest", "subscriptionRequest", "serializeFhircastSubscriptionRequest", "validateFhircastSubscriptionRequest", "channelType", "mode", "topic", "events", "formattedSubRequest", "validateSingleResourceContext", "keySchema", "validateFhircastContext", "keysSeen", "validateFhircastContexts", "contexts", "eventSchema", "createFhircastMessagePayload", "versionId", "normalizedContexts", "FhircastConnection", "subRequest", "websocket", "fhircastMessage", "decodePayload", "payload", "cleanedPayload", "decodedPayload", "uriEncodedPayload", "acc", "char", "uriEncodedChar", "jsonPayload", "isJwt", "parseJWTPayload", "_header", "_signature", "isMedplumAccessToken", "accessToken", "tryGetJwtExpiration", "exp", "MedplumKeyValueClient", "medplum", "ReadablePromise", "requestPromise", "res", "onfulfilled", "onrejected", "onfinally", "ClientStorage", "storage", "MemoryStorage", "MockAsyncClientStorage", "Events", "eventsInitialized", "lazyInitEvents", "reason", "assert", "cloneEvent", "DEFAULT", "didWarnAboutMissingWebSocket", "ReconnectingWebSocket", "_ReconnectingWebSocket", "protocols", "minUptime", "maxEnqueuedMessages", "reconnectionDelayGrowFactor", "minReconnectionDelay", "maxReconnectionDelay", "delay", "maxRetries", "connectionTimeout", "WS", "DEFAULT_PING_INTERVAL_MS", "SubscriptionEmitter", "CriteriaEntry", "subscriptionProps", "SubscriptionManager", "wsUrl", "MedplumClient", "ws", "parsedData", "status", "subscriptionId", "connectEvent", "criteriaEntry", "errorEvent", "emitter", "closeEvent", "openEvent", "nextProfile", "disconnectEvent", "parameter", "entries", "emitters", "mapEntry", "otherEntry", "otherProps", "newCriteriaEntry", "resourceMatchesSubscriptionCriteria", "subscription", "getPreviousResource", "logger", "matchesChannelType", "subscriptionCriteria", "isFhirCriteriaMet", "supportedInteractionExtension", "currentResource", "previous", "evalInput", "MEDPLUM_VERSION", "MEDPLUM_CLI_CLIENT_ID", "DEFAULT_ACCEPT", "DEFAULT_BASE_URL", "DEFAULT_RESOURCE_CACHE_SIZE", "DEFAULT_BROWSER_CACHE_TIME", "DEFAULT_NODE_CACHE_TIME", "DEFAULT_REFRESH_GRACE_PERIOD", "BINARY_URL_PREFIX", "OAuthGrantType", "OAuthTokenType", "OAuthTokenAuthMethod", "OAuthClientAssertionType", "getDefaultFetch", "activeLogin", "cached", "promise", "reject", "readablePromise", "body", "contentType", "operations", "newUserRequest", "codeChallengeMethod", "codeChallenge", "newProjectRequest", "newPatientRequest", "loginRequest", "loginParams", "authorizeUrl", "clientId", "redirectUri", "baseLogin", "pkceEnabled", "formBody", "cacheKey", "bundleToResourceArray", "nextLink", "link", "refString", "searchParameter", "sdBundle", "vid", "arg1", "arg2", "arg3", "arg4", "arg5", "createBinaryOptions", "normalizeCreateBinaryOptions", "requestOptions", "binary", "filename", "securityContext", "onProgress", "xhr", "handleSignalAbort", "sendResult", "headers", "createPdfOptions", "normalizeCreatePdfOptions", "docDefinition", "tableLayouts", "fonts", "rest", "blob", "text", "profile", "encounter", "subject", "idOrIdentifier", "email", "operationName", "graphName", "agent", "destination", "waitForResponse", "login", "refreshToken", "newLogin", "logins", "profileChanged", "urlString", "createMediaOptions", "additionalFields", "media", "content", "contents", "exportLevel", "resourceTypes", "since", "fhirPath", "method", "isJson", "contentLocation", "tryGetContentLocation", "statusUrl", "retryDelay", "attemptNum", "statusOptions", "batch", "responseEntry", "ifNoneExist", "pkceState", "codeVerifier", "arrayHash", "getWindowOrigin", "gracePeriod", "clientSecret", "assertion", "scope", "jwt", "endpoint", "projectId", "tokenPayload", "oldState", "newState", "isCreateBinaryOptions", "isCreatePdfOptions", "ExternalSecretSystems", "buildElementsContext", "debugMode", "accessPolicyResource", "mergedElements", "mergeElementsForContext", "keyPrefix", "removeHiddenFields", "markReadonlyFields", "elementsByPath", "getExtendedProps", "memoizedExtendedProps", "hidden", "matchesKeyPrefixes", "usedNewElements", "prefixes", "keyParts", "isSliceDefinitionWithTypes", "isDiscriminatorComponentMatch", "nestedProp", "getValueSliceName", "SchemaCrawler", "rootContext", "allowedElements", "elementKey", "slicing", "visitorSlicing", "elementTree", "createElementTree", "node", "nodePath", "slicesToVisit", "sliceSchema", "elementsContext", "sliceElements", "rootNodes", "isChildKey", "parentKey", "childKey", "addNode", "currentNode", "newNode", "elementEntries", "added", "rootNode", "SLICE_NAME_KEY", "applyDefaultValuesToResource", "DefaultValueVisitor", "applyDefaultValuesToElement", "existingValue", "applyFixedOrPatternValue", "keyDifference", "applyDefaultValuesToElementWithVisitor", "inputValue", "splitOnceRight", "setValueAtKey", "modifiedContainer", "getValueAtKey", "getDefaultValuesForNewSliceEntry", "rootValue", "parentValues", "elementValues", "parentValue", "parentArray", "applyMinimums", "elementValue", "sliceValues", "matchingItems", "arrayItem", "emptySliceValue", "sliceValuesContext", "sliceValueArray", "sliceValue", "resolvedKey", "answer", "keyPart", "lastItem", "iv", "outputValue", "lastArray", "applyPattern", "resultObj", "beginning", "conceptMapTranslate", "map", "sourceCodes", "constructSourceSet", "matches", "translateCodes", "g", "indexCodes", "groups", "codes", "group", "mappings", "m", "handleUnmappedCodes", "MAPPING_LANGUAGE_OPERATORS", "CONCEPT_MAP_EQUIVALENCE", "StructureMapParser", "parameters", "rules", "sources", "_i", "whereFhirPath", "checkFhirPath", "targets", "transformAtom", "atomToParameter", "conceptMap", "uri", "sourcePrefix", "sourceSystem", "sourceCode", "equivalence", "targetPrefix", "targetSystem", "targetCode", "literalToParameter", "literalAtom", "parseMappingLanguage", "TransformMapCollection", "structureMapTransform", "structureMap", "transformMaps", "evalStructureMap", "ctx", "evalImports", "registerGlobals", "evalGroup", "getTransformMaps", "importedMaps", "importedMap", "setVariable", "sourceDefinitions", "targetDefinitions", "inputDefinition", "outputs", "inputIndex", "sourceDefinition", "targetDefinition", "newContext", "rule", "evalRule", "evalRuleSourceAt", "sourceValue", "evalSource", "evalRuleAfterSources", "tryEvalShorthandRule", "evalTarget", "childRule", "dependent", "evalDependent", "getVariable", "tryFindTypesGroup", "targetContext", "originalValue", "isArray", "isArrayProperty", "targetValue", "setTargetValue", "currentContext", "sourceContext", "sourceElement", "evalCondition", "evalListMode", "evalAppend", "evalCast", "evalCc", "evalCopy", "evalCreate", "evalEvaluate", "evalTranslate", "evalTruncate", "elementTypes", "tryGetPropertySchema", "elementType", "unarrayify", "resolveParameter", "buildFhirPathVariables", "mapUri", "targetLength", "dependentGroup", "variable", "paramValue", "FhirFilterComparison", "FhirFilterNegation", "FhirFilterConnective", "keyword", "operatorMap", "getOperator", "FilterParameterParser", "parseFilterParameter", "Hl7Context", "segmentSeparator", "fieldSeparator", "componentSeparator", "repetitionSeparator", "escapeCharacter", "subcomponentSeparator", "Hl7Message", "_Hl7Message", "segments", "now", "msh", "sendingApp", "sendingFacility", "receivingApp", "receivingFacility", "controlId", "Hl7Segment", "formatHl7DateTime", "messageType", "triggerEvent", "messageStructure", "line", "_Hl7Segment", "fields", "f", "Hl7Field", "fieldIndex", "component", "subcomponent", "repetition", "_Hl7Field", "parseHl7DateTime", "hl7DateTime", "year", "parseIntOrDefault", "month", "day", "hour", "minute", "second", "millisecond", "tzOffset", "parseTimeZoneOffset", "defaultValue", "defaultOffset", "offsetStr", "plusIndex", "minusIndex", "sign", "isoDate", "milliseconds", "LogLevel", "Logger", "_Logger", "write", "metadata", "level", "override", "config", "mergedConfig", "parseLogLevel", "validateResourceType", "checkForNull", "checkArrayForNull", "streamToBuffer", "stream", "chunks", "chunk", "evalSqlOnFhir", "view", "processResource", "typedConstant", "typedResource", "where", "whereResult", "process", "foci", "col", "sel", "rows", "urows", "u", "cartesianProduct", "temp", "cartesianProductHelper", "aArray", "bArray", "combinePartialRows", "GITHUB_RELEASES_URL", "releaseManifests", "clearReleaseCache", "assertReleaseManifest", "candidate", "manifest", "assets", "asset", "fetchVersionManifest", "version", "versionTag", "isValidMedplumSemver", "checkIfValidMedplumVersion", "fetchLatestVersionString", "latest"]
}
